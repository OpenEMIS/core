<?php
/*
@OPENEMIS LICENSE LAST UPDATED ON 2013-05-14

OpenEMIS
Open Education Management Information System

Copyright Â© 2013 UNECSO.  This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by the Free Software Foundation
, either version 3 of the License, or any later version.  This program is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.See the GNU General Public License for more details. You should
have received a copy of the GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.  For more information please wire to contact@openemis.org.
*/

require_once ("SdmxWriter.php");
use Monolog\Logger;
use Monolog\Formatter\LineFormatter;
use Monolog\Handler\StreamHandler;

class Sdmx {

    const STATUS_PENDING = 1;                       #
    const STATUS_PROCESSING = 2;                    #
    const STATUS_COMPLETED = 3;                     #
    const STATUS_ABORT = 4;                         #

//    public $uses = array('BatchProcess');           # Attach CakePHP Models.

    private $datasource = null;                     # Attach other datasource to the class.
    private $dataCount = 0;                         # Number of data points.
    private $queryLimit = 50;                       # Number of result return per query requested.
    private $path = '';                             # Path to store generated SDMX data.
    private $logPath = '';                          # Path to store SDMX logs.
    private $filename = '';                         # Filename of generated SDMX data.
    private $logFilename = '';                      # Filename of SDMX logs.
    private $timeFormat = 'Y-m-d H:i:s';            # Time format.
    private $customLog = null;                      # Attach custom Log Object (monolog).
    private $sdmxObject;                            # Attach SDMXWriter Object.
    private $maxNumSeries = 5000;                    # Max Number of Series allow to be generated by the user.
    private $logType = array(                       # Log Type.
        LOG_ALERT => "Alert",
        LOG_CRIT => "critical",
        LOG_ERR => "Error",
        LOG_WARNING => "Warning",
        LOG_NOTICE => "Notice",
        LOG_INFO => "Info",
        LOG_DEBUG => "Debug",
    );

    public function __construct($model){
        App::uses('ConnectionManager', 'Model');
//        App::uses('SdmxWrite', 'Lib/SdmxWriter');

        $this->{$model->name} = $model;

        $this->path = WWW_ROOT.'sdmx'.DS;
        $this->logPath = WWW_ROOT.'logs'.DS.'sdmx'.DS;
        $this->filename = 'openemis_sdmx_'.date('Ymd_His', time()).'.xml';
        $this->logFilename = 'sdmx_'.date('Ymd_His', time()).'.log';
        $this->customLog = $this->init_monolog();

        try{

            $this->customLog->addInfo("Connecting to datasource...");
            $this->output_logging("Connecting to datasource...");
            $this->datasource['default'] = ConnectionManager::getDataSource('default');
            $this->datasource['di6'] = ConnectionManager::getDataSource('di6');
            $this->customLog->addInfo("Connecting to datasource Successful");
            $this->output_logging("Connecting to datasource Successful...");
//            var_dump($this->datasource);
        }catch (PDOException $e){
            $this->output_logging(date($this->timeFormat, time()).' Error: '. $e->getMessage());
            $this->customLog->addError($e->getMessage());
        }
    }

    public function create($indicatorId, $areaIds, $timePeriods){
        $log = &$this->customLog;
//        die('end'.PHP_EOL);

//        @list($processId, $indicatorId, $areaIds, $timePeriods) = $this->args;

        if(!is_null($indicatorId) AND !is_null($areaIds) AND !is_null($timePeriods)) {

            try{

                $indicator = $this->getIndicator($indicatorId);
//                var_dump($indicator);
//                var_dump($this->series_count($indicatorId,$areaIds,$timePeriods));
                if(!is_null($indicator) and $this->series_count($indicatorId,$areaIds,$timePeriods)> 0 AND $this->series_count($indicatorId,$areaIds,$timePeriods)< $this->maxNumSeries){

//                    $processId = $this->args[0];
//                        if(!$this->update_process_status($processId, self::STATUS_PROCESSING)) throw new Exception("Process id {$processId} do not exist.");

                        $this->make_directory($this->logPath);      # make log directory if it does not exist.

                        CakeLog::config('sdmx', array(
                            'engine' => 'FileLog',
    //                    'types' => array('info', 'error', 'warning'),
    //                    'path' => $this->logPath,
    //                    'file' => $this->logFilename
                        ));

                        $madeDir = $this->make_directory();     # make if sdmx directory if it does not exist.

                        $this->output_logging('Start SDMX convertion process');
                        $log->addInfo('Start SDMX convertion process');

                        if($madeDir) {
                            $this->output_logging("Create folder for sdmx files @ {$this->path}");
                            $log->addInfo("- Create folder for sdmx files @ {$this->path}");
                        }

                        $this->sdmxObject = new SdmxWriter($this->path.$this->filename);
                        $this->sdmxObject->createHeader();
                        $this->sdmxObject->startDataSet();
                        $log->addInfo("Creating SDMX file.");

                        # Foreach series generate observations
                        $this->process_series($indicator['Indicator_Nid'], $indicator['Indicator_Name'], $areaIds, $timePeriods);

    //                    $this->process_series($indicator[0]['Indicator_Nid'], $indicator[0]['Indicator_Name']);

    //                    $this->sdmxObject->assemble();

                        $log->addInfo("Closing SDMX file.");

                        $this->output_logging('End SDMX convertion process');
                        $log->addInfo('End SDMX convertion process');
    //                $this->BatchProcess->completed($processId, $this->logPath.$this->logFilename);

                    $this->sdmxObject->output();
//                    $this->sdmxObject->assemble();
//                    $this->update_process_status($processId, self::STATUS_COMPLETED);
                }elseif(!is_null($indicator) and $this->series_count($indicatorId,$areaIds,$timePeriods) == 0){
                    $this->output_logging('Empty results.');
                }elseif(is_null($indicator)){
                    $this->output_logging('Indicator does not exist.');
                }else{
                    $this->output_logging('Results too large.');
                }
            }catch (Exception $e){
                $this->output_logging(date($this->timeFormat, time()).' Error: '. $e->getMessage());
                $log->addError($e->getMessage());
//                $this->update_process_status($processId, self::STATUS_ABORT);
            }



        }else{
            $this->output_logging('Please provide the process ID');
            $log->addError('Please provide the process ID');
        }

    }

    public function getIndicatorList(){
        $log = &$this->customLog;
        $data = array();
        $sql = <<<EOD
        SELECT
            DISTINCT(`ut_indicator_en`.`Indicator_Nid`),
            `ut_indicator_en`.`Indicator_Name`
        FROM `ut_data`
        INNER JOIN `ut_indicator_en` ON `ut_indicator_en`.`Indicator_Nid` = `ut_data`.`Indicator_NId`;
EOD;
//        var_dump($sql);
        $resultSet = $this->datasource['di6']->fetchAll($sql);
        if(sizeof($resultSet) > 0){
            foreach($resultSet as $element){
                $data[] = $this->format_array($element);
            }
        }else{
            $data = null;
        }

        return $data;

    }

    public function getAreaList($indicatorId){

        $log = &$this->customLog;
        $data = array();
        $sql = <<<EOD
        SELECT
            DISTINCT(`ut_area_en`.`Area_NId`),
            `ut_area_en`.`Area_Name`,
	        `ut_area_level_en`.`Area_Level_Name`
        FROM `ut_data`
        INNER JOIN `ut_area_en` ON `ut_area_en`.`Area_NId` = `ut_data`.`Area_NId`
        INNER JOIN `ut_area_level_en` ON `ut_area_level_en`.`Area_Level` = `ut_area_en`.`Area_Level`
        WHERE `ut_data`.`Indicator_Nid` = $indicatorId
        ORDER BY `ut_area_en`.`Area_Name` ASC;
EOD;
//        var_dump($sql);
        $resultSet = $this->datasource['di6']->fetchAll($sql);
        if(sizeof($resultSet) > 0){
            foreach($resultSet as $element){
                $tmpRow = $this->format_array($element);
                $key = $tmpRow['Area_Level_Name'];
                unset($tmpRow['Area_Level_Name']);
                $data[$key][] = $tmpRow;
            }
        }else{
            $data = null;
        }
//        pr($data);

        return $data;

    }

    public function getTimePeriod($indicatorId, $areaIds=array()){

        $log = &$this->customLog;
        $data = array();
        $sql = <<<EOD
        SELECT
            DISTINCT(`ut_timeperiod`.`TimePeriod_NId`),
            `ut_timeperiod`.`TimePeriod`
        FROM `ut_data`
        INNER JOIN `ut_timeperiod` ON `ut_timeperiod`.`TimePeriod_NId` = `ut_data`.`TimePeriod_NId`
        WHERE `ut_data`.`Indicator_Nid` = $indicatorId
        ORDER BY `ut_timeperiod`.`TimePeriod` ASC;
EOD;
//        var_dump($sql);
        $resultSet = $this->datasource['di6']->fetchAll($sql);
        if(sizeof($resultSet) > 0){
            foreach($resultSet as $element){
                $data[] = $this->format_array($element);
            }
        }else{
            $data = null;
        }

        return $data;

    }

    private function getIndicator($indicatorId){
        $log = &$this->customLog;
        $data = array();
        $sql = <<<EOD
        SELECT
            `ut_indicator_en`.`Indicator_Nid`,
            `ut_indicator_en`.`Indicator_Name`
        FROM `ut_indicator_en`
        {{ where }}
        LIMIT 1;
EOD;
        $sql = str_ireplace("{{ where }}", "WHERE `ut_indicator_en`.`Indicator_NId` = {$indicatorId}", $sql);
//        var_dump($sql);
        $resultSet = $this->datasource['di6']->fetchAll($sql);
        if(sizeof($resultSet) > 0){
            foreach($resultSet as $element){
                $data = $this->format_array($element);
            }
        }else{
            $data = null;
        }

        return $data;

    }

    /**
     * Process Series
     */
    private function process_series($indicatorId, $indicatorName, $areaId, $timePeriodId){
        $series_count = $this->series_count($indicatorId, $areaId, $timePeriodId);
        $seriesCounter = ceil($series_count / $this->queryLimit);
        $log = &$this->customLog;

        //echo $series_count.PHP_EOL;
        //echo $seriesCounter.PHP_EOL;

        $indicatorIdLog = 0;
        $seriesCreationCounter = 0;
        for($i = 0; $i <= $seriesCounter; $i++){

            $sql = <<<EOD
    SELECT
      `ut_indicator_en`.`Indicator_Name`,
      `ut_data`.`Indicator_Nid`,
      `ut_subgroup_vals_en`.`Subgroup_Val`,
      `ut_data`.`Subgroup_Val_Nid`,
      `ut_area_en`.`Area_Name`,
      `ut_data`.`Area_Nid`,
      `ut_data`.`Unit_Nid`,
      `ut_unit_en`.`Unit_Name`,
      (
        SELECT
	        GROUP_CONCAT(`ut_subgroup_type_en`.`Subgroup_Type_Name` SEPARATOR ',')
        FROM `ut_subgroup_vals_subgroup`
        JOIN `ut_subgroup_en` ON `ut_subgroup_en`.`Subgroup_NId` = `ut_subgroup_vals_subgroup`.`Subgroup_NId`
        JOIN `ut_subgroup_type_en` ON `ut_subgroup_type_en`.`Subgroup_Type_NId` = `ut_subgroup_en`.`Subgroup_Type`
        WHERE `ut_subgroup_vals_subgroup`.`Subgroup_Val_NId` = `ut_data`.`Subgroup_Val_Nid`
      ) as `Subgroup_Types`
    FROM `ut_data`
    LEFT JOIN `ut_indicator_en` ON `ut_indicator_en`.`Indicator_NId` = `ut_data`.`Indicator_NId`
    LEFT JOIN `ut_area_en` ON `ut_area_en`.`Area_NId` = `ut_data`.`Area_NId`
    LEFT JOIN `ut_unit_en` ON `ut_unit_en`.`Unit_NId` = `ut_data`.`Unit_NId`
    LEFT JOIN `ut_subgroup_vals_en` ON `ut_subgroup_vals_en`.`Subgroup_Val_NId` = `ut_data`.`Subgroup_Val_NId`
    WHERE `ut_data`.`Indicator_NId` = {{ Indicator_Nid }}
        AND `ut_data`.`Area_Nid` IN ({{ Area_Nid }})
        AND `ut_data`.`Timeperiod_Nid` IN ( {{ Timeperiod_Nid }} )
    GROUP BY
        `ut_data`.`Indicator_Nid`,
        `ut_data`.`Subgroup_Val_Nid`,
        `ut_data`.`Area_Nid` -- ,
        -- `ut_data`.`Unit_Nid`
    {{ LIMIT }};
EOD;
            $sql = str_ireplace('{{ indicator_nid }}', $indicatorId , $sql);
            $sql = str_ireplace('{{ Area_Nid }}', $areaId , $sql);
            $sql = str_ireplace('{{ Timeperiod_Nid }}', $timePeriodId , $sql);
//            $sql = str_ireplace('{{ limit }}', "LIMIT 1", $sql);
            $sql = str_ireplace('{{ limit }}', "LIMIT ".($i*$this->queryLimit).", {$this->queryLimit}", $sql);
//             $this->out($sql);
            foreach($this->datasource['di6']->fetchAll($sql) as $element){
                $data = $this->format_array($element);
//                 var_dump($data);
                $this->getSubgroupType($data['Subgroup_Val_Nid']);

//                print ++$seriesCreationCounter. ": ";
                $others = $this->mapSubgroupTypeToVal($data['Subgroup_Types'], $data['Subgroup_Val']);
                $this->sdmxObject->startSeries($indicatorName, $data['Unit_Name'], $data['Area_Name'], 'OpenEMIS', $others);
                $this->process_observation($indicatorId, $data['Subgroup_Val_Nid'], $data['Area_Nid'], $data['Unit_Nid'], $timePeriodId);
                $this->sdmxObject->endSeries();
//                var_dump($series);
//                $this->sdmxObject->appendToDataSet($series);

                if($indicatorIdLog != intval($data['Indicator_Nid'])){
                    $log->addInfo("Processing Indicator: {$data['Indicator_Name']}");
                    $indicatorIdLog = $data['Indicator_Nid'];
                }

                $log->addInfo("Processing  {$indicatorName}, {$data['Subgroup_Val']}, ${data['Area_Name']}, {$data['Unit_Name']}");
//                $this->process_observation($data['Indicator_Nid'], $data['Subgroup_Val_Nid'], $data['Area_Nid'], $data['Unit_Nid']);

//                $this->write_to_file($this->close_series_tag());   // Create closing series devinfo SDMX tag
            }

        }
    }

    /**
     * Process Observation
     * @param  int $indicator_id    [description]
     * @param  int $subgroup_val_id [description]
     * @param  int $area_id         [description]
     * @param  int $unit_id         [description]
     * @return string
     */
    private function process_observation($indicator_id, $subgroup_val_id, $area_id, $unit_id, $timePeriodId) {

        if(empty($indicator_id) || empty($subgroup_val_id) || empty($area_id) || empty($unit_id) || empty($timePeriodId)) return '';

        $log = &$this->customLog;

        $sql = <<<EOD
-- Get observation data
SELECT
  SUM(`ut_data`.`Data_Value`) AS `Data_Value`,
  `ut_data`.`Data_Denominator`,
  `ut_timeperiod`.`timeperiod`,
  `ut_footnote_en`.`FootNote`,
  'OpenEMIS' AS `source`
FROM `ut_data`
LEFT JOIN `ut_timeperiod` ON `ut_timeperiod`.`TimePeriod_NId` = `ut_data`.`TimePeriod_NId`
LEFT JOIN `ut_footnote_en` ON `ut_footnote_en`.`FootNote_NId` = `ut_data`.`FootNote_NId`
WHERE
  `ut_data`.`Indicator_NId` = $indicator_id AND
  `ut_data`.`Subgroup_Val_Nid` = $subgroup_val_id AND
  `ut_data`.`Area_Nid` = $area_id AND
  `ut_data`.`Unit_Nid` = $unit_id AND
  `ut_data`.`TimePeriod_NId` IN ($timePeriodId)
GROUP BY
  `ut_data`.`TimePeriod_NId`;
EOD;

        foreach($this->datasource['di6']->fetchAll($sql) as $element){

            $data = $this->format_array($element);

            $this->sdmxObject->createObservation($data['Data_Value'], $data['timeperiod'], $data['Data_Denominator'], $data['FootNote'], array('source' => $data['source']));

        }

        $log->addInfo("       Finish current batch.");
    }

    /**
     * The number of data points for selected indicator.
     * @param  int $indicatorId    [description]
     * @return int Total Number of series.
     */
    private function data_count($indicatorId){
        $sql = <<<EOD
SELECT COUNT(*) AS `total`
FROM `ut_data`
WHERE `ut_data`.`Indicator_NId` = {{ Indicator_Nid }};
EOD;
        $sql = str_ireplace("{{ Indicator_Nid }}", $indicatorId, $sql);
//        var_dump($sql);

        $resultSet = $this->datasource['di6']->fetchAll($sql);
        if(sizeof($resultSet) > 0) $resultSet = array_shift($resultSet);
        if(sizeof($resultSet) > 0) $resultSet = array_shift($resultSet);
//        var_dump(intval($result['total']));
        return intval($resultSet['total']);
    }

    /**
     * The number of series for selected indicator.
     * @param  int $indicatorId    [description]
     * @return int Total Number of series.
     */
    private function series_count($indicatorId, $areaId, $timePeriod){
        $sql = <<<EOD
    SELECT
      COUNT(*) AS `total`
    FROM `ut_data`
    -- LEFT JOIN `ut_indicator_en` ON `ut_indicator_en`.`Indicator_NId` = `ut_data`.`Indicator_NId`
    LEFT JOIN `ut_area_en` ON `ut_area_en`.`Area_NId` = `ut_data`.`Area_NId`
    LEFT JOIN `ut_unit_en` ON `ut_unit_en`.`Unit_NId` = `ut_data`.`Unit_NId`
    LEFT JOIN `ut_subgroup_vals_en` ON `ut_subgroup_vals_en`.`Subgroup_Val_NId` = `ut_data`.`Subgroup_Val_NId`
    WHERE `ut_data`.`Indicator_NId` = {{ Indicator_Nid }} AND `ut_data`.`Area_Nid` IN ({{ Area_Nid }}) AND `ut_data`.`Timeperiod_Nid` IN ({{ Timeperiod_Nid }});
EOD;
        $sql = str_ireplace("{{ Indicator_Nid }}", $indicatorId, $sql);
        $sql = str_ireplace("{{ Area_Nid }}", $areaId, $sql);
        $sql = str_ireplace("{{ Timeperiod_Nid }}", $timePeriod, $sql);
//        var_dump($sql);

        $resultSet = $this->datasource['di6']->fetchAll($sql);
        if(sizeof($resultSet) > 0) $resultSet = array_shift($resultSet);
        if(sizeof($resultSet) > 0) $resultSet = array_shift($resultSet);
//        var_dump(intval($result['total']));

        return intval($resultSet['total']);

    }

    private function getSubgroupType($subgroupValNId){
        $sql = <<<EOD
    SELECT
        `ut_subgroup_type_en`.`Subgroup_Type_Name` AS `name`
    FROM `ut_subgroup_vals_subgroup`
    JOIN `ut_subgroup_en` ON `ut_subgroup_en`.`Subgroup_NId` = `ut_subgroup_vals_subgroup`.`Subgroup_NId`
    JOIN `ut_subgroup_type_en` ON `ut_subgroup_type_en`.`Subgroup_Type_NId` = `ut_subgroup_en`.`Subgroup_Type`
    WHERE `ut_subgroup_vals_subgroup`.`Subgroup_Val_NId` = $subgroupValNId;
EOD;
//        var_dump($sql);

        $resultSet = $this->datasource['di6']->fetchAll($sql);

        return $resultSet;
    }

    private function mapSubgroupTypeToVal($type, $values){
//        var_dump($type);
//        var_dump($values);
        $subgroups = array_combine(explode(',', $type), explode(' - ', $values));

        return $subgroups;
    }

    /**
     * Check if the default directory exist, else create new directory.
     * @return boolean Return true if directory have been made.
     */
    private function make_directory($path = '') {
        $directoryPath = empty($path)? $this->path:$path;

        if(!file_exists($directoryPath)){
            mkdir($directoryPath, 0775);
            return true;
        }
        return false;
    }

    private function update_process_status($processId, $status) {
        $process = $this->BatchProcess->read(null, $processId);
        if($process){
            $this->BatchProcess->set(array('status' => $status));
            $this->BatchProcess->save();
        }
//        var_dump(get_class($this->uses['BatchProcess']));
//        $process = $this->datasource['default']->update($this->uses['BatchProcess'], array('status'), array($status), array('id' => $processId));

        return $process;
    }

    /**
     * [format_array description]
     * @param  array $input [description]
     * @return array        [description]
     */
    private function format_array($input) {
        $output = array();
        foreach($input as $element) {
            $output = array_merge($output, $element);
        }

        return $output;
    }

    private function init_monolog($format="[%datetime%] %level_name%: %message%") {

        # format log output.
        $format .= PHP_EOL;
        $formatter = new Monolog\Formatter\LineFormatter($format);

        $log = new Logger('name');
        $logStream = new StreamHandler($this->logPath.$this->logFilename, Logger::INFO);
        $logStream->setFormatter($formatter);
        $log->pushHandler($logStream);

        return $log;
    }

    private function output_logging($message="",  $type=LOG_INFO) {
//        print date($this->timeFormat,time()) . ' ' .  $this->logType[$type] . ': '.$message . PHP_EOL;
    }

}