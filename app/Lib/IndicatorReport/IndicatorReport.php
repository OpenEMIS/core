<?php
/*
@OPENEMIS LICENSE LAST UPDATED ON 2013-05-14

OpenEMIS
Open Education Management Information System

Copyright Â© 2013 UNECSO.  This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by the Free Software Foundation
, either version 3 of the License, or any later version.  This program is distributed in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.See the GNU General Public License for more details. You should
have received a copy of the GNU General Public License along with this program.  If not, see
<http://www.gnu.org/licenses/>.  For more information please wire to contact@openemis.org.
*/

require_once("Writer/SdmxWriter.php");
require_once("Writer/IndicatorCsvWriter.php");
require_once ("Series.php");
require_once ("Observation.php");
require_once ("Subgroup.php");

use Monolog\Logger;
use Monolog\Formatter\LineFormatter;
use Monolog\Handler\StreamHandler;
define("LOG_PROCESS", 8);
App::uses('Sanitize', 'Utility');
App::uses('ConnectionManager', 'Model');

class IndicatorReport {

    const STATUS_PENDING = 1;                       #
    const STATUS_PROCESSING = 2;                    #
    const STATUS_COMPLETED = 3;                     #
    const STATUS_ABORT = 4;                         #

//    public $uses = array('BatchProcess');           # Attach CakePHP Models.

    private $datasource = null;                     # Attach other datasource to the class.
    private $resultSet = array();                     # Result set.
    private $queryLimit = 50;                       # Number of result return per query requested.
    private $path = '';                             # Path to store generated SDMX data.
    private $logPath = '';                          # Path to store SDMX logs.
    private $filename = '';                         # Filename of generated SDMX data.
    private $logFilename = '';                      # Filename of SDMX logs.
    private $customLog = null;                      # Attach custom Log Object (monolog).
    private $maxNumData = 5000;                   # Max Number of data allow to be generated by the user.
    private $logType = array(                       # Log Type.
        LOG_ALERT => "alert",
        LOG_CRIT => "critical",
        LOG_ERR => "error",
        LOG_WARNING => "Warning",
        LOG_NOTICE => "Notice",
        LOG_INFO => "info",
        LOG_DEBUG => "debug",
    );

    public function __construct($model){

        $this->{$model->name} = $model;

        $this->path = WWW_ROOT.'sdmx'.DS;
        $this->logPath = APP.'tmp'.DS.'logs'.DS;
        $this->filename = 'openemis_sdmx_'.date('Ymd_His', time()).'.xml';
        $this->logFilename = 'processes.log';

        try{
            $this->customLog = $this->init_monolog();

            $this->output_logging("=================================");
            $this->output_logging("Connecting to datasources...");
            $this->datasource['default'] = ConnectionManager::getDataSource('default');
            $this->output_logging("Connection to 'default' datasource Successful");
            $this->datasource['di6'] = ConnectionManager::getDataSource('di6');
            $this->output_logging("Connection to 'di6' datasource Successful");

        }catch (PDOException $e){
            $this->output_logging($e->getMessage(),LOG_ERR);
            throw $e;
        }catch(Exception $e){
            $this->output_logging($e->getMessage(), LOG_ERR);
            throw $e;
        }
    }

    /**
     * Create indicator report.
     *
     * @param int       $indicatorId
     * @param string    $areaIds
     * @param string    $timePeriods
     * @param string    $outputType
     * @throws Exception
     */
    public function create($indicatorId, $areaIds, $timePeriods, $outputType='sdmx'){

//        @list($processId, $indicatorId, $areaIds, $timePeriods) = $this->args;

        if(!is_null($indicatorId) AND !is_null($areaIds) AND !is_null($timePeriods)) {

            try{

                $indicator = $this->getIndicator($indicatorId);
                $dataCount = $this->data_count($indicatorId,$areaIds,$timePeriods);

                if(!is_null($indicator) AND $dataCount > 0 AND $dataCount <= $this->maxNumData){

                    $this->make_directory($this->logPath);      # make log directory if it does not exist.

                    $madeDir = $this->make_directory();     # make if sdmx directory if it does not exist.

//                    $this->output_logging('Start ' . strtoupper($outputType) . ' convertion process');
                    $this->output_logging('Query for results...');

                    if($madeDir) {
                        $this->output_logging("- Create folder for indicator report files @ {$this->path}");
                    }

                    # Foreach series generate observations
                    $this->process_series($indicator['Indicator_Nid'], $indicator['Indicator_Name'], $areaIds, $timePeriods);

                    if(sizeof($this->resultSet)>0){
                        $this->output_logging('Generating ' . strtoupper($outputType).' file...');
                        if(strcmp(strtolower($outputType), 'csv')==0){
                            $indicatorCsvWriter = new IndicatorCsvWriter();
                            $indicatorCsvWriter->generate($this->resultSet);
                        }elseif(strcmp(strtolower($outputType), 'sdmx')==0){
                            $sdmxWriter = new SdmxWriter();
                            $sdmxWriter->generate($this->resultSet);
                        }else{
                            $this->output_logging('Format provided ' . strtoupper($outputType).' is unavailable...');
                        }
                    }else{
                        throw new Exception('Empty results.');
                    }
                    $this->output_logging('Completed...');
//                    $this->update_process_status($processId, self::STATUS_COMPLETED);
                }elseif(is_null($indicator)){
                    throw new Exception('Indicator does not exist.');
                }elseif($dataCount == 0){
                    throw new Exception('Empty results.');
                }else{
                    throw new Exception('Results too large. \nPlease narrow selections.');
                }
            }catch (Exception $e){
                $this->output_logging($e->getMessage(), LOG_ERR);
                throw $e;
//                $this->update_process_status($processId, self::STATUS_ABORT);
            }
            exit;


        }else{
            $this->output_logging('Please provide the process ID', LOG_ERR);
        }

    }

    /**
     * Get a list of indicators available in the database.
     *
     * @return array
     */
    public function getIndicatorList(){
        $data = array();
        $sql = <<<EOD
        SELECT
            DISTINCT(`ut_indicator_en`.`Indicator_Nid`),
            `ut_indicator_en`.`Indicator_Name`
        FROM `ut_data`
        INNER JOIN `ut_indicator_en` ON `ut_indicator_en`.`Indicator_Nid` = `ut_data`.`Indicator_NId`;
EOD;

        $resultSet = $this->datasource['di6']->fetchAll($sql);
        if(sizeof($resultSet) > 0){
            foreach($resultSet as $element){
                $data[] = $this->format_array($element);
            }
        }

        return $data;
    }

    /**
     * Get a list of areas available in the database.
     *
     * @param $indicatorId
     * @return array
     */
    public function getAreaList($indicatorId){
        $data = array();
        $sql = <<<EOD
        SELECT
            DISTINCT(`ut_area_en`.`Area_NId`),
            `ut_area_en`.`Area_Name`,
            `ut_area_level_en`.`Area_Level_Name`
        FROM `ut_data`
        INNER JOIN `ut_area_en` ON `ut_area_en`.`Area_NId` = `ut_data`.`Area_NId`
        INNER JOIN `ut_area_level_en` ON `ut_area_level_en`.`Area_Level` = `ut_area_en`.`Area_Level`
        WHERE `ut_data`.`Indicator_Nid` = {{ Indicator_Nid }}
        ORDER BY `ut_area_level_en`.`Area_Level` ASC, `ut_area_en`.`Area_Name` ASC;
EOD;
        $sql = str_ireplace('{{ Indicator_Nid }}', '?' , $sql);

        $resultSet = $this->datasource['di6']->fetchAll($sql, array($indicatorId));
        if(sizeof($resultSet) > 0){
            foreach($resultSet as $element){
                $tmpRow = $this->format_array($element);
                $key = $tmpRow['Area_Level_Name'];
                unset($tmpRow['Area_Level_Name']);
                $data[$key][] = $tmpRow;
            }
        }

        return $data;
    }

    /**
     * Get a list of time periods available with given parameters.
     *
     * @param $indicatorId
     * @param array $areaIds
     * @return array
     */
    public function getTimePeriod($indicatorId, $areaIds=array()){
        $data = array();
        $sql = <<<EOD
        SELECT
            DISTINCT(`ut_timeperiod`.`TimePeriod_NId`),
            `ut_timeperiod`.`TimePeriod`
        FROM `ut_data`
        INNER JOIN `ut_timeperiod` ON `ut_timeperiod`.`TimePeriod_NId` = `ut_data`.`TimePeriod_NId`
        WHERE `ut_data`.`Indicator_Nid` = {{ Indicator_Nid }}
        ORDER BY `ut_timeperiod`.`TimePeriod` ASC;
EOD;
        $sql = str_ireplace('{{ Indicator_Nid }}', '?' , $sql);

        $resultSet = $this->datasource['di6']->fetchAll($sql, array($indicatorId));
        if(sizeof($resultSet) > 0){
            foreach($resultSet as $element){
                $data[] = $this->format_array($element);
            }
        }

        return $data;
    }

    /**
     * Get a indicator with given parameter.
     *
     * @param $indicatorId
     * @return array|null
     */
    private function getIndicator($indicatorId){
        $data = array();
        $sql = <<<EOD
        SELECT
            `ut_indicator_en`.`Indicator_Nid`,
            `ut_indicator_en`.`Indicator_Name`
        FROM `ut_indicator_en`
        {{ where }}
        LIMIT 1;
EOD;
        $sql = str_ireplace("{{ where }}", "WHERE `ut_indicator_en`.`Indicator_NId` = ?", $sql);
        $resultSet = $this->datasource['di6']->fetchAll($sql, array($indicatorId));
        if(sizeof($resultSet) > 0){
            foreach($resultSet as $element){
                $data = $this->format_array($element);
            }
        }else{
            $data = null;
        }

        return $data;
    }


    /**
     * Generate series with given parameters.
     *
     * @param $indicatorId
     * @param $indicatorName
     * @param $areaId
     * @param $timePeriodId
     */
    private function process_series($indicatorId, $indicatorName, $areaId, $timePeriodId){
        $dataCount = $this->data_count($indicatorId, $areaId, $timePeriodId);
        $seriesCounter = ceil($dataCount / $this->queryLimit);

        $indicatorIdLog = 0;
        $seriesCreationCounter = 0;
        $this->output_logging("Processing series");
        for($i = 0; $i <= $seriesCounter; $i++){

            $sql = <<<EOD
    SELECT
      `ut_indicator_en`.`Indicator_Name`,
      `ut_data`.`Indicator_Nid`,
      `ut_subgroup_vals_en`.`Subgroup_Val`,
      `ut_data`.`Subgroup_Val_Nid`,
      `ut_area_en`.`Area_Name`,
      `ut_data`.`Area_Nid`,
      `ut_data`.`Unit_Nid`,
      `ut_unit_en`.`Unit_Name` -- ,
      -- (
        -- SELECT
	    --     GROUP_CONCAT(`ut_subgroup_type_en`.`Subgroup_Type_Name` SEPARATOR ',')
        -- FROM `ut_subgroup_vals_subgroup`
        -- JOIN `ut_subgroup_en` ON `ut_subgroup_en`.`Subgroup_NId` = `ut_subgroup_vals_subgroup`.`Subgroup_NId`
        -- JOIN `ut_subgroup_type_en` ON `ut_subgroup_type_en`.`Subgroup_Type_NId` = `ut_subgroup_en`.`Subgroup_Type`
        -- WHERE `ut_subgroup_vals_subgroup`.`Subgroup_Val_NId` = `ut_data`.`Subgroup_Val_Nid`
      -- ) as `Subgroup_Types`
    FROM `ut_data`
    LEFT JOIN `ut_indicator_en` ON `ut_indicator_en`.`Indicator_NId` = `ut_data`.`Indicator_NId`
    LEFT JOIN `ut_area_en` ON `ut_area_en`.`Area_NId` = `ut_data`.`Area_NId`
    LEFT JOIN `ut_unit_en` ON `ut_unit_en`.`Unit_NId` = `ut_data`.`Unit_NId`
    LEFT JOIN `ut_subgroup_vals_en` ON `ut_subgroup_vals_en`.`Subgroup_Val_NId` = `ut_data`.`Subgroup_Val_NId`
    WHERE `ut_data`.`Indicator_NId` = {{ Indicator_Nid }}
        AND `ut_data`.`Area_Nid` IN ({{ Area_Nid }})
        AND `ut_data`.`Timeperiod_Nid` IN ( {{ Timeperiod_Nid }} )
    GROUP BY
        `ut_data`.`Indicator_Nid`,
        `ut_data`.`Subgroup_Val_Nid`,
        `ut_data`.`Area_Nid` -- ,
        -- `ut_data`.`Unit_Nid`
    ORDER BY
        `ut_data`.`Subgroup_Val_Nid`ASC
    {{ LIMIT }};
EOD;
            $sql = str_ireplace('{{ indicator_nid }}', '?' , $sql);
            $sql = str_ireplace('{{ Area_Nid }}', $areaId , $sql);
            $sql = str_ireplace('{{ Timeperiod_Nid }}', $timePeriodId , $sql);
            $sql = str_ireplace('{{ limit }}', "LIMIT ".($i*$this->queryLimit).", {$this->queryLimit}", $sql);

            $this->output_logging("Process Observations");

            foreach($this->datasource['di6']->fetchAll($sql, array($indicatorId)) as $element){
                $data = $this->format_array($element);

                $subgroup = $this->getSubgroupsBySubgroupValNId($data['Subgroup_Val_Nid']);
                $seriesObservations = $this->process_observation($indicatorId, $data['Subgroup_Val_Nid'], $data['Area_Nid'], $data['Unit_Nid'], $timePeriodId);
                $series = new Series($indicatorName, $data['Area_Name'], 'OpenEMIS', $data['Unit_Name'], $subgroup, $seriesObservations);
                $this->resultSet[] = $series;
//                $this->sdmxWriter->startSeries($indicatorName, $data['Unit_Name'], $data['Area_Name'], 'OpenEMIS', $seriesAttributes);
//                $this->process_observation($indicatorId, $data['Subgroup_Val_Nid'], $data['Area_Nid'], $data['Unit_Nid'], $timePeriodId);
//                $this->sdmxWriter->endSeries();

                if($indicatorIdLog != intval($data['Indicator_Nid'])){
                    $this->output_logging("Processing Indicator: {$data['Indicator_Name']}");
                    $indicatorIdLog = $data['Indicator_Nid'];
                }

                $this->output_logging("Processing  {$indicatorName}, {$data['Subgroup_Val']}, ${data['Area_Name']}, {$data['Unit_Name']}");
            }

        }
    }

    /**
     * Generate observation with given parameters.
     *
     * @param $indicator_id
     * @param $subgroup_val_id
     * @param $area_id
     * @param $unit_id
     * @param $timePeriodId
     * @return array|string
     * @throws Exception
     */
    private function process_observation($indicator_id, $subgroup_val_id, $area_id, $unit_id, $timePeriodId) {

        if(empty($indicator_id) || empty($subgroup_val_id) || empty($area_id) || empty($unit_id) || empty($timePeriodId)) return '';

        $sqlTemplate = <<<EOD
-- Get observation data
SELECT
  SUM(`ut_data`.`Data_Value`) AS `Data_Value`,
  `ut_data`.`Data_Denominator`,
  `ut_timeperiod`.`timeperiod`,
  `ut_footnote_en`.`FootNote`,
  'OpenEMIS' AS `source`,
  (
    SELECT
        GROUP_CONCAT(REPLACE(`ut_indicator_classifications_en`.`IC_Name`, '-', '') SEPARATOR ' - ')
    FROM `ut_indicator_classifications_ius`
    JOIN `ut_indicator_classifications_en` ON `ut_indicator_classifications_en`.`IC_NId` = `ut_indicator_classifications_ius`.`IC_NId`
    WHERE IUSNId = `ut_data`.`IUSNId`
  ) as `classifications`
FROM `ut_data`
LEFT JOIN `ut_timeperiod` ON `ut_timeperiod`.`TimePeriod_NId` = `ut_data`.`TimePeriod_NId`
LEFT JOIN `ut_footnote_en` ON `ut_footnote_en`.`FootNote_NId` = `ut_data`.`FootNote_NId`
WHERE
  `ut_data`.`Indicator_NId` = {{ Indicator_NId }} AND
  `ut_data`.`Subgroup_Val_Nid` = {{ Subgroup_Val_Nid }} AND
  `ut_data`.`Area_Nid` = {{ Area_Nid }} AND
  `ut_data`.`Unit_Nid` = {{ Unit_Nid }} AND
  `ut_data`.`TimePeriod_NId` IN ({{ TimePeriod_NId }})
GROUP BY
  `ut_data`.`TimePeriod_NId`
ORDER BY
  `ut_timeperiod`.`timeperiod` ASC;
EOD;

        $sql = str_ireplace('{{ Indicator_NId }}', '?' , $sqlTemplate);
        $sql = str_ireplace('{{ Subgroup_Val_Nid }}', '?' , $sql);
        $sql = str_ireplace('{{ Area_Nid }}', '?' , $sql);
        $sql = str_ireplace('{{ Unit_Nid }}', '?' , $sql);
        $sql = str_ireplace('{{ Timeperiod_Nid }}', $timePeriodId , $sql);

        $observations = array();
        try{
//            $this->log_query($sqlTemplate, array(
//                'Indicator_NId'=>$indicator_id,
//                'Subgroup_Val_Nid'=>$subgroup_val_id,
//                'Area_Nid'=>$area_id,
//                'Unit_Nid'=>$unit_id,
//                'Timeperiod_Nid' => $timePeriodId));

            foreach($this->datasource['di6']->fetchAll($sql, array($indicator_id, $subgroup_val_id, $area_id, $unit_id)) as $element){

                $data = $this->format_array($element);

                array_push($observations, new Observation($data['Data_Value'], $data['Data_Denominator'], $data['FootNote'], $data['timeperiod'], $data['classifications'], array('Source' => $data['source'])));

//            $this->sdmxWriter->createObservation($data['Data_Value'], $data['timeperiod'], $data['Data_Denominator'], $data['FootNote'], array('source' => $data['source']));

            }
            $this->output_logging("       Finish current batch.");
        }catch (Exception $e){
            $this->output_logging($e->getMessage());
            throw $e;
        }
        return $observations;
    }

    /**
     * The number of data points for selected indicator by id.
     * @param  int  $indicatorId
     * @return int                  Total Number of series.
     */
    private function dataCountByIndicatorId($indicatorId){
        $sql = <<<EOD
SELECT COUNT(*) AS `total`
FROM `ut_data`
WHERE `ut_data`.`Indicator_NId` = {{ Indicator_Nid }};
EOD;
        $sql = str_ireplace("{{ Indicator_Nid }}", '?', $sql);

        $resultSet = $this->datasource['di6']->fetchAll($sql, array($indicatorId));
        if(sizeof($resultSet) > 0) $resultSet = array_shift($resultSet);
        if(sizeof($resultSet) > 0) $resultSet = array_shift($resultSet);

        return intval($resultSet['total']);
    }

    /**
     * The number of data for selected indicator.
     * @param  int $indicatorId    [description]
     * @return int Total Number of series.
     */
    private function data_count($indicatorId, $areaId, $timePeriod){
        $sqlTemplate = <<<EOD
    SELECT
      COUNT(*) AS `total`
    FROM `ut_data`
    -- LEFT JOIN `ut_indicator_en` ON `ut_indicator_en`.`Indicator_NId` = `ut_data`.`Indicator_NId`
    LEFT JOIN `ut_area_en` ON `ut_area_en`.`Area_NId` = `ut_data`.`Area_NId`
    LEFT JOIN `ut_unit_en` ON `ut_unit_en`.`Unit_NId` = `ut_data`.`Unit_NId`
    LEFT JOIN `ut_subgroup_vals_en` ON `ut_subgroup_vals_en`.`Subgroup_Val_NId` = `ut_data`.`Subgroup_Val_NId`
    WHERE `ut_data`.`Indicator_NId` = {{ Indicator_Nid }} AND `ut_data`.`Area_Nid` IN ({{ Area_Nid }}) AND `ut_data`.`Timeperiod_Nid` IN ({{ Timeperiod_Nid }});
EOD;

//        $sql = str_ireplace("{{ Indicator_Nid }}", $indicatorId, $sql);
//        $sql = str_ireplace("{{ Area_Nid }}", $areaId, $sql);
//        $sql = str_ireplace("{{ Timeperiod_Nid }}", $timePeriod, $sql);

        $sql = str_ireplace("{{ Indicator_Nid }}", '?', $sqlTemplate);
        $sql = str_ireplace("{{ Area_Nid }}", Sanitize::paranoid($areaId, array(',')), $sql);
        $sql = str_ireplace("{{ Timeperiod_Nid }}", Sanitize::paranoid($timePeriod, array(',')), $sql);

        $this->log_query($sqlTemplate, array('Indicator_Nid' => $indicatorId, 'Area_Nid' => $areaId, 'Timeperiod_Nid' => $timePeriod));

        $resultSet = $this->datasource['di6']->fetchAll($sql, array($indicatorId));
        if(sizeof($resultSet) > 0) $resultSet = array_shift($resultSet);
        if(sizeof($resultSet) > 0) $resultSet = array_shift($resultSet);

        return intval($resultSet['total']);

    }

    /**
     * Get subgroup by subgroup_val_NId.
     * @param $subgroupValNId
     * @return array
     * @throws Exception
     */
    private function getSubgroupsBySubgroupValNId($subgroupValNId){
        $results = array();

        $sql = <<<EOD
    SELECT
        `ut_subgroup_en`.*,
        `ut_subgroup_type_en`.Subgroup_Type_Name
    FROM `ut_subgroup_vals_en`
    JOIN `ut_subgroup_vals_subgroup` ON `ut_subgroup_vals_subgroup`.`Subgroup_Val_NId` = `ut_subgroup_vals_en`.`Subgroup_Val_NId`
    JOIN `ut_subgroup_en` ON `ut_subgroup_en`.`Subgroup_NId` = `ut_subgroup_vals_subgroup`.`Subgroup_NId`
    JOIN `ut_subgroup_type_en` ON `ut_subgroup_type_en`.`Subgroup_Type_NId` = `ut_subgroup_en`.`Subgroup_Type`
    WHERE `ut_subgroup_vals_en`.`Subgroup_Val_NId` = {{ subgroup_Val_NId }};
EOD;
        $sql = str_ireplace("{{ subgroup_Val_NId }}", '?', $sql);

//        $undefinedSubgroupTypeCounter = 1;
        foreach($this->datasource['di6']->fetchAll($sql, array($subgroupValNId)) as $row){
            $subgroupType = $row['ut_subgroup_type_en']['Subgroup_Type_Name'];
            if(empty($row['ut_subgroup_type_en']['Subgroup_Type_Name'])){
                throw new Exception('Subgroup Type not available, \nPlease contact the Admin.');
//                $subgroupType = 'undefined subgroup type '.$undefinedSubgroupTypeCounter;
//                $undefinedSubgroupTypeCounter++;
            }

            array_push($results, new Subgroup($row['ut_subgroup_en']['Subgroup_NId'],$row['ut_subgroup_en']['Subgroup_Name'],$row['ut_subgroup_en']['Subgroup_GId'],$subgroupType));
        }
        return $results;
    }

    /**
     * Check if the default directory exist, else create new directory.
     * @return boolean Return true if directory have been made.
     */
    private function make_directory($path = '') {
        $directoryPath = empty($path)? $this->path:$path;

        if(!file_exists($directoryPath)){
            mkdir($directoryPath, 0775);
            return true;
        }
        return false;
    }

    /**
     * Update batch process status with given parameters.
     *
     * @param $processId
     * @param $status
     * @return mixed
     */
    private function update_process_status($processId, $status) {
        $process = $this->BatchProcess->read(null, $processId);
        if($process){
            $this->BatchProcess->set(array('status' => $status));
            $this->BatchProcess->save();
        }

//        $process = $this->datasource['default']->update($this->uses['BatchProcess'], array('status'), array($status), array('id' => $processId));

        return $process;
    }

    /**
     * Format array
     * @param  array $input [description]
     * @return array        [description]
     */
    private function format_array($input) {
        $output = array();
        foreach($input as $element) {
            $output = array_merge($output, $element);
        }

        return $output;
    }

    /**
     * Init monolog.
     *
     * @param string $format
     * @return Logger
     */
    private function init_monolog($format="[%datetime%] %level_name%: %message%") {

        # format log output.
        $format .= PHP_EOL;
        $formatter = new Monolog\Formatter\LineFormatter($format);

        $log = new Logger('name');
        $logStream = new StreamHandler($this->logPath.$this->logFilename, Logger::INFO);
        $logStream->setFormatter($formatter);
        $log->pushHandler($logStream);

        return $log;
    }

    /**
     * Log SQL query into logging platform.
     *
     * @param $sqlTemplate
     * @param $preparedValues
     */
    private function log_query($sqlTemplate, $preparedValues){
        $sql = $sqlTemplate;
        foreach($preparedValues as $key => $value){
            $sql = str_ireplace("{{ {$key} }}", $value , $sql);
        }
        $this->output_logging($sql);
    }

    /**
     * Ouput to logging platform.
     *
     * @param string $message
     * @param int $type
     */
    private function output_logging($message="",  $type=LOG_INFO) {
//        print date($this->timeFormat,time()) . ' ' .  $this->logType[$type] . ': '.$message . PHP_EOL;
        $methodName = 'add'.ucfirst($this->logType[$type]);
        $this->customLog->{$methodName}($message);
//        var_dump(CakeLog::configured());
//        CakeLog::write($this->logType[$type], $message);
    }

}