// ag-grid-enterprise v13.2.0
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["agGrid"] = factory();
	else
		root["agGrid"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);

	// add in exports for ag-Grid-Enterprise
	var populateClientExports = __webpack_require__(178).populateClientExports;
	populateClientExports(exports);

	// also add in in exports for ag-Grid-Standard, as it's webpack, we want both packed up
	var agGrid = __webpack_require__(2);
	Object.keys(agGrid).forEach(function(key) {
	    exports[key] = agGrid[key];
	});


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var enterpriseMenu_1 = __webpack_require__(137);
	var rangeController_1 = __webpack_require__(145);
	var clipboardService_1 = __webpack_require__(144);
	var groupStage_1 = __webpack_require__(147);
	var aggregationStage_1 = __webpack_require__(148);
	var enterpriseBoot_1 = __webpack_require__(151);
	var statusBar_1 = __webpack_require__(160);
	var contextMenu_1 = __webpack_require__(162);
	var viewportRowModel_1 = __webpack_require__(163);
	var pivotColumnsPanel_1 = __webpack_require__(164);
	var toolPanelComp_1 = __webpack_require__(167);
	var rowGroupCompFactory_1 = __webpack_require__(171);
	var licenseManager_1 = __webpack_require__(158);
	var md5_1 = __webpack_require__(159);
	var pivotStage_1 = __webpack_require__(149);
	var pivotColDefService_1 = __webpack_require__(150);
	var aggFuncService_1 = __webpack_require__(146);
	var pivotCompFactory_1 = __webpack_require__(172);
	var menuItemMapper_1 = __webpack_require__(143);
	var excelCreator_1 = __webpack_require__(173);
	var excelXmlFactory_1 = __webpack_require__(174);
	var enterpriseRowModel_1 = __webpack_require__(175);
	var rowModelTypes = { viewport: viewportRowModel_1.ViewportRowModel, enterprise: enterpriseRowModel_1.EnterpriseRowModel };
	main_1.Grid.setEnterpriseBeans([toolPanelComp_1.ToolPanelComp, enterpriseMenu_1.EnterpriseMenuFactory, excelCreator_1.ExcelCreator, excelXmlFactory_1.ExcelXmlFactory, rowGroupCompFactory_1.RowGroupCompFactory, pivotCompFactory_1.PivotCompFactory,
	    pivotColumnsPanel_1.PivotColumnsPanel, rangeController_1.RangeController, clipboardService_1.ClipboardService, pivotStage_1.PivotStage, pivotColDefService_1.PivotColDefService,
	    contextMenu_1.ContextMenuFactory, groupStage_1.GroupStage, aggregationStage_1.AggregationStage, enterpriseBoot_1.EnterpriseBoot, aggFuncService_1.AggFuncService,
	    statusBar_1.StatusBar, licenseManager_1.LicenseManager, md5_1.MD5, menuItemMapper_1.MenuItemMapper], rowModelTypes);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var globalObj = typeof global === 'undefined' ? {} : global;
	globalObj.HTMLElement = typeof HTMLElement === 'undefined' ? {} : HTMLElement;
	globalObj.HTMLButtonElement = typeof HTMLButtonElement === 'undefined' ? {} : HTMLButtonElement;
	globalObj.HTMLSelectElement = typeof HTMLSelectElement === 'undefined' ? {} : HTMLSelectElement;
	globalObj.HTMLInputElement = typeof HTMLInputElement === 'undefined' ? {} : HTMLInputElement;
	globalObj.Node = typeof Node === 'undefined' ? {} : Node;
	// columnController
	var balancedColumnTreeBuilder_1 = __webpack_require__(3);
	exports.BalancedColumnTreeBuilder = balancedColumnTreeBuilder_1.BalancedColumnTreeBuilder;
	var columnController_1 = __webpack_require__(15);
	exports.ColumnController = columnController_1.ColumnController;
	var columnKeyCreator_1 = __webpack_require__(109);
	exports.ColumnKeyCreator = columnKeyCreator_1.ColumnKeyCreator;
	var columnUtils_1 = __webpack_require__(18);
	exports.ColumnUtils = columnUtils_1.ColumnUtils;
	var displayedGroupCreator_1 = __webpack_require__(21);
	exports.DisplayedGroupCreator = displayedGroupCreator_1.DisplayedGroupCreator;
	var groupInstanceIdCreator_1 = __webpack_require__(104);
	exports.GroupInstanceIdCreator = groupInstanceIdCreator_1.GroupInstanceIdCreator;
	// components
	var componentUtil_1 = __webpack_require__(10);
	exports.ComponentUtil = componentUtil_1.ComponentUtil;
	var agGridNg1_1 = __webpack_require__(110);
	exports.initialiseAgGridWithAngular1 = agGridNg1_1.initialiseAgGridWithAngular1;
	var agGridWebComponent_1 = __webpack_require__(131);
	exports.initialiseAgGridWithWebComponents = agGridWebComponent_1.initialiseAgGridWithWebComponents;
	// context
	var beanStub_1 = __webpack_require__(36);
	exports.BeanStub = beanStub_1.BeanStub;
	var context_1 = __webpack_require__(7);
	exports.Context = context_1.Context;
	exports.Autowired = context_1.Autowired;
	exports.PostConstruct = context_1.PostConstruct;
	exports.PreConstruct = context_1.PreConstruct;
	exports.Optional = context_1.Optional;
	exports.Bean = context_1.Bean;
	exports.Qualifier = context_1.Qualifier;
	exports.PreDestroy = context_1.PreDestroy;
	var componentAnnotations_1 = __webpack_require__(48);
	exports.QuerySelector = componentAnnotations_1.QuerySelector;
	exports.Listener = componentAnnotations_1.Listener;
	exports.RefSelector = componentAnnotations_1.RefSelector;
	// dragAndDrop
	var dragAndDropService_1 = __webpack_require__(90);
	exports.DragAndDropService = dragAndDropService_1.DragAndDropService;
	exports.DragSourceType = dragAndDropService_1.DragSourceType;
	exports.HDirection = dragAndDropService_1.HDirection;
	exports.VDirection = dragAndDropService_1.VDirection;
	var dragService_1 = __webpack_require__(26);
	exports.DragService = dragService_1.DragService;
	// entities
	var column_1 = __webpack_require__(17);
	exports.Column = column_1.Column;
	var columnGroup_1 = __webpack_require__(16);
	exports.ColumnGroup = columnGroup_1.ColumnGroup;
	var gridCell_1 = __webpack_require__(33);
	exports.GridCell = gridCell_1.GridCell;
	var gridRow_1 = __webpack_require__(34);
	exports.GridRow = gridRow_1.GridRow;
	var originalColumnGroup_1 = __webpack_require__(19);
	exports.OriginalColumnGroup = originalColumnGroup_1.OriginalColumnGroup;
	var rowNode_1 = __webpack_require__(30);
	exports.RowNode = rowNode_1.RowNode;
	// filter
	var baseFilter_1 = __webpack_require__(54);
	exports.BaseFilter = baseFilter_1.BaseFilter;
	var dateFilter_1 = __webpack_require__(56);
	exports.DateFilter = dateFilter_1.DateFilter;
	var filterManager_1 = __webpack_require__(51);
	exports.FilterManager = filterManager_1.FilterManager;
	var numberFilter_1 = __webpack_require__(55);
	exports.NumberFilter = numberFilter_1.NumberFilter;
	var textFilter_1 = __webpack_require__(53);
	exports.TextFilter = textFilter_1.TextFilter;
	// gridPanel
	var gridPanel_1 = __webpack_require__(24);
	exports.GridPanel = gridPanel_1.GridPanel;
	var scrollVisibleService_1 = __webpack_require__(39);
	exports.ScrollVisibleService = scrollVisibleService_1.ScrollVisibleService;
	var mouseEventService_1 = __webpack_require__(28);
	exports.MouseEventService = mouseEventService_1.MouseEventService;
	// headerRendering
	var bodyDropPivotTarget_1 = __webpack_require__(103);
	exports.BodyDropPivotTarget = bodyDropPivotTarget_1.BodyDropPivotTarget;
	var bodyDropTarget_1 = __webpack_require__(101);
	exports.BodyDropTarget = bodyDropTarget_1.BodyDropTarget;
	var cssClassApplier_1 = __webpack_require__(96);
	exports.CssClassApplier = cssClassApplier_1.CssClassApplier;
	var headerContainer_1 = __webpack_require__(89);
	exports.HeaderContainer = headerContainer_1.HeaderContainer;
	var headerRenderer_1 = __webpack_require__(88);
	exports.HeaderRenderer = headerRenderer_1.HeaderRenderer;
	var headerRowComp_1 = __webpack_require__(92);
	exports.HeaderRowComp = headerRowComp_1.HeaderRowComp;
	var headerTemplateLoader_1 = __webpack_require__(94);
	exports.HeaderTemplateLoader = headerTemplateLoader_1.HeaderTemplateLoader;
	var horizontalDragService_1 = __webpack_require__(95);
	exports.HorizontalDragService = horizontalDragService_1.HorizontalDragService;
	var moveColumnController_1 = __webpack_require__(102);
	exports.MoveColumnController = moveColumnController_1.MoveColumnController;
	var renderedHeaderCell_1 = __webpack_require__(93);
	exports.RenderedHeaderCell = renderedHeaderCell_1.RenderedHeaderCell;
	var standardMenu_1 = __webpack_require__(112);
	exports.StandardMenuFactory = standardMenu_1.StandardMenuFactory;
	// layout
	var borderLayout_1 = __webpack_require__(25);
	exports.BorderLayout = borderLayout_1.BorderLayout;
	var tabbedLayout_1 = __webpack_require__(132);
	exports.TabbedLayout = tabbedLayout_1.TabbedLayout;
	var verticalStack_1 = __webpack_require__(133);
	exports.VerticalStack = verticalStack_1.VerticalStack;
	// misc
	var simpleHttpRequest_1 = __webpack_require__(134);
	exports.simpleHttpRequest = simpleHttpRequest_1.simpleHttpRequest;
	var largeTextCellEditor_1 = __webpack_require__(76);
	exports.LargeTextCellEditor = largeTextCellEditor_1.LargeTextCellEditor;
	var popupEditorWrapper_1 = __webpack_require__(42);
	exports.PopupEditorWrapper = popupEditorWrapper_1.PopupEditorWrapper;
	var popupSelectCellEditor_1 = __webpack_require__(75);
	exports.PopupSelectCellEditor = popupSelectCellEditor_1.PopupSelectCellEditor;
	var popupTextCellEditor_1 = __webpack_require__(74);
	exports.PopupTextCellEditor = popupTextCellEditor_1.PopupTextCellEditor;
	var selectCellEditor_1 = __webpack_require__(72);
	exports.SelectCellEditor = selectCellEditor_1.SelectCellEditor;
	var textCellEditor_1 = __webpack_require__(71);
	exports.TextCellEditor = textCellEditor_1.TextCellEditor;
	var animateShowChangeCellRenderer_1 = __webpack_require__(79);
	exports.AnimateShowChangeCellRenderer = animateShowChangeCellRenderer_1.AnimateShowChangeCellRenderer;
	var animateSlideCellRenderer_1 = __webpack_require__(78);
	exports.AnimateSlideCellRenderer = animateSlideCellRenderer_1.AnimateSlideCellRenderer;
	var groupCellRenderer_1 = __webpack_require__(80);
	exports.GroupCellRenderer = groupCellRenderer_1.GroupCellRenderer;
	// features
	var setLeftFeature_1 = __webpack_require__(67);
	exports.SetLeftFeature = setLeftFeature_1.SetLeftFeature;
	// rendering
	var autoWidthCalculator_1 = __webpack_require__(22);
	exports.AutoWidthCalculator = autoWidthCalculator_1.AutoWidthCalculator;
	var cellEditorFactory_1 = __webpack_require__(70);
	exports.CellEditorFactory = cellEditorFactory_1.CellEditorFactory;
	var cellRendererFactory_1 = __webpack_require__(77);
	exports.CellRendererFactory = cellRendererFactory_1.CellRendererFactory;
	var cellRendererService_1 = __webpack_require__(81);
	exports.CellRendererService = cellRendererService_1.CellRendererService;
	var checkboxSelectionComponent_1 = __webpack_require__(37);
	exports.CheckboxSelectionComponent = checkboxSelectionComponent_1.CheckboxSelectionComponent;
	var cellComp_1 = __webpack_require__(29);
	exports.CellComp = cellComp_1.CellComp;
	var rowComp_1 = __webpack_require__(47);
	exports.RowComp = rowComp_1.RowComp;
	var rowRenderer_1 = __webpack_require__(23);
	exports.RowRenderer = rowRenderer_1.RowRenderer;
	var valueFormatterService_1 = __webpack_require__(73);
	exports.ValueFormatterService = valueFormatterService_1.ValueFormatterService;
	// rowControllers/inMemory
	var filterStage_1 = __webpack_require__(113);
	exports.FilterStage = filterStage_1.FilterStage;
	var flattenStage_1 = __webpack_require__(117);
	exports.FlattenStage = flattenStage_1.FlattenStage;
	var sortStage_1 = __webpack_require__(115);
	exports.SortStage = sortStage_1.SortStage;
	// row models
	var pinnedRowModel_1 = __webpack_require__(44);
	exports.PinnedRowModel = pinnedRowModel_1.PinnedRowModel;
	var inMemoryRowModel_1 = __webpack_require__(124);
	exports.InMemoryRowModel = inMemoryRowModel_1.InMemoryRowModel;
	var changedPath_1 = __webpack_require__(126);
	exports.ChangedPath = changedPath_1.ChangedPath;
	var inMemoryNodeManager_1 = __webpack_require__(125);
	exports.InMemoryNodeManager = inMemoryNodeManager_1.InMemoryNodeManager;
	var infiniteRowModel_1 = __webpack_require__(118);
	exports.InfiniteRowModel = infiniteRowModel_1.InfiniteRowModel;
	var rowNodeBlock_1 = __webpack_require__(121);
	exports.RowNodeBlock = rowNodeBlock_1.RowNodeBlock;
	var rowNodeBlockLoader_1 = __webpack_require__(123);
	exports.RowNodeBlockLoader = rowNodeBlockLoader_1.RowNodeBlockLoader;
	var rowNodeCache_1 = __webpack_require__(122);
	exports.RowNodeCache = rowNodeCache_1.RowNodeCache;
	//styling
	var stylingService_1 = __webpack_require__(82);
	exports.StylingService = stylingService_1.StylingService;
	// widgets
	var agCheckbox_1 = __webpack_require__(98);
	exports.AgCheckbox = agCheckbox_1.AgCheckbox;
	var component_1 = __webpack_require__(35);
	exports.Component = component_1.Component;
	var popupService_1 = __webpack_require__(52);
	exports.PopupService = popupService_1.PopupService;
	var touchListener_1 = __webpack_require__(63);
	exports.TouchListener = touchListener_1.TouchListener;
	// root
	var baseFrameworkFactory_1 = __webpack_require__(127);
	exports.BaseFrameworkFactory = baseFrameworkFactory_1.BaseFrameworkFactory;
	var cellNavigationService_1 = __webpack_require__(87);
	exports.CellNavigationService = cellNavigationService_1.CellNavigationService;
	var alignedGridsService_1 = __webpack_require__(43);
	exports.AlignedGridsService = alignedGridsService_1.AlignedGridsService;
	var constants_1 = __webpack_require__(9);
	exports.Constants = constants_1.Constants;
	var csvCreator_1 = __webpack_require__(13);
	exports.CsvCreator = csvCreator_1.CsvCreator;
	exports.BaseCreator = csvCreator_1.BaseCreator;
	var downloader_1 = __webpack_require__(106);
	exports.Downloader = downloader_1.Downloader;
	var grid_1 = __webpack_require__(111);
	exports.Grid = grid_1.Grid;
	var gridApi_1 = __webpack_require__(12);
	exports.GridApi = gridApi_1.GridApi;
	var events_1 = __webpack_require__(11);
	exports.Events = events_1.Events;
	var focusedCellController_1 = __webpack_require__(38);
	exports.FocusedCellController = focusedCellController_1.FocusedCellController;
	var functions_1 = __webpack_require__(135);
	exports.defaultGroupComparator = functions_1.defaultGroupComparator;
	var gridOptionsWrapper_1 = __webpack_require__(4);
	exports.GridOptionsWrapper = gridOptionsWrapper_1.GridOptionsWrapper;
	var eventService_1 = __webpack_require__(5);
	exports.EventService = eventService_1.EventService;
	var gridCore_1 = __webpack_require__(50);
	exports.GridCore = gridCore_1.GridCore;
	var logger_1 = __webpack_require__(6);
	exports.Logger = logger_1.Logger;
	var selectionController_1 = __webpack_require__(27);
	exports.SelectionController = selectionController_1.SelectionController;
	var sortController_1 = __webpack_require__(62);
	exports.SortController = sortController_1.SortController;
	var templateService_1 = __webpack_require__(49);
	exports.TemplateService = templateService_1.TemplateService;
	var utils_1 = __webpack_require__(8);
	exports.Utils = utils_1.Utils;
	exports.NumberSequence = utils_1.NumberSequence;
	exports._ = utils_1._;
	var valueService_1 = __webpack_require__(31);
	exports.ValueService = valueService_1.ValueService;
	var expressionService_1 = __webpack_require__(20);
	exports.ExpressionService = expressionService_1.ExpressionService;
	var xmlFactory_1 = __webpack_require__(128);
	exports.XmlFactory = xmlFactory_1.XmlFactory;
	var gridSerializer_1 = __webpack_require__(14);
	exports.GridSerializer = gridSerializer_1.GridSerializer;
	exports.BaseGridSerializingSession = gridSerializer_1.BaseGridSerializingSession;
	exports.RowType = gridSerializer_1.RowType;
	var logger_2 = __webpack_require__(6);
	exports.LoggerFactory = logger_2.LoggerFactory;
	var columnController_2 = __webpack_require__(15);
	exports.ColumnApi = columnController_2.ColumnApi;
	var frameworkComponentWrapper_1 = __webpack_require__(136);
	exports.BaseComponentWrapper = frameworkComponentWrapper_1.BaseComponentWrapper;
	var environment_1 = __webpack_require__(91);
	exports.Environment = environment_1.Environment;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var logger_1 = __webpack_require__(6);
	var columnUtils_1 = __webpack_require__(18);
	var columnKeyCreator_1 = __webpack_require__(109);
	var originalColumnGroup_1 = __webpack_require__(19);
	var column_1 = __webpack_require__(17);
	var context_1 = __webpack_require__(7);
	var utils_1 = __webpack_require__(8);
	// takes in a list of columns, as specified by the column definitions, and returns column groups
	var BalancedColumnTreeBuilder = (function () {
	    function BalancedColumnTreeBuilder() {
	    }
	    BalancedColumnTreeBuilder.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('BalancedColumnTreeBuilder');
	    };
	    BalancedColumnTreeBuilder.prototype.createBalancedColumnGroups = function (abstractColDefs, primaryColumns) {
	        // column key creator dishes out unique column id's in a deterministic way,
	        // so if we have two grids (that cold be master/slave) with same column definitions,
	        // then this ensures the two grids use identical id's.
	        var columnKeyCreator = new columnKeyCreator_1.ColumnKeyCreator();
	        // create am unbalanced tree that maps the provided definitions
	        var unbalancedTree = this.recursivelyCreateColumns(abstractColDefs, 0, columnKeyCreator, primaryColumns);
	        var treeDept = this.findMaxDept(unbalancedTree, 0);
	        this.logger.log('Number of levels for grouped columns is ' + treeDept);
	        var balancedTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);
	        this.columnUtils.depthFirstOriginalTreeSearch(balancedTree, function (child) {
	            if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                child.setupExpandable();
	            }
	        });
	        return {
	            balancedTree: balancedTree,
	            treeDept: treeDept
	        };
	    };
	    BalancedColumnTreeBuilder.prototype.balanceColumnTree = function (unbalancedTree, currentDept, columnDept, columnKeyCreator) {
	        var _this = this;
	        var result = [];
	        // go through each child, for groups, recurse a level deeper,
	        // for columns we need to pad
	        unbalancedTree.forEach(function (child) {
	            if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                var originalGroup = child;
	                var newChildren = _this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);
	                originalGroup.setChildren(newChildren);
	                result.push(originalGroup);
	            }
	            else {
	                var newChild = child;
	                for (var i = columnDept - 1; i >= currentDept; i--) {
	                    var newColId = columnKeyCreator.getUniqueKey(null, null);
	                    var colGroupDefMerged = _this.createMergedColGroupDef(null);
	                    var paddedGroup = new originalColumnGroup_1.OriginalColumnGroup(colGroupDefMerged, newColId, true);
	                    _this.context.wireBean(paddedGroup);
	                    paddedGroup.setChildren([newChild]);
	                    newChild = paddedGroup;
	                }
	                result.push(newChild);
	            }
	        });
	        return result;
	    };
	    BalancedColumnTreeBuilder.prototype.findMaxDept = function (treeChildren, dept) {
	        var maxDeptThisLevel = dept;
	        for (var i = 0; i < treeChildren.length; i++) {
	            var abstractColumn = treeChildren[i];
	            if (abstractColumn instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                var originalGroup = abstractColumn;
	                var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);
	                if (maxDeptThisLevel < newDept) {
	                    maxDeptThisLevel = newDept;
	                }
	            }
	        }
	        return maxDeptThisLevel;
	    };
	    BalancedColumnTreeBuilder.prototype.recursivelyCreateColumns = function (abstractColDefs, level, columnKeyCreator, primaryColumns) {
	        var _this = this;
	        var result = [];
	        if (!abstractColDefs) {
	            return result;
	        }
	        abstractColDefs.forEach(function (abstractColDef) {
	            var newGroupOrColumn;
	            if (_this.isColumnGroup(abstractColDef)) {
	                newGroupOrColumn = _this.createColumnGroup(columnKeyCreator, primaryColumns, abstractColDef, level);
	            }
	            else {
	                newGroupOrColumn = _this.createColumn(columnKeyCreator, primaryColumns, abstractColDef);
	            }
	            result.push(newGroupOrColumn);
	        });
	        return result;
	    };
	    BalancedColumnTreeBuilder.prototype.createColumnGroup = function (columnKeyCreator, primaryColumns, colGroupDef, level) {
	        var colGroupDefMerged = this.createMergedColGroupDef(colGroupDef);
	        var groupId = columnKeyCreator.getUniqueKey(colGroupDefMerged.groupId, null);
	        var originalGroup = new originalColumnGroup_1.OriginalColumnGroup(colGroupDefMerged, groupId, false);
	        this.context.wireBean(originalGroup);
	        var children = this.recursivelyCreateColumns(colGroupDefMerged.children, level + 1, columnKeyCreator, primaryColumns);
	        originalGroup.setChildren(children);
	        return originalGroup;
	    };
	    BalancedColumnTreeBuilder.prototype.createMergedColGroupDef = function (colGroupDef) {
	        var colGroupDefMerged = {};
	        utils_1.Utils.assign(colGroupDefMerged, this.gridOptionsWrapper.getDefaultColGroupDef());
	        utils_1.Utils.assign(colGroupDefMerged, colGroupDef);
	        this.checkForDeprecatedItems(colGroupDefMerged);
	        return colGroupDefMerged;
	    };
	    BalancedColumnTreeBuilder.prototype.createColumn = function (columnKeyCreator, primaryColumns, colDef) {
	        var colDefMerged = {};
	        utils_1.Utils.assign(colDefMerged, this.gridOptionsWrapper.getDefaultColDef());
	        if (colDef.type) {
	            this.assignColumnTypes(colDef, colDefMerged);
	        }
	        utils_1.Utils.assign(colDefMerged, colDef);
	        this.checkForDeprecatedItems(colDefMerged);
	        var colId = columnKeyCreator.getUniqueKey(colDefMerged.colId, colDefMerged.field);
	        var column = new column_1.Column(colDefMerged, colId, primaryColumns);
	        this.context.wireBean(column);
	        return column;
	    };
	    BalancedColumnTreeBuilder.prototype.assignColumnTypes = function (colDef, colDefMerged) {
	        var _this = this;
	        var typeKeys;
	        if (colDef.type instanceof Array) {
	            var invalidArray = colDef.type.some(function (a) { return typeof a !== 'string'; });
	            if (invalidArray) {
	                console.warn("ag-grid: if colDef.type is supplied an array it should be of type 'string[]'");
	            }
	            else {
	                typeKeys = colDef.type;
	            }
	        }
	        else if (typeof colDef.type === 'string') {
	            typeKeys = colDef.type.split(',');
	        }
	        else {
	            console.warn("ag-grid: colDef.type should be of type 'string' | 'string[]'");
	            return;
	        }
	        typeKeys.forEach(function (t) {
	            var typeColDef = _this.gridOptionsWrapper.getColumnTypes()[t.trim()];
	            if (typeColDef) {
	                utils_1.Utils.assign(colDefMerged, typeColDef);
	            }
	            else {
	                console.warn("ag-grid: colDef.type '" + t + "' does not correspond to defined gridOptions.columnTypes");
	            }
	        });
	    };
	    BalancedColumnTreeBuilder.prototype.checkForDeprecatedItems = function (colDef) {
	        if (colDef) {
	            var colDefNoType = colDef; // take out the type, so we can access attributes not defined in the type
	            if (colDefNoType.group !== undefined) {
	                console.warn('ag-grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3');
	            }
	            if (colDefNoType.headerGroup !== undefined) {
	                console.warn('ag-grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3');
	            }
	            if (colDefNoType.headerGroupShow !== undefined) {
	                console.warn('ag-grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3');
	            }
	            if (colDefNoType.suppressRowGroup !== undefined) {
	                console.warn('ag-grid: colDef.suppressRowGroup is deprecated, please use colDef.type instead');
	            }
	            if (colDefNoType.suppressAggregation !== undefined) {
	                console.warn('ag-grid: colDef.suppressAggregation is deprecated, please use colDef.type instead');
	            }
	            if (colDefNoType.suppressRowGroup || colDefNoType.suppressAggregation) {
	                console.warn('ag-grid: colDef.suppressAggregation and colDef.suppressRowGroup are deprecated, use allowRowGroup, allowPivot and allowValue instead');
	            }
	            if (colDefNoType.displayName) {
	                console.warn("ag-grid: Found displayName " + colDefNoType.displayName + ", please use headerName instead, displayName is deprecated.");
	                colDefNoType.headerName = colDefNoType.displayName;
	            }
	        }
	    };
	    // if object has children, we assume it's a group
	    BalancedColumnTreeBuilder.prototype.isColumnGroup = function (abstractColDef) {
	        return abstractColDef.children !== undefined;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], BalancedColumnTreeBuilder.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnUtils'),
	        __metadata("design:type", columnUtils_1.ColumnUtils)
	    ], BalancedColumnTreeBuilder.prototype, "columnUtils", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], BalancedColumnTreeBuilder.prototype, "context", void 0);
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], BalancedColumnTreeBuilder.prototype, "setBeans", null);
	    BalancedColumnTreeBuilder = __decorate([
	        context_1.Bean('balancedColumnTreeBuilder')
	    ], BalancedColumnTreeBuilder);
	    return BalancedColumnTreeBuilder;
	}());
	exports.BalancedColumnTreeBuilder = BalancedColumnTreeBuilder;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var eventService_1 = __webpack_require__(5);
	var constants_1 = __webpack_require__(9);
	var componentUtil_1 = __webpack_require__(10);
	var gridApi_1 = __webpack_require__(12);
	var context_1 = __webpack_require__(7);
	var columnController_1 = __webpack_require__(15);
	var utils_1 = __webpack_require__(8);
	var defaultColumnTypes_1 = __webpack_require__(108);
	var environment_1 = __webpack_require__(91);
	var DEFAULT_ROW_HEIGHT = 25;
	var DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE = 5;
	var DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE = 5;
	function isTrue(value) {
	    return value === true || value === 'true';
	}
	function zeroOrGreater(value, defaultValue) {
	    if (value >= 0) {
	        return value;
	    }
	    else {
	        // zero gets returned if number is missing or the wrong type
	        return defaultValue;
	    }
	}
	function oneOrGreater(value, defaultValue) {
	    if (value > 0) {
	        return value;
	    }
	    else {
	        // zero gets returned if number is missing or the wrong type
	        return defaultValue;
	    }
	}
	var GridOptionsWrapper = (function () {
	    function GridOptionsWrapper() {
	        this.propertyEventService = new eventService_1.EventService();
	        this.domDataKey = '__AG_' + Math.random().toString();
	    }
	    GridOptionsWrapper_1 = GridOptionsWrapper;
	    GridOptionsWrapper.prototype.agWire = function (gridApi, columnApi) {
	        this.gridOptions.api = gridApi;
	        this.gridOptions.columnApi = columnApi;
	        this.checkForDeprecated();
	    };
	    GridOptionsWrapper.prototype.destroy = function () {
	        // need to remove these, as we don't own the lifecycle of the gridOptions, we need to
	        // remove the references in case the user keeps the grid options, we want the rest
	        // of the grid to be picked up by the garbage collector
	        this.gridOptions.api = null;
	        this.gridOptions.columnApi = null;
	    };
	    GridOptionsWrapper.prototype.init = function () {
	        var async = this.useAsyncEvents();
	        this.eventService.addGlobalListener(this.globalEventHandler.bind(this), async);
	        if (this.isGroupSelectsChildren() && this.isSuppressParentsInRowNodes()) {
	            console.warn('ag-Grid: groupSelectsChildren does not work wth suppressParentsInRowNodes, this selection method needs the part in rowNode to work');
	        }
	        if (this.isGroupSelectsChildren()) {
	            if (!this.isRowSelectionMulti()) {
	                console.warn('ag-Grid: rowSelectionMulti must be true for groupSelectsChildren to make sense');
	            }
	            if (this.isRowModelEnterprise()) {
	                console.warn('ag-Grid: group selects children is NOT support for Enterprise Row Model. ' +
	                    'This is because the rows are lazy loaded, so selecting a group is not possible as' +
	                    'the grid has no way of knowing what the children are.');
	            }
	        }
	        if (this.isGroupRemoveSingleChildren() && this.isGroupHideOpenParents()) {
	            console.warn('ag-Grid: groupRemoveSingleChildren and groupHideOpenParents do not work with each other, you need to pick one. And don\'t ask us how to us these together on our support forum either you will get the same answer!');
	        }
	    };
	    // returns the dom data, or undefined if not found
	    GridOptionsWrapper.prototype.getDomData = function (element, key) {
	        var domData = element[this.domDataKey];
	        if (domData) {
	            return domData[key];
	        }
	        else {
	            return undefined;
	        }
	    };
	    GridOptionsWrapper.prototype.setDomData = function (element, key, value) {
	        var domData = element[this.domDataKey];
	        if (utils_1.Utils.missing(domData)) {
	            domData = {};
	            element[this.domDataKey] = domData;
	        }
	        domData[key] = value;
	    };
	    GridOptionsWrapper.prototype.isEnterprise = function () { return this.enterprise; };
	    GridOptionsWrapper.prototype.isRowSelection = function () { return this.gridOptions.rowSelection === "single" || this.gridOptions.rowSelection === "multiple"; };
	    GridOptionsWrapper.prototype.isRowDeselection = function () { return isTrue(this.gridOptions.rowDeselection); };
	    GridOptionsWrapper.prototype.isRowSelectionMulti = function () { return this.gridOptions.rowSelection === 'multiple'; };
	    GridOptionsWrapper.prototype.getContext = function () { return this.gridOptions.context; };
	    GridOptionsWrapper.prototype.isPivotMode = function () { return isTrue(this.gridOptions.pivotMode); };
	    GridOptionsWrapper.prototype.isPivotTotals = function () { return isTrue(this.gridOptions.pivotTotals); };
	    GridOptionsWrapper.prototype.isRowModelInfinite = function () { return this.gridOptions.rowModelType === constants_1.Constants.ROW_MODEL_TYPE_INFINITE; };
	    GridOptionsWrapper.prototype.isRowModelViewport = function () { return this.gridOptions.rowModelType === constants_1.Constants.ROW_MODEL_TYPE_VIEWPORT; };
	    GridOptionsWrapper.prototype.isRowModelEnterprise = function () { return this.gridOptions.rowModelType === constants_1.Constants.ROW_MODEL_TYPE_ENTERPRISE; };
	    GridOptionsWrapper.prototype.isRowModelDefault = function () {
	        return utils_1.Utils.missing(this.gridOptions.rowModelType) ||
	            this.gridOptions.rowModelType === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY ||
	            this.gridOptions.rowModelType === constants_1.Constants.DEPRECATED_ROW_MODEL_TYPE_NORMAL;
	    };
	    GridOptionsWrapper.prototype.isFullRowEdit = function () { return this.gridOptions.editType === 'fullRow'; };
	    GridOptionsWrapper.prototype.isSuppressFocusAfterRefresh = function () { return isTrue(this.gridOptions.suppressFocusAfterRefresh); };
	    GridOptionsWrapper.prototype.isShowToolPanel = function () { return isTrue(this.gridOptions.showToolPanel); };
	    GridOptionsWrapper.prototype.isToolPanelSuppressRowGroups = function () { return isTrue(this.gridOptions.toolPanelSuppressRowGroups); };
	    GridOptionsWrapper.prototype.isToolPanelSuppressValues = function () { return isTrue(this.gridOptions.toolPanelSuppressValues); };
	    GridOptionsWrapper.prototype.isToolPanelSuppressPivots = function () { return isTrue(this.gridOptions.toolPanelSuppressPivots); };
	    GridOptionsWrapper.prototype.isToolPanelSuppressPivotMode = function () { return isTrue(this.gridOptions.toolPanelSuppressPivotMode); };
	    GridOptionsWrapper.prototype.isSuppressTouch = function () { return isTrue(this.gridOptions.suppressTouch); };
	    GridOptionsWrapper.prototype.useAsyncEvents = function () { return !isTrue(this.gridOptions.suppressAsyncEvents); };
	    GridOptionsWrapper.prototype.isEnableCellChangeFlash = function () { return isTrue(this.gridOptions.enableCellChangeFlash); };
	    GridOptionsWrapper.prototype.isGroupSelectsChildren = function () { return isTrue(this.gridOptions.groupSelectsChildren); };
	    GridOptionsWrapper.prototype.isGroupSelectsFiltered = function () { return isTrue(this.gridOptions.groupSelectsFiltered); };
	    GridOptionsWrapper.prototype.isGroupHideOpenParents = function () { return isTrue(this.gridOptions.groupHideOpenParents); };
	    // if we are doing hideOpenParents, then we always have groupMultiAutoColumn, otherwise hideOpenParents would not work
	    GridOptionsWrapper.prototype.isGroupMultiAutoColumn = function () { return isTrue(this.gridOptions.groupMultiAutoColumn) || isTrue(this.gridOptions.groupHideOpenParents); };
	    GridOptionsWrapper.prototype.isGroupRemoveSingleChildren = function () { return isTrue(this.gridOptions.groupRemoveSingleChildren); };
	    GridOptionsWrapper.prototype.isGroupIncludeFooter = function () { return isTrue(this.gridOptions.groupIncludeFooter); };
	    GridOptionsWrapper.prototype.isGroupSuppressBlankHeader = function () { return isTrue(this.gridOptions.groupSuppressBlankHeader); };
	    GridOptionsWrapper.prototype.isSuppressRowClickSelection = function () { return isTrue(this.gridOptions.suppressRowClickSelection); };
	    GridOptionsWrapper.prototype.isSuppressCellSelection = function () { return isTrue(this.gridOptions.suppressCellSelection); };
	    GridOptionsWrapper.prototype.isSuppressMultiSort = function () { return isTrue(this.gridOptions.suppressMultiSort); };
	    GridOptionsWrapper.prototype.isGroupSuppressAutoColumn = function () { return isTrue(this.gridOptions.groupSuppressAutoColumn); };
	    GridOptionsWrapper.prototype.isSuppressDragLeaveHidesColumns = function () { return isTrue(this.gridOptions.suppressDragLeaveHidesColumns); };
	    GridOptionsWrapper.prototype.isSuppressScrollOnNewData = function () { return isTrue(this.gridOptions.suppressScrollOnNewData); };
	    GridOptionsWrapper.prototype.isForPrint = function () { return this.gridOptions.domLayout === 'forPrint'; };
	    GridOptionsWrapper.prototype.isAutoHeight = function () { return this.gridOptions.domLayout === 'autoHeight'; };
	    GridOptionsWrapper.prototype.isSuppressHorizontalScroll = function () { return isTrue(this.gridOptions.suppressHorizontalScroll); };
	    GridOptionsWrapper.prototype.isSuppressLoadingOverlay = function () { return isTrue(this.gridOptions.suppressLoadingOverlay); };
	    GridOptionsWrapper.prototype.isSuppressNoRowsOverlay = function () { return isTrue(this.gridOptions.suppressNoRowsOverlay); };
	    GridOptionsWrapper.prototype.isSuppressFieldDotNotation = function () { return isTrue(this.gridOptions.suppressFieldDotNotation); };
	    GridOptionsWrapper.prototype.getPinnedTopRowData = function () { return this.gridOptions.pinnedTopRowData; };
	    GridOptionsWrapper.prototype.getPinnedBottomRowData = function () { return this.gridOptions.pinnedBottomRowData; };
	    GridOptionsWrapper.prototype.isFunctionsPassive = function () { return isTrue(this.gridOptions.functionsPassive); };
	    GridOptionsWrapper.prototype.isSuppressTabbing = function () { return isTrue(this.gridOptions.suppressTabbing); };
	    GridOptionsWrapper.prototype.isSuppressChangeDetection = function () { return isTrue(this.gridOptions.suppressChangeDetection); };
	    GridOptionsWrapper.prototype.isSuppressAnimationFrame = function () { return isTrue(this.gridOptions.suppressAnimationFrame); };
	    GridOptionsWrapper.prototype.getQuickFilterText = function () { return this.gridOptions.quickFilterText; };
	    GridOptionsWrapper.prototype.isCacheQuickFilter = function () { return isTrue(this.gridOptions.cacheQuickFilter); };
	    GridOptionsWrapper.prototype.isUnSortIcon = function () { return isTrue(this.gridOptions.unSortIcon); };
	    GridOptionsWrapper.prototype.isSuppressMenuHide = function () { return isTrue(this.gridOptions.suppressMenuHide); };
	    GridOptionsWrapper.prototype.getRowStyle = function () { return this.gridOptions.rowStyle; };
	    GridOptionsWrapper.prototype.getRowClass = function () { return this.gridOptions.rowClass; };
	    GridOptionsWrapper.prototype.getRowStyleFunc = function () { return this.gridOptions.getRowStyle; };
	    GridOptionsWrapper.prototype.getRowClassFunc = function () { return this.gridOptions.getRowClass; };
	    GridOptionsWrapper.prototype.getPostProcessPopupFunc = function () { return this.gridOptions.postProcessPopup; };
	    GridOptionsWrapper.prototype.getDoesDataFlowerFunc = function () { return this.gridOptions.doesDataFlower; };
	    GridOptionsWrapper.prototype.getPaginationNumberFormatterFunc = function () { return this.gridOptions.paginationNumberFormatter; };
	    GridOptionsWrapper.prototype.getChildCountFunc = function () { return this.gridOptions.getChildCount; };
	    GridOptionsWrapper.prototype.getIsFullWidthCellFunc = function () { return this.gridOptions.isFullWidthCell; };
	    GridOptionsWrapper.prototype.getFullWidthCellRendererParams = function () { return this.gridOptions.fullWidthCellRendererParams; };
	    GridOptionsWrapper.prototype.isEmbedFullWidthRows = function () {
	        // if autoHeight, we always embed fullWidth rows, otherwise we let the user decide
	        return this.isAutoHeight() || isTrue(this.gridOptions.embedFullWidthRows);
	    };
	    GridOptionsWrapper.prototype.getBusinessKeyForNodeFunc = function () { return this.gridOptions.getBusinessKeyForNode; };
	    GridOptionsWrapper.prototype.getHeaderCellRenderer = function () { return this.gridOptions.headerCellRenderer; };
	    GridOptionsWrapper.prototype.getApi = function () { return this.gridOptions.api; };
	    GridOptionsWrapper.prototype.getColumnApi = function () { return this.gridOptions.columnApi; };
	    GridOptionsWrapper.prototype.isDeltaRowDataMode = function () { return isTrue(this.gridOptions.deltaRowDataMode); };
	    GridOptionsWrapper.prototype.isEnsureDomOrder = function () { return isTrue(this.gridOptions.ensureDomOrder); };
	    GridOptionsWrapper.prototype.isEnableColResize = function () { return isTrue(this.gridOptions.enableColResize); };
	    GridOptionsWrapper.prototype.isSingleClickEdit = function () { return isTrue(this.gridOptions.singleClickEdit); };
	    GridOptionsWrapper.prototype.isSuppressClickEdit = function () { return isTrue(this.gridOptions.suppressClickEdit); };
	    GridOptionsWrapper.prototype.isStopEditingWhenGridLosesFocus = function () { return isTrue(this.gridOptions.stopEditingWhenGridLosesFocus); };
	    GridOptionsWrapper.prototype.getGroupDefaultExpanded = function () { return this.gridOptions.groupDefaultExpanded; };
	    GridOptionsWrapper.prototype.getAutoSizePadding = function () { return this.gridOptions.autoSizePadding; };
	    GridOptionsWrapper.prototype.getMaxConcurrentDatasourceRequests = function () { return this.gridOptions.maxConcurrentDatasourceRequests; };
	    GridOptionsWrapper.prototype.getMaxBlocksInCache = function () { return this.gridOptions.maxBlocksInCache; };
	    GridOptionsWrapper.prototype.getCacheOverflowSize = function () { return this.gridOptions.cacheOverflowSize; };
	    GridOptionsWrapper.prototype.getPaginationPageSize = function () { return this.gridOptions.paginationPageSize; };
	    GridOptionsWrapper.prototype.getCacheBlockSize = function () { return this.gridOptions.cacheBlockSize; };
	    GridOptionsWrapper.prototype.getInfiniteInitialRowCount = function () { return this.gridOptions.infiniteInitialRowCount; };
	    GridOptionsWrapper.prototype.isPurgeClosedRowNodes = function () { return isTrue(this.gridOptions.purgeClosedRowNodes); };
	    GridOptionsWrapper.prototype.isSuppressPaginationPanel = function () { return isTrue(this.gridOptions.suppressPaginationPanel); };
	    GridOptionsWrapper.prototype.getRowData = function () { return this.gridOptions.rowData; };
	    GridOptionsWrapper.prototype.isGroupUseEntireRow = function () { return isTrue(this.gridOptions.groupUseEntireRow); };
	    GridOptionsWrapper.prototype.isEnableRtl = function () { return isTrue(this.gridOptions.enableRtl); };
	    GridOptionsWrapper.prototype.getAutoGroupColumnDef = function () { return this.gridOptions.autoGroupColumnDef; };
	    GridOptionsWrapper.prototype.isGroupSuppressRow = function () { return isTrue(this.gridOptions.groupSuppressRow); };
	    GridOptionsWrapper.prototype.getRowGroupPanelShow = function () { return this.gridOptions.rowGroupPanelShow; };
	    GridOptionsWrapper.prototype.getPivotPanelShow = function () { return this.gridOptions.pivotPanelShow; };
	    GridOptionsWrapper.prototype.isAngularCompileRows = function () { return isTrue(this.gridOptions.angularCompileRows); };
	    GridOptionsWrapper.prototype.isAngularCompileFilters = function () { return isTrue(this.gridOptions.angularCompileFilters); };
	    GridOptionsWrapper.prototype.isAngularCompileHeaders = function () { return isTrue(this.gridOptions.angularCompileHeaders); };
	    GridOptionsWrapper.prototype.isDebug = function () { return isTrue(this.gridOptions.debug); };
	    GridOptionsWrapper.prototype.getColumnDefs = function () { return this.gridOptions.columnDefs; };
	    GridOptionsWrapper.prototype.getColumnTypes = function () { return utils_1.Utils.assign({}, this.gridOptions.columnTypes, defaultColumnTypes_1.DefaultColumnTypes); };
	    GridOptionsWrapper.prototype.getDatasource = function () { return this.gridOptions.datasource; };
	    GridOptionsWrapper.prototype.getViewportDatasource = function () { return this.gridOptions.viewportDatasource; };
	    GridOptionsWrapper.prototype.getEnterpriseDatasource = function () { return this.gridOptions.enterpriseDatasource; };
	    GridOptionsWrapper.prototype.isEnableSorting = function () { return isTrue(this.gridOptions.enableSorting) || isTrue(this.gridOptions.enableServerSideSorting); };
	    GridOptionsWrapper.prototype.isAccentedSort = function () { return isTrue(this.gridOptions.accentedSort); };
	    GridOptionsWrapper.prototype.isEnableCellExpressions = function () { return isTrue(this.gridOptions.enableCellExpressions); };
	    GridOptionsWrapper.prototype.isEnableGroupEdit = function () { return isTrue(this.gridOptions.enableGroupEdit); };
	    GridOptionsWrapper.prototype.isSuppressMiddleClickScrolls = function () { return isTrue(this.gridOptions.suppressMiddleClickScrolls); };
	    GridOptionsWrapper.prototype.isSuppressPreventDefaultOnMouseWheel = function () { return isTrue(this.gridOptions.suppressPreventDefaultOnMouseWheel); };
	    GridOptionsWrapper.prototype.isSuppressColumnVirtualisation = function () { return isTrue(this.gridOptions.suppressColumnVirtualisation); };
	    GridOptionsWrapper.prototype.isSuppressContextMenu = function () { return isTrue(this.gridOptions.suppressContextMenu); };
	    GridOptionsWrapper.prototype.isAllowContextMenuWithControlKey = function () { return isTrue(this.gridOptions.allowContextMenuWithControlKey); };
	    GridOptionsWrapper.prototype.isSuppressCopyRowsToClipboard = function () { return isTrue(this.gridOptions.suppressCopyRowsToClipboard); };
	    GridOptionsWrapper.prototype.isEnableFilter = function () { return isTrue(this.gridOptions.enableFilter) || isTrue(this.gridOptions.enableServerSideFilter); };
	    GridOptionsWrapper.prototype.isPagination = function () { return isTrue(this.gridOptions.pagination); };
	    // these are deprecated, should remove them when we take out server side pagination
	    GridOptionsWrapper.prototype.isEnableServerSideFilter = function () { return this.gridOptions.enableServerSideFilter; };
	    GridOptionsWrapper.prototype.isEnableServerSideSorting = function () { return isTrue(this.gridOptions.enableServerSideSorting); };
	    GridOptionsWrapper.prototype.isSuppressMovableColumns = function () { return isTrue(this.gridOptions.suppressMovableColumns); };
	    GridOptionsWrapper.prototype.isAnimateRows = function () {
	        // never allow animating if enforcing the row order
	        if (this.isEnsureDomOrder()) {
	            return false;
	        }
	        return isTrue(this.gridOptions.animateRows);
	    };
	    GridOptionsWrapper.prototype.isSuppressColumnMoveAnimation = function () { return isTrue(this.gridOptions.suppressColumnMoveAnimation); };
	    GridOptionsWrapper.prototype.isSuppressAggFuncInHeader = function () { return isTrue(this.gridOptions.suppressAggFuncInHeader); };
	    GridOptionsWrapper.prototype.isSuppressAggAtRootLevel = function () { return isTrue(this.gridOptions.suppressAggAtRootLevel); };
	    GridOptionsWrapper.prototype.isEnableRangeSelection = function () { return isTrue(this.gridOptions.enableRangeSelection); };
	    GridOptionsWrapper.prototype.isPaginationAutoPageSize = function () { return isTrue(this.gridOptions.paginationAutoPageSize); };
	    GridOptionsWrapper.prototype.isRememberGroupStateWhenNewData = function () { return isTrue(this.gridOptions.rememberGroupStateWhenNewData); };
	    GridOptionsWrapper.prototype.getIcons = function () { return this.gridOptions.icons; };
	    GridOptionsWrapper.prototype.getAggFuncs = function () { return this.gridOptions.aggFuncs; };
	    GridOptionsWrapper.prototype.getSortingOrder = function () { return this.gridOptions.sortingOrder; };
	    GridOptionsWrapper.prototype.getAlignedGrids = function () { return this.gridOptions.alignedGrids; };
	    GridOptionsWrapper.prototype.getGroupRowRendererParams = function () { return this.gridOptions.groupRowRendererParams; };
	    GridOptionsWrapper.prototype.getOverlayLoadingTemplate = function () { return this.gridOptions.overlayLoadingTemplate; };
	    GridOptionsWrapper.prototype.getOverlayNoRowsTemplate = function () { return this.gridOptions.overlayNoRowsTemplate; };
	    GridOptionsWrapper.prototype.isSuppressAutoSize = function () { return isTrue(this.gridOptions.suppressAutoSize); };
	    GridOptionsWrapper.prototype.isSuppressParentsInRowNodes = function () { return isTrue(this.gridOptions.suppressParentsInRowNodes); };
	    GridOptionsWrapper.prototype.isEnableStatusBar = function () { return isTrue(this.gridOptions.enableStatusBar); };
	    GridOptionsWrapper.prototype.isAlwaysShowStatusBar = function () { return isTrue(this.gridOptions.alwaysShowStatusBar); };
	    GridOptionsWrapper.prototype.isFunctionsReadOnly = function () { return isTrue(this.gridOptions.functionsReadOnly); };
	    GridOptionsWrapper.prototype.isFloatingFilter = function () { return this.gridOptions.floatingFilter; };
	    // public isFloatingFilter(): boolean { return true; }
	    GridOptionsWrapper.prototype.getDefaultColDef = function () { return this.gridOptions.defaultColDef; };
	    GridOptionsWrapper.prototype.getDefaultColGroupDef = function () { return this.gridOptions.defaultColGroupDef; };
	    GridOptionsWrapper.prototype.getDefaultExportParams = function () { return this.gridOptions.defaultExportParams; };
	    GridOptionsWrapper.prototype.isSuppressCsvExport = function () { return isTrue(this.gridOptions.suppressCsvExport); };
	    GridOptionsWrapper.prototype.isSuppressExcelExport = function () { return isTrue(this.gridOptions.suppressExcelExport); };
	    GridOptionsWrapper.prototype.getHeaderCellTemplate = function () { return this.gridOptions.headerCellTemplate; };
	    GridOptionsWrapper.prototype.getHeaderCellTemplateFunc = function () { return this.gridOptions.getHeaderCellTemplate; };
	    GridOptionsWrapper.prototype.getNodeChildDetailsFunc = function () { return this.gridOptions.getNodeChildDetails; };
	    GridOptionsWrapper.prototype.getGroupRowAggNodesFunc = function () { return this.gridOptions.groupRowAggNodes; };
	    GridOptionsWrapper.prototype.getContextMenuItemsFunc = function () { return this.gridOptions.getContextMenuItems; };
	    GridOptionsWrapper.prototype.getMainMenuItemsFunc = function () { return this.gridOptions.getMainMenuItems; };
	    GridOptionsWrapper.prototype.getRowNodeIdFunc = function () { return this.gridOptions.getRowNodeId; };
	    GridOptionsWrapper.prototype.getNavigateToNextCellFunc = function () { return this.gridOptions.navigateToNextCell; };
	    GridOptionsWrapper.prototype.getTabToNextCellFunc = function () { return this.gridOptions.tabToNextCell; };
	    GridOptionsWrapper.prototype.isValueCache = function () { return isTrue(this.gridOptions.valueCache); };
	    GridOptionsWrapper.prototype.isValueCacheNeverExpires = function () { return isTrue(this.gridOptions.valueCacheNeverExpires); };
	    GridOptionsWrapper.prototype.isAggregateOnlyChangedColumns = function () { return isTrue(this.gridOptions.aggregateOnlyChangedColumns); };
	    GridOptionsWrapper.prototype.getProcessSecondaryColDefFunc = function () { return this.gridOptions.processSecondaryColDef; };
	    GridOptionsWrapper.prototype.getProcessSecondaryColGroupDefFunc = function () { return this.gridOptions.processSecondaryColGroupDef; };
	    GridOptionsWrapper.prototype.getSendToClipboardFunc = function () { return this.gridOptions.sendToClipboard; };
	    GridOptionsWrapper.prototype.getProcessRowPostCreateFunc = function () { return this.gridOptions.processRowPostCreate; };
	    GridOptionsWrapper.prototype.getProcessCellForClipboardFunc = function () { return this.gridOptions.processCellForClipboard; };
	    GridOptionsWrapper.prototype.getProcessCellFromClipboardFunc = function () { return this.gridOptions.processCellFromClipboard; };
	    GridOptionsWrapper.prototype.getViewportRowModelPageSize = function () { return oneOrGreater(this.gridOptions.viewportRowModelPageSize, DEFAULT_VIEWPORT_ROW_MODEL_PAGE_SIZE); };
	    GridOptionsWrapper.prototype.getViewportRowModelBufferSize = function () { return zeroOrGreater(this.gridOptions.viewportRowModelBufferSize, DEFAULT_VIEWPORT_ROW_MODEL_BUFFER_SIZE); };
	    // public getCellRenderers(): {[key: string]: {new(): ICellRenderer} | ICellRendererFunc} { return this.gridOptions.cellRenderers; }
	    // public getCellEditors(): {[key: string]: {new(): ICellEditor}} { return this.gridOptions.cellEditors; }
	    GridOptionsWrapper.prototype.getClipboardDeliminator = function () {
	        return utils_1.Utils.exists(this.gridOptions.clipboardDeliminator) ? this.gridOptions.clipboardDeliminator : '\t';
	    };
	    GridOptionsWrapper.prototype.setProperty = function (key, value) {
	        var gridOptionsNoType = this.gridOptions;
	        var previousValue = gridOptionsNoType[key];
	        if (previousValue !== value) {
	            gridOptionsNoType[key] = value;
	            var event_1 = {
	                type: key,
	                currentValue: value,
	                previousValue: previousValue
	            };
	            this.propertyEventService.dispatchEvent(event_1);
	        }
	    };
	    GridOptionsWrapper.prototype.addEventListener = function (key, listener) {
	        this.propertyEventService.addEventListener(key, listener);
	    };
	    GridOptionsWrapper.prototype.removeEventListener = function (key, listener) {
	        this.propertyEventService.removeEventListener(key, listener);
	    };
	    // properties
	    GridOptionsWrapper.prototype.getHeaderHeight = function () {
	        if (typeof this.gridOptions.headerHeight === 'number') {
	            return this.gridOptions.headerHeight;
	        }
	        else {
	            return this.specialForNewMaterial(25, 8 * 7);
	        }
	    };
	    GridOptionsWrapper.prototype.getFloatingFiltersHeight = function () {
	        if (typeof this.gridOptions.floatingFiltersHeight === 'number') {
	            return this.gridOptions.floatingFiltersHeight;
	        }
	        else {
	            return this.specialForNewMaterial(25, 8 * 7);
	        }
	    };
	    GridOptionsWrapper.prototype.getGroupPaddingSize = function () {
	        return this.specialForNewMaterial(10, 18 + 8 * 3);
	    };
	    GridOptionsWrapper.prototype.getFooterPaddingAddition = function () {
	        return this.specialForNewMaterial(15, 32);
	    };
	    GridOptionsWrapper.prototype.getLeafNodePaddingAddition = function () {
	        return this.specialForNewMaterial(10, 24);
	    };
	    GridOptionsWrapper.prototype.getGroupHeaderHeight = function () {
	        if (typeof this.gridOptions.groupHeaderHeight === 'number') {
	            return this.gridOptions.groupHeaderHeight;
	        }
	        else {
	            return this.getHeaderHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.getPivotHeaderHeight = function () {
	        if (typeof this.gridOptions.pivotHeaderHeight === 'number') {
	            return this.gridOptions.pivotHeaderHeight;
	        }
	        else {
	            return this.getHeaderHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.getPivotGroupHeaderHeight = function () {
	        if (typeof this.gridOptions.pivotGroupHeaderHeight === 'number') {
	            return this.gridOptions.pivotGroupHeaderHeight;
	        }
	        else {
	            return this.getGroupHeaderHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.isExternalFilterPresent = function () {
	        if (typeof this.gridOptions.isExternalFilterPresent === 'function') {
	            return this.gridOptions.isExternalFilterPresent();
	        }
	        else {
	            return false;
	        }
	    };
	    GridOptionsWrapper.prototype.doesExternalFilterPass = function (node) {
	        if (typeof this.gridOptions.doesExternalFilterPass === 'function') {
	            return this.gridOptions.doesExternalFilterPass(node);
	        }
	        else {
	            return false;
	        }
	    };
	    GridOptionsWrapper.prototype.getDocument = function () {
	        // if user is providing document, we use the users one,
	        // otherwise we use the document on the global namespace.
	        var result;
	        if (utils_1.Utils.exists(this.gridOptions.getDocument)) {
	            result = this.gridOptions.getDocument();
	        }
	        if (utils_1.Utils.exists(result)) {
	            return result;
	        }
	        else {
	            return document;
	        }
	    };
	    GridOptionsWrapper.prototype.getLayoutInterval = function () {
	        if (typeof this.gridOptions.layoutInterval === 'number') {
	            return this.gridOptions.layoutInterval;
	        }
	        else {
	            return constants_1.Constants.LAYOUT_INTERVAL;
	        }
	    };
	    GridOptionsWrapper.prototype.getMinColWidth = function () {
	        if (this.gridOptions.minColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
	            return this.gridOptions.minColWidth;
	        }
	        else {
	            return GridOptionsWrapper_1.MIN_COL_WIDTH;
	        }
	    };
	    GridOptionsWrapper.prototype.getMaxColWidth = function () {
	        if (this.gridOptions.maxColWidth > GridOptionsWrapper_1.MIN_COL_WIDTH) {
	            return this.gridOptions.maxColWidth;
	        }
	        else {
	            return null;
	        }
	    };
	    GridOptionsWrapper.prototype.getColWidth = function () {
	        if (typeof this.gridOptions.colWidth !== 'number' || this.gridOptions.colWidth < GridOptionsWrapper_1.MIN_COL_WIDTH) {
	            return 200;
	        }
	        else {
	            return this.gridOptions.colWidth;
	        }
	    };
	    GridOptionsWrapper.prototype.getRowBuffer = function () {
	        if (typeof this.gridOptions.rowBuffer === 'number') {
	            if (this.gridOptions.rowBuffer < 0) {
	                console.warn('ag-Grid: rowBuffer should not be negative');
	            }
	            return this.gridOptions.rowBuffer;
	        }
	        else {
	            return constants_1.Constants.ROW_BUFFER_SIZE;
	        }
	    };
	    // the user might be using some non-standard scrollbar, eg a scrollbar that has zero
	    // width and overlays (like the Safari scrollbar, but presented in Chrome). so we
	    // allow the user to provide the scroll width before we work it out.
	    GridOptionsWrapper.prototype.getScrollbarWidth = function () {
	        var scrollbarWidth = this.gridOptions.scrollbarWidth;
	        if (typeof scrollbarWidth !== 'number' || scrollbarWidth < 0) {
	            scrollbarWidth = utils_1.Utils.getScrollbarWidth();
	        }
	        return scrollbarWidth;
	    };
	    GridOptionsWrapper.prototype.checkForDeprecated = function () {
	        // casting to generic object, so typescript compiles even though
	        // we are looking for attributes that don't exist
	        var options = this.gridOptions;
	        if (options.suppressUnSort) {
	            console.warn('ag-grid: as of v1.12.4 suppressUnSort is not used. Please use sortOrder instead.');
	        }
	        if (options.suppressDescSort) {
	            console.warn('ag-grid: as of v1.12.4 suppressDescSort is not used. Please use sortOrder instead.');
	        }
	        if (options.groupAggFields) {
	            console.warn('ag-grid: as of v3 groupAggFields is not used. Please add appropriate agg fields to your columns.');
	        }
	        if (options.groupHidePivotColumns) {
	            console.warn('ag-grid: as of v3 groupHidePivotColumns is not used as pivot columns are now called rowGroup columns. Please refer to the documentation');
	        }
	        if (options.groupKeys) {
	            console.warn('ag-grid: as of v3 groupKeys is not used. You need to set rowGroupIndex on the columns to group. Please refer to the documentation');
	        }
	        if (typeof options.groupDefaultExpanded === 'boolean') {
	            console.warn('ag-grid: groupDefaultExpanded can no longer be boolean. for groupDefaultExpanded=true, use groupDefaultExpanded=9999 instead, to expand all the groups');
	        }
	        if (options.onRowDeselected || options.rowDeselected) {
	            console.warn('ag-grid: since version 3.4 event rowDeselected no longer exists, please check the docs');
	        }
	        if (options.rowsAlreadyGrouped) {
	            console.warn('ag-grid: since version 3.4 rowsAlreadyGrouped no longer exists, please use getNodeChildDetails() instead');
	        }
	        if (options.groupAggFunction) {
	            console.warn('ag-grid: since version 4.3.x groupAggFunction is now called groupRowAggNodes');
	        }
	        if (options.checkboxSelection) {
	            console.warn('ag-grid: since version 8.0.x checkboxSelection is not supported as a grid option. ' +
	                'If you want this on all columns, use defaultColDef instead and set it there');
	        }
	        if (options.paginationInitialRowCount) {
	            console.warn('ag-grid: since version 9.0.x paginationInitialRowCount is now called infiniteInitialRowCount');
	        }
	        if (options.infinitePageSize) {
	            console.warn('ag-grid: since version 9.0.x infinitePageSize is now called cacheBlockSize');
	        }
	        if (options.infiniteBlockSize) {
	            console.warn('ag-grid: since version 10.0.x infiniteBlockSize is now called cacheBlockSize');
	        }
	        if (options.maxPagesInCache) {
	            console.warn('ag-grid: since version 10.0.x maxPagesInCache is now called maxBlocksInCache');
	        }
	        if (options.paginationOverflowSize) {
	            console.warn('ag-grid: since version 10.0.x paginationOverflowSize is now called cacheOverflowSize');
	        }
	        if (options.forPrint) {
	            console.warn('ag-grid: since version 10.1.x, use property domLayout="forPrint" instead of forPrint=true');
	        }
	        if (options.suppressMenuFilterPanel) {
	            console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['generalMenuTab','columnsMenuTab'] instead of suppressMenuFilterPanel=true");
	        }
	        if (options.suppressMenuMainPanel) {
	            console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['filterMenuTab','columnsMenuTab'] instead of suppressMenuMainPanel=true");
	        }
	        if (options.suppressMenuColumnPanel) {
	            console.warn("ag-grid: since version 11.0.x, use property colDef.menuTabs=['generalMenuTab','filterMenuTab'] instead of suppressMenuColumnPanel=true");
	        }
	        if (options.suppressUseColIdForGroups) {
	            console.warn("ag-grid: since version 11.0.x, this is not in use anymore. You should be able to remove it from your definition");
	        }
	        if (options.groupColumnDef) {
	            console.warn("ag-grid: since version 11.0.x, groupColumnDef has been renamed, this property is now called autoGroupColumnDef. Please change your configuration accordingly");
	        }
	        if (options.slaveGrids) {
	            console.warn("ag-grid: since version 12.x, slaveGrids has been renamed, this property is now called alignedGrids. Please change your configuration accordingly");
	        }
	        if (options.floatingTopRowData) {
	            console.warn("ag-grid: since version 12.x, floatingTopRowData is now called pinnedTopRowData");
	        }
	        if (options.floatingBottomRowData) {
	            console.warn("ag-grid: since version 12.x, floatingBottomRowData is now called pinnedBottomRowData");
	        }
	        if (options.paginationStartPage) {
	            console.warn("ag-grid: since version 12.x, paginationStartPage is gone, please call api.paginationGoToPage(" + options.paginationStartPage + ") instead.");
	        }
	    };
	    GridOptionsWrapper.prototype.getLocaleTextFunc = function () {
	        if (this.gridOptions.localeTextFunc) {
	            return this.gridOptions.localeTextFunc;
	        }
	        var that = this;
	        return function (key, defaultValue) {
	            var localeText = that.gridOptions.localeText;
	            if (localeText && localeText[key]) {
	                return localeText[key];
	            }
	            else {
	                return defaultValue;
	            }
	        };
	    };
	    // responsible for calling the onXXX functions on gridOptions
	    GridOptionsWrapper.prototype.globalEventHandler = function (eventName, event) {
	        var callbackMethodName = componentUtil_1.ComponentUtil.getCallbackForEvent(eventName);
	        if (typeof this.gridOptions[callbackMethodName] === 'function') {
	            this.gridOptions[callbackMethodName](event);
	        }
	    };
	    // we don't allow dynamic row height for virtual paging
	    GridOptionsWrapper.prototype.getRowHeightAsNumber = function () {
	        var rowHeight = this.gridOptions.rowHeight;
	        if (utils_1.Utils.missing(rowHeight)) {
	            return this.getDefaultRowHeight();
	        }
	        else if (this.isNumeric(this.gridOptions.rowHeight)) {
	            return this.gridOptions.rowHeight;
	        }
	        else {
	            console.warn('ag-Grid row height must be a number if not using standard row model');
	            return this.getDefaultRowHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.getRowHeightForNode = function (rowNode) {
	        // check the function first, in case use set both function and
	        // number, when using virtual pagination then function can be
	        // used for pinned rows and the number for the body rows.
	        if (typeof this.gridOptions.getRowHeight === 'function') {
	            var params = {
	                node: rowNode,
	                data: rowNode.data,
	                api: this.gridOptions.api,
	                context: this.gridOptions.context
	            };
	            return this.gridOptions.getRowHeight(params);
	        }
	        else if (this.isNumeric(this.gridOptions.rowHeight)) {
	            return this.gridOptions.rowHeight;
	        }
	        else {
	            return this.getDefaultRowHeight();
	        }
	    };
	    GridOptionsWrapper.prototype.isDynamicRowHeight = function () {
	        return typeof this.gridOptions.getRowHeight === 'function';
	    };
	    GridOptionsWrapper.prototype.isNumeric = function (value) {
	        return !isNaN(value) && typeof value === 'number';
	    };
	    // Material data table has strict guidelines about whitespace, and these values are different than the ones 
	    // ag-grid uses by default. We override the default ones for the sake of making it better out of the box
	    GridOptionsWrapper.prototype.specialForNewMaterial = function (defaultValue, materialValue) {
	        if (this.environment.getTheme() == "ag-theme-material") {
	            return materialValue;
	        }
	        else {
	            return defaultValue;
	        }
	    };
	    GridOptionsWrapper.prototype.getDefaultRowHeight = function () {
	        return this.specialForNewMaterial(DEFAULT_ROW_HEIGHT, 8 * 6);
	    };
	    GridOptionsWrapper.MIN_COL_WIDTH = 10;
	    GridOptionsWrapper.PROP_HEADER_HEIGHT = 'headerHeight';
	    GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN = 'groupRemoveSingleChildren';
	    GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT = 'pivotHeaderHeight';
	    GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT = 'groupHeaderHeight';
	    GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT = 'pivotGroupHeaderHeight';
	    GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT = 'floatingFiltersHeight';
	    __decorate([
	        context_1.Autowired('gridOptions'),
	        __metadata("design:type", Object)
	    ], GridOptionsWrapper.prototype, "gridOptions", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], GridOptionsWrapper.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], GridOptionsWrapper.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('enterprise'),
	        __metadata("design:type", Boolean)
	    ], GridOptionsWrapper.prototype, "enterprise", void 0);
	    __decorate([
	        context_1.Autowired('frameworkFactory'),
	        __metadata("design:type", Object)
	    ], GridOptionsWrapper.prototype, "frameworkFactory", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], GridOptionsWrapper.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], GridOptionsWrapper.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('environment'),
	        __metadata("design:type", environment_1.Environment)
	    ], GridOptionsWrapper.prototype, "environment", void 0);
	    __decorate([
	        __param(0, context_1.Qualifier('gridApi')), __param(1, context_1.Qualifier('columnApi')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [gridApi_1.GridApi, columnController_1.ColumnApi]),
	        __metadata("design:returntype", void 0)
	    ], GridOptionsWrapper.prototype, "agWire", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridOptionsWrapper.prototype, "destroy", null);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridOptionsWrapper.prototype, "init", null);
	    GridOptionsWrapper = GridOptionsWrapper_1 = __decorate([
	        context_1.Bean('gridOptionsWrapper')
	    ], GridOptionsWrapper);
	    return GridOptionsWrapper;
	    var GridOptionsWrapper_1;
	}());
	exports.GridOptionsWrapper = GridOptionsWrapper;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var logger_1 = __webpack_require__(6);
	var utils_1 = __webpack_require__(8);
	var context_1 = __webpack_require__(7);
	var context_2 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var EventService = (function () {
	    function EventService() {
	        this.allSyncListeners = {};
	        this.allAsyncListeners = {};
	        this.globalSyncListeners = [];
	        this.globalAsyncListeners = [];
	        this.asyncFunctionsQueue = [];
	        this.scheduled = false;
	    }
	    EventService_1 = EventService;
	    // because this class is used both inside the context and outside the context, we do not
	    // use autowired attributes, as that would be confusing, as sometimes the attributes
	    // would be wired, and sometimes not.
	    //
	    // the global event servers used by ag-Grid is autowired by the context once, and this
	    // setBeans method gets called once.
	    //
	    // the times when this class is used outside of the context (eg RowNode has an instance of this
	    // class) then it is not a bean, and this setBeans method is not called.
	    EventService.prototype.setBeans = function (loggerFactory, gridOptionsWrapper, globalEventListener) {
	        if (globalEventListener === void 0) { globalEventListener = null; }
	        this.logger = loggerFactory.create('EventService');
	        if (globalEventListener) {
	            var async = gridOptionsWrapper.useAsyncEvents();
	            this.addGlobalListener(globalEventListener, async);
	        }
	    };
	    EventService.prototype.getListenerList = function (eventType, async) {
	        var listenerMap = async ? this.allAsyncListeners : this.allSyncListeners;
	        var listenerList = listenerMap[eventType];
	        if (!listenerList) {
	            listenerList = [];
	            listenerMap[eventType] = listenerList;
	        }
	        return listenerList;
	    };
	    EventService.prototype.addEventListener = function (eventType, listener, async) {
	        if (async === void 0) { async = false; }
	        if (!this.assertNotDeprecated(eventType))
	            return;
	        var listenerList = this.getListenerList(eventType, async);
	        if (listenerList.indexOf(listener) < 0) {
	            listenerList.push(listener);
	        }
	    };
	    EventService.prototype.assertNotDeprecated = function (eventType) {
	        if (eventType === 'floatingRowDataChanged') {
	            console.warn('ag-Grid: floatingRowDataChanged is now called pinnedRowDataChanged');
	            return false;
	        }
	        else {
	            return true;
	        }
	    };
	    // for some events, it's important that the model gets to hear about them before the view,
	    // as the model may need to update before the view works on the info. if you register
	    // via this method, you get notified before the view parts
	    EventService.prototype.addModalPriorityEventListener = function (eventType, listener, async) {
	        if (async === void 0) { async = false; }
	        if (!this.assertNotDeprecated(eventType))
	            return;
	        this.addEventListener(eventType + EventService_1.PRIORITY, listener, async);
	    };
	    EventService.prototype.addGlobalListener = function (listener, async) {
	        if (async === void 0) { async = false; }
	        if (async) {
	            this.globalAsyncListeners.push(listener);
	        }
	        else {
	            this.globalSyncListeners.push(listener);
	        }
	    };
	    EventService.prototype.removeEventListener = function (eventType, listener, async) {
	        if (async === void 0) { async = false; }
	        var listenerList = this.getListenerList(eventType, async);
	        utils_1.Utils.removeFromArray(listenerList, listener);
	    };
	    EventService.prototype.removeGlobalListener = function (listener) {
	        utils_1.Utils.removeFromArray(this.globalSyncListeners, listener);
	    };
	    // why do we pass the type here? the type is in ColumnChangeEvent, so unless the
	    // type is not in other types of events???
	    EventService.prototype.dispatchEvent = function (event) {
	        // console.log(`dispatching ${eventType}: ${event}`);
	        this.dispatchToListeners(event, true);
	        this.dispatchToListeners(event, false);
	    };
	    EventService.prototype.dispatchToListeners = function (event, async) {
	        var _this = this;
	        var globalListeners = async ? this.globalAsyncListeners : this.globalSyncListeners;
	        var eventType = event.type;
	        // this allows the columnController to get events before anyone else
	        var p1ListenerList = this.getListenerList(eventType + EventService_1.PRIORITY, async);
	        utils_1.Utils.forEachSnapshotFirst(p1ListenerList, function (listener) {
	            if (async) {
	                _this.dispatchAsync(function () { return listener(event); });
	            }
	            else {
	                listener(event);
	            }
	        });
	        var listenerList = this.getListenerList(eventType, async);
	        utils_1.Utils.forEachSnapshotFirst(listenerList, function (listener) {
	            if (async) {
	                _this.dispatchAsync(function () { return listener(event); });
	            }
	            else {
	                listener(event);
	            }
	        });
	        utils_1.Utils.forEachSnapshotFirst(globalListeners, function (listener) {
	            if (async) {
	                _this.dispatchAsync(function () { return listener(eventType, event); });
	            }
	            else {
	                listener(eventType, event);
	            }
	        });
	    };
	    // this gets called inside the grid's thread, for each event that it
	    // wants to set async. the grid then batches the events into one setTimeout()
	    // because setTimeout() is an expensive operation. ideally we would have
	    // each event in it's own setTimeout(), but we batch for performance.
	    EventService.prototype.dispatchAsync = function (func) {
	        // add to the queue for executing later in the next VM turn
	        this.asyncFunctionsQueue.push(func);
	        // check if timeout is already scheduled. the first time the grid calls
	        // this within it's thread turn, this should be false, so it will schedule
	        // the 'flush queue' method the first time it comes here. then the flag is
	        // set to 'true' so it will know it's already scheduled for subsequent calls.
	        if (!this.scheduled) {
	            // if not scheduled, schedule one
	            setTimeout(this.flushAsyncQueue.bind(this), 0);
	            // mark that it is scheduled
	            this.scheduled = true;
	        }
	    };
	    // this happens in the next VM turn only, and empties the queue of events
	    EventService.prototype.flushAsyncQueue = function () {
	        this.scheduled = false;
	        // we take a copy, because the event listener could be using
	        // the grid, which would cause more events, which would be potentially
	        // added to the queue, so safe to take a copy, the new events will
	        // get executed in a later VM turn rather than risk updating the
	        // queue as we are flushing it.
	        var queueCopy = this.asyncFunctionsQueue.slice();
	        this.asyncFunctionsQueue = [];
	        // execute the queue
	        queueCopy.forEach(function (func) { return func(); });
	    };
	    // this is an old idea niall had, should really take it out, was to do with ordering who gets to process
	    // events first, to give model and service objects preference over the view
	    EventService.PRIORITY = '-P1';
	    __decorate([
	        __param(0, context_2.Qualifier('loggerFactory')),
	        __param(1, context_2.Qualifier('gridOptionsWrapper')),
	        __param(2, context_2.Qualifier('globalEventListener')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory,
	            gridOptionsWrapper_1.GridOptionsWrapper,
	            Function]),
	        __metadata("design:returntype", void 0)
	    ], EventService.prototype, "setBeans", null);
	    EventService = EventService_1 = __decorate([
	        context_1.Bean('eventService')
	    ], EventService);
	    return EventService;
	    var EventService_1;
	}());
	exports.EventService = EventService;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var context_1 = __webpack_require__(7);
	var context_2 = __webpack_require__(7);
	var LoggerFactory = (function () {
	    function LoggerFactory() {
	    }
	    LoggerFactory.prototype.setBeans = function (gridOptionsWrapper) {
	        this.logging = gridOptionsWrapper.isDebug();
	    };
	    LoggerFactory.prototype.create = function (name) {
	        return new Logger(name, this.isLogging.bind(this));
	    };
	    LoggerFactory.prototype.isLogging = function () {
	        return this.logging;
	    };
	    __decorate([
	        __param(0, context_2.Qualifier('gridOptionsWrapper')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [gridOptionsWrapper_1.GridOptionsWrapper]),
	        __metadata("design:returntype", void 0)
	    ], LoggerFactory.prototype, "setBeans", null);
	    LoggerFactory = __decorate([
	        context_1.Bean('loggerFactory')
	    ], LoggerFactory);
	    return LoggerFactory;
	}());
	exports.LoggerFactory = LoggerFactory;
	var Logger = (function () {
	    function Logger(name, isLoggingFunc) {
	        this.name = name;
	        this.isLoggingFunc = isLoggingFunc;
	    }
	    Logger.prototype.isLogging = function () {
	        return this.isLoggingFunc();
	    };
	    Logger.prototype.log = function (message) {
	        if (this.isLoggingFunc()) {
	            console.log('ag-Grid.' + this.name + ': ' + message);
	        }
	    };
	    return Logger;
	}());
	exports.Logger = Logger;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var Context = (function () {
	    function Context(params, logger) {
	        this.beans = {};
	        this.componentsMappedByName = {};
	        this.destroyed = false;
	        if (!params || !params.beans) {
	            return;
	        }
	        this.contextParams = params;
	        this.logger = logger;
	        this.logger.log('>> creating ag-Application Context');
	        this.setupComponents();
	        this.createBeans();
	        var beans = utils_1.Utils.mapObject(this.beans, function (beanEntry) { return beanEntry.beanInstance; });
	        this.wireBeans(beans);
	        this.logger.log('>> ag-Application Context ready - component is alive');
	    }
	    Context.prototype.setupComponents = function () {
	        var _this = this;
	        if (this.contextParams.components) {
	            this.contextParams.components.forEach(function (componentMeta) { return _this.addComponent(componentMeta); });
	        }
	    };
	    Context.prototype.addComponent = function (componentMeta) {
	        // get name of the class as a string
	        // let className = _.getNameOfClass(ComponentClass);
	        // insert a dash after every capital letter
	        // let classEscaped = className.replace(/([A-Z])/g, "-$1").toLowerCase();
	        var classEscaped = componentMeta.componentName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
	        // put all to upper case
	        var classUpperCase = classEscaped.toUpperCase();
	        // finally store
	        this.componentsMappedByName[classUpperCase] = componentMeta.theClass;
	    };
	    Context.prototype.createComponent = function (element) {
	        var key = element.nodeName;
	        if (this.componentsMappedByName && this.componentsMappedByName[key]) {
	            var newComponent = new this.componentsMappedByName[key];
	            this.wireBean(newComponent);
	            this.copyAttributesFromNode(element, newComponent.getHtmlElement());
	            newComponent.attributesSet();
	            return newComponent;
	        }
	        else {
	            return null;
	        }
	    };
	    Context.prototype.copyAttributesFromNode = function (fromNode, toNode) {
	        if (fromNode.attributes) {
	            var count = fromNode.attributes.length;
	            for (var i = 0; i < count; i++) {
	                var attr = fromNode.attributes[i];
	                toNode.setAttribute(attr.name, attr.value);
	            }
	        }
	    };
	    Context.prototype.wireBean = function (bean) {
	        if (!bean)
	            throw Error("Can't wire to bean since it is null");
	        this.wireBeans([bean]);
	    };
	    Context.prototype.wireBeans = function (beans) {
	        this.autoWireBeans(beans);
	        this.methodWireBeans(beans);
	        this.preConstruct(beans);
	        this.postConstruct(beans);
	    };
	    Context.prototype.createBeans = function () {
	        var _this = this;
	        // register all normal beans
	        this.contextParams.beans.forEach(this.createBeanEntry.bind(this));
	        // register override beans, these will overwrite beans above of same name
	        if (this.contextParams.overrideBeans) {
	            this.contextParams.overrideBeans.forEach(this.createBeanEntry.bind(this));
	        }
	        // instantiate all beans - overridden beans will be left out
	        utils_1.Utils.iterateObject(this.beans, function (key, beanEntry) {
	            var constructorParamsMeta;
	            if (beanEntry.bean.__agBeanMetaData
	                && beanEntry.bean.__agBeanMetaData.autowireMethods
	                && beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor) {
	                constructorParamsMeta = beanEntry.bean.__agBeanMetaData.autowireMethods.agConstructor;
	            }
	            var constructorParams = _this.getBeansForParameters(constructorParamsMeta, beanEntry.bean.name);
	            var newInstance = applyToConstructor(beanEntry.bean, constructorParams);
	            beanEntry.beanInstance = newInstance;
	            _this.logger.log('bean ' + _this.getBeanName(newInstance) + ' created');
	        });
	    };
	    Context.prototype.createBeanEntry = function (Bean) {
	        var metaData = Bean.__agBeanMetaData;
	        if (!metaData) {
	            var beanName = void 0;
	            if (Bean.prototype.constructor) {
	                beanName = Bean.prototype.constructor.name;
	            }
	            else {
	                beanName = '' + Bean;
	            }
	            console.error('context item ' + beanName + ' is not a bean');
	            return;
	        }
	        var beanEntry = {
	            bean: Bean,
	            beanInstance: null,
	            beanName: metaData.beanName
	        };
	        this.beans[metaData.beanName] = beanEntry;
	    };
	    Context.prototype.autoWireBeans = function (beans) {
	        var _this = this;
	        beans.forEach(function (bean) { return _this.autoWireBean(bean); });
	    };
	    Context.prototype.methodWireBeans = function (beans) {
	        var _this = this;
	        beans.forEach(function (bean) {
	            if (!bean)
	                throw Error("Can't wire to bean since it is null");
	            return _this.methodWireBean(bean);
	        });
	    };
	    Context.prototype.autoWireBean = function (bean) {
	        var _this = this;
	        var currentBean = bean;
	        var _loop_1 = function () {
	            var currentConstructor = currentBean.constructor;
	            if (currentConstructor.__agBeanMetaData
	                && currentConstructor.__agBeanMetaData.agClassAttributes) {
	                var attributes = currentConstructor.__agBeanMetaData.agClassAttributes;
	                if (!attributes) {
	                    return { value: void 0 };
	                }
	                var beanName_1 = this_1.getBeanName(currentConstructor);
	                attributes.forEach(function (attribute) {
	                    var otherBean = _this.lookupBeanInstance(beanName_1, attribute.beanName, attribute.optional);
	                    bean[attribute.attributeName] = otherBean;
	                });
	            }
	            currentBean = Object.getPrototypeOf(currentBean) ? Object.getPrototypeOf(currentBean) : null;
	        };
	        var this_1 = this;
	        while (currentBean != null) {
	            var state_1 = _loop_1();
	            if (typeof state_1 === "object")
	                return state_1.value;
	        }
	    };
	    Context.prototype.getBeanName = function (constructor) {
	        if (constructor.__agBeanMetaData && constructor.__agBeanMetaData.beanName) {
	            return constructor.__agBeanMetaData.beanName;
	        }
	        var constructorString = constructor.toString();
	        var beanName = constructorString.substring(9, constructorString.indexOf('('));
	        return beanName;
	    };
	    Context.prototype.methodWireBean = function (bean) {
	        var _this = this;
	        var autowiredMethods;
	        if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.autowireMethods) {
	            autowiredMethods = bean.constructor.__agBeanMetaData.autowireMethods;
	        }
	        utils_1.Utils.iterateObject(autowiredMethods, function (methodName, wireParams) {
	            // skip constructor, as this is dealt with elsewhere
	            if (methodName === 'agConstructor') {
	                return;
	            }
	            var beanName = _this.getBeanName(bean.constructor);
	            var initParams = _this.getBeansForParameters(wireParams, beanName);
	            bean[methodName].apply(bean, initParams);
	        });
	    };
	    Context.prototype.getBeansForParameters = function (parameters, beanName) {
	        var _this = this;
	        var beansList = [];
	        if (parameters) {
	            utils_1.Utils.iterateObject(parameters, function (paramIndex, otherBeanName) {
	                var otherBean = _this.lookupBeanInstance(beanName, otherBeanName);
	                beansList[Number(paramIndex)] = otherBean;
	            });
	        }
	        return beansList;
	    };
	    Context.prototype.lookupBeanInstance = function (wiringBean, beanName, optional) {
	        if (optional === void 0) { optional = false; }
	        if (beanName === 'context') {
	            return this;
	        }
	        else if (this.contextParams.seed && this.contextParams.seed.hasOwnProperty(beanName)) {
	            return this.contextParams.seed[beanName];
	        }
	        else {
	            var beanEntry = this.beans[beanName];
	            if (beanEntry) {
	                return beanEntry.beanInstance;
	            }
	            if (!optional) {
	                console.error('ag-Grid: unable to find bean reference ' + beanName + ' while initialising ' + wiringBean);
	            }
	            return null;
	        }
	    };
	    Context.prototype.postConstruct = function (beans) {
	        beans.forEach(function (bean) {
	            // try calling init methods
	            if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.postConstructMethods) {
	                bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.postConstructMethods.forEach(function (methodName) { return bean[methodName](); });
	            }
	        });
	    };
	    Context.prototype.preConstruct = function (beans) {
	        beans.forEach(function (bean) {
	            // try calling init methods
	            if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.preConstructMethods) {
	                bean.constructor.__agBeanMetaData.preConstructMethods.forEach(function (methodName) { return bean[methodName](); });
	            }
	        });
	    };
	    Context.prototype.getBean = function (name) {
	        return this.lookupBeanInstance('getBean', name, true);
	    };
	    Context.prototype.destroy = function () {
	        // should only be able to destroy once
	        if (this.destroyed) {
	            return;
	        }
	        this.logger.log('>> Shutting down ag-Application Context');
	        // try calling destroy methods
	        utils_1.Utils.iterateObject(this.beans, function (key, beanEntry) {
	            var bean = beanEntry.beanInstance;
	            if (bean.constructor.__agBeanMetaData && bean.constructor.__agBeanMetaData.preDestroyMethods) {
	                bean.constructor.__agBeanMetaData.preDestroyMethods.forEach(function (methodName) { return bean[methodName](); });
	            }
	        });
	        this.destroyed = true;
	        this.logger.log('>> ag-Application Context shut down - component is dead');
	    };
	    return Context;
	}());
	exports.Context = Context;
	// taken from: http://stackoverflow.com/questions/3362471/how-can-i-call-a-javascript-constructor-using-call-or-apply
	// allows calling 'apply' on a constructor
	function applyToConstructor(constructor, argArray) {
	    var args = [null].concat(argArray);
	    var factoryFunction = constructor.bind.apply(constructor, args);
	    return new factoryFunction();
	}
	function PreConstruct(target, methodName, descriptor) {
	    var props = getOrCreateProps(target.constructor);
	    if (!props.postConstructMethods) {
	        props.preConstructMethods = [];
	    }
	    props.preConstructMethods.push(methodName);
	}
	exports.PreConstruct = PreConstruct;
	function PostConstruct(target, methodName, descriptor) {
	    var props = getOrCreateProps(target.constructor);
	    if (!props.postConstructMethods) {
	        props.postConstructMethods = [];
	    }
	    props.postConstructMethods.push(methodName);
	}
	exports.PostConstruct = PostConstruct;
	function PreDestroy(target, methodName, descriptor) {
	    var props = getOrCreateProps(target.constructor);
	    if (!props.preDestroyMethods) {
	        props.preDestroyMethods = [];
	    }
	    props.preDestroyMethods.push(methodName);
	}
	exports.PreDestroy = PreDestroy;
	function Bean(beanName) {
	    return function (classConstructor) {
	        var props = getOrCreateProps(classConstructor);
	        props.beanName = beanName;
	    };
	}
	exports.Bean = Bean;
	function Autowired(name) {
	    return function (target, propertyKey, descriptor) {
	        autowiredFunc(target, name, false, target, propertyKey, null);
	    };
	}
	exports.Autowired = Autowired;
	function Optional(name) {
	    return function (target, propertyKey, descriptor) {
	        autowiredFunc(target, name, true, target, propertyKey, null);
	    };
	}
	exports.Optional = Optional;
	function autowiredFunc(target, name, optional, classPrototype, methodOrAttributeName, index) {
	    if (name === null) {
	        console.error('ag-Grid: Autowired name should not be null');
	        return;
	    }
	    if (typeof index === 'number') {
	        console.error('ag-Grid: Autowired should be on an attribute');
	        return;
	    }
	    // it's an attribute on the class
	    var props = getOrCreateProps(target.constructor);
	    if (!props.agClassAttributes) {
	        props.agClassAttributes = [];
	    }
	    props.agClassAttributes.push({
	        attributeName: methodOrAttributeName,
	        beanName: name,
	        optional: optional
	    });
	}
	function Qualifier(name) {
	    return function (classPrototype, methodOrAttributeName, index) {
	        var constructor = (typeof classPrototype == 'function') ? classPrototype : classPrototype.constructor;
	        var props;
	        if (typeof index === 'number') {
	            // it's a parameter on a method
	            var methodName = void 0;
	            if (methodOrAttributeName) {
	                props = getOrCreateProps(constructor);
	                methodName = methodOrAttributeName;
	            }
	            else {
	                props = getOrCreateProps(constructor);
	                methodName = 'agConstructor';
	            }
	            if (!props.autowireMethods) {
	                props.autowireMethods = {};
	            }
	            if (!props.autowireMethods[methodName]) {
	                props.autowireMethods[methodName] = {};
	            }
	            props.autowireMethods[methodName][index] = name;
	        }
	    };
	}
	exports.Qualifier = Qualifier;
	function getOrCreateProps(target) {
	    if (!target.hasOwnProperty('__agBeanMetaData')) {
	        target.__agBeanMetaData = {};
	    }
	    return target.__agBeanMetaData;
	}


/***/ }),
/* 8 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var FUNCTION_STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	var FUNCTION_ARGUMENT_NAMES = /([^\s,]+)/g;
	// util class, only used when debugging, for printing time to console
	var Timer = (function () {
	    function Timer() {
	        this.timestamp = new Date().getTime();
	    }
	    Timer.prototype.print = function (msg) {
	        var duration = (new Date().getTime()) - this.timestamp;
	        console.log(msg + " = " + duration);
	        this.timestamp = new Date().getTime();
	    };
	    return Timer;
	}());
	exports.Timer = Timer;
	/** HTML Escapes. */
	var HTML_ESCAPES = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	};
	var reUnescapedHtml = /[&<>"']/g;
	var Utils = (function () {
	    function Utils() {
	    }
	    // returns true if the event is close to the original event by X pixels either vertically or horizontally.
	    // we only start dragging after X pixels so this allows us to know if we should start dragging yet.
	    Utils.areEventsNear = function (e1, e2, pixelCount) {
	        // by default, we wait 4 pixels before starting the drag
	        if (pixelCount === 0) {
	            return false;
	        }
	        var diffX = Math.abs(e1.clientX - e2.clientX);
	        var diffY = Math.abs(e1.clientY - e2.clientY);
	        return Math.max(diffX, diffY) <= pixelCount;
	    };
	    Utils.shallowCompare = function (arr1, arr2) {
	        // if both are missing, then they are the same
	        if (this.missing(arr1) && this.missing(arr2)) {
	            return true;
	        }
	        // if one is present, but other is missing, then then are different
	        if (this.missing(arr1) || this.missing(arr2)) {
	            return false;
	        }
	        if (arr1.length !== arr2.length) {
	            return false;
	        }
	        for (var i = 0; i < arr1.length; i++) {
	            if (arr1[i] !== arr2[i]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    Utils.getNameOfClass = function (TheClass) {
	        var funcNameRegex = /function (.{1,})\(/;
	        var funcAsString = TheClass.toString();
	        var results = (funcNameRegex).exec(funcAsString);
	        return (results && results.length > 1) ? results[1] : "";
	    };
	    Utils.values = function (object) {
	        var result = [];
	        this.iterateObject(object, function (key, value) {
	            result.push(value);
	        });
	        return result;
	    };
	    Utils.getValueUsingField = function (data, field, fieldContainsDots) {
	        if (!field || !data) {
	            return;
	        }
	        // if no '.', then it's not a deep value
	        if (!fieldContainsDots) {
	            return data[field];
	        }
	        else {
	            // otherwise it is a deep value, so need to dig for it
	            var fields = field.split('.');
	            var currentObject = data;
	            for (var i = 0; i < fields.length; i++) {
	                currentObject = currentObject[fields[i]];
	                if (this.missing(currentObject)) {
	                    return null;
	                }
	            }
	            return currentObject;
	        }
	    };
	    Utils.getScrollLeft = function (element, rtl) {
	        var scrollLeft = element.scrollLeft;
	        if (rtl) {
	            // Absolute value - for FF that reports RTL scrolls in negative numbers
	            scrollLeft = Math.abs(scrollLeft);
	            // Get Chrome and Safari to return the same value as well
	            if (this.isBrowserSafari() || this.isBrowserChrome()) {
	                scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
	            }
	        }
	        return scrollLeft;
	    };
	    Utils.cleanNumber = function (value) {
	        if (typeof value === 'string') {
	            value = parseInt(value);
	        }
	        if (typeof value === 'number') {
	            value = Math.floor(value);
	        }
	        else {
	            value = null;
	        }
	        return value;
	    };
	    Utils.setScrollLeft = function (element, value, rtl) {
	        if (rtl) {
	            // Chrome and Safari when doing RTL have the END position of the scroll as zero, not the start
	            if (this.isBrowserSafari() || this.isBrowserChrome()) {
	                value = element.scrollWidth - element.clientWidth - value;
	            }
	            // Firefox uses negative numbers when doing RTL scrolling
	            if (this.isBrowserFirefox()) {
	                value *= -1;
	            }
	        }
	        element.scrollLeft = value;
	    };
	    Utils.iterateObject = function (object, callback) {
	        if (this.missing(object)) {
	            return;
	        }
	        var keys = Object.keys(object);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            var value = object[key];
	            callback(key, value);
	        }
	    };
	    Utils.cloneObject = function (object) {
	        var copy = {};
	        var keys = Object.keys(object);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            var value = object[key];
	            copy[key] = value;
	        }
	        return copy;
	    };
	    Utils.map = function (array, callback) {
	        var result = [];
	        for (var i = 0; i < array.length; i++) {
	            var item = array[i];
	            var mappedItem = callback(item);
	            result.push(mappedItem);
	        }
	        return result;
	    };
	    Utils.mapObject = function (object, callback) {
	        var result = [];
	        Utils.iterateObject(object, function (key, value) {
	            result.push(callback(value));
	        });
	        return result;
	    };
	    Utils.forEach = function (array, callback) {
	        if (!array) {
	            return;
	        }
	        for (var i = 0; i < array.length; i++) {
	            var value = array[i];
	            callback(value, i);
	        }
	    };
	    Utils.filter = function (array, callback) {
	        var result = [];
	        array.forEach(function (item) {
	            if (callback(item)) {
	                result.push(item);
	            }
	        });
	        return result;
	    };
	    Utils.getAllKeysInObjects = function (objects) {
	        var allValues = {};
	        objects.forEach(function (obj) {
	            if (obj) {
	                Object.keys(obj).forEach(function (key) { return allValues[key] = null; });
	            }
	        });
	        return Object.keys(allValues);
	    };
	    Utils.mergeDeep = function (into, source) {
	        if (this.exists(source)) {
	            this.iterateObject(source, function (key, target) {
	                var currentValue = into[key];
	                if (currentValue == null) {
	                    into[key] = target;
	                    return;
	                }
	                if (typeof currentValue === 'object') {
	                    if (target) {
	                        Utils.mergeDeep(currentValue, target);
	                        return;
	                    }
	                }
	                if (target) {
	                    into[key] = target;
	                }
	            });
	        }
	    };
	    Utils.assign = function (object) {
	        var _this = this;
	        var sources = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            sources[_i - 1] = arguments[_i];
	        }
	        sources.forEach(function (source) {
	            if (_this.exists(source)) {
	                _this.iterateObject(source, function (key, value) {
	                    object[key] = value;
	                });
	            }
	        });
	        return object;
	    };
	    Utils.parseYyyyMmDdToDate = function (yyyyMmDd, separator) {
	        try {
	            if (!yyyyMmDd)
	                return null;
	            if (yyyyMmDd.indexOf(separator) === -1)
	                return null;
	            var fields = yyyyMmDd.split(separator);
	            if (fields.length != 3)
	                return null;
	            return new Date(Number(fields[0]), Number(fields[1]) - 1, Number(fields[2]));
	        }
	        catch (e) {
	            return null;
	        }
	    };
	    Utils.serializeDateToYyyyMmDd = function (date, separator) {
	        if (!date)
	            return null;
	        return date.getFullYear() + separator + Utils.pad(date.getMonth() + 1, 2) + separator + Utils.pad(date.getDate(), 2);
	    };
	    Utils.pad = function (num, totalStringSize) {
	        var asString = num + "";
	        while (asString.length < totalStringSize)
	            asString = "0" + asString;
	        return asString;
	    };
	    Utils.pushAll = function (target, source) {
	        if (this.missing(source) || this.missing(target)) {
	            return;
	        }
	        source.forEach(function (func) { return target.push(func); });
	    };
	    Utils.createArrayOfNumbers = function (first, last) {
	        var result = [];
	        for (var i = first; i <= last; i++) {
	            result.push(i);
	        }
	        return result;
	    };
	    Utils.getFunctionParameters = function (func) {
	        var fnStr = func.toString().replace(FUNCTION_STRIP_COMMENTS, '');
	        var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(FUNCTION_ARGUMENT_NAMES);
	        if (result === null) {
	            return [];
	        }
	        else {
	            return result;
	        }
	    };
	    Utils.find = function (collection, predicate, value) {
	        if (collection === null || collection === undefined) {
	            return null;
	        }
	        if (!Array.isArray(collection)) {
	            var objToArray = this.values(collection);
	            return this.find(objToArray, predicate, value);
	        }
	        var collectionAsArray = collection;
	        var firstMatchingItem;
	        for (var i = 0; i < collectionAsArray.length; i++) {
	            var item = collectionAsArray[i];
	            if (typeof predicate === 'string') {
	                if (item[predicate] === value) {
	                    firstMatchingItem = item;
	                    break;
	                }
	            }
	            else {
	                var callback = predicate;
	                if (callback(item)) {
	                    firstMatchingItem = item;
	                    break;
	                }
	            }
	        }
	        return firstMatchingItem;
	    };
	    Utils.toStrings = function (array) {
	        return this.map(array, function (item) {
	            if (item === undefined || item === null || !item.toString) {
	                return null;
	            }
	            else {
	                return item.toString();
	            }
	        });
	    };
	    Utils.iterateArray = function (array, callback) {
	        for (var index = 0; index < array.length; index++) {
	            var value = array[index];
	            callback(value, index);
	        }
	    };
	    //Returns true if it is a DOM node
	    //taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
	    Utils.isNode = function (o) {
	        return (typeof Node === "function" ? o instanceof Node :
	            o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string");
	    };
	    //Returns true if it is a DOM element
	    //taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
	    Utils.isElement = function (o) {
	        return (typeof HTMLElement === "function" ? o instanceof HTMLElement :
	            o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string");
	    };
	    Utils.isNodeOrElement = function (o) {
	        return this.isNode(o) || this.isElement(o);
	    };
	    Utils.isEventFromPrintableCharacter = function (event) {
	        var pressedChar = String.fromCharCode(event.charCode);
	        if (exports._.exists(event.key)) {
	            // modern browser will implement key, so we return if key is length 1, eg if it is 'a' for the
	            // a key, or '2' for the '2' key. non-printable characters have names, eg 'Enter' or 'Backspace'.
	            return event.key.length === 1;
	        }
	        else {
	            // otherwise, for older browsers, we test against a list of characters, which doesn't include
	            // accents for non-English, but don't care much, as most users are on modern browsers
	            return Utils.PRINTABLE_CHARACTERS.indexOf(pressedChar) >= 0;
	        }
	    };
	    //adds all type of change listeners to an element, intended to be a text field
	    Utils.addChangeListener = function (element, listener) {
	        element.addEventListener("changed", listener);
	        element.addEventListener("paste", listener);
	        element.addEventListener("input", listener);
	        // IE doesn't fire changed for special keys (eg delete, backspace), so need to
	        // listen for this further ones
	        element.addEventListener("keydown", listener);
	        element.addEventListener("keyup", listener);
	    };
	    //if value is undefined, null or blank, returns null, otherwise returns the value
	    Utils.makeNull = function (value) {
	        if (value === null || value === undefined || value === "") {
	            return null;
	        }
	        else {
	            return value;
	        }
	    };
	    Utils.missing = function (value) {
	        return !this.exists(value);
	    };
	    Utils.missingOrEmpty = function (value) {
	        return this.missing(value) || value.length === 0;
	    };
	    Utils.missingOrEmptyObject = function (value) {
	        return this.missing(value) || Object.keys(value).length === 0;
	    };
	    Utils.exists = function (value) {
	        if (value === null || value === undefined || value === '') {
	            return false;
	        }
	        else {
	            return true;
	        }
	    };
	    Utils.anyExists = function (values) {
	        if (values) {
	            for (var i = 0; i < values.length; i++) {
	                if (this.exists(values[i])) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    };
	    Utils.existsAndNotEmpty = function (value) {
	        return this.exists(value) && value.length > 0;
	    };
	    Utils.removeAllChildren = function (node) {
	        if (node) {
	            while (node.hasChildNodes()) {
	                node.removeChild(node.lastChild);
	            }
	        }
	    };
	    Utils.removeElement = function (parent, cssSelector) {
	        this.removeFromParent(parent.querySelector(cssSelector));
	    };
	    Utils.removeFromParent = function (node) {
	        if (node && node.parentNode) {
	            node.parentNode.removeChild(node);
	        }
	    };
	    Utils.isVisible = function (element) {
	        return (element.offsetParent !== null);
	    };
	    /**
	     * loads the template and returns it as an element. makes up for no simple way in
	     * the dom api to load html directly, eg we cannot do this: document.createElement(template)
	     */
	    Utils.loadTemplate = function (template) {
	        var tempDiv = document.createElement("div");
	        tempDiv.innerHTML = template;
	        return tempDiv.firstChild;
	    };
	    Utils.assertHtmlElement = function (item) {
	        if (typeof item === 'string') {
	            console.error("ag-grid: Found a string template for a component type where only HTMLElements are allow. \n            Please change the component to return back an HTMLElement from getGui(). Only some element types can return back strings.\n            The found template is " + item);
	            return null;
	        }
	        else {
	            return item;
	        }
	    };
	    Utils.ensureElement = function (item) {
	        if (typeof item === 'string') {
	            return this.loadTemplate(item);
	        }
	        else {
	            return item;
	        }
	    };
	    Utils.appendHtml = function (eContainer, htmlTemplate) {
	        if (eContainer.lastChild) {
	            // https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML
	            // we put the items at the start, so new items appear underneath old items,
	            // so when expanding/collapsing groups, the new rows don't go on top of the
	            // rows below that are moving our of the way
	            eContainer.insertAdjacentHTML('afterbegin', htmlTemplate);
	        }
	        else {
	            eContainer.innerHTML = htmlTemplate;
	        }
	    };
	    Utils.addOrRemoveCssClass = function (element, className, addOrRemove) {
	        if (addOrRemove) {
	            this.addCssClass(element, className);
	        }
	        else {
	            this.removeCssClass(element, className);
	        }
	    };
	    Utils.callIfPresent = function (func) {
	        if (func) {
	            func();
	        }
	    };
	    Utils.addCssClass = function (element, className) {
	        var _this = this;
	        if (!className || className.length === 0) {
	            return;
	        }
	        if (className.indexOf(' ') >= 0) {
	            className.split(' ').forEach(function (value) { return _this.addCssClass(element, value); });
	            return;
	        }
	        if (element.classList) {
	            element.classList.add(className);
	        }
	        else {
	            if (element.className && element.className.length > 0) {
	                var cssClasses = element.className.split(' ');
	                if (cssClasses.indexOf(className) < 0) {
	                    cssClasses.push(className);
	                    element.className = cssClasses.join(' ');
	                }
	            }
	            else {
	                element.className = className;
	            }
	        }
	    };
	    Utils.containsClass = function (element, className) {
	        if (element.classList) {
	            // for modern browsers
	            return element.classList.contains(className);
	        }
	        else if (element.className) {
	            // for older browsers, check against the string of class names
	            // if only one class, can check for exact match
	            var onlyClass = element.className === className;
	            // if many classes, check for class name, we have to pad with ' ' to stop other
	            // class names that are a substring of this class
	            var contains = element.className.indexOf(' ' + className + ' ') >= 0;
	            // the padding above then breaks when it's the first or last class names
	            var startsWithClass = element.className.indexOf(className + ' ') === 0;
	            var endsWithClass = element.className.lastIndexOf(' ' + className) === (element.className.length - className.length - 1);
	            return onlyClass || contains || startsWithClass || endsWithClass;
	        }
	        else {
	            // if item is not a node
	            return false;
	        }
	    };
	    Utils.getElementAttribute = function (element, attributeName) {
	        if (element.attributes) {
	            if (element.attributes[attributeName]) {
	                var attribute = element.attributes[attributeName];
	                return attribute.value;
	            }
	            else {
	                return null;
	            }
	        }
	        else {
	            return null;
	        }
	    };
	    Utils.offsetHeight = function (element) {
	        return element && element.clientHeight ? element.clientHeight : 0;
	    };
	    Utils.offsetWidth = function (element) {
	        return element && element.clientWidth ? element.clientWidth : 0;
	    };
	    Utils.sortNumberArray = function (numberArray) {
	        numberArray.sort(function (a, b) { return a - b; });
	    };
	    Utils.removeCssClass = function (element, className) {
	        if (element.classList) {
	            element.classList.remove(className);
	        }
	        else {
	            if (element.className && element.className.length > 0) {
	                var cssClasses = element.className.split(' ');
	                if (cssClasses.indexOf(className) >= 0) {
	                    // remove all instances of the item, not just the first, in case it's in more than once
	                    while (cssClasses.indexOf(className) >= 0) {
	                        cssClasses.splice(cssClasses.indexOf(className), 1);
	                    }
	                    element.className = cssClasses.join(' ');
	                }
	            }
	        }
	    };
	    Utils.removeRepeatsFromArray = function (array, object) {
	        if (!array) {
	            return;
	        }
	        for (var index = array.length - 2; index >= 0; index--) {
	            var thisOneMatches = array[index] === object;
	            var nextOneMatches = array[index + 1] === object;
	            if (thisOneMatches && nextOneMatches) {
	                array.splice(index + 1, 1);
	            }
	        }
	    };
	    Utils.removeFromArray = function (array, object) {
	        if (array.indexOf(object) >= 0) {
	            array.splice(array.indexOf(object), 1);
	        }
	    };
	    Utils.removeAllFromArray = function (array, toRemove) {
	        toRemove.forEach(function (item) {
	            if (array.indexOf(item) >= 0) {
	                array.splice(array.indexOf(item), 1);
	            }
	        });
	    };
	    Utils.insertIntoArray = function (array, object, toIndex) {
	        array.splice(toIndex, 0, object);
	    };
	    Utils.insertArrayIntoArray = function (dest, src, toIndex) {
	        if (this.missing(dest) || this.missing(src)) {
	            return;
	        }
	        // put items in backwards, otherwise inserted items end up in reverse order
	        for (var i = src.length - 1; i >= 0; i--) {
	            var item = src[i];
	            this.insertIntoArray(dest, item, toIndex);
	        }
	    };
	    Utils.moveInArray = function (array, objectsToMove, toIndex) {
	        var _this = this;
	        // first take out it items from the array
	        objectsToMove.forEach(function (obj) {
	            _this.removeFromArray(array, obj);
	        });
	        // now add the objects, in same order as provided to us, that means we start at the end
	        // as the objects will be pushed to the right as they are inserted
	        objectsToMove.slice().reverse().forEach(function (obj) {
	            _this.insertIntoArray(array, obj, toIndex);
	        });
	    };
	    Utils.defaultComparator = function (valueA, valueB, accentedCompare) {
	        if (accentedCompare === void 0) { accentedCompare = false; }
	        var valueAMissing = valueA === null || valueA === undefined;
	        var valueBMissing = valueB === null || valueB === undefined;
	        // this is for aggregations sum and avg, where the result can be a number that is wrapped.
	        // if we didn't do this, then the toString() value would be used, which would result in
	        // the strings getting used instead of the numbers.
	        if (valueA && valueA.toNumber) {
	            valueA = valueA.toNumber();
	        }
	        if (valueB && valueB.toNumber) {
	            valueB = valueB.toNumber();
	        }
	        if (valueAMissing && valueBMissing) {
	            return 0;
	        }
	        if (valueAMissing) {
	            return -1;
	        }
	        if (valueBMissing) {
	            return 1;
	        }
	        if (typeof valueA === "string") {
	            if (!accentedCompare) {
	                return doQuickCompare(valueA, valueB);
	            }
	            else {
	                try {
	                    // using local compare also allows chinese comparisons
	                    return valueA.localeCompare(valueB);
	                }
	                catch (e) {
	                    // if something wrong with localeCompare, eg not supported
	                    // by browser, then just continue with the quick one
	                    return doQuickCompare(valueA, valueB);
	                }
	            }
	        }
	        if (valueA < valueB) {
	            return -1;
	        }
	        else if (valueA > valueB) {
	            return 1;
	        }
	        else {
	            return 0;
	        }
	        function doQuickCompare(a, b) {
	            return (a > b ? 1 : (a < b ? -1 : 0));
	        }
	    };
	    Utils.compareArrays = function (array1, array2) {
	        if (this.missing(array1) && this.missing(array2)) {
	            return true;
	        }
	        if (this.missing(array1) || this.missing(array2)) {
	            return false;
	        }
	        if (array1.length !== array2.length) {
	            return false;
	        }
	        for (var i = 0; i < array1.length; i++) {
	            if (array1[i] !== array2[i]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    Utils.ensureDomOrder = function (eContainer, eChild, eChildBefore) {
	        // if already in right order, do nothing
	        if (eChildBefore && eChildBefore.nextSibling === eChild) {
	            return;
	        }
	        if (eChildBefore) {
	            if (eChildBefore.nextSibling) {
	                // insert between the eRowBefore and the row after it
	                eContainer.insertBefore(eChild, eChildBefore.nextSibling);
	            }
	            else {
	                // if nextSibling is missing, means other row is at end, so just append new row at the end
	                eContainer.appendChild(eChild);
	            }
	        }
	        else {
	            // otherwise put at start
	            if (eContainer.firstChild) {
	                // insert it at the first location
	                eContainer.insertBefore(eChild, eContainer.firstChild);
	            }
	        }
	    };
	    Utils.insertWithDomOrder = function (eContainer, eChild, eChildBefore) {
	        if (eChildBefore) {
	            if (eChildBefore.nextSibling) {
	                // insert between the eRowBefore and the row after it
	                eContainer.insertBefore(eChild, eChildBefore.nextSibling);
	            }
	            else {
	                // if nextSibling is missing, means other row is at end, so just append new row at the end
	                eContainer.appendChild(eChild);
	            }
	        }
	        else {
	            if (eContainer.firstChild) {
	                // insert it at the first location
	                eContainer.insertBefore(eChild, eContainer.firstChild);
	            }
	            else {
	                // otherwise eContainer is empty, so just append it
	                eContainer.appendChild(eChild);
	            }
	        }
	    };
	    Utils.insertTemplateWithDomOrder = function (eContainer, htmlTemplate, eChildBefore) {
	        var res;
	        if (eChildBefore) {
	            // if previous element exists, just slot in after the previous element
	            eChildBefore.insertAdjacentHTML('afterend', htmlTemplate);
	            res = eChildBefore.nextSibling;
	        }
	        else {
	            if (eContainer.firstChild) {
	                // insert it at the first location
	                eContainer.insertAdjacentHTML('afterbegin', htmlTemplate);
	            }
	            else {
	                // otherwise eContainer is empty, so just append it
	                eContainer.innerHTML = htmlTemplate;
	            }
	            res = eContainer.firstChild;
	        }
	        return res;
	    };
	    Utils.toStringOrNull = function (value) {
	        if (this.exists(value) && value.toString) {
	            return value.toString();
	        }
	        else {
	            return null;
	        }
	    };
	    Utils.formatWidth = function (width) {
	        if (typeof width === "number") {
	            return width + "px";
	        }
	        else {
	            return width;
	        }
	    };
	    Utils.formatNumberTwoDecimalPlacesAndCommas = function (value) {
	        if (typeof value !== 'number') {
	            return '';
	        }
	        // took this from: http://blog.tompawlak.org/number-currency-formatting-javascript
	        return (Math.round(value * 100) / 100).toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
	    };
	    // the native method number.toLocaleString(undefined, {minimumFractionDigits: 0}) puts in decimal places in IE,
	    // so we use this method instead
	    Utils.formatNumberCommas = function (value) {
	        if (typeof value !== 'number') {
	            return '';
	        }
	        // took this from: http://blog.tompawlak.org/number-currency-formatting-javascript
	        return value.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
	    };
	    Utils.prependDC = function (parent, documentFragment) {
	        if (this.exists(parent.firstChild)) {
	            parent.insertBefore(documentFragment, parent.firstChild);
	        }
	        else {
	            parent.appendChild(documentFragment);
	        }
	    };
	    /**
	     * If icon provided, use this (either a string, or a function callback).
	     * if not, then use the default icon from the theme
	     */
	    Utils.createIcon = function (iconName, gridOptionsWrapper, column) {
	        var iconContents = this.createIconNoSpan(iconName, gridOptionsWrapper, column);
	        if (iconContents.className.indexOf('ag-icon') > -1) {
	            return iconContents;
	        }
	        else {
	            var eResult = document.createElement('span');
	            eResult.appendChild(iconContents);
	            return eResult;
	        }
	    };
	    Utils.createIconNoSpan = function (iconName, gridOptionsWrapper, column) {
	        var userProvidedIcon;
	        // check col for icon first
	        if (column && column.getColDef().icons) {
	            userProvidedIcon = column.getColDef().icons[iconName];
	        }
	        // it not in col, try grid options
	        if (!userProvidedIcon && gridOptionsWrapper.getIcons()) {
	            userProvidedIcon = gridOptionsWrapper.getIcons()[iconName];
	        }
	        // now if user provided, use it
	        if (userProvidedIcon) {
	            var rendererResult = void 0;
	            if (typeof userProvidedIcon === 'function') {
	                rendererResult = userProvidedIcon();
	            }
	            else if (typeof userProvidedIcon === 'string') {
	                rendererResult = userProvidedIcon;
	            }
	            else {
	                throw 'icon from grid options needs to be a string or a function';
	            }
	            if (typeof rendererResult === 'string') {
	                return this.loadTemplate(rendererResult);
	            }
	            else if (this.isNodeOrElement(rendererResult)) {
	                return rendererResult;
	            }
	            else {
	                throw 'iconRenderer should return back a string or a dom object';
	            }
	        }
	        else {
	            var span = document.createElement('span');
	            var cssClass = this.iconNameClassMap[iconName];
	            if (!cssClass) {
	                throw new Error(iconName + " did not find class");
	            }
	            span.setAttribute("class", "ag-icon ag-icon-" + cssClass);
	            return span;
	        }
	    };
	    Utils.addStylesToElement = function (eElement, styles) {
	        var _this = this;
	        if (!styles) {
	            return;
	        }
	        Object.keys(styles).forEach(function (key) {
	            var keyCamelCase = _this.hyphenToCamelCase(key);
	            eElement.style[keyCamelCase] = styles[key];
	        });
	    };
	    Utils.isHorizontalScrollShowing = function (element) {
	        return element.clientWidth < element.scrollWidth;
	    };
	    Utils.isVerticalScrollShowing = function (element) {
	        return element.clientHeight < element.scrollHeight;
	    };
	    Utils.getScrollbarWidth = function () {
	        var outer = document.createElement("div");
	        outer.style.visibility = "hidden";
	        outer.style.width = "100px";
	        outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps
	        document.body.appendChild(outer);
	        var widthNoScroll = outer.offsetWidth;
	        // force scrollbars
	        outer.style.overflow = "scroll";
	        // add innerdiv
	        var inner = document.createElement("div");
	        inner.style.width = "100%";
	        outer.appendChild(inner);
	        var widthWithScroll = inner.offsetWidth;
	        // remove divs
	        outer.parentNode.removeChild(outer);
	        return widthNoScroll - widthWithScroll;
	    };
	    Utils.isKeyPressed = function (event, keyToCheck) {
	        var pressedKey = event.which || event.keyCode;
	        return pressedKey === keyToCheck;
	    };
	    Utils.setVisible = function (element, visible) {
	        this.addOrRemoveCssClass(element, 'ag-hidden', !visible);
	    };
	    Utils.setHidden = function (element, hidden) {
	        this.addOrRemoveCssClass(element, 'ag-visibility-hidden', hidden);
	    };
	    Utils.isBrowserIE = function () {
	        if (this.isIE === undefined) {
	            this.isIE = false || !!document.documentMode; // At least IE6
	        }
	        return this.isIE;
	    };
	    Utils.isBrowserEdge = function () {
	        if (this.isEdge === undefined) {
	            this.isEdge = !this.isBrowserIE() && !!window.StyleMedia;
	        }
	        return this.isEdge;
	    };
	    Utils.isBrowserSafari = function () {
	        if (this.isSafari === undefined) {
	            var anyWindow = window;
	            // taken from https://github.com/ag-grid/ag-grid/issues/550
	            this.isSafari = Object.prototype.toString.call(anyWindow.HTMLElement).indexOf('Constructor') > 0
	                || (function (p) {
	                    return p.toString() === "[object SafariRemoteNotification]";
	                })(!anyWindow.safari || anyWindow.safari.pushNotification);
	        }
	        return this.isSafari;
	    };
	    Utils.isBrowserChrome = function () {
	        if (this.isChrome === undefined) {
	            var anyWindow = window;
	            this.isChrome = !!anyWindow.chrome && !!anyWindow.chrome.webstore;
	        }
	        return this.isChrome;
	    };
	    Utils.isBrowserFirefox = function () {
	        if (this.isFirefox === undefined) {
	            var anyWindow = window;
	            this.isFirefox = typeof anyWindow.InstallTrigger !== 'undefined';
	            ;
	        }
	        return this.isFirefox;
	    };
	    // srcElement is only available in IE. In all other browsers it is target
	    // http://stackoverflow.com/questions/5301643/how-can-i-make-event-srcelement-work-in-firefox-and-what-does-it-mean
	    Utils.getTarget = function (event) {
	        var eventNoType = event;
	        return eventNoType.target || eventNoType.srcElement;
	    };
	    Utils.forEachSnapshotFirst = function (list, callback) {
	        if (list) {
	            var arrayCopy = list.slice(0);
	            arrayCopy.forEach(callback);
	        }
	    };
	    // taken from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code
	    Utils.getBodyWidth = function () {
	        if (document.body) {
	            return document.body.clientWidth;
	        }
	        if (window.innerHeight) {
	            return window.innerWidth;
	        }
	        if (document.documentElement && document.documentElement.clientWidth) {
	            return document.documentElement.clientWidth;
	        }
	        return -1;
	    };
	    // taken from: http://stackoverflow.com/questions/1038727/how-to-get-browser-width-using-javascript-code
	    Utils.getBodyHeight = function () {
	        if (document.body) {
	            return document.body.clientHeight;
	        }
	        if (window.innerHeight) {
	            return window.innerHeight;
	        }
	        if (document.documentElement && document.documentElement.clientHeight) {
	            return document.documentElement.clientHeight;
	        }
	        return -1;
	    };
	    Utils.setCheckboxState = function (eCheckbox, state) {
	        if (typeof state === 'boolean') {
	            eCheckbox.checked = state;
	            eCheckbox.indeterminate = false;
	        }
	        else {
	            // isNodeSelected returns back undefined if it's a group and the children
	            // are a mix of selected and unselected
	            eCheckbox.indeterminate = true;
	        }
	    };
	    Utils.traverseNodesWithKey = function (nodes, callback) {
	        var keyParts = [];
	        recursiveSearchNodes(nodes);
	        function recursiveSearchNodes(nodes) {
	            nodes.forEach(function (node) {
	                if (node.group) {
	                    keyParts.push(node.key);
	                    var key = keyParts.join('|');
	                    callback(node, key);
	                    recursiveSearchNodes(node.childrenAfterGroup);
	                    keyParts.pop();
	                }
	            });
	        }
	    };
	    // from https://gist.github.com/youssman/745578062609e8acac9f
	    Utils.camelCaseToHyphen = function (str) {
	        if (str === null || str === undefined) {
	            return null;
	        }
	        return str.replace(/([A-Z])/g, function (g) { return '-' + g[0].toLowerCase(); });
	    };
	    // from https://stackoverflow.com/questions/6660977/convert-hyphens-to-camel-case-camelcase
	    Utils.hyphenToCamelCase = function (str) {
	        if (str === null || str === undefined) {
	            return null;
	        }
	        return str.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase(); });
	    };
	    // pas in an object eg: {color: 'black', top: '25px'} and it returns "color: black; top: 25px;" for html
	    Utils.cssStyleObjectToMarkup = function (stylesToUse) {
	        var _this = this;
	        if (!stylesToUse) {
	            return '';
	        }
	        var resParts = [];
	        this.iterateObject(stylesToUse, function (styleKey, styleValue) {
	            var styleKeyDashed = _this.camelCaseToHyphen(styleKey);
	            resParts.push(styleKeyDashed + ": " + styleValue + ";");
	        });
	        return resParts.join(' ');
	    };
	    /**
	     * From http://stackoverflow.com/questions/9716468/is-there-any-function-like-isnumeric-in-javascript-to-validate-numbers
	     */
	    Utils.isNumeric = function (value) {
	        if (value === '')
	            return false;
	        return !isNaN(parseFloat(value)) && isFinite(value);
	    };
	    Utils.escape = function (toEscape) {
	        if (toEscape === null)
	            return null;
	        if (!toEscape.replace)
	            return toEscape;
	        return toEscape.replace(reUnescapedHtml, function (chr) { return HTML_ESCAPES[chr]; });
	    };
	    // Taken from here: https://github.com/facebook/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js
	    /**
	     * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
	     * complicated, thus this doc is long and (hopefully) detailed enough to answer
	     * your questions.
	     *
	     * If you need to react to the mouse wheel in a predictable way, this code is
	     * like your bestest friend. * hugs *
	     *
	     * As of today, there are 4 DOM event types you can listen to:
	     *
	     *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
	     *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
	     *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
	     *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
	     *
	     * So what to do?  The is the best:
	     *
	     *   normalizeWheel.getEventType();
	     *
	     * In your event callback, use this code to get sane interpretation of the
	     * deltas.  This code will return an object with properties:
	     *
	     *   spinX   -- normalized spin speed (use for zoom) - x plane
	     *   spinY   -- " - y plane
	     *   pixelX  -- normalized distance (to pixels) - x plane
	     *   pixelY  -- " - y plane
	     *
	     * Wheel values are provided by the browser assuming you are using the wheel to
	     * scroll a web page by a number of lines or pixels (or pages).  Values can vary
	     * significantly on different platforms and browsers, forgetting that you can
	     * scroll at different speeds.  Some devices (like trackpads) emit more events
	     * at smaller increments with fine granularity, and some emit massive jumps with
	     * linear speed or acceleration.
	     *
	     * This code does its best to normalize the deltas for you:
	     *
	     *   - spin is trying to normalize how far the wheel was spun (or trackpad
	     *     dragged).  This is super useful for zoom support where you want to
	     *     throw away the chunky scroll steps on the PC and make those equal to
	     *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
	     *     resolve a single slow step on a wheel to 1.
	     *
	     *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
	     *     get the crazy differences between browsers, but at least it'll be in
	     *     pixels!
	     *
	     *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
	     *     should translate to positive value zooming IN, negative zooming OUT.
	     *     This matches the newer 'wheel' event.
	     *
	     * Why are there spinX, spinY (or pixels)?
	     *
	     *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
	     *     with a mouse.  It results in side-scrolling in the browser by default.
	     *
	     *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
	     *
	     *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
	     *     probably is by browsers in conjunction with fancy 3D controllers .. but
	     *     you know.
	     *
	     * Implementation info:
	     *
	     * Examples of 'wheel' event if you scroll slowly (down) by one step with an
	     * average mouse:
	     *
	     *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
	     *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
	     *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
	     *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
	     *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
	     *
	     * On the trackpad:
	     *
	     *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
	     *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
	     *
	     * On other/older browsers.. it's more complicated as there can be multiple and
	     * also missing delta values.
	     *
	     * The 'wheel' event is more standard:
	     *
	     * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
	     *
	     * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
	     * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
	     * backward compatibility with older events.  Those other values help us
	     * better normalize spin speed.  Example of what the browsers provide:
	     *
	     *                          | event.wheelDelta | event.detail
	     *        ------------------+------------------+--------------
	     *          Safari v5/OS X  |       -120       |       0
	     *          Safari v5/Win7  |       -120       |       0
	     *         Chrome v17/OS X  |       -120       |       0
	     *         Chrome v17/Win7  |       -120       |       0
	     *                IE9/Win7  |       -120       |   undefined
	     *         Firefox v4/OS X  |     undefined    |       1
	     *         Firefox v4/Win7  |     undefined    |       3
	     *
	     */
	    Utils.normalizeWheel = function (event) {
	        var PIXEL_STEP = 10;
	        var LINE_HEIGHT = 40;
	        var PAGE_HEIGHT = 800;
	        // spinX, spinY
	        var sX = 0;
	        var sY = 0;
	        // pixelX, pixelY
	        var pX = 0;
	        var pY = 0;
	        // Legacy
	        if ('detail' in event) {
	            sY = event.detail;
	        }
	        if ('wheelDelta' in event) {
	            sY = -event.wheelDelta / 120;
	        }
	        if ('wheelDeltaY' in event) {
	            sY = -event.wheelDeltaY / 120;
	        }
	        if ('wheelDeltaX' in event) {
	            sX = -event.wheelDeltaX / 120;
	        }
	        // side scrolling on FF with DOMMouseScroll
	        if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {
	            sX = sY;
	            sY = 0;
	        }
	        pX = sX * PIXEL_STEP;
	        pY = sY * PIXEL_STEP;
	        if ('deltaY' in event) {
	            pY = event.deltaY;
	        }
	        if ('deltaX' in event) {
	            pX = event.deltaX;
	        }
	        if ((pX || pY) && event.deltaMode) {
	            if (event.deltaMode == 1) {
	                pX *= LINE_HEIGHT;
	                pY *= LINE_HEIGHT;
	            }
	            else {
	                pX *= PAGE_HEIGHT;
	                pY *= PAGE_HEIGHT;
	            }
	        }
	        // Fall-back if spin cannot be determined
	        if (pX && !sX) {
	            sX = (pX < 1) ? -1 : 1;
	        }
	        if (pY && !sY) {
	            sY = (pY < 1) ? -1 : 1;
	        }
	        return {
	            spinX: sX,
	            spinY: sY,
	            pixelX: pX,
	            pixelY: pY
	        };
	    };
	    /**
	     * https://stackoverflow.com/questions/24004791/can-someone-explain-the-debounce-function-in-javascript
	     */
	    Utils.debounce = function (func, wait, immediate) {
	        if (immediate === void 0) { immediate = false; }
	        // 'private' variable for instance
	        // The returned function will be able to reference this due to closure.
	        // Each call to the returned function will share this common timer.
	        var timeout;
	        // Calling debounce returns a new anonymous function
	        return function () {
	            // reference the context and args for the setTimeout function
	            var context = this, args = arguments;
	            // Should the function be called now? If immediate is true
	            //   and not already in a timeout then the answer is: Yes
	            var callNow = immediate && !timeout;
	            // This is the basic debounce behaviour where you can call this
	            //   function several times, but it will only execute once
	            //   [before or after imposing a delay].
	            //   Each time the returned function is called, the timer starts over.
	            clearTimeout(timeout);
	            // Set the new timeout
	            timeout = setTimeout(function () {
	                // Inside the timeout function, clear the timeout variable
	                // which will let the next execution run when in 'immediate' mode
	                timeout = null;
	                // Check if the function already ran with the immediate flag
	                if (!immediate) {
	                    // Call the original function with apply
	                    // apply lets you define the 'this' object as well as the arguments
	                    //    (both captured before setTimeout)
	                    func.apply(context, args);
	                }
	            }, wait);
	            // Immediate mode and no wait timer? Execute the function..
	            if (callNow)
	                func.apply(context, args);
	        };
	    };
	    ;
	    Utils.executeInAWhile = function (funcs) {
	        this.executeAfter(funcs, 400);
	    };
	    Utils.executeNextVMTurn = function (funcs) {
	        this.executeAfter(funcs, 0);
	    };
	    Utils.executeAfter = function (funcs, millis) {
	        if (funcs.length > 0) {
	            setTimeout(function () {
	                funcs.forEach(function (func) { return func(); });
	            }, millis);
	        }
	    };
	    Utils.referenceCompare = function (left, right) {
	        if (left == null && right == null)
	            return true;
	        if (left == null && right)
	            return false;
	        if (left && right == null)
	            return false;
	        return left === right;
	    };
	    Utils.get = function (source, expression, defaultValue) {
	        if (source == null)
	            return defaultValue;
	        if (expression.indexOf('.') > -1) {
	            var fields = expression.split('.');
	            var thisKey = fields[0];
	            var nextValue = source[thisKey];
	            if (nextValue != null) {
	                return Utils.get(nextValue, fields.slice(1, fields.length).join('.'), defaultValue);
	            }
	            else {
	                return defaultValue;
	            }
	        }
	        else {
	            var nextValue = source[expression];
	            return nextValue != null ? nextValue : defaultValue;
	        }
	    };
	    Utils.addSafePassiveEventListener = function (eElement, event, listener) {
	        eElement.addEventListener(event, listener, (Utils.passiveEvents.indexOf(event) > -1 ? { passive: true } : null));
	    };
	    Utils.camelCaseToHumanText = function (camelCase) {
	        if (camelCase == null)
	            return null;
	        // Who needs to learn how to code when you have stack overflow!
	        // from: https://stackoverflow.com/questions/15369566/putting-space-in-camel-case-string-using-regular-expression
	        var rex = /([A-Z])([A-Z])([a-z])|([a-z])([A-Z])/g;
	        var words = camelCase.replace(rex, '$1$4 $2$3$5').replace('.', ' ').split(' ');
	        return words.map(function (word) { return word.substring(0, 1).toUpperCase() + ((word.length > 1) ? word.substring(1, word.length) : ''); }).join(' ');
	    };
	    Utils.PRINTABLE_CHARACTERS = 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890!"£$%^&*()_+-=[];\'#,./\|<>?:@~{}';
	    // static prepend(parent: HTMLElement, child: HTMLElement): void {
	    //     if (this.exists(parent.firstChild)) {
	    //         parent.insertBefore(child, parent.firstChild);
	    //     } else {
	    //         parent.appendChild(child);
	    //     }
	    // }
	    Utils.iconNameClassMap = {
	        'columnMovePin': 'pin',
	        'columnMoveAdd': 'plus',
	        'columnMoveHide': 'eye-slash',
	        'columnMoveMove': 'arrows',
	        'columnMoveLeft': 'left',
	        'columnMoveRight': 'right',
	        'columnMoveGroup': 'group',
	        'columnMoveValue': 'aggregation',
	        'columnMovePivot': 'pivot',
	        'dropNotAllowed': 'not-allowed',
	        'groupContracted': 'expanded',
	        'groupExpanded': 'contracted',
	        'checkboxChecked': 'checkbox-checked',
	        'checkboxUnchecked': 'checkbox-unchecked',
	        'checkboxIndeterminate': 'checkbox-indeterminate',
	        'checkboxCheckedReadOnly': 'checkbox-checked-readonly',
	        'checkboxUncheckedReadOnly': 'checkbox-unchecked-readonly',
	        'checkboxIndeterminateReadOnly': 'checkbox-indeterminate-readonly',
	        'groupLoading': 'loading',
	        'menu': 'menu',
	        'filter': 'filter',
	        'columns': 'columns',
	        'menuPin': 'pin',
	        'menuValue': 'aggregation',
	        'menuAddRowGroup': 'group',
	        'menuRemoveRowGroup': 'group',
	        'clipboardCopy': 'copy',
	        'clipboardCut': 'cut',
	        'clipboardPaste': 'paste',
	        'pivotPanel': 'pivot',
	        'rowGroupPanel': 'group',
	        'valuePanel': 'aggregation',
	        'columnGroupOpened': 'expanded',
	        'columnGroupClosed': 'contracted',
	        'columnSelectClosed': 'tree-closed',
	        'columnSelectOpen': 'tree-open',
	        // from deprecated header, remove at some point
	        'sortAscending': 'asc',
	        'sortDescending': 'desc',
	        'sortUnSort': 'none'
	    };
	    Utils.passiveEvents = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];
	    return Utils;
	}());
	exports.Utils = Utils;
	var NumberSequence = (function () {
	    function NumberSequence(initValue, step) {
	        if (initValue === void 0) { initValue = 0; }
	        if (step === void 0) { step = 1; }
	        this.nextValue = initValue;
	        this.step = step;
	    }
	    NumberSequence.prototype.next = function () {
	        var valToReturn = this.nextValue;
	        this.nextValue += this.step;
	        return valToReturn;
	    };
	    NumberSequence.prototype.peek = function () {
	        return this.nextValue;
	    };
	    NumberSequence.prototype.skip = function (count) {
	        this.nextValue += count;
	    };
	    return NumberSequence;
	}());
	exports.NumberSequence = NumberSequence;
	exports._ = Utils;


/***/ }),
/* 9 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Constants = (function () {
	    function Constants() {
	    }
	    Constants.STEP_EVERYTHING = 0;
	    Constants.STEP_FILTER = 1;
	    Constants.STEP_SORT = 2;
	    Constants.STEP_MAP = 3;
	    Constants.STEP_AGGREGATE = 4;
	    Constants.STEP_PIVOT = 5;
	    Constants.ROW_BUFFER_SIZE = 10;
	    Constants.LAYOUT_INTERVAL = 500;
	    Constants.EXPORT_TYPE_DRAG_COPY = 'dragCopy';
	    Constants.EXPORT_TYPE_CLIPBOARD = 'clipboard';
	    Constants.EXPORT_TYPE_EXCEL = 'excel';
	    Constants.EXPORT_TYPE_CSV = 'csv';
	    Constants.KEY_BACKSPACE = 8;
	    Constants.KEY_TAB = 9;
	    Constants.KEY_ENTER = 13;
	    Constants.KEY_SHIFT = 16;
	    Constants.KEY_ESCAPE = 27;
	    Constants.KEY_SPACE = 32;
	    Constants.KEY_LEFT = 37;
	    Constants.KEY_UP = 38;
	    Constants.KEY_RIGHT = 39;
	    Constants.KEY_DOWN = 40;
	    Constants.KEY_DELETE = 46;
	    Constants.KEY_A = 65;
	    Constants.KEY_C = 67;
	    Constants.KEY_V = 86;
	    Constants.KEY_D = 68;
	    Constants.KEY_F2 = 113;
	    Constants.KEY_PAGE_UP = 33;
	    Constants.KEY_PAGE_DOWN = 34;
	    Constants.KEY_PAGE_HOME = 36;
	    Constants.KEY_PAGE_END = 35;
	    Constants.KEY_PAGE_UP_NAME = 'pageUp';
	    Constants.KEY_PAGE_DOWN_NAME = 'pageDown';
	    Constants.KEY_PAGE_HOME_NAME = 'home';
	    Constants.KEY_PAGE_END_NAME = 'end';
	    Constants.KEY_CTRL_UP_NAME = 'ctrlUp';
	    Constants.KEY_CTRL_LEFT_NAME = 'ctrlLeft';
	    Constants.KEY_CTRL_RIGHT_NAME = 'ctrlRight';
	    Constants.KEY_CTRL_DOWN_NAME = 'ctrlDown';
	    Constants.ROW_MODEL_TYPE_INFINITE = 'infinite';
	    Constants.ROW_MODEL_TYPE_VIEWPORT = 'viewport';
	    Constants.ROW_MODEL_TYPE_IN_MEMORY = 'inMemory';
	    Constants.ROW_MODEL_TYPE_ENTERPRISE = 'enterprise';
	    Constants.DEPRECATED_ROW_MODEL_TYPE_NORMAL = 'normal';
	    Constants.ALWAYS = 'always';
	    Constants.ONLY_WHEN_GROUPING = 'onlyWhenGrouping';
	    Constants.PINNED_TOP = 'top';
	    Constants.PINNED_BOTTOM = 'bottom';
	    Constants.VERTICAL_SCROLL_KEYS_ID = 'verticalScrollKeys';
	    Constants.HORIZONTAL_SCROLL_KEYS_ID = 'horizontalScrollKeys';
	    Constants.DIAGONAL_SCROLL_KEYS_ID = 'diagonalScrollKeys';
	    Constants.VERTICAL_SCROLL_KEYS = {
	        id: Constants.VERTICAL_SCROLL_KEYS_ID,
	        bindings: [{
	                id: Constants.KEY_PAGE_UP_NAME,
	                ctlRequired: false,
	                altRequired: false,
	                keyCode: Constants.KEY_PAGE_UP
	            }, {
	                id: Constants.KEY_PAGE_DOWN_NAME,
	                ctlRequired: false,
	                altRequired: false,
	                keyCode: Constants.KEY_PAGE_DOWN
	            }, {
	                id: Constants.KEY_CTRL_UP_NAME,
	                ctlRequired: true,
	                altRequired: false,
	                keyCode: Constants.KEY_UP
	            }, {
	                id: Constants.KEY_CTRL_DOWN_NAME,
	                ctlRequired: true,
	                altRequired: false,
	                keyCode: Constants.KEY_DOWN
	            }]
	    };
	    Constants.HORIZONTAL_SCROLL_KEYS = {
	        id: Constants.HORIZONTAL_SCROLL_KEYS_ID,
	        bindings: [{
	                id: Constants.KEY_CTRL_LEFT_NAME,
	                ctlRequired: true,
	                altRequired: false,
	                keyCode: Constants.KEY_LEFT
	            }, {
	                id: Constants.KEY_CTRL_RIGHT_NAME,
	                ctlRequired: true,
	                altRequired: false,
	                keyCode: Constants.KEY_RIGHT
	            }]
	    };
	    Constants.DIAGONAL_SCROLL_KEYS = {
	        id: Constants.DIAGONAL_SCROLL_KEYS_ID,
	        bindings: [{
	                id: Constants.KEY_PAGE_HOME_NAME,
	                ctlRequired: false,
	                altRequired: false,
	                keyCode: Constants.KEY_PAGE_HOME
	            }, {
	                id: Constants.KEY_PAGE_END_NAME,
	                ctlRequired: false,
	                altRequired: false,
	                keyCode: Constants.KEY_PAGE_END
	            }]
	    };
	    return Constants;
	}());
	exports.Constants = Constants;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var events_1 = __webpack_require__(11);
	var utils_1 = __webpack_require__(8);
	var ComponentUtil = (function () {
	    function ComponentUtil() {
	    }
	    ComponentUtil.getEventCallbacks = function () {
	        if (!ComponentUtil.EVENT_CALLBACKS) {
	            ComponentUtil.EVENT_CALLBACKS = [];
	            ComponentUtil.EVENTS.forEach(function (eventName) {
	                ComponentUtil.EVENT_CALLBACKS.push(ComponentUtil.getCallbackForEvent(eventName));
	            });
	        }
	        return ComponentUtil.EVENT_CALLBACKS;
	    };
	    ComponentUtil.copyAttributesToGridOptions = function (gridOptions, component) {
	        checkForDeprecated(component);
	        // create empty grid options if none were passed
	        if (typeof gridOptions !== 'object') {
	            gridOptions = {};
	        }
	        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
	        var pGridOptions = gridOptions;
	        // add in all the simple properties
	        ComponentUtil.ARRAY_PROPERTIES
	            .concat(ComponentUtil.STRING_PROPERTIES)
	            .concat(ComponentUtil.OBJECT_PROPERTIES)
	            .concat(ComponentUtil.FUNCTION_PROPERTIES)
	            .forEach(function (key) {
	            if (typeof (component)[key] !== 'undefined') {
	                pGridOptions[key] = component[key];
	            }
	        });
	        ComponentUtil.BOOLEAN_PROPERTIES.forEach(function (key) {
	            if (typeof (component)[key] !== 'undefined') {
	                pGridOptions[key] = ComponentUtil.toBoolean(component[key]);
	            }
	        });
	        ComponentUtil.NUMBER_PROPERTIES.forEach(function (key) {
	            if (typeof (component)[key] !== 'undefined') {
	                pGridOptions[key] = ComponentUtil.toNumber(component[key]);
	            }
	        });
	        ComponentUtil.getEventCallbacks().forEach(function (funcName) {
	            if (typeof (component)[funcName] !== 'undefined') {
	                pGridOptions[funcName] = component[funcName];
	            }
	        });
	        return gridOptions;
	    };
	    ComponentUtil.getCallbackForEvent = function (eventName) {
	        if (!eventName || eventName.length < 2) {
	            return eventName;
	        }
	        else {
	            return 'on' + eventName[0].toUpperCase() + eventName.substr(1);
	        }
	    };
	    // change this method, the caller should know if it's initialised or not, plus 'initialised'
	    // is not relevant for all component types. maybe pass in the api and columnApi instead???
	    ComponentUtil.processOnChange = function (changes, gridOptions, api, columnApi) {
	        //if (!component._initialised || !changes) { return; }
	        if (!changes) {
	            return;
	        }
	        checkForDeprecated(changes);
	        // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
	        var pGridOptions = gridOptions;
	        // check if any change for the simple types, and if so, then just copy in the new value
	        ComponentUtil.ARRAY_PROPERTIES
	            .concat(ComponentUtil.OBJECT_PROPERTIES)
	            .concat(ComponentUtil.STRING_PROPERTIES)
	            .forEach(function (key) {
	            if (changes[key]) {
	                pGridOptions[key] = changes[key].currentValue;
	            }
	        });
	        ComponentUtil.BOOLEAN_PROPERTIES.forEach(function (key) {
	            if (changes[key]) {
	                pGridOptions[key] = ComponentUtil.toBoolean(changes[key].currentValue);
	            }
	        });
	        ComponentUtil.NUMBER_PROPERTIES.forEach(function (key) {
	            if (changes[key]) {
	                pGridOptions[key] = ComponentUtil.toNumber(changes[key].currentValue);
	            }
	        });
	        ComponentUtil.getEventCallbacks().forEach(function (funcName) {
	            if (changes[funcName]) {
	                pGridOptions[funcName] = changes[funcName].currentValue;
	            }
	        });
	        if (changes.showToolPanel) {
	            api.showToolPanel(ComponentUtil.toBoolean(changes.showToolPanel.currentValue));
	        }
	        if (changes.quickFilterText) {
	            api.setQuickFilter(changes.quickFilterText.currentValue);
	        }
	        if (changes.rowData) {
	            api.setRowData(changes.rowData.currentValue);
	        }
	        if (changes.pinnedTopRowData) {
	            api.setFloatingTopRowData(changes.pinnedTopRowData.currentValue);
	        }
	        if (changes.pinnedBottomRowData) {
	            api.setFloatingBottomRowData(changes.pinnedBottomRowData.currentValue);
	        }
	        if (changes.columnDefs) {
	            api.setColumnDefs(changes.columnDefs.currentValue);
	        }
	        if (changes.datasource) {
	            api.setDatasource(changes.datasource.currentValue);
	        }
	        if (changes.headerHeight) {
	            api.setHeaderHeight(ComponentUtil.toNumber(changes.headerHeight.currentValue));
	        }
	        if (changes.paginationPageSize) {
	            api.paginationSetPageSize(ComponentUtil.toNumber(changes.paginationPageSize.currentValue));
	        }
	        if (changes.pivotMode) {
	            columnApi.setPivotMode(ComponentUtil.toBoolean(changes.pivotMode.currentValue));
	        }
	        if (changes.groupRemoveSingleChildren) {
	            api.setGroupRemoveSingleChildren(ComponentUtil.toBoolean(changes.groupRemoveSingleChildren.currentValue));
	        }
	        // copy changes into an event for dispatch
	        var event = {
	            type: events_1.Events.EVENT_COMPONENT_STATE_CHANGED,
	            api: gridOptions.api,
	            columnApi: gridOptions.columnApi
	        };
	        utils_1.Utils.iterateObject(changes, function (key, value) {
	            event[key] = value;
	        });
	        api.dispatchEvent(event);
	    };
	    ComponentUtil.toBoolean = function (value) {
	        if (typeof value === 'boolean') {
	            return value;
	        }
	        else if (typeof value === 'string') {
	            // for boolean, compare to empty String to allow attributes appearing with
	            // not value to be treated as 'true'
	            return value.toUpperCase() === 'TRUE' || value == '';
	        }
	        else {
	            return false;
	        }
	    };
	    ComponentUtil.toNumber = function (value) {
	        if (typeof value === 'number') {
	            return value;
	        }
	        else if (typeof value === 'string') {
	            return Number(value);
	        }
	        else {
	            return undefined;
	        }
	    };
	    // all the events are populated in here AFTER this class (at the bottom of the file).
	    ComponentUtil.EVENTS = [];
	    ComponentUtil.STRING_PROPERTIES = [
	        'sortingOrder', 'rowClass', 'rowSelection', 'overlayLoadingTemplate',
	        'overlayNoRowsTemplate', 'headerCellTemplate', 'quickFilterText', 'rowModelType',
	        'editType', 'domLayout', 'clipboardDeliminator', 'rowGroupPanelShow'
	    ];
	    ComponentUtil.OBJECT_PROPERTIES = [
	        'components', 'frameworkComponents', 'rowStyle', 'context', 'autoGroupColumnDef', 'groupColumnDef', 'localeText', 'icons', 'datasource',
	        'enterpriseDatasource', 'viewportDatasource', 'groupRowRendererParams', 'aggFuncs',
	        'fullWidthCellRendererParams', 'defaultColGroupDef', 'defaultColDef', 'defaultExportParams', 'columnTypes'
	        //,'cellRenderers','cellEditors'
	    ];
	    ComponentUtil.ARRAY_PROPERTIES = [
	        'slaveGrids', 'alignedGrids', 'rowData',
	        'columnDefs', 'excelStyles', 'pinnedTopRowData', 'pinnedBottomRowData'
	        // deprecated
	    ];
	    ComponentUtil.NUMBER_PROPERTIES = [
	        'rowHeight', 'rowBuffer', 'colWidth', 'headerHeight', 'groupHeaderHeight', 'floatingFiltersHeight',
	        'pivotHeaderHeight', 'pivotGroupHeaderHeight', 'groupDefaultExpanded',
	        'minColWidth', 'maxColWidth', 'viewportRowModelPageSize', 'viewportRowModelBufferSize',
	        'layoutInterval', 'autoSizePadding', 'maxBlocksInCache', 'maxConcurrentDatasourceRequests',
	        'cacheOverflowSize', 'paginationPageSize', 'cacheBlockSize', 'infiniteInitialRowCount',
	        'scrollbarWidth', 'paginationStartPage', 'infiniteBlockSize'
	    ];
	    ComponentUtil.BOOLEAN_PROPERTIES = [
	        'toolPanelSuppressRowGroups', 'toolPanelSuppressValues', 'toolPanelSuppressPivots', 'toolPanelSuppressPivotMode',
	        'suppressRowClickSelection', 'suppressCellSelection', 'suppressHorizontalScroll', 'debug',
	        'enableColResize', 'enableCellExpressions', 'enableSorting', 'enableServerSideSorting',
	        'enableFilter', 'enableServerSideFilter', 'angularCompileRows', 'angularCompileFilters',
	        'angularCompileHeaders', 'groupSuppressAutoColumn', 'groupSelectsChildren',
	        'groupIncludeFooter', 'groupUseEntireRow', 'groupSuppressRow', 'groupSuppressBlankHeader', 'forPrint',
	        'suppressMenuHide', 'rowDeselection', 'unSortIcon', 'suppressMultiSort',
	        'singleClickEdit', 'suppressLoadingOverlay', 'suppressNoRowsOverlay', 'suppressAutoSize',
	        'suppressParentsInRowNodes', 'showToolPanel', 'suppressColumnMoveAnimation', 'suppressMovableColumns',
	        'suppressFieldDotNotation', 'enableRangeSelection',
	        'pivotPanelShow', 'suppressTouch', 'suppressAsyncEvents', 'allowContextMenuWithControlKey',
	        'suppressContextMenu', 'suppressMenuFilterPanel', 'suppressMenuMainPanel', 'suppressMenuColumnPanel',
	        'enableStatusBar', 'alwaysShowStatusBar', 'rememberGroupStateWhenNewData', 'enableCellChangeFlash', 'suppressDragLeaveHidesColumns',
	        'suppressMiddleClickScrolls', 'suppressPreventDefaultOnMouseWheel', 'suppressUseColIdForGroups',
	        'suppressCopyRowsToClipboard', 'pivotMode', 'suppressAggFuncInHeader', 'suppressColumnVirtualisation', 'suppressAggAtRootLevel',
	        'suppressFocusAfterRefresh', 'functionsPassive', 'functionsReadOnly',
	        'animateRows', 'groupSelectsFiltered', 'groupRemoveSingleChildren', 'enableRtl', 'suppressClickEdit',
	        'enableGroupEdit', 'embedFullWidthRows', 'suppressTabbing', 'suppressPaginationPanel', 'floatingFilter',
	        'groupHideOpenParents', 'groupMultiAutoColumn', 'pagination', 'stopEditingWhenGridLosesFocus',
	        'paginationAutoPageSize', 'suppressScrollOnNewData', 'purgeClosedRowNodes', 'cacheQuickFilter',
	        'deltaRowDataMode', 'ensureDomOrder', 'accentedSort', 'pivotTotals', 'suppressChangeDetection',
	        'valueCache', 'valueCacheNeverExpires', 'aggregateOnlyChangedColumns', 'suppressAnimationFrame',
	        'suppressExcelExport', 'suppressCsvExport'
	    ];
	    ComponentUtil.FUNCTION_PROPERTIES = ['headerCellRenderer', 'localeTextFunc', 'groupRowInnerRenderer', 'groupRowInnerRendererFramework',
	        'dateComponent', 'dateComponentFramework', 'groupRowRenderer', 'groupRowRendererFramework', 'isExternalFilterPresent',
	        'getRowHeight', 'doesExternalFilterPass', 'getRowClass', 'getRowStyle', 'getHeaderCellTemplate', 'traverseNode',
	        'getContextMenuItems', 'getMainMenuItems', 'processRowPostCreate', 'processCellForClipboard',
	        'getNodeChildDetails', 'groupRowAggNodes', 'getRowNodeId', 'isFullWidthCell', 'fullWidthCellRenderer',
	        'fullWidthCellRendererFramework', 'doesDataFlower', 'processSecondaryColDef', 'processSecondaryColGroupDef',
	        'getBusinessKeyForNode', 'sendToClipboard', 'navigateToNextCell', 'tabToNextCell',
	        'processCellFromClipboard', 'getDocument', 'postProcessPopup', 'getChildCount'];
	    ComponentUtil.ALL_PROPERTIES = ComponentUtil.ARRAY_PROPERTIES
	        .concat(ComponentUtil.OBJECT_PROPERTIES)
	        .concat(ComponentUtil.STRING_PROPERTIES)
	        .concat(ComponentUtil.NUMBER_PROPERTIES)
	        .concat(ComponentUtil.FUNCTION_PROPERTIES)
	        .concat(ComponentUtil.BOOLEAN_PROPERTIES);
	    return ComponentUtil;
	}());
	exports.ComponentUtil = ComponentUtil;
	utils_1.Utils.iterateObject(events_1.Events, function (key, value) {
	    ComponentUtil.EVENTS.push(value);
	});
	function checkForDeprecated(changes) {
	    if (changes.rowDeselected || changes.onRowDeselected) {
	        console.warn('ag-grid: as of v3.4 rowDeselected no longer exists. Please check the docs.');
	    }
	}


/***/ }),
/* 11 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Events = (function () {
	    function Events() {
	    }
	    /** Everything has changed with the columns. Either complete new set of columns set, or user called setState()*/
	    Events.EVENT_COLUMN_EVERYTHING_CHANGED = 'columnEverythingChanged';
	    /** User has set in new columns. */
	    Events.EVENT_NEW_COLUMNS_LOADED = 'newColumnsLoaded';
	    /** The pivot mode flag was changed */
	    Events.EVENT_COLUMN_PIVOT_MODE_CHANGED = 'columnPivotModeChanged';
	    /** A row group column was added, removed or order changed. */
	    Events.EVENT_COLUMN_ROW_GROUP_CHANGED = 'columnRowGroupChanged';
	    /** A pivot column was added, removed or order changed. */
	    Events.EVENT_COLUMN_PIVOT_CHANGED = 'columnPivotChanged';
	    /** The list of grid columns has changed. */
	    Events.EVENT_GRID_COLUMNS_CHANGED = 'gridColumnsChanged';
	    /** A value column was added, removed or agg function was changed. */
	    Events.EVENT_COLUMN_VALUE_CHANGED = 'columnValueChanged';
	    /** A column was moved */
	    Events.EVENT_COLUMN_MOVED = 'columnMoved';
	    /** One or more columns was shown / hidden */
	    Events.EVENT_COLUMN_VISIBLE = 'columnVisible';
	    /** One or more columns was pinned / unpinned*/
	    Events.EVENT_COLUMN_PINNED = 'columnPinned';
	    /** A column group was opened / closed */
	    Events.EVENT_COLUMN_GROUP_OPENED = 'columnGroupOpened';
	    /** One or more columns was resized. If just one, the column in the event is set. */
	    Events.EVENT_COLUMN_RESIZED = 'columnResized';
	    /** The list of displayed columns has changed, can result from columns open / close, column move, pivot, group, etc */
	    Events.EVENT_DISPLAYED_COLUMNS_CHANGED = 'displayedColumnsChanged';
	    /** The list of virtual columns has changed, results from viewport changing */
	    Events.EVENT_VIRTUAL_COLUMNS_CHANGED = 'virtualColumnsChanged';
	    /** A row group was opened / closed */
	    Events.EVENT_ROW_GROUP_OPENED = 'rowGroupOpened';
	    /** The client has set new data into the grid */
	    Events.EVENT_ROW_DATA_CHANGED = 'rowDataChanged';
	    /** The client has updated data for the grid */
	    Events.EVENT_ROW_DATA_UPDATED = 'rowDataUpdated';
	    /** The client has set new floating data into the grid */
	    Events.EVENT_PINNED_ROW_DATA_CHANGED = 'pinnedRowDataChanged';
	    /** Range selection has changed */
	    Events.EVENT_RANGE_SELECTION_CHANGED = 'rangeSelectionChanged';
	    /** Model was updated - grid updates the drawn rows when this happens */
	    Events.EVENT_MODEL_UPDATED = 'modelUpdated';
	    Events.EVENT_CELL_CLICKED = 'cellClicked';
	    Events.EVENT_CELL_DOUBLE_CLICKED = 'cellDoubleClicked';
	    Events.EVENT_CELL_CONTEXT_MENU = 'cellContextMenu';
	    Events.EVENT_CELL_VALUE_CHANGED = 'cellValueChanged';
	    Events.EVENT_ROW_VALUE_CHANGED = 'rowValueChanged';
	    Events.EVENT_CELL_FOCUSED = 'cellFocused';
	    Events.EVENT_ROW_SELECTED = 'rowSelected';
	    Events.EVENT_SELECTION_CHANGED = 'selectionChanged';
	    Events.EVENT_CELL_MOUSE_OVER = 'cellMouseOver';
	    Events.EVENT_CELL_MOUSE_OUT = 'cellMouseOut';
	    /** 2 events for filtering. The grid LISTENS for filterChanged and afterFilterChanged */
	    Events.EVENT_FILTER_CHANGED = 'filterChanged';
	    /** Filter was change but not applied. Only useful if apply buttons are used in filters. */
	    Events.EVENT_FILTER_MODIFIED = 'filterModified';
	    Events.EVENT_SORT_CHANGED = 'sortChanged';
	    /** A row was removed from the dom, for any reason. Use to clean up resources (if any) used by the row. */
	    Events.EVENT_VIRTUAL_ROW_REMOVED = 'virtualRowRemoved';
	    Events.EVENT_ROW_CLICKED = 'rowClicked';
	    Events.EVENT_ROW_DOUBLE_CLICKED = 'rowDoubleClicked';
	    /** Gets called once after the grid has finished initialising. */
	    Events.EVENT_GRID_READY = 'gridReady';
	    /** Width of height of the main grid div has changed. Grid listens for this and does layout of grid if it's
	     * changed, so always filling the space it was given. */
	    Events.EVENT_GRID_SIZE_CHANGED = 'gridSizeChanged';
	    /** The indexes of the rows rendered has changed, eg user has scrolled to a new vertical position. */
	    Events.EVENT_VIEWPORT_CHANGED = 'viewportChanged';
	    /** A column drag has started, either resizing a column or moving a column. */
	    Events.EVENT_DRAG_STARTED = 'dragStarted';
	    /** A column drag has stopped */
	    Events.EVENT_DRAG_STOPPED = 'dragStopped';
	    Events.EVENT_ROW_EDITING_STARTED = 'rowEditingStarted';
	    Events.EVENT_ROW_EDITING_STOPPED = 'rowEditingStopped';
	    Events.EVENT_CELL_EDITING_STARTED = 'cellEditingStarted';
	    Events.EVENT_CELL_EDITING_STOPPED = 'cellEditingStopped';
	    /** Main body of grid has scrolled, either horizontally or vertically */
	    Events.EVENT_BODY_SCROLL = 'bodyScroll';
	    /** The displayed page for pagination has changed. For example the data was filtered or sorted,
	     * or the user has moved to a different page. */
	    Events.EVENT_PAGINATION_CHANGED = 'paginationChanged';
	    /** Only used by React, Angular 2+, Web Components, Aurelia and VueJS ag-Grid components
	     * (not used if doing plain JavaScript or Angular 1.x). If the grid receives changes due
	     * to bound properties, this event fires after the grid has finished processing the change. */
	    Events.EVENT_COMPONENT_STATE_CHANGED = 'componentStateChanged';
	    /** All items from here down are used internally by the grid, not intended for external use. */
	    // not documented, either experimental, or we just don't want users using an ddepending on them
	    Events.EVENT_BODY_HEIGHT_CHANGED = 'bodyHeightChanged';
	    Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED = 'displayedColumnsWidthChanged';
	    Events.EVENT_SCROLL_VISIBILITY_CHANGED = 'scrollVisibilityChanged';
	    Events.EVENT_COLUMN_HOVER_CHANGED = 'columnHoverChanged';
	    Events.EVENT_FLASH_CELLS = 'flashCells';
	    // these are used for server side group and agg - only used by CS with Viewport Row Model - intention is
	    // to design these better around server side functions and then release to general public when fully working with
	    // all the row models.
	    Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST = 'columnRowGroupChangeRequest';
	    Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST = 'columnPivotChangeRequest';
	    Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST = 'columnValueChangeRequest';
	    Events.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST = 'columnAggFuncChangeRequest';
	    return Events;
	}());
	exports.Events = Events;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var csvCreator_1 = __webpack_require__(13);
	var rowRenderer_1 = __webpack_require__(23);
	var headerRenderer_1 = __webpack_require__(88);
	var filterManager_1 = __webpack_require__(51);
	var columnController_1 = __webpack_require__(15);
	var selectionController_1 = __webpack_require__(27);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var gridPanel_1 = __webpack_require__(24);
	var valueService_1 = __webpack_require__(31);
	var eventService_1 = __webpack_require__(5);
	var constants_1 = __webpack_require__(9);
	var context_1 = __webpack_require__(7);
	var gridCore_1 = __webpack_require__(50);
	var sortController_1 = __webpack_require__(62);
	var focusedCellController_1 = __webpack_require__(38);
	var gridCell_1 = __webpack_require__(33);
	var utils_1 = __webpack_require__(8);
	var cellRendererFactory_1 = __webpack_require__(77);
	var cellEditorFactory_1 = __webpack_require__(70);
	var paginationProxy_1 = __webpack_require__(41);
	var immutableService_1 = __webpack_require__(107);
	var valueCache_1 = __webpack_require__(32);
	var alignedGridsService_1 = __webpack_require__(43);
	var pinnedRowModel_1 = __webpack_require__(44);
	var GridApi = (function () {
	    function GridApi() {
	    }
	    GridApi.prototype.init = function () {
	        switch (this.rowModel.getType()) {
	            case constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY:
	                this.inMemoryRowModel = this.rowModel;
	                break;
	            case constants_1.Constants.ROW_MODEL_TYPE_INFINITE:
	                this.infinitePageRowModel = this.rowModel;
	                break;
	            case constants_1.Constants.ROW_MODEL_TYPE_ENTERPRISE:
	                this.enterpriseRowModel = this.rowModel;
	                break;
	        }
	    };
	    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */
	    GridApi.prototype.__getAlignedGridService = function () {
	        return this.alignedGridsService;
	    };
	    GridApi.prototype.getDataAsCsv = function (params) {
	        return this.csvCreator.getDataAsCsv(params);
	    };
	    GridApi.prototype.exportDataAsCsv = function (params) {
	        this.csvCreator.exportDataAsCsv(params);
	    };
	    GridApi.prototype.getDataAsExcel = function (params) {
	        if (!this.excelCreator) {
	            console.warn('ag-Grid: Excel export is only available in ag-Grid Enterprise');
	        }
	        return this.excelCreator.getDataAsExcelXml(params);
	    };
	    GridApi.prototype.exportDataAsExcel = function (params) {
	        if (!this.excelCreator) {
	            console.warn('ag-Grid: Excel export is only available in ag-Grid Enterprise');
	        }
	        this.excelCreator.exportDataAsExcel(params);
	    };
	    GridApi.prototype.setEnterpriseDatasource = function (datasource) {
	        if (this.gridOptionsWrapper.isRowModelEnterprise()) {
	            // should really have an IEnterpriseRowModel interface, so we are not casting to any
	            this.rowModel.setDatasource(datasource);
	        }
	        else {
	            console.warn("ag-Grid: you can only use an enterprise datasource when gridOptions.rowModelType is '" + constants_1.Constants.ROW_MODEL_TYPE_ENTERPRISE + "'");
	        }
	    };
	    GridApi.prototype.setDatasource = function (datasource) {
	        if (this.gridOptionsWrapper.isRowModelInfinite()) {
	            this.rowModel.setDatasource(datasource);
	        }
	        else {
	            console.warn("ag-Grid: you can only use a datasource when gridOptions.rowModelType is '" + constants_1.Constants.ROW_MODEL_TYPE_INFINITE + "'");
	        }
	    };
	    GridApi.prototype.setViewportDatasource = function (viewportDatasource) {
	        if (this.gridOptionsWrapper.isRowModelViewport()) {
	            // this is bad coding, because it's using an interface that's exposed in the enterprise.
	            // really we should create an interface in the core for viewportDatasource and let
	            // the enterprise implement it, rather than casting to 'any' here
	            this.rowModel.setViewportDatasource(viewportDatasource);
	        }
	        else {
	            console.warn("ag-Grid: you can only use a viewport datasource when gridOptions.rowModelType is '" + constants_1.Constants.ROW_MODEL_TYPE_VIEWPORT + "'");
	        }
	    };
	    GridApi.prototype.setRowData = function (rowData) {
	        if (this.gridOptionsWrapper.isRowModelDefault()) {
	            if (this.gridOptionsWrapper.isDeltaRowDataMode()) {
	                var transaction = this.immutableService.createTransactionForRowData(rowData);
	                this.inMemoryRowModel.updateRowData(transaction);
	            }
	            else {
	                this.selectionController.reset();
	                this.inMemoryRowModel.setRowData(rowData);
	            }
	        }
	        else {
	            console.log('cannot call setRowData unless using normal row model');
	        }
	    };
	    // DEPRECATED
	    GridApi.prototype.setFloatingTopRowData = function (rows) {
	        console.warn('ag-Grid: since v12, api.setFloatingTopRowData() is now api.setPinnedTopRowData()');
	        this.setPinnedTopRowData(rows);
	    };
	    // DEPRECATED
	    GridApi.prototype.setFloatingBottomRowData = function (rows) {
	        console.warn('ag-Grid: since v12, api.setFloatingBottomRowData() is now api.setPinnedBottomRowData()');
	        this.setPinnedBottomRowData(rows);
	    };
	    // DEPRECATED
	    GridApi.prototype.getFloatingTopRowCount = function () {
	        console.warn('ag-Grid: since v12, api.getFloatingTopRowCount() is now api.getPinnedTopRowCount()');
	        return this.getPinnedTopRowCount();
	    };
	    // DEPRECATED
	    GridApi.prototype.getFloatingBottomRowCount = function () {
	        console.warn('ag-Grid: since v12, api.getFloatingBottomRowCount() is now api.getPinnedBottomRowCount()');
	        return this.getPinnedBottomRowCount();
	    };
	    // DEPRECATED
	    GridApi.prototype.getFloatingTopRow = function (index) {
	        console.warn('ag-Grid: since v12, api.getFloatingTopRow() is now api.getPinnedTopRow()');
	        return this.getPinnedTopRow(index);
	    };
	    // DEPRECATED
	    GridApi.prototype.getFloatingBottomRow = function (index) {
	        console.warn('ag-Grid: since v12, api.getFloatingBottomRow() is now api.getPinnedBottomRow()');
	        return this.getPinnedBottomRow(index);
	    };
	    GridApi.prototype.setPinnedTopRowData = function (rows) {
	        this.pinnedRowModel.setPinnedTopRowData(rows);
	    };
	    GridApi.prototype.setPinnedBottomRowData = function (rows) {
	        this.pinnedRowModel.setPinnedBottomRowData(rows);
	    };
	    GridApi.prototype.getPinnedTopRowCount = function () {
	        return this.pinnedRowModel.getPinnedTopRowCount();
	    };
	    GridApi.prototype.getPinnedBottomRowCount = function () {
	        return this.pinnedRowModel.getPinnedBottomRowCount();
	    };
	    GridApi.prototype.getPinnedTopRow = function (index) {
	        return this.pinnedRowModel.getPinnedTopRow(index);
	    };
	    GridApi.prototype.getPinnedBottomRow = function (index) {
	        return this.pinnedRowModel.getPinnedBottomRow(index);
	    };
	    GridApi.prototype.setColumnDefs = function (colDefs) {
	        this.columnController.setColumnDefs(colDefs);
	    };
	    GridApi.prototype.expireValueCache = function () {
	        this.valueCache.expire();
	    };
	    GridApi.prototype.getVerticalPixelRange = function () {
	        return this.gridPanel.getVerticalPixelRange();
	    };
	    GridApi.prototype.refreshCells = function (params) {
	        if (params === void 0) { params = {}; }
	        if (Array.isArray(params)) {
	            // the old version of refreshCells() took an array of rowNodes for the first argument
	            console.warn('since ag-Grid v11.1, refreshCells() now takes parameters, please see the documentation.');
	            return;
	        }
	        this.rowRenderer.refreshCells(params);
	    };
	    GridApi.prototype.redrawRows = function (params) {
	        if (params === void 0) { params = {}; }
	        if (params && params.rowNodes) {
	            this.rowRenderer.redrawRows(params.rowNodes);
	        }
	        else {
	            this.rowRenderer.redrawAfterModelUpdate();
	        }
	    };
	    GridApi.prototype.timeFullRedraw = function (count) {
	        if (count === void 0) { count = 1; }
	        var iterationCount = 0;
	        var totalProcessing = 0;
	        var totalReflow = 0;
	        var that = this;
	        doOneIteration();
	        function doOneIteration() {
	            var start = (new Date()).getTime();
	            that.rowRenderer.redrawAfterModelUpdate();
	            var endProcessing = (new Date()).getTime();
	            setTimeout(function () {
	                var endReflow = (new Date()).getTime();
	                var durationProcessing = endProcessing - start;
	                var durationReflow = endReflow - endProcessing;
	                console.log('duration:  processing = ' + durationProcessing + 'ms, reflow = ' + durationReflow + 'ms');
	                iterationCount++;
	                totalProcessing += durationProcessing;
	                totalReflow += durationReflow;
	                if (iterationCount < count) {
	                    // wait for 1s between tests
	                    setTimeout(doOneIteration, 1000);
	                }
	                else {
	                    finish();
	                }
	            }, 0);
	        }
	        function finish() {
	            console.log('tests complete. iteration count = ' + iterationCount);
	            console.log('average processing = ' + (totalProcessing / iterationCount) + 'ms');
	            console.log('average reflow = ' + (totalReflow / iterationCount) + 'ms');
	        }
	    };
	    // *** deprecated
	    GridApi.prototype.refreshView = function () {
	        console.warn('ag-Grid: since v11.1, refreshView() is deprecated, please call redrawRows() instead');
	        this.redrawRows();
	    };
	    // *** deprecated
	    GridApi.prototype.refreshRows = function (rowNodes) {
	        console.warn('since ag-Grid v11.1, refreshRows() is deprecated, please use refreshCells({rowNodes: rows}) or redrawRows({rowNodes: rows}) instead');
	        this.refreshCells({ rowNodes: rowNodes });
	    };
	    // *** deprecated
	    GridApi.prototype.rowDataChanged = function (rows) {
	        console.log('ag-Grid: rowDataChanged is deprecated, either call refreshView() to refresh everything, or call rowNode.setRowData(newData) to set value on a particular node');
	        this.redrawRows();
	    };
	    // *** deprecated
	    GridApi.prototype.softRefreshView = function () {
	        console.warn('ag-Grid: since v11.1, softRefreshView() is deprecated, call refreshCells(params) instead.');
	        this.refreshCells({ volatile: true });
	    };
	    // *** deprecated
	    GridApi.prototype.refreshGroupRows = function () {
	        console.warn('ag-Grid: since v11.1, refreshGroupRows() is no longer supported, call refreshCells() instead. ' +
	            'Because refreshCells() now does dirty checking, it will only refresh cells that have changed, so it should ' +
	            'not be necessary to only refresh the group rows.');
	        this.refreshCells();
	    };
	    GridApi.prototype.setFunctionsReadOnly = function (readOnly) {
	        this.gridOptionsWrapper.setProperty('functionsReadOnly', readOnly);
	    };
	    GridApi.prototype.refreshHeader = function () {
	        this.headerRenderer.refreshHeader();
	    };
	    GridApi.prototype.isAnyFilterPresent = function () {
	        return this.filterManager.isAnyFilterPresent();
	    };
	    GridApi.prototype.isAdvancedFilterPresent = function () {
	        return this.filterManager.isAdvancedFilterPresent();
	    };
	    GridApi.prototype.isQuickFilterPresent = function () {
	        return this.filterManager.isQuickFilterPresent();
	    };
	    GridApi.prototype.getModel = function () {
	        return this.rowModel;
	    };
	    GridApi.prototype.onGroupExpandedOrCollapsed = function (deprecated_refreshFromIndex) {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.log('ag-Grid: cannot call onGroupExpandedOrCollapsed unless using normal row model');
	        }
	        if (utils_1.Utils.exists(deprecated_refreshFromIndex)) {
	            console.log('ag-Grid: api.onGroupExpandedOrCollapsed - refreshFromIndex parameter is not longer used, the grid will refresh all rows');
	        }
	        // we don't really want the user calling this if one one rowNode was expanded, instead they should be
	        // calling rowNode.setExpanded(boolean) - this way we do a 'keepRenderedRows=false' so that the whole
	        // grid gets refreshed again - otherwise the row with the rowNodes that were changed won't get updated,
	        // and thus the expand icon in the group cell won't get 'opened' or 'closed'.
	        this.inMemoryRowModel.refreshModel({ step: constants_1.Constants.STEP_MAP });
	    };
	    GridApi.prototype.refreshInMemoryRowModel = function (step) {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.log('cannot call refreshInMemoryRowModel unless using normal row model');
	        }
	        var paramsStep = constants_1.Constants.STEP_EVERYTHING;
	        var stepsMapped = {
	            group: constants_1.Constants.STEP_EVERYTHING,
	            filter: constants_1.Constants.STEP_FILTER,
	            map: constants_1.Constants.STEP_MAP,
	            aggregate: constants_1.Constants.STEP_AGGREGATE,
	            sort: constants_1.Constants.STEP_SORT,
	            pivot: constants_1.Constants.STEP_PIVOT
	        };
	        if (utils_1.Utils.exists(step)) {
	            paramsStep = stepsMapped[step];
	        }
	        if (utils_1.Utils.missing(paramsStep)) {
	            console.error("ag-Grid: invalid step " + step + ", available steps are " + Object.keys(stepsMapped).join(', '));
	            return;
	        }
	        var modelParams = {
	            step: paramsStep,
	            keepRenderedRows: true,
	            animate: true,
	            keepEditingRows: true
	        };
	        this.inMemoryRowModel.refreshModel(modelParams);
	    };
	    GridApi.prototype.getRowNode = function (id) {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.warn('ag-Grid: cannot call getRowNode unless using normal row model');
	            return;
	        }
	        return this.inMemoryRowModel.getRowNode(id);
	    };
	    GridApi.prototype.expandAll = function () {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.warn('ag-Grid: cannot call expandAll unless using normal row model');
	            return;
	        }
	        this.inMemoryRowModel.expandOrCollapseAll(true);
	    };
	    GridApi.prototype.collapseAll = function () {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.warn('ag-Grid: cannot call collapseAll unless using normal row model');
	            return;
	        }
	        this.inMemoryRowModel.expandOrCollapseAll(false);
	    };
	    GridApi.prototype.addVirtualRowListener = function (eventName, rowIndex, callback) {
	        if (typeof eventName !== 'string') {
	            console.log('ag-Grid: addVirtualRowListener is deprecated, please use addRenderedRowListener.');
	        }
	        this.addRenderedRowListener(eventName, rowIndex, callback);
	    };
	    GridApi.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {
	        if (eventName === 'virtualRowRemoved') {
	            console.log('ag-Grid: event virtualRowRemoved is deprecated, now called renderedRowRemoved');
	            eventName = '' +
	                '';
	        }
	        if (eventName === 'virtualRowSelected') {
	            console.log('ag-Grid: event virtualRowSelected is deprecated, to register for individual row ' +
	                'selection events, add a listener directly to the row node.');
	        }
	        this.rowRenderer.addRenderedRowListener(eventName, rowIndex, callback);
	    };
	    GridApi.prototype.setQuickFilter = function (newFilter) {
	        this.filterManager.setQuickFilter(newFilter);
	    };
	    GridApi.prototype.selectIndex = function (index, tryMulti, suppressEvents) {
	        console.log('ag-Grid: do not use api for selection, call node.setSelected(value) instead');
	        if (suppressEvents) {
	            console.log('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
	        }
	        this.selectionController.selectIndex(index, tryMulti);
	    };
	    GridApi.prototype.deselectIndex = function (index, suppressEvents) {
	        if (suppressEvents === void 0) { suppressEvents = false; }
	        console.log('ag-Grid: do not use api for selection, call node.setSelected(value) instead');
	        if (suppressEvents) {
	            console.log('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
	        }
	        this.selectionController.deselectIndex(index);
	    };
	    GridApi.prototype.selectNode = function (node, tryMulti, suppressEvents) {
	        if (tryMulti === void 0) { tryMulti = false; }
	        if (suppressEvents === void 0) { suppressEvents = false; }
	        console.log('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');
	        if (suppressEvents) {
	            console.log('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
	        }
	        node.setSelectedParams({ newValue: true, clearSelection: !tryMulti });
	    };
	    GridApi.prototype.deselectNode = function (node, suppressEvents) {
	        if (suppressEvents === void 0) { suppressEvents = false; }
	        console.log('ag-Grid: API for selection is deprecated, call node.setSelected(value) instead');
	        if (suppressEvents) {
	            console.log('ag-Grid: suppressEvents is no longer supported, stop listening for the event if you no longer want it');
	        }
	        node.setSelectedParams({ newValue: false });
	    };
	    GridApi.prototype.selectAll = function () {
	        this.selectionController.selectAllRowNodes();
	    };
	    GridApi.prototype.deselectAll = function () {
	        this.selectionController.deselectAllRowNodes();
	    };
	    GridApi.prototype.selectAllFiltered = function () {
	        this.selectionController.selectAllRowNodes(true);
	    };
	    GridApi.prototype.deselectAllFiltered = function () {
	        this.selectionController.deselectAllRowNodes(true);
	    };
	    GridApi.prototype.recomputeAggregates = function () {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.log('cannot call recomputeAggregates unless using normal row model');
	        }
	        this.inMemoryRowModel.refreshModel({ step: constants_1.Constants.STEP_AGGREGATE });
	    };
	    GridApi.prototype.sizeColumnsToFit = function () {
	        if (this.gridOptionsWrapper.isForPrint()) {
	            console.warn('ag-grid: sizeColumnsToFit does not work when forPrint=true');
	            return;
	        }
	        this.gridPanel.sizeColumnsToFit();
	    };
	    GridApi.prototype.showLoadingOverlay = function () {
	        this.gridPanel.showLoadingOverlay();
	    };
	    GridApi.prototype.showNoRowsOverlay = function () {
	        this.gridPanel.showNoRowsOverlay();
	    };
	    GridApi.prototype.hideOverlay = function () {
	        this.gridPanel.hideOverlay();
	    };
	    GridApi.prototype.isNodeSelected = function (node) {
	        console.log('ag-Grid: no need to call api.isNodeSelected(), just call node.isSelected() instead');
	        return node.isSelected();
	    };
	    GridApi.prototype.getSelectedNodesById = function () {
	        console.error('ag-Grid: since version 3.4, getSelectedNodesById no longer exists, use getSelectedNodes() instead');
	        return null;
	    };
	    GridApi.prototype.getSelectedNodes = function () {
	        return this.selectionController.getSelectedNodes();
	    };
	    GridApi.prototype.getSelectedRows = function () {
	        return this.selectionController.getSelectedRows();
	    };
	    GridApi.prototype.getBestCostNodeSelection = function () {
	        return this.selectionController.getBestCostNodeSelection();
	    };
	    GridApi.prototype.getRenderedNodes = function () {
	        return this.rowRenderer.getRenderedNodes();
	    };
	    GridApi.prototype.ensureColIndexVisible = function (index) {
	        console.warn('ag-Grid: ensureColIndexVisible(index) no longer supported, use ensureColumnVisible(colKey) instead.');
	    };
	    GridApi.prototype.ensureColumnVisible = function (key) {
	        this.gridPanel.ensureColumnVisible(key);
	    };
	    GridApi.prototype.ensureIndexVisible = function (index) {
	        this.gridPanel.ensureIndexVisible(index);
	    };
	    GridApi.prototype.ensureNodeVisible = function (comparator) {
	        this.gridCore.ensureNodeVisible(comparator);
	    };
	    GridApi.prototype.forEachLeafNode = function (callback) {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.log('cannot call forEachNode unless using normal row model');
	        }
	        this.inMemoryRowModel.forEachLeafNode(callback);
	    };
	    GridApi.prototype.forEachNode = function (callback) {
	        this.rowModel.forEachNode(callback);
	    };
	    GridApi.prototype.forEachNodeAfterFilter = function (callback) {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.log('cannot call forEachNodeAfterFilter unless using normal row model');
	        }
	        this.inMemoryRowModel.forEachNodeAfterFilter(callback);
	    };
	    GridApi.prototype.forEachNodeAfterFilterAndSort = function (callback) {
	        if (utils_1.Utils.missing(this.inMemoryRowModel)) {
	            console.log('cannot call forEachNodeAfterFilterAndSort unless using normal row model');
	        }
	        this.inMemoryRowModel.forEachNodeAfterFilterAndSort(callback);
	    };
	    GridApi.prototype.getFilterApiForColDef = function (colDef) {
	        console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead');
	        return this.getFilterInstance(colDef);
	    };
	    GridApi.prototype.getFilterInstance = function (key) {
	        var column = this.columnController.getPrimaryColumn(key);
	        if (column) {
	            return this.filterManager.getFilterComponent(column);
	        }
	    };
	    GridApi.prototype.getFilterApi = function (key) {
	        console.warn('ag-Grid: getFilterApi is deprecated, use getFilterInstance instead');
	        return this.getFilterInstance(key);
	    };
	    GridApi.prototype.destroyFilter = function (key) {
	        var column = this.columnController.getPrimaryColumn(key);
	        if (column) {
	            return this.filterManager.destroyFilter(column);
	        }
	    };
	    GridApi.prototype.getColumnDef = function (key) {
	        var column = this.columnController.getPrimaryColumn(key);
	        if (column) {
	            return column.getColDef();
	        }
	        else {
	            return null;
	        }
	    };
	    GridApi.prototype.onFilterChanged = function () {
	        this.filterManager.onFilterChanged();
	    };
	    GridApi.prototype.onSortChanged = function () {
	        this.sortController.onSortChanged();
	    };
	    GridApi.prototype.setSortModel = function (sortModel) {
	        this.sortController.setSortModel(sortModel);
	    };
	    GridApi.prototype.getSortModel = function () {
	        return this.sortController.getSortModel();
	    };
	    GridApi.prototype.setFilterModel = function (model) {
	        this.filterManager.setFilterModel(model);
	    };
	    GridApi.prototype.getFilterModel = function () {
	        return this.filterManager.getFilterModel();
	    };
	    GridApi.prototype.getFocusedCell = function () {
	        return this.focusedCellController.getFocusedCell();
	    };
	    GridApi.prototype.clearFocusedCell = function () {
	        return this.focusedCellController.clearFocusedCell();
	    };
	    GridApi.prototype.setFocusedCell = function (rowIndex, colKey, floating) {
	        this.focusedCellController.setFocusedCell(rowIndex, colKey, floating, true);
	    };
	    GridApi.prototype.setHeaderHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_HEADER_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.setGroupHeaderHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.setFloatingFiltersHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.setPivotGroupHeaderHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.setPivotHeaderHeight = function (headerHeight) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, headerHeight);
	        this.doLayout();
	    };
	    GridApi.prototype.showToolPanel = function (show) {
	        this.gridCore.showToolPanel(show);
	    };
	    GridApi.prototype.isToolPanelShowing = function () {
	        return this.gridCore.isToolPanelShowing();
	    };
	    GridApi.prototype.doLayout = function () {
	        this.gridCore.doLayout();
	    };
	    GridApi.prototype.resetRowHeights = function () {
	        if (utils_1.Utils.exists(this.inMemoryRowModel)) {
	            this.inMemoryRowModel.resetRowHeights();
	        }
	    };
	    GridApi.prototype.setGroupRemoveSingleChildren = function (value) {
	        this.gridOptionsWrapper.setProperty(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, value);
	    };
	    GridApi.prototype.onRowHeightChanged = function () {
	        if (utils_1.Utils.exists(this.inMemoryRowModel)) {
	            this.inMemoryRowModel.onRowHeightChanged();
	        }
	    };
	    GridApi.prototype.getValue = function (colKey, rowNode) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        if (utils_1.Utils.missing(column)) {
	            column = this.columnController.getGridColumn(colKey);
	        }
	        if (utils_1.Utils.missing(column)) {
	            return null;
	        }
	        else {
	            return this.valueService.getValue(column, rowNode);
	        }
	    };
	    GridApi.prototype.addEventListener = function (eventType, listener) {
	        var async = this.gridOptionsWrapper.useAsyncEvents();
	        this.eventService.addEventListener(eventType, listener, async);
	    };
	    GridApi.prototype.addGlobalListener = function (listener) {
	        var async = this.gridOptionsWrapper.useAsyncEvents();
	        this.eventService.addGlobalListener(listener, async);
	    };
	    GridApi.prototype.removeEventListener = function (eventType, listener) {
	        this.eventService.removeEventListener(eventType, listener);
	    };
	    GridApi.prototype.removeGlobalListener = function (listener) {
	        this.eventService.removeGlobalListener(listener);
	    };
	    GridApi.prototype.dispatchEvent = function (event) {
	        this.eventService.dispatchEvent(event);
	    };
	    GridApi.prototype.destroy = function () {
	        this.context.destroy();
	    };
	    GridApi.prototype.resetQuickFilter = function () {
	        this.rowModel.forEachNode(function (node) { return node.quickFilterAggregateText = null; });
	    };
	    GridApi.prototype.getRangeSelections = function () {
	        if (this.rangeController) {
	            return this.rangeController.getCellRanges();
	        }
	        else {
	            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');
	            return null;
	        }
	    };
	    GridApi.prototype.camelCaseToHumanReadable = function (camelCase) {
	        return utils_1.Utils.camelCaseToHumanText(camelCase);
	    };
	    GridApi.prototype.addRangeSelection = function (rangeSelection) {
	        if (!this.rangeController) {
	            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');
	        }
	        this.rangeController.addRange(rangeSelection);
	    };
	    GridApi.prototype.clearRangeSelection = function () {
	        if (!this.rangeController) {
	            console.warn('ag-Grid: cell range selection is only available in ag-Grid Enterprise');
	        }
	        this.rangeController.clearSelection();
	    };
	    GridApi.prototype.copySelectedRowsToClipboard = function (includeHeader, columnKeys) {
	        if (!this.clipboardService) {
	            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');
	        }
	        this.clipboardService.copySelectedRowsToClipboard(includeHeader, columnKeys);
	    };
	    GridApi.prototype.copySelectedRangeToClipboard = function (includeHeader) {
	        if (!this.clipboardService) {
	            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');
	        }
	        this.clipboardService.copySelectedRangeToClipboard(includeHeader);
	    };
	    GridApi.prototype.copySelectedRangeDown = function () {
	        if (!this.clipboardService) {
	            console.warn('ag-Grid: clipboard is only available in ag-Grid Enterprise');
	        }
	        this.clipboardService.copyRangeDown();
	    };
	    GridApi.prototype.showColumnMenuAfterButtonClick = function (colKey, buttonElement) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        this.menuFactory.showMenuAfterButtonClick(column, buttonElement);
	    };
	    GridApi.prototype.showColumnMenuAfterMouseClick = function (colKey, mouseEvent) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        this.menuFactory.showMenuAfterMouseEvent(column, mouseEvent);
	    };
	    GridApi.prototype.tabToNextCell = function () {
	        return this.rowRenderer.tabToNextCell(false);
	    };
	    GridApi.prototype.tabToPreviousCell = function () {
	        return this.rowRenderer.tabToNextCell(true);
	    };
	    GridApi.prototype.stopEditing = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        this.rowRenderer.stopEditing(cancel);
	    };
	    GridApi.prototype.startEditingCell = function (params) {
	        var column = this.columnController.getGridColumn(params.colKey);
	        if (!column) {
	            console.warn("ag-Grid: no column found for " + params.colKey);
	            return;
	        }
	        var gridCellDef = { rowIndex: params.rowIndex, floating: null, column: column };
	        var gridCell = new gridCell_1.GridCell(gridCellDef);
	        this.gridPanel.ensureIndexVisible(params.rowIndex);
	        this.rowRenderer.startEditingCell(gridCell, params.keyPress, params.charPress);
	    };
	    GridApi.prototype.addAggFunc = function (key, aggFunc) {
	        if (this.aggFuncService) {
	            this.aggFuncService.addAggFunc(key, aggFunc);
	        }
	    };
	    GridApi.prototype.addAggFuncs = function (aggFuncs) {
	        if (this.aggFuncService) {
	            this.aggFuncService.addAggFuncs(aggFuncs);
	        }
	    };
	    GridApi.prototype.clearAggFuncs = function () {
	        if (this.aggFuncService) {
	            this.aggFuncService.clear();
	        }
	    };
	    GridApi.prototype.updateRowData = function (rowDataTransaction) {
	        var res = null;
	        if (this.inMemoryRowModel) {
	            res = this.inMemoryRowModel.updateRowData(rowDataTransaction);
	        }
	        else if (this.infinitePageRowModel) {
	            this.infinitePageRowModel.updateRowData(rowDataTransaction);
	        }
	        else {
	            console.error('ag-Grid: updateRowData() only works with InMemoryRowModel and InfiniteRowModel.');
	        }
	        // do change detection for all present cells
	        if (!this.gridOptionsWrapper.isSuppressChangeDetection()) {
	            this.rowRenderer.refreshCells();
	        }
	        return res;
	    };
	    GridApi.prototype.insertItemsAtIndex = function (index, items, skipRefresh) {
	        if (skipRefresh === void 0) { skipRefresh = false; }
	        console.warn('ag-Grid: insertItemsAtIndex() is deprecated, use updateRowData(transaction) instead.');
	        this.updateRowData({ add: items, addIndex: index, update: null, remove: null });
	    };
	    GridApi.prototype.removeItems = function (rowNodes, skipRefresh) {
	        if (skipRefresh === void 0) { skipRefresh = false; }
	        console.warn('ag-Grid: removeItems() is deprecated, use updateRowData(transaction) instead.');
	        var dataToRemove = rowNodes.map(function (rowNode) { return rowNode.data; });
	        this.updateRowData({ add: null, addIndex: null, update: null, remove: dataToRemove });
	    };
	    GridApi.prototype.addItems = function (items, skipRefresh) {
	        if (skipRefresh === void 0) { skipRefresh = false; }
	        console.warn('ag-Grid: addItems() is deprecated, use updateRowData(transaction) instead.');
	        this.updateRowData({ add: items, addIndex: null, update: null, remove: null });
	    };
	    GridApi.prototype.refreshVirtualPageCache = function () {
	        console.warn('ag-Grid: refreshVirtualPageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');
	        this.refreshInfiniteCache();
	    };
	    GridApi.prototype.refreshInfinitePageCache = function () {
	        console.warn('ag-Grid: refreshInfinitePageCache() is now called refreshInfiniteCache(), please call refreshInfiniteCache() instead');
	        this.refreshInfiniteCache();
	    };
	    GridApi.prototype.refreshInfiniteCache = function () {
	        if (this.infinitePageRowModel) {
	            this.infinitePageRowModel.refreshCache();
	        }
	        else {
	            console.warn("ag-Grid: api.refreshInfiniteCache is only available when rowModelType='infinite'.");
	        }
	    };
	    GridApi.prototype.purgeVirtualPageCache = function () {
	        console.warn('ag-Grid: purgeVirtualPageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');
	        this.purgeInfinitePageCache();
	    };
	    GridApi.prototype.purgeInfinitePageCache = function () {
	        console.warn('ag-Grid: purgeInfinitePageCache() is now called purgeInfiniteCache(), please call purgeInfiniteCache() instead');
	        this.purgeInfiniteCache();
	    };
	    GridApi.prototype.purgeInfiniteCache = function () {
	        if (this.infinitePageRowModel) {
	            this.infinitePageRowModel.purgeCache();
	        }
	        else {
	            console.warn("ag-Grid: api.purgeInfiniteCache is only available when rowModelType='infinite'.");
	        }
	    };
	    GridApi.prototype.purgeEnterpriseCache = function (route) {
	        if (this.enterpriseRowModel) {
	            this.enterpriseRowModel.purgeCache(route);
	        }
	        else {
	            console.warn("ag-Grid: api.purgeEnterpriseCache is only available when rowModelType='enterprise'.");
	        }
	    };
	    GridApi.prototype.getVirtualRowCount = function () {
	        console.warn('ag-Grid: getVirtualRowCount() is now called getInfiniteRowCount(), please call getInfiniteRowCount() instead');
	        return this.getInfiniteRowCount();
	    };
	    GridApi.prototype.getInfiniteRowCount = function () {
	        if (this.infinitePageRowModel) {
	            return this.infinitePageRowModel.getVirtualRowCount();
	        }
	        else {
	            console.warn("ag-Grid: api.getVirtualRowCount is only available when rowModelType='virtual'.");
	        }
	    };
	    GridApi.prototype.isMaxRowFound = function () {
	        if (this.infinitePageRowModel) {
	            return this.infinitePageRowModel.isMaxRowFound();
	        }
	        else {
	            console.warn("ag-Grid: api.isMaxRowFound is only available when rowModelType='virtual'.");
	        }
	    };
	    GridApi.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {
	        console.warn('ag-Grid: setVirtualRowCount() is now called setInfiniteRowCount(), please call setInfiniteRowCount() instead');
	        this.setInfiniteRowCount(rowCount, maxRowFound);
	    };
	    GridApi.prototype.setInfiniteRowCount = function (rowCount, maxRowFound) {
	        if (this.infinitePageRowModel) {
	            this.infinitePageRowModel.setVirtualRowCount(rowCount, maxRowFound);
	        }
	        else {
	            console.warn("ag-Grid: api.setVirtualRowCount is only available when rowModelType='virtual'.");
	        }
	    };
	    GridApi.prototype.getVirtualPageState = function () {
	        console.warn('ag-Grid: getVirtualPageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');
	        return this.getCacheBlockState();
	    };
	    GridApi.prototype.getInfinitePageState = function () {
	        console.warn('ag-Grid: getInfinitePageState() is now called getCacheBlockState(), please call getCacheBlockState() instead');
	        return this.getCacheBlockState();
	    };
	    GridApi.prototype.getCacheBlockState = function () {
	        if (this.infinitePageRowModel) {
	            return this.infinitePageRowModel.getBlockState();
	        }
	        else if (this.enterpriseRowModel) {
	            return this.enterpriseRowModel.getBlockState();
	        }
	        else {
	            console.warn("ag-Grid: api.getCacheBlockState() is only available when rowModelType='infinite' or rowModelType='enterprise'.");
	        }
	    };
	    GridApi.prototype.checkGridSize = function () {
	        this.gridPanel.setBodyAndHeaderHeights();
	    };
	    GridApi.prototype.getFirstRenderedRow = function () {
	        console.log('in ag-Grid v12, getFirstRenderedRow() was renamed to getFirstDisplayedRow()');
	        return this.getFirstDisplayedRow();
	    };
	    GridApi.prototype.getFirstDisplayedRow = function () {
	        return this.rowRenderer.getFirstVirtualRenderedRow();
	    };
	    GridApi.prototype.getLastRenderedRow = function () {
	        console.log('in ag-Grid v12, getLastRenderedRow() was renamed to getLastDisplayedRow()');
	        return this.getLastDisplayedRow();
	    };
	    GridApi.prototype.getLastDisplayedRow = function () {
	        return this.rowRenderer.getLastVirtualRenderedRow();
	    };
	    GridApi.prototype.getDisplayedRowAtIndex = function (index) {
	        return this.rowModel.getRow(index);
	    };
	    GridApi.prototype.getDisplayedRowCount = function () {
	        return this.rowModel.getRowCount();
	    };
	    GridApi.prototype.paginationIsLastPageFound = function () {
	        return this.paginationProxy.isLastPageFound();
	    };
	    GridApi.prototype.paginationGetPageSize = function () {
	        return this.paginationProxy.getPageSize();
	    };
	    GridApi.prototype.paginationSetPageSize = function (size) {
	        this.gridOptionsWrapper.setProperty('paginationPageSize', size);
	    };
	    GridApi.prototype.paginationGetCurrentPage = function () {
	        return this.paginationProxy.getCurrentPage();
	    };
	    GridApi.prototype.paginationGetTotalPages = function () {
	        return this.paginationProxy.getTotalPages();
	    };
	    GridApi.prototype.paginationGetRowCount = function () {
	        return this.paginationProxy.getTotalRowCount();
	    };
	    GridApi.prototype.paginationGoToNextPage = function () {
	        this.paginationProxy.goToNextPage();
	    };
	    GridApi.prototype.paginationGoToPreviousPage = function () {
	        this.paginationProxy.goToPreviousPage();
	    };
	    GridApi.prototype.paginationGoToFirstPage = function () {
	        this.paginationProxy.goToFirstPage();
	    };
	    GridApi.prototype.paginationGoToLastPage = function () {
	        this.paginationProxy.goToLastPage();
	    };
	    GridApi.prototype.paginationGoToPage = function (page) {
	        this.paginationProxy.goToPage(page);
	    };
	    __decorate([
	        context_1.Autowired('immutableService'),
	        __metadata("design:type", immutableService_1.ImmutableService)
	    ], GridApi.prototype, "immutableService", void 0);
	    __decorate([
	        context_1.Autowired('csvCreator'),
	        __metadata("design:type", csvCreator_1.CsvCreator)
	    ], GridApi.prototype, "csvCreator", void 0);
	    __decorate([
	        context_1.Optional('excelCreator'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "excelCreator", void 0);
	    __decorate([
	        context_1.Autowired('gridCore'),
	        __metadata("design:type", gridCore_1.GridCore)
	    ], GridApi.prototype, "gridCore", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], GridApi.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_1.Autowired('headerRenderer'),
	        __metadata("design:type", headerRenderer_1.HeaderRenderer)
	    ], GridApi.prototype, "headerRenderer", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], GridApi.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], GridApi.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], GridApi.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], GridApi.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], GridApi.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], GridApi.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('alignedGridsService'),
	        __metadata("design:type", alignedGridsService_1.AlignedGridsService)
	    ], GridApi.prototype, "alignedGridsService", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], GridApi.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel_1.PinnedRowModel)
	    ], GridApi.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], GridApi.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('sortController'),
	        __metadata("design:type", sortController_1.SortController)
	    ], GridApi.prototype, "sortController", void 0);
	    __decorate([
	        context_1.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy_1.PaginationProxy)
	    ], GridApi.prototype, "paginationProxy", void 0);
	    __decorate([
	        context_1.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController_1.FocusedCellController)
	    ], GridApi.prototype, "focusedCellController", void 0);
	    __decorate([
	        context_1.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "rangeController", void 0);
	    __decorate([
	        context_1.Optional('clipboardService'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "clipboardService", void 0);
	    __decorate([
	        context_1.Optional('aggFuncService'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "aggFuncService", void 0);
	    __decorate([
	        context_1.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], GridApi.prototype, "menuFactory", void 0);
	    __decorate([
	        context_1.Autowired('cellRendererFactory'),
	        __metadata("design:type", cellRendererFactory_1.CellRendererFactory)
	    ], GridApi.prototype, "cellRendererFactory", void 0);
	    __decorate([
	        context_1.Autowired('cellEditorFactory'),
	        __metadata("design:type", cellEditorFactory_1.CellEditorFactory)
	    ], GridApi.prototype, "cellEditorFactory", void 0);
	    __decorate([
	        context_1.Autowired('valueCache'),
	        __metadata("design:type", valueCache_1.ValueCache)
	    ], GridApi.prototype, "valueCache", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridApi.prototype, "init", null);
	    GridApi = __decorate([
	        context_1.Bean('gridApi')
	    ], GridApi);
	    return GridApi;
	}());
	exports.GridApi = GridApi;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var gridSerializer_1 = __webpack_require__(14);
	var downloader_1 = __webpack_require__(106);
	var columnController_1 = __webpack_require__(15);
	var valueService_1 = __webpack_require__(31);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var constants_1 = __webpack_require__(9);
	var utils_1 = __webpack_require__(8);
	var LINE_SEPARATOR = '\r\n';
	var CsvSerializingSession = (function (_super) {
	    __extends(CsvSerializingSession, _super);
	    function CsvSerializingSession(columnController, valueService, gridOptionsWrapper, processCellCallback, processHeaderCallback, suppressQuotes, columnSeparator) {
	        var _this = _super.call(this, columnController, valueService, gridOptionsWrapper, processCellCallback, processHeaderCallback) || this;
	        _this.suppressQuotes = suppressQuotes;
	        _this.columnSeparator = columnSeparator;
	        _this.result = '';
	        _this.lineOpened = false;
	        return _this;
	    }
	    CsvSerializingSession.prototype.prepare = function (columnsToExport) {
	    };
	    CsvSerializingSession.prototype.addCustomHeader = function (customHeader) {
	        if (!customHeader)
	            return;
	        this.result += customHeader + LINE_SEPARATOR;
	    };
	    CsvSerializingSession.prototype.addCustomFooter = function (customFooter) {
	        if (!customFooter)
	            return;
	        this.result += customFooter + LINE_SEPARATOR;
	    };
	    CsvSerializingSession.prototype.onNewHeaderGroupingRow = function () {
	        if (this.lineOpened)
	            this.result += LINE_SEPARATOR;
	        return {
	            onColumn: this.onNewHeaderGroupingRowColumn.bind(this)
	        };
	    };
	    CsvSerializingSession.prototype.onNewHeaderGroupingRowColumn = function (header, index, span) {
	        if (index != 0) {
	            this.result += this.columnSeparator;
	        }
	        this.result += header;
	        for (var i = 1; i <= span; i++) {
	            this.result += this.columnSeparator + this.putInQuotes("", this.suppressQuotes);
	        }
	        this.lineOpened = true;
	    };
	    CsvSerializingSession.prototype.onNewHeaderRow = function () {
	        if (this.lineOpened)
	            this.result += LINE_SEPARATOR;
	        return {
	            onColumn: this.onNewHeaderRowColumn.bind(this)
	        };
	    };
	    CsvSerializingSession.prototype.onNewHeaderRowColumn = function (column, index, node) {
	        if (index != 0) {
	            this.result += this.columnSeparator;
	        }
	        this.result += this.putInQuotes(this.extractHeaderValue(column), this.suppressQuotes);
	        this.lineOpened = true;
	    };
	    CsvSerializingSession.prototype.onNewBodyRow = function () {
	        if (this.lineOpened)
	            this.result += LINE_SEPARATOR;
	        return {
	            onColumn: this.onNewBodyRowColumn.bind(this)
	        };
	    };
	    CsvSerializingSession.prototype.onNewBodyRowColumn = function (column, index, node) {
	        if (index != 0) {
	            this.result += this.columnSeparator;
	        }
	        this.result += this.putInQuotes(this.extractRowCellValue(column, index, constants_1.Constants.EXPORT_TYPE_CSV, node), this.suppressQuotes);
	        this.lineOpened = true;
	    };
	    CsvSerializingSession.prototype.putInQuotes = function (value, suppressQuotes) {
	        if (suppressQuotes) {
	            return value;
	        }
	        if (value === null || value === undefined) {
	            return '""';
	        }
	        var stringValue;
	        if (typeof value === 'string') {
	            stringValue = value;
	        }
	        else if (typeof value.toString === 'function') {
	            stringValue = value.toString();
	        }
	        else {
	            console.warn('unknown value type during csv conversion');
	            stringValue = '';
	        }
	        // replace each " with "" (ie two sets of double quotes is how to do double quotes in csv)
	        var valueEscaped = stringValue.replace(/"/g, "\"\"");
	        return '"' + valueEscaped + '"';
	    };
	    CsvSerializingSession.prototype.parse = function () {
	        return this.result;
	    };
	    return CsvSerializingSession;
	}(gridSerializer_1.BaseGridSerializingSession));
	exports.CsvSerializingSession = CsvSerializingSession;
	var BaseCreator = (function () {
	    function BaseCreator() {
	    }
	    BaseCreator.prototype.export = function (userParams) {
	        if (this.isExportSuppressed()) {
	            console.warn("ag-grid: Export canceled. Export is not allowed as per your configuration.");
	            return "";
	        }
	        var _a = this.getMergedParamsAndData(userParams), mergedParams = _a.mergedParams, data = _a.data;
	        var fileNamePresent = mergedParams && mergedParams.fileName && mergedParams.fileName.length !== 0;
	        var fileName = fileNamePresent ? mergedParams.fileName : this.getDefaultFileName();
	        if (fileName.indexOf(".") === -1) {
	            fileName = fileName + "." + this.getDefaultFileExtension();
	        }
	        this.downloader.download(fileName, data, this.getMimeType());
	        return data;
	    };
	    BaseCreator.prototype.getData = function (params) {
	        return this.getMergedParamsAndData(params).data;
	    };
	    BaseCreator.prototype.getMergedParamsAndData = function (userParams) {
	        var mergedParams = this.mergeDefaultParams(userParams);
	        var data = this.gridSerializer.serialize(this.createSerializingSession(mergedParams), mergedParams);
	        return { mergedParams: mergedParams, data: data };
	    };
	    BaseCreator.prototype.mergeDefaultParams = function (userParams) {
	        var baseParams = this.gridOptionsWrapper.getDefaultExportParams();
	        var params = {};
	        utils_1._.assign(params, baseParams);
	        utils_1._.assign(params, userParams);
	        return params;
	    };
	    __decorate([
	        context_1.Autowired('downloader'),
	        __metadata("design:type", downloader_1.Downloader)
	    ], BaseCreator.prototype, "downloader", void 0);
	    __decorate([
	        context_1.Autowired('gridSerializer'),
	        __metadata("design:type", gridSerializer_1.GridSerializer)
	    ], BaseCreator.prototype, "gridSerializer", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], BaseCreator.prototype, "gridOptionsWrapper", void 0);
	    return BaseCreator;
	}());
	exports.BaseCreator = BaseCreator;
	var CsvCreator = (function (_super) {
	    __extends(CsvCreator, _super);
	    function CsvCreator() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    CsvCreator.prototype.exportDataAsCsv = function (params) {
	        return this.export(params);
	    };
	    CsvCreator.prototype.getDataAsCsv = function (params) {
	        return this.getData(params);
	    };
	    CsvCreator.prototype.getMimeType = function () {
	        return "text/csv;charset=utf-8;";
	    };
	    CsvCreator.prototype.getDefaultFileName = function () {
	        return 'export.csv';
	    };
	    CsvCreator.prototype.getDefaultFileExtension = function () {
	        return 'csv';
	    };
	    CsvCreator.prototype.createSerializingSession = function (params) {
	        return new CsvSerializingSession(this.columnController, this.valueService, this.gridOptionsWrapper, params ? params.processCellCallback : null, params ? params.processHeaderCallback : null, params && params.suppressQuotes, (params && params.columnSeparator) || ',');
	    };
	    CsvCreator.prototype.isExportSuppressed = function () {
	        return this.gridOptionsWrapper.isSuppressCsvExport();
	    };
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], CsvCreator.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], CsvCreator.prototype, "valueService", void 0);
	    CsvCreator = __decorate([
	        context_1.Bean('csvCreator')
	    ], CsvCreator);
	    return CsvCreator;
	}(BaseCreator));
	exports.CsvCreator = CsvCreator;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var columnController_1 = __webpack_require__(15);
	var constants_1 = __webpack_require__(9);
	var utils_1 = __webpack_require__(8);
	var selectionController_1 = __webpack_require__(27);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var displayedGroupCreator_1 = __webpack_require__(21);
	var balancedColumnTreeBuilder_1 = __webpack_require__(3);
	var groupInstanceIdCreator_1 = __webpack_require__(104);
	var columnGroup_1 = __webpack_require__(16);
	var pinnedRowModel_1 = __webpack_require__(44);
	var BaseGridSerializingSession = (function () {
	    function BaseGridSerializingSession(columnController, valueService, gridOptionsWrapper, processCellCallback, processHeaderCallback, cellAndHeaderEscaper) {
	        this.columnController = columnController;
	        this.valueService = valueService;
	        this.gridOptionsWrapper = gridOptionsWrapper;
	        this.processCellCallback = processCellCallback;
	        this.processHeaderCallback = processHeaderCallback;
	        this.cellAndHeaderEscaper = cellAndHeaderEscaper;
	    }
	    BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {
	        var nameForCol = this.getHeaderName(this.processHeaderCallback, column);
	        if (nameForCol === null || nameForCol === undefined) {
	            nameForCol = '';
	        }
	        return this.cellAndHeaderEscaper ? this.cellAndHeaderEscaper(nameForCol) : nameForCol;
	    };
	    BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, type, node) {
	        var isRowGrouping = this.columnController.getRowGroupColumns().length > 0;
	        var valueForCell;
	        if (node.group && isRowGrouping && index === 0) {
	            valueForCell = this.createValueForGroupNode(node);
	        }
	        else {
	            valueForCell = this.valueService.getValue(column, node);
	        }
	        valueForCell = this.processCell(node, column, valueForCell, this.processCellCallback, type);
	        if (valueForCell === null || valueForCell === undefined) {
	            valueForCell = '';
	        }
	        return this.cellAndHeaderEscaper ? this.cellAndHeaderEscaper(valueForCell) : valueForCell;
	    };
	    BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {
	        if (callback) {
	            return callback({
	                column: column,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext()
	            });
	        }
	        else {
	            return this.columnController.getDisplayNameForColumn(column, 'csv', true);
	        }
	    };
	    BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {
	        var keys = [node.key];
	        while (node.parent) {
	            node = node.parent;
	            keys.push(node.key);
	        }
	        return keys.reverse().join(' -> ');
	    };
	    BaseGridSerializingSession.prototype.processCell = function (rowNode, column, value, processCellCallback, type) {
	        if (processCellCallback) {
	            return processCellCallback({
	                column: column,
	                node: rowNode,
	                value: value,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext(),
	                type: type
	            });
	        }
	        else {
	            return value;
	        }
	    };
	    return BaseGridSerializingSession;
	}());
	exports.BaseGridSerializingSession = BaseGridSerializingSession;
	var GridSerializer = (function () {
	    function GridSerializer() {
	    }
	    GridSerializer.prototype.serialize = function (gridSerializingSession, params) {
	        var dontSkipRows = function () { return false; };
	        var skipGroups = params && params.skipGroups;
	        var skipHeader = params && params.skipHeader;
	        var columnGroups = params && params.columnGroups;
	        var skipFooters = params && params.skipFooters;
	        var skipPinnedTop = params && params.skipPinnedTop;
	        var skipPinnedBottom = params && params.skipPinnedBottom;
	        var includeCustomHeader = params && params.customHeader;
	        var includeCustomFooter = params && params.customFooter;
	        var allColumns = params && params.allColumns;
	        var onlySelected = params && params.onlySelected;
	        var columnKeys = params && params.columnKeys;
	        var onlySelectedAllPages = params && params.onlySelectedAllPages;
	        var rowSkipper = (params && params.shouldRowBeSkipped) || dontSkipRows;
	        var api = this.gridOptionsWrapper.getApi();
	        var context = this.gridOptionsWrapper.getContext();
	        // when in pivot mode, we always render cols on screen, never 'all columns'
	        var isPivotMode = this.columnController.isPivotMode();
	        var rowModelNormal = this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY;
	        var onlySelectedNonStandardModel = !rowModelNormal && onlySelected;
	        var columnsToExport;
	        if (utils_1.Utils.existsAndNotEmpty(columnKeys)) {
	            columnsToExport = this.columnController.getGridColumns(columnKeys);
	        }
	        else if (allColumns && !isPivotMode) {
	            columnsToExport = this.columnController.getAllPrimaryColumns();
	        }
	        else {
	            columnsToExport = this.columnController.getAllDisplayedColumns();
	        }
	        if (!columnsToExport || columnsToExport.length === 0) {
	            return '';
	        }
	        gridSerializingSession.prepare(columnsToExport);
	        if (includeCustomHeader) {
	            gridSerializingSession.addCustomHeader(params.customHeader);
	        }
	        // first pass, put in the header names of the cols
	        if (columnGroups) {
	            var groupInstanceIdCreator = new groupInstanceIdCreator_1.GroupInstanceIdCreator();
	            var displayedGroups = this.displayedGroupCreator.createDisplayedGroups(columnsToExport, this.columnController.getGridBalancedTree(), groupInstanceIdCreator);
	            this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession);
	        }
	        if (!skipHeader) {
	            var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();
	            columnsToExport.forEach(function (column, index) {
	                gridRowIterator_1.onColumn(column, index, null);
	            });
	        }
	        this.pinnedRowModel.forEachPinnedTopRow(processRow);
	        if (isPivotMode) {
	            this.rowModel.forEachPivotNode(processRow);
	        }
	        else {
	            // onlySelectedAllPages: user doing pagination and wants selected items from
	            // other pages, so cannot use the standard row model as it won't have rows from
	            // other pages.
	            // onlySelectedNonStandardModel: if user wants selected in non standard row model
	            // (eg viewport) then again rowmodel cannot be used, so need to use selected instead.
	            if (onlySelectedAllPages || onlySelectedNonStandardModel) {
	                var selectedNodes = this.selectionController.getSelectedNodes();
	                selectedNodes.forEach(function (node) {
	                    processRow(node);
	                });
	            }
	            else {
	                // here is everything else - including standard row model and selected. we don't use
	                // the selection model even when just using selected, so that the result is the order
	                // of the rows appearing on the screen.
	                if (rowModelNormal) {
	                    this.rowModel.forEachNodeAfterFilterAndSort(processRow);
	                }
	                else {
	                    this.rowModel.forEachNode(processRow);
	                }
	            }
	        }
	        this.pinnedRowModel.forEachPinnedBottomRow(processRow);
	        if (includeCustomFooter) {
	            gridSerializingSession.addCustomFooter(params.customFooter);
	        }
	        function processRow(node) {
	            if (skipGroups && node.group) {
	                return;
	            }
	            if (skipFooters && node.footer) {
	                return;
	            }
	            if (onlySelected && !node.isSelected()) {
	                return;
	            }
	            if (skipPinnedTop && node.rowPinned === 'top') {
	                return;
	            }
	            if (skipPinnedBottom && node.rowPinned === 'bottom') {
	                return;
	            }
	            // if we are in pivotMode, then the grid will show the root node only
	            // if it's not a leaf group
	            var nodeIsRootNode = node.level === -1;
	            if (nodeIsRootNode && !node.leafGroup) {
	                return;
	            }
	            var shouldRowBeSkipped = rowSkipper({
	                node: node,
	                api: api,
	                context: context
	            });
	            if (shouldRowBeSkipped)
	                return;
	            var rowAccumulator = gridSerializingSession.onNewBodyRow();
	            columnsToExport.forEach(function (column, index) {
	                rowAccumulator.onColumn(column, index, node);
	            });
	        }
	        return gridSerializingSession.parse();
	    };
	    GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession) {
	        var directChildrenHeaderGroups = [];
	        displayedGroups.forEach(function (columnGroupChild) {
	            var columnGroup = columnGroupChild;
	            if (!columnGroup.getChildren)
	                return;
	            columnGroup.getChildren().forEach(function (it) { return directChildrenHeaderGroups.push(it); });
	        });
	        if (displayedGroups.length > 0 && displayedGroups[0] instanceof columnGroup_1.ColumnGroup) {
	            this.doAddHeaderHeader(gridSerializingSession, displayedGroups);
	        }
	        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {
	            this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession);
	        }
	    };
	    GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups) {
	        var _this = this;
	        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();
	        var columnIndex = 0;
	        displayedGroups.forEach(function (columnGroupChild) {
	            var columnGroup = columnGroupChild;
	            var colDef = columnGroup.getDefinition();
	            var columnName = _this.columnController.getDisplayNameForColumnGroup(columnGroup, 'header');
	            gridRowIterator.onColumn(columnName, columnIndex++, columnGroup.getLeafColumns().length - 1);
	        });
	    };
	    __decorate([
	        context_1.Autowired('displayedGroupCreator'),
	        __metadata("design:type", displayedGroupCreator_1.DisplayedGroupCreator)
	    ], GridSerializer.prototype, "displayedGroupCreator", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], GridSerializer.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], GridSerializer.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel_1.PinnedRowModel)
	    ], GridSerializer.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], GridSerializer.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('balancedColumnTreeBuilder'),
	        __metadata("design:type", balancedColumnTreeBuilder_1.BalancedColumnTreeBuilder)
	    ], GridSerializer.prototype, "balancedColumnTreeBuilder", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], GridSerializer.prototype, "gridOptionsWrapper", void 0);
	    GridSerializer = __decorate([
	        context_1.Bean("gridSerializer")
	    ], GridSerializer);
	    return GridSerializer;
	}());
	exports.GridSerializer = GridSerializer;
	var RowType;
	(function (RowType) {
	    RowType[RowType["HEADER_GROUPING"] = 0] = "HEADER_GROUPING";
	    RowType[RowType["HEADER"] = 1] = "HEADER";
	    RowType[RowType["BODY"] = 2] = "BODY";
	})(RowType = exports.RowType || (exports.RowType = {}));


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var columnGroup_1 = __webpack_require__(16);
	var column_1 = __webpack_require__(17);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var expressionService_1 = __webpack_require__(20);
	var balancedColumnTreeBuilder_1 = __webpack_require__(3);
	var displayedGroupCreator_1 = __webpack_require__(21);
	var autoWidthCalculator_1 = __webpack_require__(22);
	var eventService_1 = __webpack_require__(5);
	var columnUtils_1 = __webpack_require__(18);
	var logger_1 = __webpack_require__(6);
	var events_1 = __webpack_require__(11);
	var originalColumnGroup_1 = __webpack_require__(19);
	var groupInstanceIdCreator_1 = __webpack_require__(104);
	var context_1 = __webpack_require__(7);
	var gridPanel_1 = __webpack_require__(24);
	var columnAnimationService_1 = __webpack_require__(69);
	var autoGroupColService_1 = __webpack_require__(105);
	var valueCache_1 = __webpack_require__(32);
	var gridApi_1 = __webpack_require__(12);
	var ColumnApi = (function () {
	    function ColumnApi() {
	    }
	    ColumnApi.prototype.sizeColumnsToFit = function (gridWidth) { this._columnController.sizeColumnsToFit(gridWidth); };
	    ColumnApi.prototype.setColumnGroupOpened = function (group, newValue) { this._columnController.setColumnGroupOpened(group, newValue); };
	    ColumnApi.prototype.getColumnGroup = function (name, instanceId) { return this._columnController.getColumnGroup(name, instanceId); };
	    ColumnApi.prototype.getOriginalColumnGroup = function (name) { return this._columnController.getOriginalColumnGroup(name); };
	    ColumnApi.prototype.getDisplayNameForColumn = function (column, location) { return this._columnController.getDisplayNameForColumn(column, location); };
	    ColumnApi.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) { return this._columnController.getDisplayNameForColumnGroup(columnGroup, location); };
	    ColumnApi.prototype.getColumn = function (key) { return this._columnController.getPrimaryColumn(key); };
	    ColumnApi.prototype.setColumnState = function (columnState) { return this._columnController.setColumnState(columnState); };
	    ColumnApi.prototype.getColumnState = function () { return this._columnController.getColumnState(); };
	    ColumnApi.prototype.resetColumnState = function () { this._columnController.resetColumnState(); };
	    ColumnApi.prototype.getColumnGroupState = function () { return this._columnController.getColumnGroupState(); };
	    ColumnApi.prototype.setColumnGroupState = function (stateItems) { this._columnController.setColumnGroupState(stateItems); };
	    ColumnApi.prototype.resetColumnGroupState = function () { this._columnController.resetColumnGroupState(); };
	    ColumnApi.prototype.isPinning = function () { return this._columnController.isPinningLeft() || this._columnController.isPinningRight(); };
	    ColumnApi.prototype.isPinningLeft = function () { return this._columnController.isPinningLeft(); };
	    ColumnApi.prototype.isPinningRight = function () { return this._columnController.isPinningRight(); };
	    ColumnApi.prototype.getDisplayedColAfter = function (col) { return this._columnController.getDisplayedColAfter(col); };
	    ColumnApi.prototype.getDisplayedColBefore = function (col) { return this._columnController.getDisplayedColBefore(col); };
	    ColumnApi.prototype.setColumnVisible = function (key, visible) { this._columnController.setColumnVisible(key, visible); };
	    ColumnApi.prototype.setColumnsVisible = function (keys, visible) { this._columnController.setColumnsVisible(keys, visible); };
	    ColumnApi.prototype.setColumnPinned = function (key, pinned) { this._columnController.setColumnPinned(key, pinned); };
	    ColumnApi.prototype.setColumnsPinned = function (keys, pinned) { this._columnController.setColumnsPinned(keys, pinned); };
	    ColumnApi.prototype.getAllColumns = function () { return this._columnController.getAllPrimaryColumns(); };
	    ColumnApi.prototype.getAllGridColumns = function () { return this._columnController.getAllGridColumns(); };
	    ColumnApi.prototype.getDisplayedLeftColumns = function () { return this._columnController.getDisplayedLeftColumns(); };
	    ColumnApi.prototype.getDisplayedCenterColumns = function () { return this._columnController.getDisplayedCenterColumns(); };
	    ColumnApi.prototype.getDisplayedRightColumns = function () { return this._columnController.getDisplayedRightColumns(); };
	    ColumnApi.prototype.getAllDisplayedColumns = function () { return this._columnController.getAllDisplayedColumns(); };
	    ColumnApi.prototype.getAllDisplayedVirtualColumns = function () { return this._columnController.getAllDisplayedVirtualColumns(); };
	    ColumnApi.prototype.moveColumn = function (key, toIndex) {
	        if (typeof key === 'number') {
	            // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name
	            console.log('ag-Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');
	            this._columnController.moveColumnByIndex(key, toIndex);
	        }
	        else {
	            this._columnController.moveColumn(key, toIndex);
	        }
	    };
	    ColumnApi.prototype.moveColumnByIndex = function (fromIndex, toIndex) { this._columnController.moveColumnByIndex(fromIndex, toIndex); };
	    ColumnApi.prototype.moveColumns = function (columnsToMoveKeys, toIndex) { this._columnController.moveColumns(columnsToMoveKeys, toIndex); };
	    ColumnApi.prototype.moveRowGroupColumn = function (fromIndex, toIndex) { this._columnController.moveRowGroupColumn(fromIndex, toIndex); };
	    ColumnApi.prototype.setColumnAggFunc = function (column, aggFunc) { this._columnController.setColumnAggFunc(column, aggFunc); };
	    ColumnApi.prototype.setColumnWidth = function (key, newWidth, finished) {
	        if (finished === void 0) { finished = true; }
	        this._columnController.setColumnWidth(key, newWidth, finished);
	    };
	    ColumnApi.prototype.setPivotMode = function (pivotMode) { this._columnController.setPivotMode(pivotMode); };
	    ColumnApi.prototype.isPivotMode = function () { return this._columnController.isPivotMode(); };
	    ColumnApi.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) { return this._columnController.getSecondaryPivotColumn(pivotKeys, valueColKey); };
	    ColumnApi.prototype.setValueColumns = function (colKeys) { this._columnController.setValueColumns(colKeys); };
	    ColumnApi.prototype.getValueColumns = function () { return this._columnController.getValueColumns(); };
	    ColumnApi.prototype.removeValueColumn = function (colKey) { this._columnController.removeValueColumn(colKey); };
	    ColumnApi.prototype.removeValueColumns = function (colKeys) { this._columnController.removeValueColumns(colKeys); };
	    ColumnApi.prototype.addValueColumn = function (colKey) { this._columnController.addValueColumn(colKey); };
	    ColumnApi.prototype.addValueColumns = function (colKeys) { this._columnController.addValueColumns(colKeys); };
	    ColumnApi.prototype.setRowGroupColumns = function (colKeys) { this._columnController.setRowGroupColumns(colKeys); };
	    ColumnApi.prototype.removeRowGroupColumn = function (colKey) { this._columnController.removeRowGroupColumn(colKey); };
	    ColumnApi.prototype.removeRowGroupColumns = function (colKeys) { this._columnController.removeRowGroupColumns(colKeys); };
	    ColumnApi.prototype.addRowGroupColumn = function (colKey) { this._columnController.addRowGroupColumn(colKey); };
	    ColumnApi.prototype.addRowGroupColumns = function (colKeys) { this._columnController.addRowGroupColumns(colKeys); };
	    ColumnApi.prototype.getRowGroupColumns = function () { return this._columnController.getRowGroupColumns(); };
	    ColumnApi.prototype.setPivotColumns = function (colKeys) { this._columnController.setPivotColumns(colKeys); };
	    ColumnApi.prototype.removePivotColumn = function (colKey) { this._columnController.removePivotColumn(colKey); };
	    ColumnApi.prototype.removePivotColumns = function (colKeys) { this._columnController.removePivotColumns(colKeys); };
	    ColumnApi.prototype.addPivotColumn = function (colKey) { this._columnController.addPivotColumn(colKey); };
	    ColumnApi.prototype.addPivotColumns = function (colKeys) { this._columnController.addPivotColumns(colKeys); };
	    ColumnApi.prototype.getPivotColumns = function () { return this._columnController.getPivotColumns(); };
	    ColumnApi.prototype.getLeftDisplayedColumnGroups = function () { return this._columnController.getLeftDisplayedColumnGroups(); };
	    ColumnApi.prototype.getCenterDisplayedColumnGroups = function () { return this._columnController.getCenterDisplayedColumnGroups(); };
	    ColumnApi.prototype.getRightDisplayedColumnGroups = function () { return this._columnController.getRightDisplayedColumnGroups(); };
	    ColumnApi.prototype.getAllDisplayedColumnGroups = function () { return this._columnController.getAllDisplayedColumnGroups(); };
	    ColumnApi.prototype.autoSizeColumn = function (key) { return this._columnController.autoSizeColumn(key); };
	    ColumnApi.prototype.autoSizeColumns = function (keys) { return this._columnController.autoSizeColumns(keys); };
	    ColumnApi.prototype.autoSizeAllColumns = function () { this._columnController.autoSizeAllColumns(); };
	    ColumnApi.prototype.setSecondaryColumns = function (colDefs) { this._columnController.setSecondaryColumns(colDefs); };
	    // below goes through deprecated items, prints message to user, then calls the new version of the same method
	    ColumnApi.prototype.columnGroupOpened = function (group, newValue) {
	        console.error('ag-Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');
	        this.setColumnGroupOpened(group, newValue);
	    };
	    ColumnApi.prototype.hideColumns = function (colIds, hide) {
	        console.error('ag-Grid: hideColumns is deprecated, use setColumnsVisible');
	        this._columnController.setColumnsVisible(colIds, !hide);
	    };
	    ColumnApi.prototype.hideColumn = function (colId, hide) {
	        console.error('ag-Grid: hideColumn is deprecated, use setColumnVisible');
	        this._columnController.setColumnVisible(colId, !hide);
	    };
	    ColumnApi.prototype.setState = function (columnState) {
	        console.error('ag-Grid: setState is deprecated, use setColumnState');
	        return this.setColumnState(columnState);
	    };
	    ColumnApi.prototype.getState = function () {
	        console.error('ag-Grid: getState is deprecated, use getColumnState');
	        return this.getColumnState();
	    };
	    ColumnApi.prototype.resetState = function () {
	        console.error('ag-Grid: resetState is deprecated, use resetColumnState');
	        this.resetColumnState();
	    };
	    ColumnApi.prototype.getAggregationColumns = function () {
	        console.error('ag-Grid: getAggregationColumns is deprecated, use getValueColumns');
	        return this._columnController.getValueColumns();
	    };
	    ColumnApi.prototype.removeAggregationColumn = function (colKey) {
	        console.error('ag-Grid: removeAggregationColumn is deprecated, use removeValueColumn');
	        this._columnController.removeValueColumn(colKey);
	    };
	    ColumnApi.prototype.removeAggregationColumns = function (colKeys) {
	        console.error('ag-Grid: removeAggregationColumns is deprecated, use removeValueColumns');
	        this._columnController.removeValueColumns(colKeys);
	    };
	    ColumnApi.prototype.addAggregationColumn = function (colKey) {
	        console.error('ag-Grid: addAggregationColumn is deprecated, use addValueColumn');
	        this._columnController.addValueColumn(colKey);
	    };
	    ColumnApi.prototype.addAggregationColumns = function (colKeys) {
	        console.error('ag-Grid: addAggregationColumns is deprecated, use addValueColumns');
	        this._columnController.addValueColumns(colKeys);
	    };
	    ColumnApi.prototype.setColumnAggFunction = function (column, aggFunc) {
	        console.error('ag-Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');
	        this._columnController.setColumnAggFunc(column, aggFunc);
	    };
	    ColumnApi.prototype.getDisplayNameForCol = function (column) {
	        console.error('ag-Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');
	        return this.getDisplayNameForColumn(column, null);
	    };
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", ColumnController)
	    ], ColumnApi.prototype, "_columnController", void 0);
	    ColumnApi = __decorate([
	        context_1.Bean('columnApi')
	    ], ColumnApi);
	    return ColumnApi;
	}());
	exports.ColumnApi = ColumnApi;
	var ColumnController = (function () {
	    function ColumnController() {
	        // header row count, based on user provided columns
	        this.primaryHeaderRowCount = 0;
	        this.secondaryHeaderRowCount = 0;
	        this.secondaryColumnsPresent = false;
	        // header row count, either above, or based on pivoting if we are pivoting
	        this.gridHeaderRowCount = 0;
	        // these are the lists used by the rowRenderer to render nodes. almost the leaf nodes of the above
	        // displayed trees, however it also takes into account if the groups are open or not.
	        this.displayedLeftColumns = [];
	        this.displayedRightColumns = [];
	        this.displayedCenterColumns = [];
	        // all three lists above combined
	        this.allDisplayedColumns = [];
	        // same as above, except trimmed down to only columns within the viewport
	        this.allDisplayedVirtualColumns = [];
	        this.allDisplayedCenterVirtualColumns = [];
	        this.rowGroupColumns = [];
	        this.valueColumns = [];
	        this.pivotColumns = [];
	        this.ready = false;
	        this.autoGroupsNeedBuilding = false;
	        this.pivotMode = false;
	        this.bodyWidth = 0;
	        this.leftWidth = 0;
	        this.rightWidth = 0;
	        this.bodyWidthDirty = true;
	    }
	    ColumnController.prototype.init = function () {
	        this.pivotMode = this.gridOptionsWrapper.isPivotMode();
	    };
	    ColumnController.prototype.setVirtualViewportLeftAndRight = function () {
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            this.viewportLeft = this.bodyWidth - this.scrollPosition - this.scrollWidth;
	            this.viewportRight = this.bodyWidth - this.scrollPosition;
	        }
	        else {
	            this.viewportLeft = this.scrollPosition;
	            this.viewportRight = this.scrollWidth + this.scrollPosition;
	        }
	    };
	    // used by clipboard service, to know what columns to paste into
	    ColumnController.prototype.getDisplayedColumnsStartingAt = function (column) {
	        var currentColumn = column;
	        var result = [];
	        while (utils_1.Utils.exists(currentColumn)) {
	            result.push(currentColumn);
	            currentColumn = this.getDisplayedColAfter(currentColumn);
	        }
	        return result;
	    };
	    // checks what columns are currently displayed due to column virtualisation. fires an event
	    // if the list of columns has changed.
	    // + setColumnWidth(), setVirtualViewportPosition(), setColumnDefs(), sizeColumnsToFit()
	    ColumnController.prototype.checkDisplayedVirtualColumns = function () {
	        // check displayCenterColumnTree exists first, as it won't exist when grid is initialising
	        if (utils_1.Utils.exists(this.displayedCenterColumns)) {
	            var hashBefore = this.allDisplayedVirtualColumns.map(function (column) { return column.getId(); }).join('#');
	            this.updateVirtualSets();
	            var hashAfter = this.allDisplayedVirtualColumns.map(function (column) { return column.getId(); }).join('#');
	            if (hashBefore !== hashAfter) {
	                var event_1 = {
	                    type: events_1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED,
	                    api: this.gridApi,
	                    columnApi: this.columnApi
	                };
	                this.eventService.dispatchEvent(event_1);
	            }
	        }
	    };
	    ColumnController.prototype.setVirtualViewportPosition = function (scrollWidth, scrollPosition) {
	        if (scrollWidth !== this.scrollWidth || scrollPosition !== this.scrollPosition || this.bodyWidthDirty) {
	            this.scrollWidth = scrollWidth;
	            this.scrollPosition = scrollPosition;
	            // we need to call setVirtualViewportLeftAndRight() at least once after the body width changes,
	            // as the viewport can stay the same, but in RTL, if body width changes, we need to work out the
	            // virtual columns again
	            this.bodyWidthDirty = true;
	            this.setVirtualViewportLeftAndRight();
	            if (this.ready) {
	                this.checkDisplayedVirtualColumns();
	            }
	        }
	    };
	    ColumnController.prototype.isPivotMode = function () {
	        return this.pivotMode;
	    };
	    ColumnController.prototype.setPivotMode = function (pivotMode) {
	        if (pivotMode === this.pivotMode) {
	            return;
	        }
	        this.pivotMode = pivotMode;
	        this.updateDisplayedColumns();
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) {
	        if (!this.secondaryColumnsPresent) {
	            return null;
	        }
	        var valueColumnToFind = this.getPrimaryColumn(valueColKey);
	        var foundColumn = null;
	        this.secondaryColumns.forEach(function (column) {
	            var thisPivotKeys = column.getColDef().pivotKeys;
	            var pivotValueColumn = column.getColDef().pivotValueColumn;
	            var pivotKeyMatches = utils_1.Utils.compareArrays(thisPivotKeys, pivotKeys);
	            var pivotValueMatches = pivotValueColumn === valueColumnToFind;
	            if (pivotKeyMatches && pivotValueMatches) {
	                foundColumn = column;
	            }
	        });
	        return foundColumn;
	    };
	    ColumnController.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('ColumnController');
	    };
	    ColumnController.prototype.setFirstRightAndLastLeftPinned = function () {
	        var lastLeft;
	        var firstRight;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            lastLeft = this.displayedLeftColumns ? this.displayedLeftColumns[0] : null;
	            firstRight = this.displayedRightColumns ? this.displayedRightColumns[this.displayedRightColumns.length - 1] : null;
	        }
	        else {
	            lastLeft = this.displayedLeftColumns ? this.displayedLeftColumns[this.displayedLeftColumns.length - 1] : null;
	            firstRight = this.displayedRightColumns ? this.displayedRightColumns[0] : null;
	        }
	        this.gridColumns.forEach(function (column) {
	            column.setLastLeftPinned(column === lastLeft);
	            column.setFirstRightPinned(column === firstRight);
	        });
	    };
	    ColumnController.prototype.autoSizeColumns = function (keys) {
	        // because of column virtualisation, we can only do this function on columns that are
	        // actually rendered, as non-rendered columns (outside the viewport and not rendered
	        // due to column virtualisation) are not present. this can result in all rendered columns
	        // getting narrowed, which in turn introduces more rendered columns on the RHS which
	        // did not get autosized in the original run, leaving the visible grid with columns on
	        // the LHS sized, but RHS no. so we keep looping through teh visible columns until
	        // no more cols are available (rendered) to be resized
	        var _this = this;
	        // keep track of which cols we have resized in here
	        var columnsAutosized = [];
	        // initialise with anything except 0 so that while loop executs at least once
	        var changesThisTimeAround = -1;
	        while (changesThisTimeAround !== 0) {
	            changesThisTimeAround = 0;
	            this.actionOnGridColumns(keys, function (column) {
	                // if already autosized, skip it
	                if (columnsAutosized.indexOf(column) >= 0) {
	                    return;
	                }
	                // get how wide this col should be
	                var preferredWidth = _this.autoWidthCalculator.getPreferredWidthForColumn(column);
	                // preferredWidth = -1 if this col is not on the screen
	                if (preferredWidth > 0) {
	                    var newWidth = _this.normaliseColumnWidth(column, preferredWidth);
	                    column.setActualWidth(newWidth);
	                    columnsAutosized.push(column);
	                    changesThisTimeAround++;
	                }
	                return true;
	            });
	        }
	        if (columnsAutosized.length > 0) {
	            var event_2 = {
	                type: events_1.Events.EVENT_COLUMN_RESIZED,
	                columns: columnsAutosized,
	                column: columnsAutosized.length === 1 ? columnsAutosized[0] : null,
	                finished: true,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_2);
	        }
	    };
	    ColumnController.prototype.autoSizeColumn = function (key) {
	        this.autoSizeColumns([key]);
	    };
	    ColumnController.prototype.autoSizeAllColumns = function () {
	        var allDisplayedColumns = this.getAllDisplayedColumns();
	        this.autoSizeColumns(allDisplayedColumns);
	    };
	    ColumnController.prototype.getColumnsFromTree = function (rootColumns) {
	        var result = [];
	        recursiveFindColumns(rootColumns);
	        return result;
	        function recursiveFindColumns(childColumns) {
	            for (var i = 0; i < childColumns.length; i++) {
	                var child = childColumns[i];
	                if (child instanceof column_1.Column) {
	                    result.push(child);
	                }
	                else if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                    recursiveFindColumns(child.getChildren());
	                }
	            }
	        }
	    };
	    ColumnController.prototype.getAllDisplayedColumnGroups = function () {
	        if (this.displayedLeftColumnTree && this.displayedRightColumnTree && this.displayedCentreColumnTree) {
	            return this.displayedLeftColumnTree
	                .concat(this.displayedCentreColumnTree)
	                .concat(this.displayedRightColumnTree);
	        }
	        else {
	            return null;
	        }
	    };
	    // + columnSelectPanel
	    ColumnController.prototype.getPrimaryColumnTree = function () {
	        return this.primaryBalancedTree;
	    };
	    // + gridPanel -> for resizing the body and setting top margin
	    ColumnController.prototype.getHeaderRowCount = function () {
	        return this.gridHeaderRowCount;
	    };
	    // + headerRenderer -> setting pinned body width
	    ColumnController.prototype.getLeftDisplayedColumnGroups = function () {
	        return this.displayedLeftColumnTree;
	    };
	    // + headerRenderer -> setting pinned body width
	    ColumnController.prototype.getRightDisplayedColumnGroups = function () {
	        return this.displayedRightColumnTree;
	    };
	    // + headerRenderer -> setting pinned body width
	    ColumnController.prototype.getCenterDisplayedColumnGroups = function () {
	        return this.displayedCentreColumnTree;
	    };
	    ColumnController.prototype.getDisplayedColumnGroups = function (type) {
	        switch (type) {
	            case column_1.Column.PINNED_LEFT: return this.getLeftDisplayedColumnGroups();
	            case column_1.Column.PINNED_RIGHT: return this.getRightDisplayedColumnGroups();
	            default: return this.getCenterDisplayedColumnGroups();
	        }
	    };
	    // gridPanel -> ensureColumnVisible
	    ColumnController.prototype.isColumnDisplayed = function (column) {
	        return this.getAllDisplayedColumns().indexOf(column) >= 0;
	    };
	    // + csvCreator
	    ColumnController.prototype.getAllDisplayedColumns = function () {
	        return this.allDisplayedColumns;
	    };
	    ColumnController.prototype.getAllDisplayedVirtualColumns = function () {
	        return this.allDisplayedVirtualColumns;
	    };
	    ColumnController.prototype.getDisplayedLeftColumnsForRow = function (rowNode) {
	        if (!this.colSpanActive) {
	            return this.displayedLeftColumns;
	        }
	        else {
	            return this.getDisplayedColumnsForRow(rowNode, this.displayedLeftColumns);
	        }
	    };
	    ColumnController.prototype.getDisplayedRightColumnsForRow = function (rowNode) {
	        if (!this.colSpanActive) {
	            return this.displayedRightColumns;
	        }
	        else {
	            return this.getDisplayedColumnsForRow(rowNode, this.displayedRightColumns);
	        }
	    };
	    ColumnController.prototype.getDisplayedColumnsForRow = function (rowNode, displayedColumns, filterCallback, gapBeforeCallback) {
	        var result = [];
	        var lastConsideredCol = null;
	        for (var i = 0; i < displayedColumns.length; i++) {
	            var col = displayedColumns[i];
	            var colSpan = col.getColSpan(rowNode);
	            if (colSpan > 1) {
	                var colsToRemove = colSpan - 1;
	                i += colsToRemove;
	            }
	            var filterPasses = filterCallback ? filterCallback(col) : true;
	            if (filterPasses) {
	                var gapBeforeColumn = gapBeforeCallback ? gapBeforeCallback(col) : false;
	                var addInPreviousColumn = result.length === 0 && gapBeforeColumn && lastConsideredCol;
	                if (addInPreviousColumn) {
	                    result.push(lastConsideredCol);
	                }
	                result.push(col);
	            }
	            lastConsideredCol = col;
	        }
	        return result;
	    };
	    // + rowRenderer
	    // if we are not column spanning, this just returns back the virtual centre columns,
	    // however if we are column spanning, then different rows can have different virtual
	    // columns, so we have to work out the list for each individual row.
	    ColumnController.prototype.getAllDisplayedCenterVirtualColumnsForRow = function (rowNode) {
	        var _this = this;
	        if (!this.colSpanActive) {
	            return this.allDisplayedCenterVirtualColumns;
	        }
	        var gapBeforeCallback = function (col) { return col.getLeft() > _this.viewportLeft; };
	        return this.getDisplayedColumnsForRow(rowNode, this.displayedCenterColumns, this.isColumnInViewport.bind(this), gapBeforeCallback);
	    };
	    ColumnController.prototype.isColumnInViewport = function (col) {
	        var columnLeft = col.getLeft();
	        var columnRight = col.getLeft() + col.getActualWidth();
	        var columnToMuchLeft = columnLeft < this.viewportLeft && columnRight < this.viewportLeft;
	        var columnToMuchRight = columnLeft > this.viewportRight && columnRight > this.viewportRight;
	        return !columnToMuchLeft && !columnToMuchRight;
	    };
	    // used by:
	    // + angularGrid -> setting pinned body width
	    // todo: this needs to be cached
	    ColumnController.prototype.getPinnedLeftContainerWidth = function () {
	        return this.getWidthOfColsInList(this.displayedLeftColumns);
	    };
	    // todo: this needs to be cached
	    ColumnController.prototype.getPinnedRightContainerWidth = function () {
	        return this.getWidthOfColsInList(this.displayedRightColumns);
	    };
	    ColumnController.prototype.updatePrimaryColumnList = function (keys, masterList, actionIsAdd, columnCallback, eventType) {
	        var _this = this;
	        if (utils_1.Utils.missingOrEmpty(keys)) {
	            return;
	        }
	        var atLeastOne = false;
	        keys.forEach(function (key) {
	            var columnToAdd = _this.getPrimaryColumn(key);
	            if (!columnToAdd) {
	                return;
	            }
	            if (actionIsAdd) {
	                if (masterList.indexOf(columnToAdd) >= 0) {
	                    return;
	                }
	                masterList.push(columnToAdd);
	            }
	            else {
	                if (masterList.indexOf(columnToAdd) < 0) {
	                    return;
	                }
	                utils_1.Utils.removeFromArray(masterList, columnToAdd);
	            }
	            columnCallback(columnToAdd);
	            atLeastOne = true;
	        });
	        if (!atLeastOne) {
	            return;
	        }
	        this.updateDisplayedColumns();
	        var event = {
	            type: eventType,
	            columns: masterList,
	            column: masterList.length === 1 ? masterList[0] : null,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.setRowGroupColumns = function (colKeys) {
	        this.autoGroupsNeedBuilding = true;
	        this.setPrimaryColumnList(colKeys, this.rowGroupColumns, events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.setRowGroupActive.bind(this));
	    };
	    ColumnController.prototype.setRowGroupActive = function (active, column) {
	        if (active === column.isRowGroupActive()) {
	            return;
	        }
	        column.setRowGroupActive(active);
	        if (!active) {
	            column.setVisible(true);
	        }
	    };
	    ColumnController.prototype.addRowGroupColumn = function (key) {
	        this.addRowGroupColumns([key]);
	    };
	    ColumnController.prototype.addRowGroupColumns = function (keys) {
	        this.autoGroupsNeedBuilding = true;
	        this.updatePrimaryColumnList(keys, this.rowGroupColumns, true, this.setRowGroupActive.bind(this, true), events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED);
	    };
	    ColumnController.prototype.removeRowGroupColumns = function (keys) {
	        this.autoGroupsNeedBuilding = true;
	        this.updatePrimaryColumnList(keys, this.rowGroupColumns, false, this.setRowGroupActive.bind(this, false), events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED);
	    };
	    ColumnController.prototype.removeRowGroupColumn = function (key) {
	        this.removeRowGroupColumns([key]);
	    };
	    ColumnController.prototype.addPivotColumns = function (keys) {
	        this.updatePrimaryColumnList(keys, this.pivotColumns, true, function (column) { return column.setPivotActive(true); }, events_1.Events.EVENT_COLUMN_PIVOT_CHANGED);
	    };
	    ColumnController.prototype.setPivotColumns = function (colKeys) {
	        this.setPrimaryColumnList(colKeys, this.pivotColumns, events_1.Events.EVENT_COLUMN_PIVOT_CHANGED, function (added, column) {
	            column.setPivotActive(added);
	        });
	    };
	    ColumnController.prototype.addPivotColumn = function (key) {
	        this.addPivotColumns([key]);
	    };
	    ColumnController.prototype.removePivotColumns = function (keys) {
	        this.updatePrimaryColumnList(keys, this.pivotColumns, false, function (column) { return column.setPivotActive(false); }, events_1.Events.EVENT_COLUMN_PIVOT_CHANGED);
	    };
	    ColumnController.prototype.removePivotColumn = function (key) {
	        this.removePivotColumns([key]);
	    };
	    ColumnController.prototype.setPrimaryColumnList = function (colKeys, masterList, eventName, columnCallback) {
	        var _this = this;
	        masterList.length = 0;
	        if (utils_1.Utils.exists(colKeys)) {
	            colKeys.forEach(function (key) {
	                var column = _this.getPrimaryColumn(key);
	                masterList.push(column);
	            });
	        }
	        this.primaryColumns.forEach(function (column) {
	            var added = masterList.indexOf(column) >= 0;
	            columnCallback(added, column);
	        });
	        this.updateDisplayedColumns();
	        var event = {
	            type: eventName,
	            columns: masterList,
	            column: masterList.length === 1 ? masterList[0] : null,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.setValueColumns = function (colKeys) {
	        this.setPrimaryColumnList(colKeys, this.valueColumns, events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.setValueActive.bind(this));
	    };
	    ColumnController.prototype.setValueActive = function (active, column) {
	        if (active === column.isValueActive()) {
	            return;
	        }
	        column.setValueActive(active);
	        if (active && !column.getAggFunc()) {
	            var defaultAggFunc = this.aggFuncService.getDefaultAggFunc(column);
	            column.setAggFunc(defaultAggFunc);
	        }
	    };
	    ColumnController.prototype.addValueColumns = function (keys) {
	        this.updatePrimaryColumnList(keys, this.valueColumns, true, this.setValueActive.bind(this, true), events_1.Events.EVENT_COLUMN_VALUE_CHANGED);
	    };
	    ColumnController.prototype.addValueColumn = function (colKey) {
	        this.addValueColumns([colKey]);
	    };
	    ColumnController.prototype.removeValueColumn = function (colKey) {
	        this.removeValueColumns([colKey]);
	    };
	    ColumnController.prototype.removeValueColumns = function (keys) {
	        this.updatePrimaryColumnList(keys, this.valueColumns, false, this.setValueActive.bind(this, false), events_1.Events.EVENT_COLUMN_VALUE_CHANGED);
	    };
	    // returns the width we can set to this col, taking into consideration min and max widths
	    ColumnController.prototype.normaliseColumnWidth = function (column, newWidth) {
	        if (newWidth < column.getMinWidth()) {
	            newWidth = column.getMinWidth();
	        }
	        if (column.isGreaterThanMax(newWidth)) {
	            newWidth = column.getMaxWidth();
	        }
	        return newWidth;
	    };
	    ColumnController.prototype.getPrimaryOrGridColumn = function (key) {
	        var column = this.getPrimaryColumn(key);
	        if (column) {
	            return column;
	        }
	        else {
	            return this.getGridColumn(key);
	        }
	    };
	    ColumnController.prototype.setColumnWidth = function (key, newWidth, finished) {
	        var column = this.getPrimaryOrGridColumn(key);
	        if (!column) {
	            return;
	        }
	        newWidth = this.normaliseColumnWidth(column, newWidth);
	        var widthChanged = column.getActualWidth() !== newWidth;
	        if (widthChanged) {
	            column.setActualWidth(newWidth);
	            this.setLeftValues();
	        }
	        this.updateBodyWidths();
	        this.checkDisplayedVirtualColumns();
	        // check for change first, to avoid unnecessary firing of events
	        // however we always fire 'finished' events. this is important
	        // when groups are resized, as if the group is changing slowly,
	        // eg 1 pixel at a time, then each change will fire change events
	        // in all the columns in the group, but only one with get the pixel.
	        if (finished || widthChanged) {
	            var event_3 = {
	                type: events_1.Events.EVENT_COLUMN_RESIZED,
	                columns: [column],
	                column: column,
	                finished: finished,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_3);
	        }
	    };
	    ColumnController.prototype.setColumnAggFunc = function (column, aggFunc) {
	        column.setAggFunc(aggFunc);
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_VALUE_CHANGED,
	            columns: [column],
	            column: column,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.moveRowGroupColumn = function (fromIndex, toIndex) {
	        var column = this.rowGroupColumns[fromIndex];
	        this.rowGroupColumns.splice(fromIndex, 1);
	        this.rowGroupColumns.splice(toIndex, 0, column);
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED,
	            columns: this.rowGroupColumns,
	            column: this.rowGroupColumns.length === 1 ? this.rowGroupColumns[0] : null,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.moveColumns = function (columnsToMoveKeys, toIndex) {
	        this.columnAnimationService.start();
	        if (toIndex > this.gridColumns.length - columnsToMoveKeys.length) {
	            console.warn('ag-Grid: tried to insert columns in invalid location, toIndex = ' + toIndex);
	            console.warn('ag-Grid: remember that you should not count the moving columns when calculating the new index');
	            return;
	        }
	        // we want to pull all the columns out first and put them into an ordered list
	        var columnsToMove = this.getGridColumns(columnsToMoveKeys);
	        var failedRules = !this.doesMovePassRules(columnsToMove, toIndex);
	        if (failedRules) {
	            return;
	        }
	        utils_1.Utils.moveInArray(this.gridColumns, columnsToMove, toIndex);
	        this.updateDisplayedColumns();
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_MOVED,
	            columns: columnsToMove,
	            column: columnsToMove.length === 1 ? columnsToMove[0] : null,
	            toIndex: toIndex,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	        this.columnAnimationService.finish();
	    };
	    ColumnController.prototype.doesMovePassRules = function (columnsToMove, toIndex) {
	        var allColumnsCopy = this.gridColumns.slice();
	        utils_1.Utils.moveInArray(allColumnsCopy, columnsToMove, toIndex);
	        var rulesPass = true;
	        this.columnUtils.depthFirstOriginalTreeSearch(this.gridBalancedTree, function (child) {
	            if (!(child instanceof originalColumnGroup_1.OriginalColumnGroup)) {
	                return;
	            }
	            var columnGroup = child;
	            var marryChildren = columnGroup.getColGroupDef() && columnGroup.getColGroupDef().marryChildren;
	            if (!marryChildren) {
	                return;
	            }
	            var newIndexes = [];
	            columnGroup.getLeafColumns().forEach(function (col) {
	                var newColIndex = allColumnsCopy.indexOf(col);
	                newIndexes.push(newColIndex);
	            });
	            var maxIndex = Math.max.apply(Math, newIndexes);
	            var minIndex = Math.min.apply(Math, newIndexes);
	            // width is how far the first column in this group is away from the last column
	            var spread = maxIndex - minIndex;
	            var maxSpread = columnGroup.getLeafColumns().length - 1;
	            // if the columns
	            if (spread > maxSpread) {
	                rulesPass = false;
	            }
	            // console.log(`maxIndex = ${maxIndex}, minIndex = ${minIndex}, spread = ${spread}, maxSpread = ${maxSpread}, fail = ${spread > (count-1)}`)
	            // console.log(allColumnsCopy.map( col => col.getColDef().field).join(','));
	        });
	        return rulesPass;
	    };
	    ColumnController.prototype.moveColumn = function (key, toIndex) {
	        this.moveColumns([key], toIndex);
	    };
	    ColumnController.prototype.moveColumnByIndex = function (fromIndex, toIndex) {
	        var column = this.gridColumns[fromIndex];
	        this.moveColumn(column, toIndex);
	    };
	    // used by:
	    // + angularGrid -> for setting body width
	    // + rowController -> setting main row widths (when inserting and resizing)
	    // need to cache this
	    ColumnController.prototype.getBodyContainerWidth = function () {
	        return this.bodyWidth;
	    };
	    ColumnController.prototype.getContainerWidth = function (pinned) {
	        switch (pinned) {
	            case column_1.Column.PINNED_LEFT: return this.leftWidth;
	            case column_1.Column.PINNED_RIGHT: return this.rightWidth;
	            default: return this.bodyWidth;
	        }
	    };
	    // after setColumnWidth or updateGroupsAndDisplayedColumns
	    ColumnController.prototype.updateBodyWidths = function () {
	        var newBodyWidth = this.getWidthOfColsInList(this.displayedCenterColumns);
	        var newLeftWidth = this.getWidthOfColsInList(this.displayedLeftColumns);
	        var newRightWidth = this.getWidthOfColsInList(this.displayedRightColumns);
	        // this is used by virtual col calculation, for RTL only, as a change to body width can impact displayed
	        // columns, due to RTL inverting the y coordinates
	        this.bodyWidthDirty = this.bodyWidth !== newBodyWidth;
	        var atLeastOneChanged = this.bodyWidth !== newBodyWidth || this.leftWidth !== newLeftWidth || this.rightWidth !== newRightWidth;
	        if (atLeastOneChanged) {
	            this.bodyWidth = newBodyWidth;
	            this.leftWidth = newLeftWidth;
	            this.rightWidth = newRightWidth;
	            // when this fires, it is picked up by the gridPanel, which ends up in
	            // gridPanel calling setWidthAndScrollPosition(), which in turn calls setVirtualViewportPosition()
	            var event_4 = {
	                type: events_1.Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_4);
	        }
	    };
	    // + rowController
	    ColumnController.prototype.getValueColumns = function () {
	        return this.valueColumns ? this.valueColumns : [];
	    };
	    // + rowController
	    ColumnController.prototype.getPivotColumns = function () {
	        return this.pivotColumns ? this.pivotColumns : [];
	    };
	    // + inMemoryRowModel
	    ColumnController.prototype.isPivotActive = function () {
	        return this.pivotColumns && this.pivotColumns.length > 0 && this.pivotMode;
	    };
	    // + toolPanel
	    ColumnController.prototype.getRowGroupColumns = function () {
	        return this.rowGroupColumns ? this.rowGroupColumns : [];
	    };
	    // + rowController -> while inserting rows
	    ColumnController.prototype.getDisplayedCenterColumns = function () {
	        return this.displayedCenterColumns;
	    };
	    // + rowController -> while inserting rows
	    ColumnController.prototype.getDisplayedLeftColumns = function () {
	        return this.displayedLeftColumns;
	    };
	    ColumnController.prototype.getDisplayedRightColumns = function () {
	        return this.displayedRightColumns;
	    };
	    ColumnController.prototype.getDisplayedColumns = function (type) {
	        switch (type) {
	            case column_1.Column.PINNED_LEFT: return this.getDisplayedLeftColumns();
	            case column_1.Column.PINNED_RIGHT: return this.getDisplayedRightColumns();
	            default: return this.getDisplayedCenterColumns();
	        }
	    };
	    // used by:
	    // + inMemoryRowController -> sorting, building quick filter text
	    // + headerRenderer -> sorting (clearing icon)
	    ColumnController.prototype.getAllPrimaryColumns = function () {
	        return this.primaryColumns;
	    };
	    // + moveColumnController
	    ColumnController.prototype.getAllGridColumns = function () {
	        return this.gridColumns;
	    };
	    ColumnController.prototype.isEmpty = function () {
	        return utils_1.Utils.missingOrEmpty(this.gridColumns);
	    };
	    ColumnController.prototype.isRowGroupEmpty = function () {
	        return utils_1.Utils.missingOrEmpty(this.rowGroupColumns);
	    };
	    ColumnController.prototype.setColumnVisible = function (key, visible) {
	        this.setColumnsVisible([key], visible);
	    };
	    ColumnController.prototype.setColumnsVisible = function (keys, visible) {
	        var _this = this;
	        this.columnAnimationService.start();
	        this.actionOnGridColumns(keys, function (column) {
	            column.setVisible(visible);
	            return true;
	        }, function () {
	            var event = {
	                type: events_1.Events.EVENT_COLUMN_VISIBLE,
	                visible: visible,
	                column: null,
	                columns: null,
	                api: _this.gridApi,
	                columnApi: _this.columnApi
	            };
	            return event;
	        });
	        this.columnAnimationService.finish();
	    };
	    ColumnController.prototype.setColumnPinned = function (key, pinned) {
	        this.setColumnsPinned([key], pinned);
	    };
	    ColumnController.prototype.setColumnsPinned = function (keys, pinned) {
	        var _this = this;
	        this.columnAnimationService.start();
	        var actualPinned;
	        if (pinned === true || pinned === column_1.Column.PINNED_LEFT) {
	            actualPinned = column_1.Column.PINNED_LEFT;
	        }
	        else if (pinned === column_1.Column.PINNED_RIGHT) {
	            actualPinned = column_1.Column.PINNED_RIGHT;
	        }
	        else {
	            actualPinned = null;
	        }
	        this.actionOnGridColumns(keys, function (column) {
	            column.setPinned(actualPinned);
	            return true;
	        }, function () {
	            var event = {
	                type: events_1.Events.EVENT_COLUMN_PINNED,
	                pinned: actualPinned,
	                column: null,
	                columns: null,
	                api: _this.gridApi,
	                columnApi: _this.columnApi
	            };
	            return event;
	        });
	        this.columnAnimationService.finish();
	    };
	    // does an action on a set of columns. provides common functionality for looking up the
	    // columns based on key, getting a list of effected columns, and then updated the event
	    // with either one column (if it was just one col) or a list of columns
	    // used by: autoResize, setVisible, setPinned
	    ColumnController.prototype.actionOnGridColumns = function (// the column keys this action will be on
	        keys, 
	        // the action to do - if this returns false, the column was skipped
	        // and won't be included in the event
	        action, 
	        // should return back a column event of the right type
	        createEvent) {
	        var _this = this;
	        if (utils_1.Utils.missingOrEmpty(keys)) {
	            return;
	        }
	        var updatedColumns = [];
	        keys.forEach(function (key) {
	            var column = _this.getGridColumn(key);
	            if (!column) {
	                return;
	            }
	            // need to check for false with type (ie !== instead of !=)
	            // as not returning anything (undefined) would also be false
	            var resultOfAction = action(column);
	            if (resultOfAction !== false) {
	                updatedColumns.push(column);
	            }
	        });
	        if (updatedColumns.length === 0) {
	            return;
	        }
	        this.updateDisplayedColumns();
	        if (utils_1.Utils.exists(createEvent)) {
	            var event_5 = createEvent();
	            event_5.columns = updatedColumns;
	            event_5.column = updatedColumns.length === 1 ? updatedColumns[0] : null;
	            this.eventService.dispatchEvent(event_5);
	        }
	    };
	    ColumnController.prototype.getDisplayedColBefore = function (col) {
	        var allDisplayedColumns = this.getAllDisplayedColumns();
	        var oldIndex = allDisplayedColumns.indexOf(col);
	        if (oldIndex > 0) {
	            return allDisplayedColumns[oldIndex - 1];
	        }
	        else {
	            return null;
	        }
	    };
	    // used by:
	    // + rowRenderer -> for navigation
	    ColumnController.prototype.getDisplayedColAfter = function (col) {
	        var allDisplayedColumns = this.getAllDisplayedColumns();
	        var oldIndex = allDisplayedColumns.indexOf(col);
	        if (oldIndex < (allDisplayedColumns.length - 1)) {
	            return allDisplayedColumns[oldIndex + 1];
	        }
	        else {
	            return null;
	        }
	    };
	    ColumnController.prototype.isPinningLeft = function () {
	        return this.displayedLeftColumns.length > 0;
	    };
	    ColumnController.prototype.isPinningRight = function () {
	        return this.displayedRightColumns.length > 0;
	    };
	    ColumnController.prototype.getPrimaryAndSecondaryAndAutoColumns = function () {
	        var result = this.primaryColumns ? this.primaryColumns.slice(0) : [];
	        if (utils_1.Utils.exists(this.groupAutoColumns)) {
	            this.groupAutoColumns.forEach(function (col) { return result.push(col); });
	        }
	        if (this.secondaryColumnsPresent) {
	            this.secondaryColumns.forEach(function (column) { return result.push(column); });
	        }
	        return result;
	    };
	    ColumnController.prototype.createStateItemFromColumn = function (column) {
	        var rowGroupIndex = column.isRowGroupActive() ? this.rowGroupColumns.indexOf(column) : null;
	        var pivotIndex = column.isPivotActive() ? this.pivotColumns.indexOf(column) : null;
	        var aggFunc = column.isValueActive() ? column.getAggFunc() : null;
	        var resultItem = {
	            colId: column.getColId(),
	            hide: !column.isVisible(),
	            aggFunc: aggFunc,
	            width: column.getActualWidth(),
	            pivotIndex: pivotIndex,
	            pinned: column.getPinned(),
	            rowGroupIndex: rowGroupIndex
	        };
	        return resultItem;
	    };
	    ColumnController.prototype.getColumnState = function () {
	        if (utils_1.Utils.missing(this.primaryColumns)) {
	            return [];
	        }
	        var columnStateList = this.primaryColumns.map(this.createStateItemFromColumn.bind(this));
	        if (!this.pivotMode) {
	            this.orderColumnStateList(columnStateList);
	        }
	        return columnStateList;
	    };
	    ColumnController.prototype.orderColumnStateList = function (columnStateList) {
	        var gridColumnIds = this.gridColumns.map(function (column) { return column.getColId(); });
	        columnStateList.sort(function (itemA, itemB) {
	            var posA = gridColumnIds.indexOf(itemA.colId);
	            var posB = gridColumnIds.indexOf(itemB.colId);
	            return posA - posB;
	        });
	    };
	    ColumnController.prototype.resetColumnState = function () {
	        // we can't use 'allColumns' as the order might of messed up, so get the primary ordered list
	        var primaryColumns = this.getColumnsFromTree(this.primaryBalancedTree);
	        var state = [];
	        if (primaryColumns) {
	            primaryColumns.forEach(function (column) {
	                state.push({
	                    colId: column.getColId(),
	                    aggFunc: column.getColDef().aggFunc,
	                    hide: column.getColDef().hide,
	                    pinned: column.getColDef().pinned,
	                    rowGroupIndex: column.getColDef().rowGroupIndex,
	                    pivotIndex: column.getColDef().pivotIndex,
	                    width: column.getColDef().width
	                });
	            });
	        }
	        this.setColumnState(state);
	    };
	    ColumnController.prototype.setColumnState = function (columnState) {
	        var _this = this;
	        if (utils_1.Utils.missingOrEmpty(this.primaryColumns)) {
	            return false;
	        }
	        this.autoGroupsNeedBuilding = true;
	        // at the end below, this list will have all columns we got no state for
	        var columnsWithNoState = this.primaryColumns.slice();
	        this.rowGroupColumns = [];
	        this.valueColumns = [];
	        this.pivotColumns = [];
	        var success = true;
	        var rowGroupIndexes = {};
	        var pivotIndexes = {};
	        if (columnState) {
	            columnState.forEach(function (stateItem) {
	                var column = _this.getPrimaryColumn(stateItem.colId);
	                if (!column) {
	                    console.warn('ag-grid: column ' + stateItem.colId + ' not found');
	                    success = false;
	                }
	                else {
	                    _this.syncColumnWithStateItem(column, stateItem, rowGroupIndexes, pivotIndexes);
	                    utils_1.Utils.removeFromArray(columnsWithNoState, column);
	                }
	            });
	        }
	        // anything left over, we got no data for, so add in the column as non-value, non-rowGroup and hidden
	        columnsWithNoState.forEach(this.syncColumnWithNoState.bind(this));
	        // sort the lists according to the indexes that were provided
	        this.rowGroupColumns.sort(this.sortColumnListUsingIndexes.bind(this, rowGroupIndexes));
	        this.pivotColumns.sort(this.sortColumnListUsingIndexes.bind(this, pivotIndexes));
	        this.copyDownGridColumns();
	        var orderOfColIds = columnState.map(function (stateItem) { return stateItem.colId; });
	        this.gridColumns.sort(function (colA, colB) {
	            var indexA = orderOfColIds.indexOf(colA.getId());
	            var indexB = orderOfColIds.indexOf(colB.getId());
	            return indexA - indexB;
	        });
	        this.updateDisplayedColumns();
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	        return success;
	    };
	    ColumnController.prototype.sortColumnListUsingIndexes = function (indexes, colA, colB) {
	        var indexA = indexes[colA.getId()];
	        var indexB = indexes[colB.getId()];
	        return indexA - indexB;
	    };
	    ColumnController.prototype.syncColumnWithNoState = function (column) {
	        column.setVisible(false);
	        column.setAggFunc(null);
	        column.setPinned(null);
	        column.setRowGroupActive(false);
	        column.setPivotActive(false);
	        column.setValueActive(false);
	    };
	    ColumnController.prototype.syncColumnWithStateItem = function (column, stateItem, rowGroupIndexes, pivotIndexes) {
	        // following ensures we are left with boolean true or false, eg converts (null, undefined, 0) all to true
	        column.setVisible(!stateItem.hide);
	        // sets pinned to 'left' or 'right'
	        column.setPinned(stateItem.pinned);
	        // if width provided and valid, use it, otherwise stick with the old width
	        if (stateItem.width >= this.gridOptionsWrapper.getMinColWidth()) {
	            column.setActualWidth(stateItem.width);
	        }
	        if (typeof stateItem.aggFunc === 'string') {
	            column.setAggFunc(stateItem.aggFunc);
	            column.setValueActive(true);
	            this.valueColumns.push(column);
	        }
	        else {
	            if (utils_1.Utils.exists(stateItem.aggFunc)) {
	                console.warn('ag-Grid: stateItem.aggFunc must be a string. if using your own aggregation ' +
	                    'functions, register the functions first before using them in get/set state. This is because it is' +
	                    'intended for the column state to be stored and retrieved as simple JSON.');
	            }
	            column.setAggFunc(null);
	            column.setValueActive(false);
	        }
	        if (typeof stateItem.rowGroupIndex === 'number') {
	            this.rowGroupColumns.push(column);
	            column.setRowGroupActive(true);
	            rowGroupIndexes[column.getId()] = stateItem.rowGroupIndex;
	        }
	        else {
	            column.setRowGroupActive(false);
	        }
	        if (typeof stateItem.pivotIndex === 'number') {
	            this.pivotColumns.push(column);
	            column.setPivotActive(true);
	            pivotIndexes[column.getId()] = stateItem.pivotIndex;
	        }
	        else {
	            column.setPivotActive(false);
	        }
	    };
	    ColumnController.prototype.getGridColumns = function (keys) {
	        return this.getColumns(keys, this.getGridColumn.bind(this));
	    };
	    ColumnController.prototype.getColumns = function (keys, columnLookupCallback) {
	        var foundColumns = [];
	        if (keys) {
	            keys.forEach(function (key) {
	                var column = columnLookupCallback(key);
	                if (column) {
	                    foundColumns.push(column);
	                }
	            });
	        }
	        return foundColumns;
	    };
	    // used by growGroupPanel
	    ColumnController.prototype.getColumnWithValidation = function (key) {
	        var column = this.getPrimaryColumn(key);
	        if (!column) {
	            console.warn('ag-Grid: could not find column ' + column);
	        }
	        return column;
	    };
	    ColumnController.prototype.getPrimaryColumn = function (key) {
	        return this.getColumn(key, this.primaryColumns);
	    };
	    ColumnController.prototype.getGridColumn = function (key) {
	        return this.getColumn(key, this.gridColumns);
	    };
	    ColumnController.prototype.getColumn = function (key, columnList) {
	        if (!key) {
	            return null;
	        }
	        for (var i = 0; i < columnList.length; i++) {
	            if (this.columnsMatch(columnList[i], key)) {
	                return columnList[i];
	            }
	        }
	        return this.getAutoColumn(key);
	    };
	    ColumnController.prototype.getAutoColumn = function (key) {
	        var _this = this;
	        if (!utils_1.Utils.exists(this.groupAutoColumns) || utils_1.Utils.missing(this.groupAutoColumns)) {
	            return null;
	        }
	        return utils_1.Utils.find(this.groupAutoColumns, function (groupCol) {
	            return _this.columnsMatch(groupCol, key);
	        });
	    };
	    ColumnController.prototype.columnsMatch = function (column, key) {
	        var columnMatches = column === key;
	        var colDefMatches = column.getColDef() === key;
	        var idMatches = column.getColId() == key;
	        return columnMatches || colDefMatches || idMatches;
	    };
	    ColumnController.prototype.getDisplayNameForColumn = function (column, location, includeAggFunc) {
	        if (includeAggFunc === void 0) { includeAggFunc = false; }
	        var headerName = this.getHeaderName(column.getColDef(), column, null, location);
	        if (includeAggFunc) {
	            return this.wrapHeaderNameWithAggFunc(column, headerName);
	        }
	        else {
	            return headerName;
	        }
	    };
	    ColumnController.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) {
	        var colGroupDef = columnGroup.getOriginalColumnGroup().getColGroupDef();
	        if (colGroupDef) {
	            return this.getHeaderName(colGroupDef, null, columnGroup, location);
	        }
	        else {
	            return null;
	        }
	    };
	    // location is where the column is going to appear, ie who is calling us
	    ColumnController.prototype.getHeaderName = function (colDef, column, columnGroup, location) {
	        var headerValueGetter = colDef.headerValueGetter;
	        if (headerValueGetter) {
	            var params = {
	                colDef: colDef,
	                column: column,
	                columnGroup: columnGroup,
	                location: location,
	                api: this.gridOptionsWrapper.getApi(),
	                context: this.gridOptionsWrapper.getContext()
	            };
	            if (typeof headerValueGetter === 'function') {
	                // valueGetter is a function, so just call it
	                return headerValueGetter(params);
	            }
	            else if (typeof headerValueGetter === 'string') {
	                // valueGetter is an expression, so execute the expression
	                return this.expressionService.evaluate(headerValueGetter, params);
	            }
	            else {
	                console.warn('ag-grid: headerValueGetter must be a function or a string');
	                return '';
	            }
	        }
	        else if (colDef.headerName != null) {
	            return colDef.headerName;
	        }
	        else if (colDef.field) {
	            return utils_1.Utils.camelCaseToHumanText(colDef.field);
	        }
	        else {
	            return '';
	        }
	    };
	    /*
	        private getHeaderGroupName(columnGroup: ColumnGroup): string {
	            let colGroupDef = columnGroup.getOriginalColumnGroup().getColGroupDef();
	            let headerValueGetter = colGroupDef.headerValueGetter;

	            if (headerValueGetter) {
	                let params = {
	                    columnGroup: columnGroup,
	                    colDef: colGroupDef,
	                    api: this.gridOptionsWrapper.getApi(),
	                    context: this.gridOptionsWrapper.getContext()
	                };

	                if (typeof headerValueGetter === 'function') {
	                    // valueGetter is a function, so just call it
	                    return headerValueGetter(params);
	                } else if (typeof headerValueGetter === 'string') {
	                    // valueGetter is an expression, so execute the expression
	                    return this.expressionService.evaluate(headerValueGetter, params);
	                } else {
	                    console.warn('ag-grid: headerValueGetter must be a function or a string');
	                    return '';
	                }
	            } else {
	                return colGroupDef.headerName;
	            }
	        }
	    */
	    ColumnController.prototype.wrapHeaderNameWithAggFunc = function (column, headerName) {
	        if (this.gridOptionsWrapper.isSuppressAggFuncInHeader()) {
	            return headerName;
	        }
	        // only columns with aggregation active can have aggregations
	        var pivotValueColumn = column.getColDef().pivotValueColumn;
	        var pivotActiveOnThisColumn = utils_1.Utils.exists(pivotValueColumn);
	        var aggFunc = null;
	        var aggFuncFound;
	        // otherwise we have a measure that is active, and we are doing aggregation on it
	        if (pivotActiveOnThisColumn) {
	            aggFunc = pivotValueColumn.getAggFunc();
	            aggFuncFound = true;
	        }
	        else {
	            var measureActive = column.isValueActive();
	            var aggregationPresent = this.pivotMode || !this.isRowGroupEmpty();
	            if (measureActive && aggregationPresent) {
	                aggFunc = column.getAggFunc();
	                aggFuncFound = true;
	            }
	            else {
	                aggFuncFound = false;
	            }
	        }
	        if (aggFuncFound) {
	            var aggFuncString = (typeof aggFunc === 'string') ? aggFunc : 'func';
	            var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	            var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
	            return aggFuncStringTranslated + "(" + headerName + ")";
	        }
	        else {
	            return headerName;
	        }
	    };
	    // returns the group with matching colId and instanceId. If instanceId is missing,
	    // matches only on the colId.
	    ColumnController.prototype.getColumnGroup = function (colId, instanceId) {
	        if (!colId) {
	            return null;
	        }
	        if (colId instanceof columnGroup_1.ColumnGroup) {
	            return colId;
	        }
	        var allColumnGroups = this.getAllDisplayedColumnGroups();
	        var checkInstanceId = typeof instanceId === 'number';
	        var result = null;
	        this.columnUtils.depthFirstAllColumnTreeSearch(allColumnGroups, function (child) {
	            if (child instanceof columnGroup_1.ColumnGroup) {
	                var columnGroup = child;
	                var matched = void 0;
	                if (checkInstanceId) {
	                    matched = colId === columnGroup.getGroupId() && instanceId === columnGroup.getInstanceId();
	                }
	                else {
	                    matched = colId === columnGroup.getGroupId();
	                }
	                if (matched) {
	                    result = columnGroup;
	                }
	            }
	        });
	        return result;
	    };
	    ColumnController.prototype.setColumnDefs = function (columnDefs) {
	        // always invalidate cache on changing columns, as the column id's for the new columns
	        // could overlap with the old id's, so the cache would return old values for new columns.
	        this.valueCache.expire();
	        // NOTE ==================
	        // we should be destroying the existing columns and groups if they exist, for example, the original column
	        // group adds a listener to the columns, it should be also removing the listeners
	        this.autoGroupsNeedBuilding = true;
	        var balancedTreeResult = this.balancedColumnTreeBuilder.createBalancedColumnGroups(columnDefs, true);
	        this.primaryBalancedTree = balancedTreeResult.balancedTree;
	        this.primaryHeaderRowCount = balancedTreeResult.treeDept + 1;
	        this.primaryColumns = this.getColumnsFromTree(this.primaryBalancedTree);
	        this.extractRowGroupColumns();
	        this.extractPivotColumns();
	        this.createValueColumns();
	        this.copyDownGridColumns();
	        this.updateDisplayedColumns();
	        this.checkDisplayedVirtualColumns();
	        this.ready = true;
	        var eventEverythingChanged = {
	            type: events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(eventEverythingChanged);
	        var newColumnsLoadedEvent = {
	            type: events_1.Events.EVENT_NEW_COLUMNS_LOADED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(newColumnsLoadedEvent);
	    };
	    ColumnController.prototype.isReady = function () {
	        return this.ready;
	    };
	    ColumnController.prototype.extractRowGroupColumns = function () {
	        var _this = this;
	        this.rowGroupColumns.forEach(function (column) { return column.setRowGroupActive(false); });
	        this.rowGroupColumns = [];
	        // pull out items with rowGroupIndex
	        this.primaryColumns.forEach(function (column) {
	            if (typeof column.getColDef().rowGroupIndex === 'number') {
	                _this.rowGroupColumns.push(column);
	                column.setRowGroupActive(true);
	            }
	        });
	        // then sort them
	        this.rowGroupColumns.sort(function (colA, colB) {
	            return colA.getColDef().rowGroupIndex - colB.getColDef().rowGroupIndex;
	        });
	        // now just pull out items rowGroup, they will be added at the end
	        // after the indexed ones, but in the order the columns appear
	        this.primaryColumns.forEach(function (column) {
	            if (column.getColDef().rowGroup) {
	                // if user already specified rowGroupIndex then we skip it as this col already included
	                if (_this.rowGroupColumns.indexOf(column) >= 0) {
	                    return;
	                }
	                _this.rowGroupColumns.push(column);
	                column.setRowGroupActive(true);
	            }
	        });
	    };
	    ColumnController.prototype.extractPivotColumns = function () {
	        var _this = this;
	        this.pivotColumns.forEach(function (column) { return column.setPivotActive(false); });
	        this.pivotColumns = [];
	        // pull out items with pivotIndex
	        this.primaryColumns.forEach(function (column) {
	            if (typeof column.getColDef().pivotIndex === 'number') {
	                _this.pivotColumns.push(column);
	                column.setPivotActive(true);
	            }
	        });
	        // then sort them
	        this.pivotColumns.sort(function (colA, colB) {
	            return colA.getColDef().pivotIndex - colB.getColDef().pivotIndex;
	        });
	        // now check the boolean equivalent
	        this.primaryColumns.forEach(function (column) {
	            if (column.getColDef().pivot) {
	                // if user already specified pivotIndex then we skip it as this col already included
	                if (_this.pivotColumns.indexOf(column) >= 0) {
	                    return;
	                }
	                _this.pivotColumns.push(column);
	                column.setPivotActive(true);
	            }
	        });
	    };
	    ColumnController.prototype.resetColumnGroupState = function () {
	        var stateItems = [];
	        this.columnUtils.depthFirstOriginalTreeSearch(this.primaryBalancedTree, function (child) {
	            if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                var groupState = {
	                    groupId: child.getGroupId(),
	                    open: child.getColGroupDef().openByDefault
	                };
	                stateItems.push(groupState);
	            }
	        });
	        this.setColumnGroupState(stateItems);
	    };
	    ColumnController.prototype.getColumnGroupState = function () {
	        var columnGroupState = [];
	        this.columnUtils.depthFirstOriginalTreeSearch(this.gridBalancedTree, function (node) {
	            if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                var originalColumnGroup = node;
	                columnGroupState.push({
	                    groupId: originalColumnGroup.getGroupId(),
	                    open: originalColumnGroup.isExpanded()
	                });
	            }
	        });
	        return columnGroupState;
	    };
	    ColumnController.prototype.setColumnGroupState = function (stateItems) {
	        var _this = this;
	        this.columnAnimationService.start();
	        var impactedGroups = [];
	        stateItems.forEach(function (stateItem) {
	            var groupKey = stateItem.groupId;
	            var newValue = stateItem.open;
	            var originalColumnGroup = _this.getOriginalColumnGroup(groupKey);
	            if (!originalColumnGroup) {
	                return;
	            }
	            if (originalColumnGroup.isExpanded() === newValue) {
	                return;
	            }
	            _this.logger.log('columnGroupOpened(' + originalColumnGroup.getGroupId() + ',' + newValue + ')');
	            originalColumnGroup.setExpanded(newValue);
	            impactedGroups.push(originalColumnGroup);
	        });
	        this.updateGroupsAndDisplayedColumns();
	        impactedGroups.forEach(function (originalColumnGroup) {
	            var event = {
	                type: events_1.Events.EVENT_COLUMN_GROUP_OPENED,
	                columnGroup: originalColumnGroup,
	                api: _this.gridApi,
	                columnApi: _this.columnApi
	            };
	            _this.eventService.dispatchEvent(event);
	        });
	        this.columnAnimationService.finish();
	    };
	    // called by headerRenderer - when a header is opened or closed
	    ColumnController.prototype.setColumnGroupOpened = function (key, newValue) {
	        var keyAsString;
	        if (key instanceof originalColumnGroup_1.OriginalColumnGroup) {
	            keyAsString = key.getId();
	        }
	        else {
	            keyAsString = key;
	        }
	        this.setColumnGroupState([{ groupId: keyAsString, open: newValue }]);
	    };
	    ColumnController.prototype.getOriginalColumnGroup = function (key) {
	        if (key instanceof originalColumnGroup_1.OriginalColumnGroup) {
	            return key;
	        }
	        if (typeof key !== 'string') {
	            console.error('ag-Grid: group key must be a string');
	        }
	        // otherwise, search for the column group by id
	        var res = null;
	        this.columnUtils.depthFirstOriginalTreeSearch(this.gridBalancedTree, function (node) {
	            if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                var originalColumnGroup = node;
	                if (originalColumnGroup.getId() === key) {
	                    res = originalColumnGroup;
	                }
	            }
	        });
	        return res;
	    };
	    ColumnController.prototype.calculateColumnsForDisplay = function () {
	        var columnsForDisplay;
	        if (this.pivotMode && !this.secondaryColumnsPresent) {
	            // pivot mode is on, but we are not pivoting, so we only
	            // show columns we are aggregating on
	            columnsForDisplay = this.createColumnsToDisplayFromValueColumns();
	        }
	        else {
	            // otherwise continue as normal. this can be working on the primary
	            // or secondary columns, whatever the gridColumns are set to
	            columnsForDisplay = utils_1.Utils.filter(this.gridColumns, function (column) { return column.isVisible(); });
	        }
	        this.createGroupAutoColumnsIfNeeded();
	        if (utils_1.Utils.exists(this.groupAutoColumns)) {
	            columnsForDisplay = this.groupAutoColumns.concat(columnsForDisplay);
	        }
	        return columnsForDisplay;
	    };
	    ColumnController.prototype.checkColSpanActiveInCols = function (columns) {
	        var result = false;
	        columns.forEach(function (col) {
	            if (utils_1.Utils.exists(col.getColDef().colSpan)) {
	                result = true;
	            }
	        });
	        return result;
	    };
	    ColumnController.prototype.calculateColumnsForGroupDisplay = function () {
	        var _this = this;
	        this.groupDisplayColumns = [];
	        var checkFunc = function (col) {
	            var colDef = col.getColDef();
	            if (colDef && utils_1.Utils.exists(colDef.showRowGroup)) {
	                _this.groupDisplayColumns.push(col);
	            }
	        };
	        this.gridColumns.forEach(checkFunc);
	        if (this.groupAutoColumns) {
	            this.groupAutoColumns.forEach(checkFunc);
	        }
	    };
	    ColumnController.prototype.getGroupDisplayColumns = function () {
	        return this.groupDisplayColumns;
	    };
	    ColumnController.prototype.createColumnsToDisplayFromValueColumns = function () {
	        var _this = this;
	        // make a copy of the value columns, so we have to side effects
	        var result = this.valueColumns.slice();
	        // order the columns as per the grid columns. having the order is
	        // important as without it, reordering of columns would have no impact
	        result.sort(function (colA, colB) {
	            return _this.gridColumns.indexOf(colA) - _this.gridColumns.indexOf(colB);
	        });
	        return result;
	    };
	    ColumnController.prototype.updateDisplayedColumns = function () {
	        var columnsForDisplay = this.calculateColumnsForDisplay();
	        this.buildDisplayedTrees(columnsForDisplay);
	        this.calculateColumnsForGroupDisplay();
	        // this is also called when a group is opened or closed
	        this.updateGroupsAndDisplayedColumns();
	        this.setFirstRightAndLastLeftPinned();
	    };
	    ColumnController.prototype.isSecondaryColumnsPresent = function () {
	        return this.secondaryColumnsPresent;
	    };
	    ColumnController.prototype.setSecondaryColumns = function (colDefs) {
	        var newColsPresent = colDefs && colDefs.length > 0;
	        // if not cols passed, and we had to cols anyway, then do nothing
	        if (!newColsPresent && !this.secondaryColumnsPresent) {
	            return;
	        }
	        if (newColsPresent) {
	            this.processSecondaryColumnDefinitions(colDefs);
	            var balancedTreeResult = this.balancedColumnTreeBuilder.createBalancedColumnGroups(colDefs, false);
	            this.secondaryBalancedTree = balancedTreeResult.balancedTree;
	            this.secondaryHeaderRowCount = balancedTreeResult.treeDept + 1;
	            this.secondaryColumns = this.getColumnsFromTree(this.secondaryBalancedTree);
	            this.secondaryColumnsPresent = true;
	        }
	        else {
	            this.secondaryBalancedTree = null;
	            this.secondaryHeaderRowCount = -1;
	            this.secondaryColumns = null;
	            this.secondaryColumnsPresent = false;
	        }
	        this.copyDownGridColumns();
	        this.updateDisplayedColumns();
	    };
	    ColumnController.prototype.processSecondaryColumnDefinitions = function (colDefs) {
	        var columnCallback = this.gridOptionsWrapper.getProcessSecondaryColDefFunc();
	        var groupCallback = this.gridOptionsWrapper.getProcessSecondaryColGroupDefFunc();
	        if (!columnCallback && !groupCallback) {
	            return;
	        }
	        searchForColDefs(colDefs);
	        function searchForColDefs(colDefs2) {
	            colDefs2.forEach(function (abstractColDef) {
	                var isGroup = utils_1.Utils.exists(abstractColDef.children);
	                if (isGroup) {
	                    var colGroupDef = abstractColDef;
	                    if (groupCallback) {
	                        groupCallback(colGroupDef);
	                    }
	                    searchForColDefs(colGroupDef.children);
	                }
	                else {
	                    var colDef = abstractColDef;
	                    if (columnCallback) {
	                        columnCallback(colDef);
	                    }
	                }
	            });
	        }
	    };
	    // called from: setColumnState, setColumnDefs, setAlternativeColumnDefs
	    ColumnController.prototype.copyDownGridColumns = function () {
	        if (this.secondaryColumns) {
	            this.gridBalancedTree = this.secondaryBalancedTree.slice();
	            this.gridHeaderRowCount = this.secondaryHeaderRowCount;
	            this.gridColumns = this.secondaryColumns.slice();
	        }
	        else {
	            this.gridBalancedTree = this.primaryBalancedTree.slice();
	            this.gridHeaderRowCount = this.primaryHeaderRowCount;
	            this.gridColumns = this.primaryColumns.slice();
	        }
	        this.clearDisplayedColumns();
	        this.colSpanActive = this.checkColSpanActiveInCols(this.gridColumns);
	        var event = {
	            type: events_1.Events.EVENT_GRID_COLUMNS_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    // gets called after we copy down grid columns, to make sure any part of the gui
	    // that tries to draw, eg the header, it will get empty lists of columns rather
	    // than stale columns. for example, the header will received gridColumnsChanged
	    // event, so will try and draw, but it will draw successfully when it acts on the
	    // virtualColumnsChanged event
	    ColumnController.prototype.clearDisplayedColumns = function () {
	        this.displayedLeftColumnTree = [];
	        this.displayedRightColumnTree = [];
	        this.displayedCentreColumnTree = [];
	        this.displayedLeftHeaderRows = {};
	        this.displayedRightHeaderRows = {};
	        this.displayedCentreHeaderRows = {};
	        this.displayedLeftColumns = [];
	        this.displayedRightColumns = [];
	        this.displayedCenterColumns = [];
	        this.allDisplayedColumns = [];
	        this.allDisplayedVirtualColumns = [];
	    };
	    ColumnController.prototype.updateGroupsAndDisplayedColumns = function () {
	        this.updateGroups();
	        this.updateDisplayedColumnsFromTrees();
	        this.updateVirtualSets();
	        this.updateBodyWidths();
	        // this event is picked up by the gui, headerRenderer and rowRenderer, to recalculate what columns to display
	        var event = {
	            type: events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnController.prototype.updateDisplayedColumnsFromTrees = function () {
	        this.addToDisplayedColumns(this.displayedLeftColumnTree, this.displayedLeftColumns);
	        this.addToDisplayedColumns(this.displayedCentreColumnTree, this.displayedCenterColumns);
	        this.addToDisplayedColumns(this.displayedRightColumnTree, this.displayedRightColumns);
	        this.setupAllDisplayedColumns();
	        this.setLeftValues();
	    };
	    ColumnController.prototype.setupAllDisplayedColumns = function () {
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            this.allDisplayedColumns = this.displayedRightColumns
	                .concat(this.displayedCenterColumns)
	                .concat(this.displayedLeftColumns);
	        }
	        else {
	            this.allDisplayedColumns = this.displayedLeftColumns
	                .concat(this.displayedCenterColumns)
	                .concat(this.displayedRightColumns);
	        }
	    };
	    // sets the left pixel position of each column
	    ColumnController.prototype.setLeftValues = function () {
	        this.setLeftValuesOfColumns();
	        this.setLeftValuesOfGroups();
	    };
	    ColumnController.prototype.setLeftValuesOfColumns = function () {
	        var _this = this;
	        // go through each list of displayed columns
	        var allColumns = this.primaryColumns.slice(0);
	        // let totalColumnWidth = this.getWidthOfColsInList()
	        var doingRtl = this.gridOptionsWrapper.isEnableRtl();
	        [this.displayedLeftColumns, this.displayedRightColumns, this.displayedCenterColumns].forEach(function (columns) {
	            if (doingRtl) {
	                // when doing RTL, we start at the top most pixel (ie RHS) and work backwards
	                var left_1 = _this.getWidthOfColsInList(columns);
	                columns.forEach(function (column) {
	                    left_1 -= column.getActualWidth();
	                    column.setLeft(left_1);
	                });
	            }
	            else {
	                // otherwise normal LTR, we start at zero
	                var left_2 = 0;
	                columns.forEach(function (column) {
	                    column.setLeft(left_2);
	                    left_2 += column.getActualWidth();
	                });
	            }
	            utils_1.Utils.removeAllFromArray(allColumns, columns);
	        });
	        // items left in allColumns are columns not displayed, so remove the left position. this is
	        // important for the rows, as if a col is made visible, then taken out, then made visible again,
	        // we don't want the animation of the cell floating in from the old position, whatever that was.
	        allColumns.forEach(function (column) {
	            column.setLeft(null);
	        });
	    };
	    ColumnController.prototype.setLeftValuesOfGroups = function () {
	        // a groups left value is the lest left value of it's children
	        [this.displayedLeftColumnTree, this.displayedRightColumnTree, this.displayedCentreColumnTree].forEach(function (columns) {
	            columns.forEach(function (column) {
	                if (column instanceof columnGroup_1.ColumnGroup) {
	                    var columnGroup = column;
	                    columnGroup.checkLeft();
	                }
	            });
	        });
	    };
	    ColumnController.prototype.addToDisplayedColumns = function (displayedColumnTree, displayedColumns) {
	        displayedColumns.length = 0;
	        this.columnUtils.depthFirstDisplayedColumnTreeSearch(displayedColumnTree, function (child) {
	            if (child instanceof column_1.Column) {
	                displayedColumns.push(child);
	            }
	        });
	    };
	    ColumnController.prototype.updateDisplayedCenterVirtualColumns = function () {
	        var skipVirtualisation = this.gridOptionsWrapper.isSuppressColumnVirtualisation() || this.gridOptionsWrapper.isForPrint();
	        if (skipVirtualisation) {
	            // no virtualisation, so don't filter
	            this.allDisplayedCenterVirtualColumns = this.displayedCenterColumns;
	        }
	        else {
	            // filter out what should be visible
	            this.allDisplayedCenterVirtualColumns = this.filterOutColumnsWithinViewport();
	        }
	        this.allDisplayedVirtualColumns = this.allDisplayedCenterVirtualColumns
	            .concat(this.displayedLeftColumns)
	            .concat(this.displayedRightColumns);
	        // return map of virtual col id's, for easy lookup when building the groups.
	        // the map will be colId=>true, ie col id's mapping to 'true'.
	        var result = {};
	        this.allDisplayedVirtualColumns.forEach(function (col) {
	            result[col.getId()] = true;
	        });
	        return result;
	    };
	    ColumnController.prototype.getVirtualHeaderGroupRow = function (type, dept) {
	        var result;
	        switch (type) {
	            case column_1.Column.PINNED_LEFT:
	                result = this.displayedLeftHeaderRows[dept];
	                break;
	            case column_1.Column.PINNED_RIGHT:
	                result = this.displayedRightHeaderRows[dept];
	                break;
	            default:
	                result = this.displayedCentreHeaderRows[dept];
	                break;
	        }
	        if (utils_1.Utils.missing(result)) {
	            result = [];
	        }
	        return result;
	    };
	    ColumnController.prototype.updateDisplayedVirtualGroups = function (virtualColIds) {
	        // go through each group, see if any of it's cols are displayed, and if yes,
	        // then this group is included
	        this.displayedLeftHeaderRows = {};
	        this.displayedRightHeaderRows = {};
	        this.displayedCentreHeaderRows = {};
	        testGroup(this.displayedLeftColumnTree, this.displayedLeftHeaderRows, 0);
	        testGroup(this.displayedRightColumnTree, this.displayedRightHeaderRows, 0);
	        testGroup(this.displayedCentreColumnTree, this.displayedCentreHeaderRows, 0);
	        function testGroup(children, result, dept) {
	            var returnValue = false;
	            for (var i = 0; i < children.length; i++) {
	                // see if this item is within viewport
	                var child = children[i];
	                var addThisItem = void 0;
	                if (child instanceof column_1.Column) {
	                    // for column, test if column is included
	                    addThisItem = virtualColIds[child.getId()] === true;
	                }
	                else {
	                    // if group, base decision on children
	                    var columnGroup = child;
	                    addThisItem = testGroup(columnGroup.getDisplayedChildren(), result, dept + 1);
	                }
	                if (addThisItem) {
	                    returnValue = true;
	                    if (!result[dept]) {
	                        result[dept] = [];
	                    }
	                    result[dept].push(child);
	                }
	            }
	            return returnValue;
	        }
	    };
	    ColumnController.prototype.updateVirtualSets = function () {
	        var virtualColIds = this.updateDisplayedCenterVirtualColumns();
	        this.updateDisplayedVirtualGroups(virtualColIds);
	    };
	    ColumnController.prototype.filterOutColumnsWithinViewport = function () {
	        return utils_1.Utils.filter(this.displayedCenterColumns, this.isColumnInViewport.bind(this));
	    };
	    // called from api
	    ColumnController.prototype.sizeColumnsToFit = function (gridWidth) {
	        var _this = this;
	        // avoid divide by zero
	        var allDisplayedColumns = this.getAllDisplayedColumns();
	        if (gridWidth <= 0 || allDisplayedColumns.length === 0) {
	            return;
	        }
	        var colsToNotSpread = utils_1.Utils.filter(allDisplayedColumns, function (column) {
	            return column.getColDef().suppressSizeToFit === true;
	        });
	        var colsToSpread = utils_1.Utils.filter(allDisplayedColumns, function (column) {
	            return column.getColDef().suppressSizeToFit !== true;
	        });
	        // make a copy of the cols that are going to be resized
	        var colsToFireEventFor = colsToSpread.slice(0);
	        var finishedResizing = false;
	        while (!finishedResizing) {
	            finishedResizing = true;
	            var availablePixels = gridWidth - this.getWidthOfColsInList(colsToNotSpread);
	            if (availablePixels <= 0) {
	                // no width, set everything to minimum
	                colsToSpread.forEach(function (column) {
	                    column.setMinimum();
	                });
	            }
	            else {
	                var scale = availablePixels / this.getWidthOfColsInList(colsToSpread);
	                // we set the pixels for the last col based on what's left, as otherwise
	                // we could be a pixel or two short or extra because of rounding errors.
	                var pixelsForLastCol = availablePixels;
	                // backwards through loop, as we are removing items as we go
	                for (var i = colsToSpread.length - 1; i >= 0; i--) {
	                    var column = colsToSpread[i];
	                    var newWidth = Math.round(column.getActualWidth() * scale);
	                    if (newWidth < column.getMinWidth()) {
	                        column.setMinimum();
	                        moveToNotSpread(column);
	                        finishedResizing = false;
	                    }
	                    else if (column.isGreaterThanMax(newWidth)) {
	                        column.setActualWidth(column.getMaxWidth());
	                        moveToNotSpread(column);
	                        finishedResizing = false;
	                    }
	                    else {
	                        var onLastCol = i === 0;
	                        if (onLastCol) {
	                            column.setActualWidth(pixelsForLastCol);
	                        }
	                        else {
	                            column.setActualWidth(newWidth);
	                        }
	                    }
	                    pixelsForLastCol -= newWidth;
	                }
	            }
	        }
	        this.setLeftValues();
	        this.updateBodyWidths();
	        colsToFireEventFor.forEach(function (column) {
	            var event = {
	                type: events_1.Events.EVENT_COLUMN_RESIZED,
	                column: column,
	                columns: [column],
	                finished: true,
	                api: _this.gridApi,
	                columnApi: _this.columnApi
	            };
	            _this.eventService.dispatchEvent(event);
	        });
	        function moveToNotSpread(column) {
	            utils_1.Utils.removeFromArray(colsToSpread, column);
	            colsToNotSpread.push(column);
	        }
	    };
	    ColumnController.prototype.buildDisplayedTrees = function (visibleColumns) {
	        var leftVisibleColumns = utils_1.Utils.filter(visibleColumns, function (column) {
	            return column.getPinned() === 'left';
	        });
	        var rightVisibleColumns = utils_1.Utils.filter(visibleColumns, function (column) {
	            return column.getPinned() === 'right';
	        });
	        var centerVisibleColumns = utils_1.Utils.filter(visibleColumns, function (column) {
	            return column.getPinned() !== 'left' && column.getPinned() !== 'right';
	        });
	        var groupInstanceIdCreator = new groupInstanceIdCreator_1.GroupInstanceIdCreator();
	        this.displayedLeftColumnTree = this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, this.displayedLeftColumnTree);
	        this.displayedRightColumnTree = this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, this.displayedRightColumnTree);
	        this.displayedCentreColumnTree = this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns, this.gridBalancedTree, groupInstanceIdCreator, this.displayedCentreColumnTree);
	    };
	    ColumnController.prototype.updateGroups = function () {
	        var allGroups = this.getAllDisplayedColumnGroups();
	        this.columnUtils.depthFirstAllColumnTreeSearch(allGroups, function (child) {
	            if (child instanceof columnGroup_1.ColumnGroup) {
	                var group = child;
	                group.calculateDisplayedColumns();
	            }
	        });
	    };
	    ColumnController.prototype.getGroupAutoColumns = function () {
	        return this.groupAutoColumns;
	    };
	    ColumnController.prototype.createGroupAutoColumnsIfNeeded = function () {
	        if (!this.autoGroupsNeedBuilding) {
	            return;
	        }
	        this.autoGroupsNeedBuilding = false;
	        // see if we need to insert the default grouping column
	        var needAutoColumns = this.rowGroupColumns.length > 0
	            && !this.gridOptionsWrapper.isGroupSuppressAutoColumn()
	            && !this.gridOptionsWrapper.isGroupUseEntireRow()
	            && !this.gridOptionsWrapper.isGroupSuppressRow();
	        if (needAutoColumns) {
	            this.groupAutoColumns = this.autoGroupColService.createAutoGroupColumns(this.rowGroupColumns);
	        }
	        else {
	            this.groupAutoColumns = null;
	        }
	    };
	    ColumnController.prototype.createValueColumns = function () {
	        this.valueColumns.forEach(function (column) { return column.setValueActive(false); });
	        this.valueColumns = [];
	        // override with columns that have the aggFunc specified explicitly
	        for (var i = 0; i < this.primaryColumns.length; i++) {
	            var column = this.primaryColumns[i];
	            if (column.getColDef().aggFunc) {
	                column.setAggFunc(column.getColDef().aggFunc);
	                this.valueColumns.push(column);
	                column.setValueActive(true);
	            }
	        }
	    };
	    ColumnController.prototype.getWidthOfColsInList = function (columnList) {
	        var result = 0;
	        for (var i = 0; i < columnList.length; i++) {
	            result += columnList[i].getActualWidth();
	        }
	        return result;
	    };
	    ColumnController.prototype.getGridBalancedTree = function () {
	        return this.gridBalancedTree;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ColumnController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], ColumnController.prototype, "expressionService", void 0);
	    __decorate([
	        context_1.Autowired('balancedColumnTreeBuilder'),
	        __metadata("design:type", balancedColumnTreeBuilder_1.BalancedColumnTreeBuilder)
	    ], ColumnController.prototype, "balancedColumnTreeBuilder", void 0);
	    __decorate([
	        context_1.Autowired('displayedGroupCreator'),
	        __metadata("design:type", displayedGroupCreator_1.DisplayedGroupCreator)
	    ], ColumnController.prototype, "displayedGroupCreator", void 0);
	    __decorate([
	        context_1.Autowired('autoWidthCalculator'),
	        __metadata("design:type", autoWidthCalculator_1.AutoWidthCalculator)
	    ], ColumnController.prototype, "autoWidthCalculator", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], ColumnController.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('columnUtils'),
	        __metadata("design:type", columnUtils_1.ColumnUtils)
	    ], ColumnController.prototype, "columnUtils", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], ColumnController.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], ColumnController.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnAnimationService'),
	        __metadata("design:type", columnAnimationService_1.ColumnAnimationService)
	    ], ColumnController.prototype, "columnAnimationService", void 0);
	    __decorate([
	        context_1.Autowired('autoGroupColService'),
	        __metadata("design:type", autoGroupColService_1.AutoGroupColService)
	    ], ColumnController.prototype, "autoGroupColService", void 0);
	    __decorate([
	        context_1.Optional('aggFuncService'),
	        __metadata("design:type", Object)
	    ], ColumnController.prototype, "aggFuncService", void 0);
	    __decorate([
	        context_1.Optional('valueCache'),
	        __metadata("design:type", valueCache_1.ValueCache)
	    ], ColumnController.prototype, "valueCache", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", ColumnApi)
	    ], ColumnController.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], ColumnController.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ColumnController.prototype, "init", null);
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], ColumnController.prototype, "setBeans", null);
	    ColumnController = __decorate([
	        context_1.Bean('columnController')
	    ], ColumnController);
	    return ColumnController;
	}());
	exports.ColumnController = ColumnController;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var column_1 = __webpack_require__(17);
	var eventService_1 = __webpack_require__(5);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var columnController_1 = __webpack_require__(15);
	var gridApi_1 = __webpack_require__(12);
	var ColumnGroup = (function () {
	    function ColumnGroup(originalColumnGroup, groupId, instanceId) {
	        // depends on the open/closed state of the group, only displaying columns are stored here
	        this.displayedChildren = [];
	        this.localEventService = new eventService_1.EventService();
	        this.groupId = groupId;
	        this.instanceId = instanceId;
	        this.originalColumnGroup = originalColumnGroup;
	    }
	    // this is static, a it is used outside of this class
	    ColumnGroup.createUniqueId = function (groupId, instanceId) {
	        return groupId + '_' + instanceId;
	    };
	    // as the user is adding and removing columns, the groups are recalculated.
	    // this reset clears out all children, ready for children to be added again
	    ColumnGroup.prototype.reset = function () {
	        this.parent = null;
	        this.children = null;
	        this.displayedChildren = null;
	    };
	    ColumnGroup.prototype.getParent = function () {
	        return this.parent;
	    };
	    ColumnGroup.prototype.setParent = function (parent) {
	        this.parent = parent;
	    };
	    ColumnGroup.prototype.getUniqueId = function () {
	        return ColumnGroup.createUniqueId(this.groupId, this.instanceId);
	    };
	    ColumnGroup.prototype.isEmptyGroup = function () {
	        return this.displayedChildren.length === 0;
	    };
	    ColumnGroup.prototype.checkLeft = function () {
	        // first get all children to setLeft, as it impacts our decision below
	        this.displayedChildren.forEach(function (child) {
	            if (child instanceof ColumnGroup) {
	                child.checkLeft();
	            }
	        });
	        // set our left based on first displayed column
	        if (this.displayedChildren.length > 0) {
	            if (this.gridOptionsWrapper.isEnableRtl()) {
	                var lastChild = this.displayedChildren[this.displayedChildren.length - 1];
	                var lastChildLeft = lastChild.getLeft();
	                this.setLeft(lastChildLeft);
	            }
	            else {
	                var firstChildLeft = this.displayedChildren[0].getLeft();
	                this.setLeft(firstChildLeft);
	            }
	        }
	        else {
	            // this should never happen, as if we have no displayed columns, then
	            // this groups should not even exist.
	            this.setLeft(null);
	        }
	    };
	    ColumnGroup.prototype.getLeft = function () {
	        return this.left;
	    };
	    ColumnGroup.prototype.getOldLeft = function () {
	        return this.oldLeft;
	    };
	    ColumnGroup.prototype.setLeft = function (left) {
	        this.oldLeft = left;
	        if (this.left !== left) {
	            this.left = left;
	            this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_LEFT_CHANGED));
	        }
	    };
	    ColumnGroup.prototype.createAgEvent = function (type) {
	        return {
	            type: type,
	        };
	    };
	    ColumnGroup.prototype.addEventListener = function (eventType, listener) {
	        this.localEventService.addEventListener(eventType, listener);
	    };
	    ColumnGroup.prototype.removeEventListener = function (eventType, listener) {
	        this.localEventService.removeEventListener(eventType, listener);
	    };
	    ColumnGroup.prototype.getGroupId = function () {
	        return this.groupId;
	    };
	    ColumnGroup.prototype.getInstanceId = function () {
	        return this.instanceId;
	    };
	    ColumnGroup.prototype.isChildInThisGroupDeepSearch = function (wantedChild) {
	        var result = false;
	        this.children.forEach(function (foundChild) {
	            if (wantedChild === foundChild) {
	                result = true;
	            }
	            if (foundChild instanceof ColumnGroup) {
	                if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {
	                    result = true;
	                }
	            }
	        });
	        return result;
	    };
	    ColumnGroup.prototype.getActualWidth = function () {
	        var groupActualWidth = 0;
	        if (this.displayedChildren) {
	            this.displayedChildren.forEach(function (child) {
	                groupActualWidth += child.getActualWidth();
	            });
	        }
	        return groupActualWidth;
	    };
	    ColumnGroup.prototype.isResizable = function () {
	        if (!this.displayedChildren) {
	            return false;
	        }
	        // if at least one child is resizable, then the group is resizable
	        var result = false;
	        this.displayedChildren.forEach(function (child) {
	            if (child.isResizable()) {
	                result = true;
	            }
	        });
	        return result;
	    };
	    ColumnGroup.prototype.getMinWidth = function () {
	        var result = 0;
	        this.displayedChildren.forEach(function (groupChild) {
	            result += groupChild.getMinWidth();
	        });
	        return result;
	    };
	    ColumnGroup.prototype.addChild = function (child) {
	        if (!this.children) {
	            this.children = [];
	        }
	        this.children.push(child);
	    };
	    ColumnGroup.prototype.getDisplayedChildren = function () {
	        return this.displayedChildren;
	    };
	    ColumnGroup.prototype.getLeafColumns = function () {
	        var result = [];
	        this.addLeafColumns(result);
	        return result;
	    };
	    ColumnGroup.prototype.getDisplayedLeafColumns = function () {
	        var result = [];
	        this.addDisplayedLeafColumns(result);
	        return result;
	    };
	    // why two methods here doing the same thing?
	    ColumnGroup.prototype.getDefinition = function () {
	        return this.originalColumnGroup.getColGroupDef();
	    };
	    ColumnGroup.prototype.getColGroupDef = function () {
	        return this.originalColumnGroup.getColGroupDef();
	    };
	    ColumnGroup.prototype.isPadding = function () {
	        return this.originalColumnGroup.isPadding();
	    };
	    ColumnGroup.prototype.isExpandable = function () {
	        return this.originalColumnGroup.isExpandable();
	    };
	    ColumnGroup.prototype.isExpanded = function () {
	        return this.originalColumnGroup.isExpanded();
	    };
	    ColumnGroup.prototype.setExpanded = function (expanded) {
	        this.originalColumnGroup.setExpanded(expanded);
	    };
	    ColumnGroup.prototype.addDisplayedLeafColumns = function (leafColumns) {
	        this.displayedChildren.forEach(function (child) {
	            if (child instanceof column_1.Column) {
	                leafColumns.push(child);
	            }
	            else if (child instanceof ColumnGroup) {
	                child.addDisplayedLeafColumns(leafColumns);
	            }
	        });
	    };
	    ColumnGroup.prototype.addLeafColumns = function (leafColumns) {
	        this.children.forEach(function (child) {
	            if (child instanceof column_1.Column) {
	                leafColumns.push(child);
	            }
	            else if (child instanceof ColumnGroup) {
	                child.addLeafColumns(leafColumns);
	            }
	        });
	    };
	    ColumnGroup.prototype.getChildren = function () {
	        return this.children;
	    };
	    ColumnGroup.prototype.getColumnGroupShow = function () {
	        return this.originalColumnGroup.getColumnGroupShow();
	    };
	    ColumnGroup.prototype.getOriginalColumnGroup = function () {
	        return this.originalColumnGroup;
	    };
	    ColumnGroup.prototype.calculateDisplayedColumns = function () {
	        var _this = this;
	        // clear out last time we calculated
	        this.displayedChildren = [];
	        // it not expandable, everything is visible
	        if (!this.originalColumnGroup.isExpandable()) {
	            this.displayedChildren = this.children;
	        }
	        else {
	            // and calculate again
	            this.children.forEach(function (abstractColumn) {
	                var headerGroupShow = abstractColumn.getColumnGroupShow();
	                switch (headerGroupShow) {
	                    case ColumnGroup.HEADER_GROUP_SHOW_OPEN:
	                        // when set to open, only show col if group is open
	                        if (_this.originalColumnGroup.isExpanded()) {
	                            _this.displayedChildren.push(abstractColumn);
	                        }
	                        break;
	                    case ColumnGroup.HEADER_GROUP_SHOW_CLOSED:
	                        // when set to open, only show col if group is open
	                        if (!_this.originalColumnGroup.isExpanded()) {
	                            _this.displayedChildren.push(abstractColumn);
	                        }
	                        break;
	                    default:
	                        // default is always show the column
	                        _this.displayedChildren.push(abstractColumn);
	                        break;
	                }
	            });
	        }
	        this.localEventService.dispatchEvent(this.createAgEvent(ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED));
	    };
	    ColumnGroup.HEADER_GROUP_SHOW_OPEN = 'open';
	    ColumnGroup.HEADER_GROUP_SHOW_CLOSED = 'closed';
	    ColumnGroup.EVENT_LEFT_CHANGED = 'leftChanged';
	    ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED = 'leftChanged';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ColumnGroup.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], ColumnGroup.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], ColumnGroup.prototype, "gridApi", void 0);
	    return ColumnGroup;
	}());
	exports.ColumnGroup = ColumnGroup;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var eventService_1 = __webpack_require__(5);
	var utils_1 = __webpack_require__(8);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var columnUtils_1 = __webpack_require__(18);
	var columnController_1 = __webpack_require__(15);
	var gridApi_1 = __webpack_require__(12);
	// Wrapper around a user provide column definition. The grid treats the column definition as ready only.
	// This class contains all the runtime information about a column, plus some logic (the definition has no logic).
	// This class implements both interfaces ColumnGroupChild and OriginalColumnGroupChild as the class can
	// appear as a child of either the original tree or the displayed tree. However the relevant group classes
	// for each type only implements one, as each group can only appear in it's associated tree (eg OriginalColumnGroup
	// can only appear in OriginalColumn tree).
	var Column = (function () {
	    function Column(colDef, colId, primary) {
	        this.moving = false;
	        this.menuVisible = false;
	        this.filterActive = false;
	        this.eventService = new eventService_1.EventService();
	        this.rowGroupActive = false;
	        this.pivotActive = false;
	        this.aggregationActive = false;
	        this.colDef = colDef;
	        this.visible = !colDef.hide;
	        this.sort = colDef.sort;
	        this.sortedAt = colDef.sortedAt;
	        this.colId = colId;
	        this.primary = primary;
	    }
	    Column.prototype.setParent = function (parent) {
	        this.parent = parent;
	    };
	    Column.prototype.getParent = function () {
	        return this.parent;
	    };
	    // this is done after constructor as it uses gridOptionsWrapper
	    Column.prototype.initialise = function () {
	        this.cellEditor = this.frameworkFactory.colDefCellEditor(this.colDef);
	        this.filter = this.frameworkFactory.colDefFilter(this.colDef);
	        this.setPinned(this.colDef.pinned);
	        var minColWidth = this.gridOptionsWrapper.getMinColWidth();
	        var maxColWidth = this.gridOptionsWrapper.getMaxColWidth();
	        if (this.colDef.minWidth) {
	            this.minWidth = this.colDef.minWidth;
	        }
	        else {
	            this.minWidth = minColWidth;
	        }
	        if (this.colDef.maxWidth) {
	            this.maxWidth = this.colDef.maxWidth;
	        }
	        else {
	            this.maxWidth = maxColWidth;
	        }
	        this.actualWidth = this.columnUtils.calculateColInitialWidth(this.colDef);
	        var suppressDotNotation = this.gridOptionsWrapper.isSuppressFieldDotNotation();
	        this.fieldContainsDots = utils_1.Utils.exists(this.colDef.field) && this.colDef.field.indexOf('.') >= 0 && !suppressDotNotation;
	        this.tooltipFieldContainsDots = utils_1.Utils.exists(this.colDef.tooltipField) && this.colDef.tooltipField.indexOf('.') >= 0 && !suppressDotNotation;
	        this.validate();
	    };
	    Column.prototype.isEmptyGroup = function () {
	        return false;
	    };
	    Column.prototype.isRowGroupDisplayed = function (colId) {
	        if (utils_1.Utils.missing(this.colDef) || utils_1.Utils.missing(this.colDef.showRowGroup)) {
	            return false;
	        }
	        var showingAllGroups = this.colDef.showRowGroup === true;
	        var showingThisGroup = this.colDef.showRowGroup === colId;
	        return showingAllGroups || showingThisGroup;
	    };
	    Column.prototype.getCellEditor = function () {
	        return this.cellEditor;
	    };
	    Column.prototype.getFilter = function () {
	        return this.filter;
	    };
	    Column.prototype.getUniqueId = function () {
	        return this.getId();
	    };
	    Column.prototype.isPrimary = function () {
	        return this.primary;
	    };
	    Column.prototype.isFilterAllowed = function () {
	        return this.primary && !this.colDef.suppressFilter;
	    };
	    Column.prototype.isFieldContainsDots = function () {
	        return this.fieldContainsDots;
	    };
	    Column.prototype.isTooltipFieldContainsDots = function () {
	        return this.tooltipFieldContainsDots;
	    };
	    Column.prototype.validate = function () {
	        if (!this.gridOptionsWrapper.isEnterprise()) {
	            if (utils_1.Utils.exists(this.colDef.aggFunc)) {
	                console.warn('ag-Grid: aggFunc is only valid in ag-Grid-Enterprise');
	            }
	            if (utils_1.Utils.exists(this.colDef.rowGroupIndex)) {
	                console.warn('ag-Grid: rowGroupIndex is only valid in ag-Grid-Enterprise');
	            }
	            if (utils_1.Utils.exists(this.colDef.rowGroup)) {
	                console.warn('ag-Grid: rowGroup is only valid in ag-Grid-Enterprise');
	            }
	            if (utils_1.Utils.exists(this.colDef.pivotIndex)) {
	                console.warn('ag-Grid: pivotIndex is only valid in ag-Grid-Enterprise');
	            }
	            if (utils_1.Utils.exists(this.colDef.pivot)) {
	                console.warn('ag-Grid: pivot is only valid in ag-Grid-Enterprise');
	            }
	        }
	        if (utils_1.Utils.exists(this.colDef.width) && typeof this.colDef.width !== 'number') {
	            console.warn('ag-Grid: colDef.width should be a number, not ' + typeof this.colDef.width);
	        }
	        if (utils_1.Utils.get(this, 'colDef.cellRendererParams.restrictToOneGroup', null)) {
	            console.warn('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.restrictToOneGroup is deprecated. You should use showRowGroup');
	        }
	        if (utils_1.Utils.get(this, 'colDef.cellRendererParams.keyMap', null)) {
	            console.warn('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.keyMap is deprecated. You should use colDef.keyCreator');
	        }
	        if (utils_1.Utils.get(this, 'colDef.cellRendererParams.keyMap', null)) {
	            console.warn('ag-Grid: Since ag-grid 11.0.0 cellRendererParams.keyMap is deprecated. You should use colDef.keyCreator');
	        }
	        var colDefAny = this.colDef;
	        if (colDefAny.floatingCellRenderer) {
	            console.warn('ag-Grid: since v11, floatingCellRenderer is now pinnedRowCellRenderer');
	            this.colDef.pinnedRowCellRenderer = colDefAny.floatingCellRenderer;
	        }
	        if (colDefAny.floatingRendererFramework) {
	            console.warn('ag-Grid: since v11, floatingRendererFramework is now pinnedRowCellRendererFramework');
	            this.colDef.pinnedRowCellRendererFramework = colDefAny.floatingRendererFramework;
	        }
	        if (colDefAny.floatingRendererParams) {
	            console.warn('ag-Grid: since v11, floatingRendererParams is now pinnedRowCellRendererParams');
	            this.colDef.pinnedRowCellRendererParams = colDefAny.floatingRendererParams;
	        }
	        if (colDefAny.floatingValueFormatter) {
	            console.warn('ag-Grid: since v11, floatingValueFormatter is now pinnedRowValueFormatter');
	            this.colDef.pinnedRowValueFormatter = colDefAny.floatingValueFormatter;
	        }
	        if (colDefAny.cellFormatter) {
	            console.warn('ag-Grid: since v12, cellFormatter is now valueFormatter');
	            if (utils_1.Utils.missing(this.colDef.valueFormatter)) {
	                this.colDef.valueFormatter = colDefAny.cellFormatter;
	            }
	        }
	    };
	    Column.prototype.addEventListener = function (eventType, listener) {
	        this.eventService.addEventListener(eventType, listener);
	    };
	    Column.prototype.removeEventListener = function (eventType, listener) {
	        this.eventService.removeEventListener(eventType, listener);
	    };
	    Column.prototype.createIsColumnFuncParams = function (rowNode) {
	        return {
	            node: rowNode,
	            column: this,
	            colDef: this.colDef,
	            context: this.gridOptionsWrapper.getContext(),
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi()
	        };
	    };
	    Column.prototype.isSuppressNavigable = function (rowNode) {
	        // if boolean set, then just use it
	        if (typeof this.colDef.suppressNavigable === 'boolean') {
	            return this.colDef.suppressNavigable;
	        }
	        // if function, then call the function to find out
	        if (typeof this.colDef.suppressNavigable === 'function') {
	            var params = this.createIsColumnFuncParams(rowNode);
	            var suppressNaviableFunc = this.colDef.suppressNavigable;
	            return suppressNaviableFunc(params);
	        }
	        return false;
	    };
	    Column.prototype.isCellEditable = function (rowNode) {
	        // only allow editing of groups if the user has this option enabled
	        if (rowNode.group && !this.gridOptionsWrapper.isEnableGroupEdit()) {
	            return false;
	        }
	        return this.isColumnFunc(rowNode, this.colDef.editable);
	    };
	    Column.prototype.isSuppressPaste = function (rowNode) {
	        return this.isColumnFunc(rowNode, this.colDef ? this.colDef.suppressPaste : null);
	    };
	    Column.prototype.isResizable = function () {
	        var enableColResize = this.gridOptionsWrapper.isEnableColResize();
	        var suppressResize = this.colDef && this.colDef.suppressResize;
	        return enableColResize && !suppressResize;
	    };
	    Column.prototype.isColumnFunc = function (rowNode, value) {
	        // if boolean set, then just use it
	        if (typeof value === 'boolean') {
	            return value;
	        }
	        // if function, then call the function to find out
	        if (typeof value === 'function') {
	            var params = this.createIsColumnFuncParams(rowNode);
	            var editableFunc = value;
	            return editableFunc(params);
	        }
	        return false;
	    };
	    Column.prototype.setMoving = function (moving) {
	        this.moving = moving;
	        this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MOVING_CHANGED));
	    };
	    Column.prototype.createColumnEvent = function (type) {
	        return {
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            type: type,
	            column: this,
	            columns: [this]
	        };
	    };
	    Column.prototype.isMoving = function () {
	        return this.moving;
	    };
	    Column.prototype.getSort = function () {
	        return this.sort;
	    };
	    Column.prototype.setSort = function (sort) {
	        if (this.sort !== sort) {
	            this.sort = sort;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_SORT_CHANGED));
	        }
	    };
	    Column.prototype.setMenuVisible = function (visible) {
	        if (this.menuVisible !== visible) {
	            this.menuVisible = visible;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_MENU_VISIBLE_CHANGED));
	        }
	    };
	    Column.prototype.isMenuVisible = function () {
	        return this.menuVisible;
	    };
	    Column.prototype.isSortAscending = function () {
	        return this.sort === Column.SORT_ASC;
	    };
	    Column.prototype.isSortDescending = function () {
	        return this.sort === Column.SORT_DESC;
	    };
	    Column.prototype.isSortNone = function () {
	        return utils_1.Utils.missing(this.sort);
	    };
	    Column.prototype.isSorting = function () {
	        return utils_1.Utils.exists(this.sort);
	    };
	    Column.prototype.getSortedAt = function () {
	        return this.sortedAt;
	    };
	    Column.prototype.setSortedAt = function (sortedAt) {
	        this.sortedAt = sortedAt;
	    };
	    Column.prototype.setAggFunc = function (aggFunc) {
	        this.aggFunc = aggFunc;
	    };
	    Column.prototype.getAggFunc = function () {
	        return this.aggFunc;
	    };
	    Column.prototype.getLeft = function () {
	        return this.left;
	    };
	    Column.prototype.getOldLeft = function () {
	        return this.oldLeft;
	    };
	    Column.prototype.getRight = function () {
	        return this.left + this.actualWidth;
	    };
	    Column.prototype.setLeft = function (left) {
	        this.oldLeft = this.left;
	        if (this.left !== left) {
	            this.left = left;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LEFT_CHANGED));
	        }
	    };
	    Column.prototype.isFilterActive = function () {
	        return this.filterActive;
	    };
	    Column.prototype.setFilterActive = function (active) {
	        if (this.filterActive !== active) {
	            this.filterActive = active;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FILTER_ACTIVE_CHANGED));
	        }
	        this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FILTER_CHANGED));
	    };
	    Column.prototype.setPinned = function (pinned) {
	        // pinning is not allowed when doing 'forPrint'
	        if (this.gridOptionsWrapper.isForPrint()) {
	            return;
	        }
	        if (pinned === true || pinned === Column.PINNED_LEFT) {
	            this.pinned = Column.PINNED_LEFT;
	        }
	        else if (pinned === Column.PINNED_RIGHT) {
	            this.pinned = Column.PINNED_RIGHT;
	        }
	        else {
	            this.pinned = null;
	        }
	        // console.log(`setColumnsPinned ${this.getColId()} ${this.pinned}`);
	    };
	    Column.prototype.setFirstRightPinned = function (firstRightPinned) {
	        if (this.firstRightPinned !== firstRightPinned) {
	            this.firstRightPinned = firstRightPinned;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_FIRST_RIGHT_PINNED_CHANGED));
	        }
	    };
	    Column.prototype.setLastLeftPinned = function (lastLeftPinned) {
	        if (this.lastLeftPinned !== lastLeftPinned) {
	            this.lastLeftPinned = lastLeftPinned;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_LAST_LEFT_PINNED_CHANGED));
	        }
	    };
	    Column.prototype.isFirstRightPinned = function () {
	        return this.firstRightPinned;
	    };
	    Column.prototype.isLastLeftPinned = function () {
	        return this.lastLeftPinned;
	    };
	    Column.prototype.isPinned = function () {
	        return this.pinned === Column.PINNED_LEFT || this.pinned === Column.PINNED_RIGHT;
	    };
	    Column.prototype.isPinnedLeft = function () {
	        return this.pinned === Column.PINNED_LEFT;
	    };
	    Column.prototype.isPinnedRight = function () {
	        return this.pinned === Column.PINNED_RIGHT;
	    };
	    Column.prototype.getPinned = function () {
	        return this.pinned;
	    };
	    Column.prototype.setVisible = function (visible) {
	        var newValue = visible === true;
	        if (this.visible !== newValue) {
	            this.visible = newValue;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VISIBLE_CHANGED));
	        }
	    };
	    Column.prototype.isVisible = function () {
	        return this.visible;
	    };
	    Column.prototype.getColDef = function () {
	        return this.colDef;
	    };
	    Column.prototype.getColumnGroupShow = function () {
	        return this.colDef.columnGroupShow;
	    };
	    Column.prototype.getColId = function () {
	        return this.colId;
	    };
	    Column.prototype.getId = function () {
	        return this.getColId();
	    };
	    Column.prototype.getDefinition = function () {
	        return this.colDef;
	    };
	    Column.prototype.getActualWidth = function () {
	        return this.actualWidth;
	    };
	    Column.prototype.getColSpan = function (rowNode) {
	        if (utils_1.Utils.missing(this.colDef.colSpan)) {
	            return 1;
	        }
	        else {
	            var params = {
	                node: rowNode,
	                data: rowNode.data,
	                colDef: this.colDef,
	                column: this,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext()
	            };
	            var colSpan = this.colDef.colSpan(params);
	            // colSpan must be number equal to or greater than 1
	            if (colSpan > 1) {
	                return colSpan;
	            }
	            else {
	                return 1;
	            }
	        }
	    };
	    Column.prototype.setActualWidth = function (actualWidth) {
	        if (this.actualWidth !== actualWidth) {
	            this.actualWidth = actualWidth;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_WIDTH_CHANGED));
	        }
	    };
	    Column.prototype.isGreaterThanMax = function (width) {
	        if (this.maxWidth) {
	            return width > this.maxWidth;
	        }
	        else {
	            return false;
	        }
	    };
	    Column.prototype.getMinWidth = function () {
	        return this.minWidth;
	    };
	    Column.prototype.getMaxWidth = function () {
	        return this.maxWidth;
	    };
	    Column.prototype.setMinimum = function () {
	        this.setActualWidth(this.minWidth);
	    };
	    Column.prototype.setRowGroupActive = function (rowGroup) {
	        if (this.rowGroupActive !== rowGroup) {
	            this.rowGroupActive = rowGroup;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_ROW_GROUP_CHANGED));
	        }
	    };
	    Column.prototype.isRowGroupActive = function () {
	        return this.rowGroupActive;
	    };
	    Column.prototype.setPivotActive = function (pivot) {
	        if (this.pivotActive !== pivot) {
	            this.pivotActive = pivot;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_PIVOT_CHANGED));
	        }
	    };
	    Column.prototype.isPivotActive = function () {
	        return this.pivotActive;
	    };
	    Column.prototype.isAnyFunctionActive = function () {
	        return this.isPivotActive() || this.isRowGroupActive() || this.isValueActive();
	    };
	    Column.prototype.isAnyFunctionAllowed = function () {
	        return this.isAllowPivot() || this.isAllowRowGroup() || this.isAllowValue();
	    };
	    Column.prototype.setValueActive = function (value) {
	        if (this.aggregationActive !== value) {
	            this.aggregationActive = value;
	            this.eventService.dispatchEvent(this.createColumnEvent(Column.EVENT_VALUE_CHANGED));
	        }
	    };
	    Column.prototype.isValueActive = function () {
	        return this.aggregationActive;
	    };
	    Column.prototype.isAllowPivot = function () {
	        return this.colDef.enablePivot === true;
	    };
	    Column.prototype.isAllowValue = function () {
	        return this.colDef.enableValue === true;
	    };
	    Column.prototype.isAllowRowGroup = function () {
	        return this.colDef.enableRowGroup === true;
	    };
	    Column.prototype.getMenuTabs = function (defaultValues) {
	        var menuTabs = this.getColDef().menuTabs;
	        if (menuTabs == null) {
	            menuTabs = defaultValues;
	        }
	        return menuTabs;
	    };
	    // + renderedHeaderCell - for making header cell transparent when moving
	    Column.EVENT_MOVING_CHANGED = 'movingChanged';
	    // + renderedCell - changing left position
	    Column.EVENT_LEFT_CHANGED = 'leftChanged';
	    // + renderedCell - changing width
	    Column.EVENT_WIDTH_CHANGED = 'widthChanged';
	    // + renderedCell - for changing pinned classes
	    Column.EVENT_LAST_LEFT_PINNED_CHANGED = 'lastLeftPinnedChanged';
	    Column.EVENT_FIRST_RIGHT_PINNED_CHANGED = 'firstRightPinnedChanged';
	    // + renderedColumn - for changing visibility icon
	    Column.EVENT_VISIBLE_CHANGED = 'visibleChanged';
	    // + every time the filter changes, used in the floating filters
	    Column.EVENT_FILTER_CHANGED = 'filterChanged';
	    // + renderedHeaderCell - marks the header with filter icon
	    Column.EVENT_FILTER_ACTIVE_CHANGED = 'filterActiveChanged';
	    // + renderedHeaderCell - marks the header with sort icon
	    Column.EVENT_SORT_CHANGED = 'sortChanged';
	    Column.EVENT_MENU_VISIBLE_CHANGED = 'menuVisibleChanged';
	    // + toolpanel, for gui updates
	    Column.EVENT_ROW_GROUP_CHANGED = 'columnRowGroupChanged';
	    // + toolpanel, for gui updates
	    Column.EVENT_PIVOT_CHANGED = 'columnPivotChanged';
	    // + toolpanel, for gui updates
	    Column.EVENT_VALUE_CHANGED = 'columnValueChanged';
	    Column.PINNED_RIGHT = 'right';
	    Column.PINNED_LEFT = 'left';
	    Column.SORT_ASC = 'asc';
	    Column.SORT_DESC = 'desc';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], Column.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnUtils'),
	        __metadata("design:type", columnUtils_1.ColumnUtils)
	    ], Column.prototype, "columnUtils", void 0);
	    __decorate([
	        context_1.Autowired('frameworkFactory'),
	        __metadata("design:type", Object)
	    ], Column.prototype, "frameworkFactory", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], Column.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], Column.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], Column.prototype, "initialise", null);
	    return Column;
	}());
	exports.Column = Column;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var columnGroup_1 = __webpack_require__(16);
	var originalColumnGroup_1 = __webpack_require__(19);
	var context_1 = __webpack_require__(7);
	var context_2 = __webpack_require__(7);
	// takes in a list of columns, as specified by the column definitions, and returns column groups
	var ColumnUtils = (function () {
	    function ColumnUtils() {
	    }
	    ColumnUtils.prototype.calculateColInitialWidth = function (colDef) {
	        if (!colDef.width) {
	            // if no width defined in colDef, use default
	            return this.gridOptionsWrapper.getColWidth();
	        }
	        else if (colDef.width < this.gridOptionsWrapper.getMinColWidth()) {
	            // if width in col def to small, set to min width
	            return this.gridOptionsWrapper.getMinColWidth();
	        }
	        else {
	            // otherwise use the provided width
	            return colDef.width;
	        }
	    };
	    ColumnUtils.prototype.getOriginalPathForColumn = function (column, originalBalancedTree) {
	        var result = [];
	        var found = false;
	        recursePath(originalBalancedTree, 0);
	        // we should always find the path, but in case there is a bug somewhere, returning null
	        // will make it fail rather than provide a 'hard to track down' bug
	        if (found) {
	            return result;
	        }
	        else {
	            return null;
	        }
	        function recursePath(balancedColumnTree, dept) {
	            for (var i = 0; i < balancedColumnTree.length; i++) {
	                if (found) {
	                    // quit the search, so 'result' is kept with the found result
	                    return;
	                }
	                var node = balancedColumnTree[i];
	                if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                    var nextNode = node;
	                    recursePath(nextNode.getChildren(), dept + 1);
	                    result[dept] = node;
	                }
	                else {
	                    if (node === column) {
	                        found = true;
	                    }
	                }
	            }
	        }
	    };
	    /*    public getPathForColumn(column: Column, allDisplayedColumnGroups: ColumnGroupChild[]): ColumnGroup[] {
	            let result: ColumnGroup[] = [];
	            let found = false;
	    
	            recursePath(allDisplayedColumnGroups, 0);
	    
	            // we should always find the path, but in case there is a bug somewhere, returning null
	            // will make it fail rather than provide a 'hard to track down' bug
	            if (found) {
	                return result;
	            } else {
	                return null;
	            }
	    
	            function recursePath(balancedColumnTree: ColumnGroupChild[], dept: number): void {
	    
	                for (let i = 0; i<balancedColumnTree.length; i++) {
	                    if (found) {
	                        // quit the search, so 'result' is kept with the found result
	                        return;
	                    }
	                    let node = balancedColumnTree[i];
	                    if (node instanceof ColumnGroup) {
	                        let nextNode = <ColumnGroup> node;
	                        recursePath(nextNode.getChildren(), dept+1);
	                        result[dept] = node;
	                    } else {
	                        if (node === column) {
	                            found = true;
	                        }
	                    }
	                }
	            }
	        }*/
	    ColumnUtils.prototype.depthFirstOriginalTreeSearch = function (tree, callback) {
	        var _this = this;
	        if (!tree) {
	            return;
	        }
	        tree.forEach(function (child) {
	            if (child instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                _this.depthFirstOriginalTreeSearch(child.getChildren(), callback);
	            }
	            callback(child);
	        });
	    };
	    ColumnUtils.prototype.depthFirstAllColumnTreeSearch = function (tree, callback) {
	        var _this = this;
	        if (!tree) {
	            return;
	        }
	        tree.forEach(function (child) {
	            if (child instanceof columnGroup_1.ColumnGroup) {
	                _this.depthFirstAllColumnTreeSearch(child.getChildren(), callback);
	            }
	            callback(child);
	        });
	    };
	    ColumnUtils.prototype.depthFirstDisplayedColumnTreeSearch = function (tree, callback) {
	        var _this = this;
	        if (!tree) {
	            return;
	        }
	        tree.forEach(function (child) {
	            if (child instanceof columnGroup_1.ColumnGroup) {
	                _this.depthFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);
	            }
	            callback(child);
	        });
	    };
	    __decorate([
	        context_2.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ColumnUtils.prototype, "gridOptionsWrapper", void 0);
	    ColumnUtils = __decorate([
	        context_1.Bean('columnUtils')
	    ], ColumnUtils);
	    return ColumnUtils;
	}());
	exports.ColumnUtils = ColumnUtils;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var columnGroup_1 = __webpack_require__(16);
	var column_1 = __webpack_require__(17);
	var eventService_1 = __webpack_require__(5);
	var context_1 = __webpack_require__(7);
	var columnController_1 = __webpack_require__(15);
	var gridApi_1 = __webpack_require__(12);
	var OriginalColumnGroup = (function () {
	    function OriginalColumnGroup(colGroupDef, groupId, padding) {
	        this.localEventService = new eventService_1.EventService();
	        this.expandable = false;
	        this.colGroupDef = colGroupDef;
	        this.groupId = groupId;
	        this.expanded = colGroupDef && !!colGroupDef.openByDefault;
	        this.padding = padding;
	    }
	    OriginalColumnGroup.prototype.isVisible = function () {
	        // return true if at least one child is visible
	        if (this.children) {
	            return this.children.some(function (child) { return child.isVisible(); });
	        }
	        else {
	            return false;
	        }
	    };
	    OriginalColumnGroup.prototype.isPadding = function () {
	        return this.padding;
	    };
	    OriginalColumnGroup.prototype.setExpanded = function (expanded) {
	        this.expanded = expanded;
	        var event = {
	            type: OriginalColumnGroup.EVENT_EXPANDED_CHANGED
	        };
	        this.localEventService.dispatchEvent(event);
	    };
	    OriginalColumnGroup.prototype.isExpandable = function () {
	        return this.expandable;
	    };
	    OriginalColumnGroup.prototype.isExpanded = function () {
	        return this.expanded;
	    };
	    OriginalColumnGroup.prototype.getGroupId = function () {
	        return this.groupId;
	    };
	    OriginalColumnGroup.prototype.getId = function () {
	        return this.getGroupId();
	    };
	    OriginalColumnGroup.prototype.setChildren = function (children) {
	        this.children = children;
	    };
	    OriginalColumnGroup.prototype.getChildren = function () {
	        return this.children;
	    };
	    OriginalColumnGroup.prototype.getColGroupDef = function () {
	        return this.colGroupDef;
	    };
	    OriginalColumnGroup.prototype.getLeafColumns = function () {
	        var result = [];
	        this.addLeafColumns(result);
	        return result;
	    };
	    OriginalColumnGroup.prototype.addLeafColumns = function (leafColumns) {
	        this.children.forEach(function (child) {
	            if (child instanceof column_1.Column) {
	                leafColumns.push(child);
	            }
	            else if (child instanceof OriginalColumnGroup) {
	                child.addLeafColumns(leafColumns);
	            }
	        });
	    };
	    OriginalColumnGroup.prototype.getColumnGroupShow = function () {
	        if (!this.padding) {
	            return this.colGroupDef.columnGroupShow;
	        }
	        else {
	            // if this is padding we have exactly only child. we then
	            // take the value from the child and push it up, making
	            // this group 'invisible'.
	            return this.children[0].getColumnGroupShow();
	        }
	    };
	    // need to check that this group has at least one col showing when both expanded and contracted.
	    // if not, then we don't allow expanding and contracting on this group
	    OriginalColumnGroup.prototype.setupExpandable = function () {
	        var _this = this;
	        this.setExpandable();
	        // note - we should be removing this event listener
	        this.getLeafColumns().forEach(function (col) { return col.addEventListener(column_1.Column.EVENT_VISIBLE_CHANGED, _this.onColumnVisibilityChanged.bind(_this)); });
	    };
	    OriginalColumnGroup.prototype.setExpandable = function () {
	        // want to make sure the group doesn't disappear when it's open
	        var atLeastOneShowingWhenOpen = false;
	        // want to make sure the group doesn't disappear when it's closed
	        var atLeastOneShowingWhenClosed = false;
	        // want to make sure the group has something to show / hide
	        var atLeastOneChangeable = false;
	        for (var i = 0, j = this.children.length; i < j; i++) {
	            var abstractColumn = this.children[i];
	            if (!abstractColumn.isVisible()) {
	                continue;
	            }
	            // if the abstractColumn is a grid generated group, there will be no colDef
	            var headerGroupShow = abstractColumn.getColumnGroupShow();
	            if (headerGroupShow === columnGroup_1.ColumnGroup.HEADER_GROUP_SHOW_OPEN) {
	                atLeastOneShowingWhenOpen = true;
	                atLeastOneChangeable = true;
	            }
	            else if (headerGroupShow === columnGroup_1.ColumnGroup.HEADER_GROUP_SHOW_CLOSED) {
	                atLeastOneShowingWhenClosed = true;
	                atLeastOneChangeable = true;
	            }
	            else {
	                atLeastOneShowingWhenOpen = true;
	                atLeastOneShowingWhenClosed = true;
	            }
	        }
	        var expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;
	        if (this.expandable !== expandable) {
	            this.expandable = expandable;
	            var event_1 = {
	                type: OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED
	            };
	            this.localEventService.dispatchEvent(event_1);
	        }
	    };
	    OriginalColumnGroup.prototype.onColumnVisibilityChanged = function () {
	        this.setExpandable();
	    };
	    OriginalColumnGroup.prototype.addEventListener = function (eventType, listener) {
	        this.localEventService.addEventListener(eventType, listener);
	    };
	    OriginalColumnGroup.prototype.removeEventListener = function (eventType, listener) {
	        this.localEventService.removeEventListener(eventType, listener);
	    };
	    OriginalColumnGroup.EVENT_EXPANDED_CHANGED = 'expandedChanged';
	    OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED = 'expandableChanged';
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], OriginalColumnGroup.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], OriginalColumnGroup.prototype, "gridApi", void 0);
	    return OriginalColumnGroup;
	}());
	exports.OriginalColumnGroup = OriginalColumnGroup;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var logger_1 = __webpack_require__(6);
	var context_1 = __webpack_require__(7);
	var context_2 = __webpack_require__(7);
	var ExpressionService = (function () {
	    function ExpressionService() {
	        this.expressionToFunctionCache = {};
	    }
	    ExpressionService.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('ExpressionService');
	    };
	    ExpressionService.prototype.evaluate = function (expressionOrFunc, params) {
	        if (typeof expressionOrFunc === 'function') {
	            // valueGetter is a function, so just call it
	            var func = expressionOrFunc;
	            return func(params);
	        }
	        else if (typeof expressionOrFunc === 'string') {
	            // valueGetter is an expression, so execute the expression
	            var expression = expressionOrFunc;
	            return this.evaluateExpression(expression, params);
	        }
	        else {
	            console.error('ag-Grid: value should be either a string or a function', expressionOrFunc);
	        }
	    };
	    ExpressionService.prototype.evaluateExpression = function (expression, params) {
	        try {
	            var javaScriptFunction = this.createExpressionFunction(expression);
	            // the params don't have all these values, rather we add every possible
	            // value a params can have, which makes whatever is in the params available.
	            var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);
	            return result;
	        }
	        catch (e) {
	            // the expression failed, which can happen, as it's the client that
	            // provides the expression. so print a nice message
	            console.log('Processing of the expression failed');
	            console.log('Expression = ' + expression);
	            console.log('Exception = ' + e);
	            return null;
	        }
	    };
	    ExpressionService.prototype.createExpressionFunction = function (expression) {
	        // check cache first
	        if (this.expressionToFunctionCache[expression]) {
	            return this.expressionToFunctionCache[expression];
	        }
	        // if not found in cache, return the function
	        var functionBody = this.createFunctionBody(expression);
	        var theFunction = new Function('x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup', functionBody);
	        // store in cache
	        this.expressionToFunctionCache[expression] = theFunction;
	        return theFunction;
	    };
	    ExpressionService.prototype.createFunctionBody = function (expression) {
	        // if the expression has the 'return' word in it, then use as is,
	        // if not, then wrap it with return and ';' to make a function
	        if (expression.indexOf('return') >= 0) {
	            return expression;
	        }
	        else {
	            return 'return ' + expression + ';';
	        }
	    };
	    __decorate([
	        __param(0, context_2.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], ExpressionService.prototype, "setBeans", null);
	    ExpressionService = __decorate([
	        context_1.Bean('expressionService')
	    ], ExpressionService);
	    return ExpressionService;
	}());
	exports.ExpressionService = ExpressionService;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var columnUtils_1 = __webpack_require__(18);
	var columnGroup_1 = __webpack_require__(16);
	var originalColumnGroup_1 = __webpack_require__(19);
	var context_1 = __webpack_require__(7);
	var utils_1 = __webpack_require__(8);
	var context_2 = __webpack_require__(7);
	// takes in a list of columns, as specified by the column definitions, and returns column groups
	var DisplayedGroupCreator = (function () {
	    function DisplayedGroupCreator() {
	    }
	    DisplayedGroupCreator.prototype.createDisplayedGroups = function (
	        // all displayed columns sorted - this is the columns the grid should show
	        sortedVisibleColumns, 
	        // the tree of columns, as provided by the users, used to know what groups columns roll up into
	        balancedColumnTree, 
	        // create's unique id's for the group
	        groupInstanceIdCreator, 
	        // we try to reuse old groups if we can, to allow gui to do animation
	        oldDisplayedGroups) {
	        var _this = this;
	        var result = [];
	        var previousRealPath;
	        var previousOriginalPath;
	        var oldColumnsMapped = this.mapOldGroupsById(oldDisplayedGroups);
	        // go through each column, then do a bottom up comparison to the previous column, and start
	        // to share groups if they converge at any point.
	        sortedVisibleColumns.forEach(function (currentColumn) {
	            var currentOriginalPath = _this.getOriginalPathForColumn(balancedColumnTree, currentColumn);
	            var currentRealPath = [];
	            var firstColumn = !previousOriginalPath;
	            for (var i = 0; i < currentOriginalPath.length; i++) {
	                if (firstColumn || currentOriginalPath[i] !== previousOriginalPath[i]) {
	                    // new group needed
	                    var newGroup = _this.createColumnGroup(currentOriginalPath[i], groupInstanceIdCreator, oldColumnsMapped);
	                    currentRealPath[i] = newGroup;
	                    // if top level, add to result, otherwise add to parent
	                    if (i == 0) {
	                        result.push(newGroup);
	                    }
	                    else {
	                        currentRealPath[i - 1].addChild(newGroup);
	                    }
	                }
	                else {
	                    // reuse old group
	                    currentRealPath[i] = previousRealPath[i];
	                }
	            }
	            var noColumnGroups = currentRealPath.length === 0;
	            if (noColumnGroups) {
	                // if we are not grouping, then the result of the above is an empty
	                // path (no groups), and we just add the column to the root list.
	                result.push(currentColumn);
	            }
	            else {
	                var leafGroup = currentRealPath[currentRealPath.length - 1];
	                leafGroup.addChild(currentColumn);
	            }
	            previousRealPath = currentRealPath;
	            previousOriginalPath = currentOriginalPath;
	        });
	        this.setupParentsIntoColumns(result, null);
	        return result;
	    };
	    DisplayedGroupCreator.prototype.createColumnGroup = function (originalGroup, groupInstanceIdCreator, oldColumnsMapped) {
	        var groupId = originalGroup.getGroupId();
	        var instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);
	        var uniqueId = columnGroup_1.ColumnGroup.createUniqueId(groupId, instanceId);
	        var columnGroup = oldColumnsMapped[uniqueId];
	        // if the user is setting new colDefs, it is possible that the id's overlap, and we
	        // would have a false match from above. so we double check we are talking about the
	        // same original column group.
	        if (columnGroup && columnGroup.getOriginalColumnGroup() !== originalGroup) {
	            columnGroup = null;
	        }
	        if (utils_1.Utils.exists(columnGroup)) {
	            // clean out the old column group here, as we will be adding children into it again
	            columnGroup.reset();
	        }
	        else {
	            columnGroup = new columnGroup_1.ColumnGroup(originalGroup, groupId, instanceId);
	            this.context.wireBean(columnGroup);
	        }
	        return columnGroup;
	    };
	    // returns back a 2d map of ColumnGroup as follows: groupId -> instanceId -> ColumnGroup
	    DisplayedGroupCreator.prototype.mapOldGroupsById = function (displayedGroups) {
	        var result = {};
	        var recursive = function (columnsOrGroups) {
	            columnsOrGroups.forEach(function (columnOrGroup) {
	                if (columnOrGroup instanceof columnGroup_1.ColumnGroup) {
	                    var columnGroup = columnOrGroup;
	                    result[columnOrGroup.getUniqueId()] = columnGroup;
	                    recursive(columnGroup.getChildren());
	                }
	            });
	        };
	        if (displayedGroups) {
	            recursive(displayedGroups);
	        }
	        return result;
	    };
	    DisplayedGroupCreator.prototype.setupParentsIntoColumns = function (columnsOrGroups, parent) {
	        var _this = this;
	        columnsOrGroups.forEach(function (columnsOrGroup) {
	            columnsOrGroup.setParent(parent);
	            if (columnsOrGroup instanceof columnGroup_1.ColumnGroup) {
	                var columnGroup = columnsOrGroup;
	                _this.setupParentsIntoColumns(columnGroup.getChildren(), columnGroup);
	            }
	        });
	    };
	    DisplayedGroupCreator.prototype.createFakePath = function (balancedColumnTree) {
	        var result = [];
	        var currentChildren = balancedColumnTree;
	        // this while look does search on the balanced tree, so our result is the right length
	        var index = 0;
	        while (currentChildren && currentChildren[0] && currentChildren[0] instanceof originalColumnGroup_1.OriginalColumnGroup) {
	            // putting in a deterministic fake id, in case the API in the future needs to reference the col
	            var fakePath = new originalColumnGroup_1.OriginalColumnGroup(null, 'FAKE_PATH_' + index, true);
	            this.context.wireBean(fakePath);
	            result.push(fakePath);
	            currentChildren = currentChildren[0].getChildren();
	            index++;
	        }
	        return result;
	    };
	    DisplayedGroupCreator.prototype.getOriginalPathForColumn = function (balancedColumnTree, column) {
	        var result = [];
	        var found = false;
	        recursePath(balancedColumnTree, 0);
	        // it's possible we didn't find a path. this happens if the column is generated
	        // by the grid, in that the definition didn't come from the client. in this case,
	        // we create a fake original path.
	        if (found) {
	            return result;
	        }
	        else {
	            return this.createFakePath(balancedColumnTree);
	        }
	        function recursePath(balancedColumnTree, dept) {
	            for (var i = 0; i < balancedColumnTree.length; i++) {
	                if (found) {
	                    // quit the search, so 'result' is kept with the found result
	                    return;
	                }
	                var node = balancedColumnTree[i];
	                if (node instanceof originalColumnGroup_1.OriginalColumnGroup) {
	                    var nextNode = node;
	                    recursePath(nextNode.getChildren(), dept + 1);
	                    result[dept] = node;
	                }
	                else {
	                    if (node === column) {
	                        found = true;
	                    }
	                }
	            }
	        }
	    };
	    __decorate([
	        context_2.Autowired('columnUtils'),
	        __metadata("design:type", columnUtils_1.ColumnUtils)
	    ], DisplayedGroupCreator.prototype, "columnUtils", void 0);
	    __decorate([
	        context_2.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], DisplayedGroupCreator.prototype, "context", void 0);
	    DisplayedGroupCreator = __decorate([
	        context_1.Bean('displayedGroupCreator')
	    ], DisplayedGroupCreator);
	    return DisplayedGroupCreator;
	}());
	exports.DisplayedGroupCreator = DisplayedGroupCreator;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var rowRenderer_1 = __webpack_require__(23);
	var gridPanel_1 = __webpack_require__(24);
	var context_1 = __webpack_require__(7);
	var context_2 = __webpack_require__(7);
	var headerRenderer_1 = __webpack_require__(88);
	var renderedHeaderCell_1 = __webpack_require__(93);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var headerWrapperComp_1 = __webpack_require__(97);
	var AutoWidthCalculator = (function () {
	    function AutoWidthCalculator() {
	    }
	    // this is the trick: we create a dummy container and clone all the cells
	    // into the dummy, then check the dummy's width. then destroy the dummy
	    // as we don't need it any more.
	    // drawback: only the cells visible on the screen are considered
	    AutoWidthCalculator.prototype.getPreferredWidthForColumn = function (column) {
	        var eHeaderCell = this.getHeaderCellForColumn(column);
	        // cell isn't visible
	        if (!eHeaderCell) {
	            return -1;
	        }
	        var eDummyContainer = document.createElement('span');
	        // position fixed, so it isn't restricted to the boundaries of the parent
	        eDummyContainer.style.position = 'fixed';
	        // we put the dummy into the body container, so it will inherit all the
	        // css styles that the real cells are inheriting
	        var eBodyContainer = this.gridPanel.getBodyContainer();
	        eBodyContainer.appendChild(eDummyContainer);
	        // get all the cells that are currently displayed (this only brings back
	        // rendered cells, rows not rendered due to row visualisation will not be here)
	        this.putRowCellsIntoDummyContainer(column, eDummyContainer);
	        // also put header cell in
	        // we only consider the lowest level cell, not the group cell. in 99% of the time, this
	        // will be enough. if we consider groups, then it gets to complicated for what it's worth,
	        // as the groups can span columns and this class only considers one column at a time.
	        this.cloneItemIntoDummy(eHeaderCell, eDummyContainer);
	        // at this point, all the clones are lined up vertically with natural widths. the dummy
	        // container will have a width wide enough just to fit the largest.
	        var dummyContainerWidth = eDummyContainer.offsetWidth;
	        // we are finished with the dummy container, so get rid of it
	        eBodyContainer.removeChild(eDummyContainer);
	        // we add padding as I found without it, the gui still put '...' after some of the texts
	        var autoSizePadding = this.gridOptionsWrapper.getAutoSizePadding();
	        if (typeof autoSizePadding !== 'number' || autoSizePadding < 0) {
	            autoSizePadding = 4;
	        }
	        return dummyContainerWidth + autoSizePadding;
	    };
	    AutoWidthCalculator.prototype.getHeaderCellForColumn = function (column) {
	        var comp = null;
	        // find the rendered header cell
	        this.headerRenderer.forEachHeaderElement(function (headerElement) {
	            if (headerElement instanceof renderedHeaderCell_1.RenderedHeaderCell) {
	                var currentCell = headerElement;
	                if (currentCell.getColumn() === column) {
	                    comp = currentCell;
	                }
	            }
	            else if (headerElement instanceof headerWrapperComp_1.HeaderWrapperComp) {
	                var headerWrapperComp = headerElement;
	                if (headerWrapperComp.getColumn() === column) {
	                    comp = headerWrapperComp;
	                }
	            }
	        });
	        return comp ? comp.getHtmlElement() : null;
	    };
	    AutoWidthCalculator.prototype.putRowCellsIntoDummyContainer = function (column, eDummyContainer) {
	        var _this = this;
	        var eCells = this.rowRenderer.getAllCellsForColumn(column);
	        eCells.forEach(function (eCell) { return _this.cloneItemIntoDummy(eCell, eDummyContainer); });
	    };
	    AutoWidthCalculator.prototype.cloneItemIntoDummy = function (eCell, eDummyContainer) {
	        // make a deep clone of the cell
	        var eCellClone = eCell.cloneNode(true);
	        // the original has a fixed width, we remove this to allow the natural width based on content
	        eCellClone.style.width = '';
	        // the original has position = absolute, we need to remove this so it's positioned normally
	        eCellClone.style.position = 'static';
	        eCellClone.style.left = '';
	        // we put the cell into a containing div, as otherwise the cells would just line up
	        // on the same line, standard flow layout, by putting them into divs, they are laid
	        // out one per line
	        var eCloneParent = document.createElement('div');
	        // table-row, so that each cell is on a row. i also tried display='block', but this
	        // didn't work in IE
	        eCloneParent.style.display = 'table-row';
	        // the twig on the branch, the branch on the tree, the tree in the hole,
	        // the hole in the bog, the bog in the clone, the clone in the parent,
	        // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....
	        eCloneParent.appendChild(eCellClone);
	        eDummyContainer.appendChild(eCloneParent);
	    };
	    __decorate([
	        context_2.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], AutoWidthCalculator.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_2.Autowired('headerRenderer'),
	        __metadata("design:type", headerRenderer_1.HeaderRenderer)
	    ], AutoWidthCalculator.prototype, "headerRenderer", void 0);
	    __decorate([
	        context_2.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], AutoWidthCalculator.prototype, "gridPanel", void 0);
	    __decorate([
	        context_2.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], AutoWidthCalculator.prototype, "gridOptionsWrapper", void 0);
	    AutoWidthCalculator = __decorate([
	        context_1.Bean('autoWidthCalculator')
	    ], AutoWidthCalculator);
	    return AutoWidthCalculator;
	}());
	exports.AutoWidthCalculator = AutoWidthCalculator;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var gridPanel_1 = __webpack_require__(24);
	var expressionService_1 = __webpack_require__(20);
	var templateService_1 = __webpack_require__(49);
	var valueService_1 = __webpack_require__(31);
	var eventService_1 = __webpack_require__(5);
	var rowComp_1 = __webpack_require__(47);
	var events_1 = __webpack_require__(11);
	var constants_1 = __webpack_require__(9);
	var cellComp_1 = __webpack_require__(29);
	var context_1 = __webpack_require__(7);
	var gridCore_1 = __webpack_require__(50);
	var columnController_1 = __webpack_require__(15);
	var logger_1 = __webpack_require__(6);
	var focusedCellController_1 = __webpack_require__(38);
	var cellNavigationService_1 = __webpack_require__(87);
	var gridCell_1 = __webpack_require__(33);
	var beanStub_1 = __webpack_require__(36);
	var paginationProxy_1 = __webpack_require__(41);
	var gridApi_1 = __webpack_require__(12);
	var pinnedRowModel_1 = __webpack_require__(44);
	var beans_1 = __webpack_require__(68);
	var animationFrameService_1 = __webpack_require__(45);
	var RowRenderer = (function (_super) {
	    __extends(RowRenderer, _super);
	    function RowRenderer() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        // map of row ids to row objects. keeps track of which elements
	        // are rendered for which rows in the dom.
	        _this.rowCompsByIndex = {};
	        _this.floatingTopRowComps = [];
	        _this.floatingBottomRowComps = [];
	        // we only allow one refresh at a time, otherwise the internal memory structure here
	        // will get messed up. this can happen if the user has a cellRenderer, and inside the
	        // renderer they call an API method that results in another pass of the refresh,
	        // then it will be trying to draw rows in the middle of a refresh.
	        _this.refreshInProgress = false;
	        return _this;
	    }
	    RowRenderer.prototype.agWire = function (loggerFactory) {
	        this.logger = loggerFactory.create('RowRenderer');
	    };
	    RowRenderer.prototype.init = function () {
	        this.forPrint = this.gridOptionsWrapper.isForPrint();
	        this.autoHeight = this.gridOptionsWrapper.isAutoHeight();
	        this.rowContainers = this.gridPanel.getRowContainers();
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_PINNED_ROW_DATA_CHANGED, this.onPinnedRowDataChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	        this.redrawAfterModelUpdate();
	    };
	    RowRenderer.prototype.onPageLoaded = function (refreshEvent) {
	        if (utils_1.Utils.missing(refreshEvent)) {
	            refreshEvent = {
	                type: events_1.Events.EVENT_MODEL_UPDATED,
	                api: this.gridApi,
	                columnApi: this.columnApi,
	                animate: false,
	                keepRenderedRows: false,
	                newData: false,
	                newPage: false
	            };
	        }
	        this.onModelUpdated(refreshEvent);
	    };
	    RowRenderer.prototype.getAllCellsForColumn = function (column) {
	        var eCells = [];
	        utils_1.Utils.iterateObject(this.rowCompsByIndex, callback);
	        utils_1.Utils.iterateObject(this.floatingBottomRowComps, callback);
	        utils_1.Utils.iterateObject(this.floatingTopRowComps, callback);
	        function callback(key, rowComp) {
	            var eCell = rowComp.getCellForCol(column);
	            if (eCell) {
	                eCells.push(eCell);
	            }
	        }
	        return eCells;
	    };
	    RowRenderer.prototype.refreshFloatingRowComps = function () {
	        this.refreshFloatingRows(this.floatingTopRowComps, this.pinnedRowModel.getPinnedTopRowData(), this.rowContainers.floatingTopPinnedLeft, this.rowContainers.floatingTopPinnedRight, this.rowContainers.floatingTop, this.rowContainers.floatingTopFullWidth);
	        this.refreshFloatingRows(this.floatingBottomRowComps, this.pinnedRowModel.getPinnedBottomRowData(), this.rowContainers.floatingBottomPinnedLeft, this.rowContainers.floatingBottomPinnedRight, this.rowContainers.floatingBottom, this.rowContainers.floatingBottomFullWith);
	    };
	    RowRenderer.prototype.refreshFloatingRows = function (rowComps, rowNodes, pinnedLeftContainerComp, pinnedRightContainerComp, bodyContainerComp, fullWidthContainerComp) {
	        var _this = this;
	        rowComps.forEach(function (row) {
	            row.destroy();
	        });
	        rowComps.length = 0;
	        // if no cols, don't draw row - can we get rid of this???
	        var columns = this.columnController.getAllDisplayedColumns();
	        if (utils_1.Utils.missingOrEmpty(columns)) {
	            return;
	        }
	        if (rowNodes) {
	            rowNodes.forEach(function (node) {
	                var rowComp = new rowComp_1.RowComp(_this.$scope, bodyContainerComp, pinnedLeftContainerComp, pinnedRightContainerComp, fullWidthContainerComp, node, _this.beans, false, false);
	                rowComp.init();
	                rowComps.push(rowComp);
	            });
	        }
	        this.flushContainers(rowComps);
	    };
	    RowRenderer.prototype.onPinnedRowDataChanged = function () {
	        this.redrawAfterModelUpdate();
	    };
	    RowRenderer.prototype.onModelUpdated = function (refreshEvent) {
	        var params = {
	            recycleRows: refreshEvent.keepRenderedRows,
	            animate: refreshEvent.animate,
	            newData: refreshEvent.newData,
	            newPage: refreshEvent.newPage
	        };
	        this.redrawAfterModelUpdate(params);
	        // this.eventService.dispatchEvent(Events.DEPRECATED_EVENT_PAGINATION_PAGE_LOADED);
	    };
	    // if the row nodes are not rendered, no index is returned
	    RowRenderer.prototype.getRenderedIndexesForRowNodes = function (rowNodes) {
	        var result = [];
	        if (utils_1.Utils.missing(rowNodes)) {
	            return result;
	        }
	        utils_1.Utils.iterateObject(this.rowCompsByIndex, function (index, renderedRow) {
	            var rowNode = renderedRow.getRowNode();
	            if (rowNodes.indexOf(rowNode) >= 0) {
	                result.push(index);
	            }
	        });
	        return result;
	    };
	    RowRenderer.prototype.redrawRows = function (rowNodes) {
	        if (!rowNodes || rowNodes.length == 0) {
	            return;
	        }
	        // we only need to be worried about rendered rows, as this method is
	        // called to whats rendered. if the row isn't rendered, we don't care
	        var indexesToRemove = this.getRenderedIndexesForRowNodes(rowNodes);
	        // remove the rows
	        this.removeRowComps(indexesToRemove);
	        // add draw them again
	        this.redrawAfterModelUpdate({
	            recycleRows: true
	        });
	    };
	    RowRenderer.prototype.getCellToRestoreFocusToAfterRefresh = function (params) {
	        var focusedCell = params.suppressKeepFocus ? null : this.focusedCellController.getFocusCellToUseAfterRefresh();
	        if (utils_1.Utils.missing(focusedCell)) {
	            return null;
	        }
	        // if the dom is not actually focused on a cell, then we don't try to refocus. the problem this
	        // solves is with editing - if the user is editing, eg focus is on a text field, and not on the
	        // cell itself, then the cell can be registered as having focus, however it's the text field that
	        // has the focus and not the cell div. therefore, when the refresh is finished, the grid will focus
	        // the cell, and not the textfield. that means if the user is in a text field, and the grid refreshes,
	        // the focus is lost from the text field. we do not want this.
	        var activeElement = document.activeElement;
	        var domData = this.gridOptionsWrapper.getDomData(activeElement, cellComp_1.CellComp.DOM_DATA_KEY_CELL_COMP);
	        var elementIsNotACellDev = utils_1.Utils.missing(domData);
	        if (elementIsNotACellDev) {
	            return null;
	        }
	        return focusedCell;
	    };
	    // gets called after changes to the model.
	    RowRenderer.prototype.redrawAfterModelUpdate = function (params) {
	        if (params === void 0) { params = {}; }
	        this.getLockOnRefresh();
	        var focusedCell = this.getCellToRestoreFocusToAfterRefresh(params);
	        if (!this.forPrint) {
	            this.sizeContainerToPageHeight();
	        }
	        this.scrollToTopIfNewData(params);
	        // never keep rendered rows if doing forPrint or autoHeight, as we do not use 'top' to
	        // position the rows (it uses normal flow), so we have to remove
	        // all rows and insert them again from scratch
	        var rowsUsingFlow = this.forPrint || this.autoHeight;
	        var recycleRows = rowsUsingFlow ? false : params.recycleRows;
	        var animate = rowsUsingFlow ? false : params.animate;
	        var rowsToRecycle = this.binRowComps(recycleRows);
	        this.redraw(rowsToRecycle, animate);
	        if (!params.onlyBody) {
	            this.refreshFloatingRowComps();
	        }
	        this.restoreFocusedCell(focusedCell);
	        this.releaseLockOnRefresh();
	    };
	    RowRenderer.prototype.scrollToTopIfNewData = function (params) {
	        var scrollToTop = params.newData || params.newPage;
	        var suppressScrollToTop = this.gridOptionsWrapper.isSuppressScrollOnNewData();
	        if (scrollToTop && !suppressScrollToTop) {
	            this.gridPanel.scrollToTop();
	        }
	    };
	    RowRenderer.prototype.sizeContainerToPageHeight = function () {
	        var containerHeight = this.paginationProxy.getCurrentPageHeight();
	        // we need at least 1 pixel for the horizontal scroll to work. so if there are now rows,
	        // we still want the scroll to be present, otherwise there would be no way to access the columns
	        // on the RHS - and if that was where the filter was that cause no rows to be presented, there
	        // is no way to remove the filter.
	        if (containerHeight === 0) {
	            containerHeight = 1;
	        }
	        this.rowContainers.body.setHeight(containerHeight);
	        this.rowContainers.fullWidth.setHeight(containerHeight);
	        this.rowContainers.pinnedLeft.setHeight(containerHeight);
	        this.rowContainers.pinnedRight.setHeight(containerHeight);
	    };
	    RowRenderer.prototype.getLockOnRefresh = function () {
	        if (this.refreshInProgress) {
	            throw 'ag-Grid: cannot get grid to draw rows when it is in the middle of drawing rows. ' +
	                'Your code probably called a grid API method while the grid was in the render stage. To overcome ' +
	                'this, put the API call into a timeout, eg instead of api.refreshView(), ' +
	                'call setTimeout(function(){api.refreshView(),0}). To see what part of your code ' +
	                'that caused the refresh check this stacktrace.';
	        }
	        this.refreshInProgress = true;
	    };
	    RowRenderer.prototype.releaseLockOnRefresh = function () {
	        this.refreshInProgress = false;
	    };
	    // sets the focus to the provided cell, if the cell is provided. this way, the user can call refresh without
	    // worry about the focus been lost. this is important when the user is using keyboard navigation to do edits
	    // and the cellEditor is calling 'refresh' to get other cells to update (as other cells might depend on the
	    // edited cell).
	    RowRenderer.prototype.restoreFocusedCell = function (gridCell) {
	        if (gridCell) {
	            this.focusedCellController.setFocusedCell(gridCell.rowIndex, gridCell.column, gridCell.floating, true);
	        }
	    };
	    RowRenderer.prototype.stopEditing = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        this.forEachRowComp(function (key, renderedRow) {
	            renderedRow.stopEditing(cancel);
	        });
	    };
	    RowRenderer.prototype.forEachCellComp = function (callback) {
	        utils_1.Utils.iterateObject(this.rowCompsByIndex, function (index, renderedRow) {
	            renderedRow.forEachCellComp(callback);
	        });
	    };
	    RowRenderer.prototype.forEachRowComp = function (callback) {
	        utils_1.Utils.iterateObject(this.rowCompsByIndex, callback);
	        utils_1.Utils.iterateObject(this.floatingTopRowComps, callback);
	        utils_1.Utils.iterateObject(this.floatingBottomRowComps, callback);
	    };
	    RowRenderer.prototype.addRenderedRowListener = function (eventName, rowIndex, callback) {
	        var rowComp = this.rowCompsByIndex[rowIndex];
	        rowComp.addEventListener(eventName, callback);
	    };
	    RowRenderer.prototype.refreshCells = function (params) {
	        var _this = this;
	        if (params === void 0) { params = {}; }
	        var rowIdsMap;
	        if (utils_1.Utils.exists(params.rowNodes)) {
	            rowIdsMap = {
	                top: {},
	                bottom: {},
	                normal: {}
	            };
	            params.rowNodes.forEach(function (rowNode) {
	                if (rowNode.rowPinned === constants_1.Constants.PINNED_TOP) {
	                    rowIdsMap.top[rowNode.id] = true;
	                }
	                else if (rowNode.rowPinned === constants_1.Constants.PINNED_BOTTOM) {
	                    rowIdsMap.bottom[rowNode.id] = true;
	                }
	                else {
	                    rowIdsMap.normal[rowNode.id] = true;
	                }
	            });
	        }
	        var colIdsMap;
	        if (utils_1.Utils.exists(params.columns)) {
	            colIdsMap = {};
	            params.columns.forEach(function (colKey) {
	                var column = _this.columnController.getGridColumn(colKey);
	                colIdsMap[column.getId()] = true;
	            });
	        }
	        var processRow = function (rowComp) {
	            var rowNode = rowComp.getRowNode();
	            var id = rowNode.id;
	            var floating = rowNode.rowPinned;
	            // skip this row if it is missing from the provided list
	            if (utils_1.Utils.exists(rowIdsMap)) {
	                if (floating === constants_1.Constants.PINNED_BOTTOM) {
	                    if (!rowIdsMap.bottom[id]) {
	                        return;
	                    }
	                }
	                else if (floating === constants_1.Constants.PINNED_TOP) {
	                    if (!rowIdsMap.top[id]) {
	                        return;
	                    }
	                }
	                else {
	                    if (!rowIdsMap.normal[id]) {
	                        return;
	                    }
	                }
	            }
	            rowComp.forEachCellComp(function (cellComp) {
	                var colId = cellComp.getColumn().getId();
	                var excludeColFromRefresh = colIdsMap && !colIdsMap[colId];
	                if (excludeColFromRefresh) {
	                    return;
	                }
	                cellComp.refreshCell({
	                    forceRefresh: params.force,
	                    volatile: params.volatile,
	                    newData: false
	                });
	            });
	        };
	        utils_1.Utils.iterateObject(this.rowCompsByIndex, function (index, rowComp) {
	            processRow(rowComp);
	        });
	        if (this.floatingTopRowComps) {
	            this.floatingTopRowComps.forEach(processRow);
	        }
	        if (this.floatingBottomRowComps) {
	            this.floatingBottomRowComps.forEach(processRow);
	        }
	    };
	    RowRenderer.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        var rowIndexesToRemove = Object.keys(this.rowCompsByIndex);
	        this.removeRowComps(rowIndexesToRemove);
	    };
	    RowRenderer.prototype.binRowComps = function (recycleRows) {
	        var _this = this;
	        var indexesToRemove;
	        var rowsToRecycle = {};
	        if (recycleRows) {
	            indexesToRemove = [];
	            utils_1.Utils.iterateObject(this.rowCompsByIndex, function (index, rowComp) {
	                var rowNode = rowComp.getRowNode();
	                if (utils_1.Utils.exists(rowNode.id)) {
	                    rowsToRecycle[rowNode.id] = rowComp;
	                    delete _this.rowCompsByIndex[index];
	                }
	                else {
	                    indexesToRemove.push(index);
	                }
	            });
	        }
	        else {
	            indexesToRemove = Object.keys(this.rowCompsByIndex);
	        }
	        this.removeRowComps(indexesToRemove);
	        return rowsToRecycle;
	    };
	    // takes array of row indexes
	    RowRenderer.prototype.removeRowComps = function (rowsToRemove) {
	        var _this = this;
	        // if no fromIndex then set to -1, which will refresh everything
	        // let realFromIndex = -1;
	        rowsToRemove.forEach(function (indexToRemove) {
	            var renderedRow = _this.rowCompsByIndex[indexToRemove];
	            renderedRow.destroy();
	            delete _this.rowCompsByIndex[indexToRemove];
	        });
	    };
	    // gets called when rows don't change, but viewport does, so after:
	    // 1) size of grid changed
	    // 2) grid scrolled to new position
	    // 3) ensure index visible (which is a scroll)
	    RowRenderer.prototype.redrawAfterScroll = function () {
	        this.getLockOnRefresh();
	        this.redraw(null, false, true);
	        this.releaseLockOnRefresh();
	    };
	    RowRenderer.prototype.removeRowCompsNotToDraw = function (indexesToDraw) {
	        // for speedy lookup, dump into map
	        var indexesToDrawMap = {};
	        indexesToDraw.forEach(function (index) { return indexesToDrawMap[index] = true; });
	        var existingIndexes = Object.keys(this.rowCompsByIndex);
	        var indexesNotToDraw = utils_1.Utils.filter(existingIndexes, function (index) { return !indexesToDrawMap[index]; });
	        this.removeRowComps(indexesNotToDraw);
	    };
	    RowRenderer.prototype.calculateIndexesToDraw = function () {
	        var _this = this;
	        // all in all indexes in the viewport
	        var indexesToDraw = utils_1.Utils.createArrayOfNumbers(this.firstRenderedRow, this.lastRenderedRow);
	        // add in indexes of rows we want to keep, because they are currently editing
	        utils_1.Utils.iterateObject(this.rowCompsByIndex, function (indexStr, rowComp) {
	            var index = Number(indexStr);
	            if (index < _this.firstRenderedRow || index > _this.lastRenderedRow) {
	                if (_this.keepRowBecauseEditing(rowComp)) {
	                    indexesToDraw.push(index);
	                }
	            }
	        });
	        indexesToDraw.sort(function (a, b) { return a - b; });
	        return indexesToDraw;
	    };
	    RowRenderer.prototype.redraw = function (rowsToRecycle, animate, afterScroll) {
	        var _this = this;
	        if (animate === void 0) { animate = false; }
	        if (afterScroll === void 0) { afterScroll = false; }
	        this.workOutFirstAndLastRowsToRender();
	        // the row can already exist and be in the following:
	        // rowsToRecycle -> if model change, then the index may be different, however row may
	        //                         exist here from previous time (mapped by id).
	        // this.rowCompsByIndex -> if just a scroll, then this will contain what is currently in the viewport
	        // this is all the indexes we want, including those that already exist, so this method
	        // will end up going through each index and drawing only if the row doesn't already exist
	        var indexesToDraw = this.calculateIndexesToDraw();
	        this.removeRowCompsNotToDraw(indexesToDraw);
	        // add in new rows
	        var nextVmTurnFunctions = [];
	        var rowComps = [];
	        indexesToDraw.forEach(function (rowIndex) {
	            var rowComp = _this.createOrUpdateRowComp(rowIndex, rowsToRecycle, animate, afterScroll);
	            if (utils_1.Utils.exists(rowComp)) {
	                rowComps.push(rowComp);
	                utils_1.Utils.pushAll(nextVmTurnFunctions, rowComp.getAndClearNextVMTurnFunctions());
	            }
	        });
	        this.flushContainers(rowComps);
	        utils_1.Utils.executeNextVMTurn(nextVmTurnFunctions);
	        if (afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame()) {
	            this.beans.taskQueue.addP2Task(this.destroyRowComps.bind(this, rowsToRecycle, animate));
	        }
	        else {
	            this.destroyRowComps(rowsToRecycle, animate);
	        }
	        this.checkAngularCompile();
	    };
	    RowRenderer.prototype.flushContainers = function (rowComps) {
	        utils_1.Utils.iterateObject(this.rowContainers, function (key, rowContainerComp) {
	            if (rowContainerComp) {
	                rowContainerComp.flushRowTemplates();
	            }
	        });
	        rowComps.forEach(function (rowComp) { return rowComp.afterFlush(); });
	    };
	    RowRenderer.prototype.onDisplayedColumnsChanged = function () {
	        var pinningLeft = this.columnController.isPinningLeft();
	        var pinningRight = this.columnController.isPinningRight();
	        var atLeastOneChanged = this.pinningLeft !== pinningLeft || pinningRight !== this.pinningRight;
	        if (atLeastOneChanged) {
	            this.pinningLeft = pinningLeft;
	            this.pinningRight = pinningRight;
	            if (this.gridOptionsWrapper.isEmbedFullWidthRows()) {
	                this.redrawFullWidthEmbeddedRows();
	            }
	        }
	    };
	    // when embedding, what gets showed in each section depends on what is pinned. eg if embedding group expand / collapse,
	    // then it should go into the pinned left area if pinning left, or the center area if not pinning.
	    RowRenderer.prototype.redrawFullWidthEmbeddedRows = function () {
	        // if either of the pinned panels has shown / hidden, then need to redraw the fullWidth bits when
	        // embedded, as what appears in each section depends on whether we are pinned or not
	        var rowsToRemove = [];
	        this.forEachRowComp(function (id, rowComp) {
	            if (rowComp.isFullWidth()) {
	                var rowIndex = rowComp.getRowNode().rowIndex;
	                rowsToRemove.push(rowIndex.toString());
	            }
	        });
	        this.removeRowComps(rowsToRemove);
	        this.redrawAfterScroll();
	    };
	    RowRenderer.prototype.createOrUpdateRowComp = function (rowIndex, rowsToRecycle, animate, afterScroll) {
	        var rowNode;
	        var rowComp = this.rowCompsByIndex[rowIndex];
	        // if no row comp, see if we can get it from the previous rowComps
	        if (!rowComp) {
	            rowNode = this.paginationProxy.getRow(rowIndex);
	            if (utils_1.Utils.exists(rowNode) && utils_1.Utils.exists(rowsToRecycle) && rowsToRecycle[rowNode.id]) {
	                rowComp = rowsToRecycle[rowNode.id];
	                rowsToRecycle[rowNode.id] = null;
	            }
	        }
	        var creatingNewRowComp = !rowComp;
	        if (creatingNewRowComp) {
	            // create a new one
	            if (!rowNode) {
	                rowNode = this.paginationProxy.getRow(rowIndex);
	            }
	            if (utils_1.Utils.exists(rowNode)) {
	                rowComp = this.createRowComp(rowNode, animate, afterScroll);
	            }
	            else {
	                // this should never happen - if somehow we are trying to create
	                // a row for a rowNode that does not exist.
	                return;
	            }
	        }
	        else {
	            // ensure row comp is in right position in DOM
	            rowComp.ensureDomOrder();
	        }
	        this.rowCompsByIndex[rowIndex] = rowComp;
	        return rowComp;
	    };
	    RowRenderer.prototype.destroyRowComps = function (rowCompsMap, animate) {
	        var delayedFuncs = [];
	        utils_1.Utils.iterateObject(rowCompsMap, function (nodeId, rowComp) {
	            // if row was used, then it's null
	            if (!rowComp) {
	                return;
	            }
	            rowComp.destroy(animate);
	            utils_1.Utils.pushAll(delayedFuncs, rowComp.getAndClearDelayedDestroyFunctions());
	        });
	        utils_1.Utils.executeInAWhile(delayedFuncs);
	    };
	    RowRenderer.prototype.checkAngularCompile = function () {
	        var _this = this;
	        // if we are doing angular compiling, then do digest the scope here
	        if (this.gridOptionsWrapper.isAngularCompileRows()) {
	            // we do it in a timeout, in case we are already in an apply
	            setTimeout(function () { _this.$scope.$apply(); }, 0);
	        }
	    };
	    RowRenderer.prototype.workOutFirstAndLastRowsToRender = function () {
	        var newFirst;
	        var newLast;
	        if (!this.paginationProxy.isRowsToRender()) {
	            newFirst = 0;
	            newLast = -1; // setting to -1 means nothing in range
	        }
	        else {
	            var pageFirstRow = this.paginationProxy.getPageFirstRow();
	            var pageLastRow = this.paginationProxy.getPageLastRow();
	            if (this.forPrint) {
	                newFirst = pageFirstRow;
	                newLast = pageLastRow;
	            }
	            else {
	                var pixelOffset = this.paginationProxy ? this.paginationProxy.getPixelOffset() : 0;
	                var bodyVRange = this.gridPanel.getVerticalPixelRange();
	                var topPixel = bodyVRange.top;
	                var bottomPixel = bodyVRange.bottom;
	                var first = this.paginationProxy.getRowIndexAtPixel(topPixel + pixelOffset);
	                var last = this.paginationProxy.getRowIndexAtPixel(bottomPixel + pixelOffset);
	                //add in buffer
	                var buffer = this.gridOptionsWrapper.getRowBuffer();
	                first = first - buffer;
	                last = last + buffer;
	                // adjust, in case buffer extended actual size
	                if (first < pageFirstRow) {
	                    first = pageFirstRow;
	                }
	                if (last > pageLastRow) {
	                    last = pageLastRow;
	                }
	                newFirst = first;
	                newLast = last;
	            }
	        }
	        var firstDiffers = newFirst !== this.firstRenderedRow;
	        var lastDiffers = newLast !== this.lastRenderedRow;
	        if (firstDiffers || lastDiffers) {
	            this.firstRenderedRow = newFirst;
	            this.lastRenderedRow = newLast;
	            var event_1 = {
	                type: events_1.Events.EVENT_VIEWPORT_CHANGED,
	                firstRow: newFirst,
	                lastRow: newLast,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	    };
	    RowRenderer.prototype.getFirstVirtualRenderedRow = function () {
	        return this.firstRenderedRow;
	    };
	    RowRenderer.prototype.getLastVirtualRenderedRow = function () {
	        return this.lastRenderedRow;
	    };
	    // check that none of the rows to remove are editing or focused as:
	    // a) if editing, we want to keep them, otherwise the user will loose the context of the edit,
	    //    eg user starts editing, enters some text, then scrolls down and then up, next time row rendered
	    //    the edit is reset - so we want to keep it rendered.
	    // b) if focused, we want ot keep keyboard focus, so if user ctrl+c, it goes to clipboard,
	    //    otherwise the user can range select and drag (with focus cell going out of the viewport)
	    //    and then ctrl+c, nothing will happen if cell is removed from dom.
	    RowRenderer.prototype.keepRowBecauseEditing = function (rowComp) {
	        var REMOVE_ROW = false;
	        var KEEP_ROW = true;
	        var rowNode = rowComp.getRowNode();
	        var rowHasFocus = this.focusedCellController.isRowNodeFocused(rowNode);
	        var rowIsEditing = rowComp.isEditing();
	        var mightWantToKeepRow = rowHasFocus || rowIsEditing;
	        // if we deffo don't want to keep it,
	        if (!mightWantToKeepRow) {
	            return REMOVE_ROW;
	        }
	        // editing row, only remove if it is no longer rendered, eg filtered out or new data set.
	        // the reason we want to keep is if user is scrolling up and down, we don't want to loose
	        // the context of the editing in process.
	        var rowNodePresent = this.paginationProxy.isRowPresent(rowNode);
	        return rowNodePresent ? KEEP_ROW : REMOVE_ROW;
	    };
	    RowRenderer.prototype.createRowComp = function (rowNode, animate, afterScroll) {
	        var useAnimationFrameForCreate = afterScroll && !this.gridOptionsWrapper.isSuppressAnimationFrame();
	        var rowComp = new rowComp_1.RowComp(this.$scope, this.rowContainers.body, this.rowContainers.pinnedLeft, this.rowContainers.pinnedRight, this.rowContainers.fullWidth, rowNode, this.beans, animate, useAnimationFrameForCreate);
	        rowComp.init();
	        return rowComp;
	    };
	    RowRenderer.prototype.getRenderedNodes = function () {
	        var renderedRows = this.rowCompsByIndex;
	        return Object.keys(renderedRows).map(function (key) {
	            return renderedRows[key].getRowNode();
	        });
	    };
	    // we use index for rows, but column object for columns, as the next column (by index) might not
	    // be visible (header grouping) so it's not reliable, so using the column object instead.
	    RowRenderer.prototype.navigateToNextCell = function (event, key, rowIndex, column, floating) {
	        var previousCell = new gridCell_1.GridCell({ rowIndex: rowIndex, floating: floating, column: column });
	        var nextCell = previousCell;
	        // we keep searching for a next cell until we find one. this is how the group rows get skipped
	        while (true) {
	            nextCell = this.cellNavigationService.getNextCellToFocus(key, nextCell);
	            if (utils_1.Utils.missing(nextCell)) {
	                break;
	            }
	            var skipGroupRows = this.gridOptionsWrapper.isGroupUseEntireRow();
	            if (skipGroupRows) {
	                var rowNode = this.paginationProxy.getRow(nextCell.rowIndex);
	                if (!rowNode.group) {
	                    break;
	                }
	            }
	            else {
	                break;
	            }
	        }
	        // allow user to override what cell to go to next
	        var userFunc = this.gridOptionsWrapper.getNavigateToNextCellFunc();
	        if (utils_1.Utils.exists(userFunc)) {
	            var params = {
	                key: key,
	                previousCellDef: previousCell,
	                nextCellDef: nextCell ? nextCell.getGridCellDef() : null,
	                event: event
	            };
	            var nextCellDef = userFunc(params);
	            if (utils_1.Utils.exists(nextCellDef)) {
	                nextCell = new gridCell_1.GridCell(nextCellDef);
	            }
	            else {
	                nextCell = null;
	            }
	        }
	        // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid
	        if (!nextCell) {
	            return;
	        }
	        // this scrolls the row into view
	        if (utils_1.Utils.missing(nextCell.floating)) {
	            this.gridPanel.ensureIndexVisible(nextCell.rowIndex);
	        }
	        if (!nextCell.column.isPinned()) {
	            this.gridPanel.ensureColumnVisible(nextCell.column);
	        }
	        // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible
	        // floating cell, the scrolls get out of sync
	        this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter();
	        // need to flush frames, to make sure the correct cells are rendered
	        this.animationFrameService.flushAllFrames();
	        this.focusedCellController.setFocusedCell(nextCell.rowIndex, nextCell.column, nextCell.floating, true);
	        if (this.rangeController) {
	            var gridCell = new gridCell_1.GridCell({ rowIndex: nextCell.rowIndex, floating: nextCell.floating, column: nextCell.column });
	            this.rangeController.setRangeToCell(gridCell);
	        }
	    };
	    RowRenderer.prototype.startEditingCell = function (gridCell, keyPress, charPress) {
	        var cell = this.getComponentForCell(gridCell);
	        if (cell) {
	            cell.startRowOrCellEdit(keyPress, charPress);
	        }
	    };
	    RowRenderer.prototype.getComponentForCell = function (gridCell) {
	        var rowComponent;
	        switch (gridCell.floating) {
	            case constants_1.Constants.PINNED_TOP:
	                rowComponent = this.floatingTopRowComps[gridCell.rowIndex];
	                break;
	            case constants_1.Constants.PINNED_BOTTOM:
	                rowComponent = this.floatingBottomRowComps[gridCell.rowIndex];
	                break;
	            default:
	                rowComponent = this.rowCompsByIndex[gridCell.rowIndex];
	                break;
	        }
	        if (!rowComponent) {
	            return null;
	        }
	        var cellComponent = rowComponent.getRenderedCellForColumn(gridCell.column);
	        return cellComponent;
	    };
	    RowRenderer.prototype.onTabKeyDown = function (previousRenderedCell, keyboardEvent) {
	        var backwards = keyboardEvent.shiftKey;
	        var success = this.moveToCellAfter(previousRenderedCell, backwards);
	        if (success) {
	            keyboardEvent.preventDefault();
	        }
	    };
	    RowRenderer.prototype.tabToNextCell = function (backwards) {
	        var focusedCell = this.focusedCellController.getFocusedCell();
	        // if no focus, then cannot navigate
	        if (utils_1.Utils.missing(focusedCell)) {
	            return false;
	        }
	        var renderedCell = this.getComponentForCell(focusedCell);
	        // if cell is not rendered, means user has scrolled away from the cell
	        if (utils_1.Utils.missing(renderedCell)) {
	            return false;
	        }
	        var result = this.moveToCellAfter(renderedCell, backwards);
	        return result;
	    };
	    // returns true if moving to next cell was successful
	    RowRenderer.prototype.moveToCellAfter = function (previousRenderedCell, backwards) {
	        var editing = previousRenderedCell.isEditing();
	        var gridCell = previousRenderedCell.getGridCell();
	        // find the next cell to start editing
	        var nextRenderedCell = this.findNextCellToFocusOn(gridCell, backwards, editing);
	        var foundCell = utils_1.Utils.exists(nextRenderedCell);
	        // only prevent default if we found a cell. so if user is on last cell and hits tab, then we default
	        // to the normal tabbing so user can exit the grid.
	        if (foundCell) {
	            if (editing) {
	                if (this.gridOptionsWrapper.isFullRowEdit()) {
	                    this.moveEditToNextRow(previousRenderedCell, nextRenderedCell);
	                }
	                else {
	                    this.moveEditToNextCell(previousRenderedCell, nextRenderedCell);
	                }
	            }
	            else {
	                nextRenderedCell.focusCell(true);
	            }
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    RowRenderer.prototype.moveEditToNextCell = function (previousRenderedCell, nextRenderedCell) {
	        previousRenderedCell.stopEditing();
	        nextRenderedCell.startEditingIfEnabled(null, null, true);
	        nextRenderedCell.focusCell(false);
	    };
	    RowRenderer.prototype.moveEditToNextRow = function (previousRenderedCell, nextRenderedCell) {
	        var pGridCell = previousRenderedCell.getGridCell();
	        var nGridCell = nextRenderedCell.getGridCell();
	        var rowsMatch = (pGridCell.rowIndex === nGridCell.rowIndex)
	            && (pGridCell.floating === nGridCell.floating);
	        if (rowsMatch) {
	            // same row, so we don't start / stop editing, we just move the focus along
	            previousRenderedCell.setFocusOutOnEditor();
	            nextRenderedCell.setFocusInOnEditor();
	        }
	        else {
	            var pRow = previousRenderedCell.getRenderedRow();
	            var nRow = nextRenderedCell.getRenderedRow();
	            previousRenderedCell.setFocusOutOnEditor();
	            pRow.stopEditing();
	            nRow.startRowEditing();
	            nextRenderedCell.setFocusInOnEditor();
	        }
	        nextRenderedCell.focusCell();
	    };
	    // called by the cell, when tab is pressed while editing.
	    // @return: RenderedCell when navigation successful, otherwise null
	    RowRenderer.prototype.findNextCellToFocusOn = function (gridCell, backwards, startEditing) {
	        var nextCell = gridCell;
	        while (true) {
	            nextCell = this.cellNavigationService.getNextTabbedCell(nextCell, backwards);
	            // allow user to override what cell to go to next
	            var userFunc = this.gridOptionsWrapper.getTabToNextCellFunc();
	            if (utils_1.Utils.exists(userFunc)) {
	                var params = {
	                    backwards: backwards,
	                    editing: startEditing,
	                    previousCellDef: gridCell.getGridCellDef(),
	                    nextCellDef: nextCell ? nextCell.getGridCellDef() : null
	                };
	                var nextCellDef = userFunc(params);
	                if (utils_1.Utils.exists(nextCellDef)) {
	                    nextCell = new gridCell_1.GridCell(nextCellDef);
	                }
	                else {
	                    nextCell = null;
	                }
	            }
	            // if no 'next cell', means we have got to last cell of grid, so nothing to move to,
	            // so bottom right cell going forwards, or top left going backwards
	            if (!nextCell) {
	                return null;
	            }
	            // this scrolls the row into view
	            var cellIsNotFloating = utils_1.Utils.missing(nextCell.floating);
	            if (cellIsNotFloating) {
	                this.gridPanel.ensureIndexVisible(nextCell.rowIndex);
	            }
	            // pinned columns don't scroll, so no need to ensure index visible
	            if (!nextCell.column.isPinned()) {
	                this.gridPanel.ensureColumnVisible(nextCell.column);
	            }
	            // need to nudge the scrolls for the floating items. otherwise when we set focus on a non-visible
	            // floating cell, the scrolls get out of sync
	            this.gridPanel.horizontallyScrollHeaderCenterAndFloatingCenter();
	            // get the grid panel to flush all animation frames - otherwise the call below to get the cellComp
	            // could fail, if we just scrolled the grid (to make a cell visible) and the rendering hasn't finished.
	            this.animationFrameService.flushAllFrames();
	            // we have to call this after ensureColumnVisible - otherwise it could be a virtual column
	            // or row that is not currently in view, hence the renderedCell would not exist
	            var nextCellComp = this.getComponentForCell(nextCell);
	            // if next cell is fullWidth row, then no rendered cell,
	            // as fullWidth rows have no cells, so we skip it
	            if (utils_1.Utils.missing(nextCellComp)) {
	                continue;
	            }
	            // if editing, but cell not editable, skip cell
	            if (startEditing && !nextCellComp.isCellEditable()) {
	                continue;
	            }
	            if (nextCellComp.isSuppressNavigable()) {
	                continue;
	            }
	            // by default, when we click a cell, it gets selected into a range, so to keep keyboard navigation
	            // consistent, we set into range here also.
	            if (this.rangeController) {
	                var gridCell_2 = new gridCell_1.GridCell({ rowIndex: nextCell.rowIndex, floating: nextCell.floating, column: nextCell.column });
	                this.rangeController.setRangeToCell(gridCell_2);
	            }
	            // we successfully tabbed onto a grid cell, so return true
	            return nextCellComp;
	        }
	    };
	    __decorate([
	        context_1.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy_1.PaginationProxy)
	    ], RowRenderer.prototype, "paginationProxy", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], RowRenderer.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], RowRenderer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('gridCore'),
	        __metadata("design:type", gridCore_1.GridCore)
	    ], RowRenderer.prototype, "gridCore", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], RowRenderer.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], RowRenderer.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], RowRenderer.prototype, "expressionService", void 0);
	    __decorate([
	        context_1.Autowired('templateService'),
	        __metadata("design:type", templateService_1.TemplateService)
	    ], RowRenderer.prototype, "templateService", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], RowRenderer.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], RowRenderer.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel_1.PinnedRowModel)
	    ], RowRenderer.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], RowRenderer.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('loggerFactory'),
	        __metadata("design:type", logger_1.LoggerFactory)
	    ], RowRenderer.prototype, "loggerFactory", void 0);
	    __decorate([
	        context_1.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController_1.FocusedCellController)
	    ], RowRenderer.prototype, "focusedCellController", void 0);
	    __decorate([
	        context_1.Autowired('cellNavigationService'),
	        __metadata("design:type", cellNavigationService_1.CellNavigationService)
	    ], RowRenderer.prototype, "cellNavigationService", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], RowRenderer.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], RowRenderer.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('beans'),
	        __metadata("design:type", beans_1.Beans)
	    ], RowRenderer.prototype, "beans", void 0);
	    __decorate([
	        context_1.Autowired('animationFrameService'),
	        __metadata("design:type", animationFrameService_1.AnimationFrameService)
	    ], RowRenderer.prototype, "animationFrameService", void 0);
	    __decorate([
	        context_1.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], RowRenderer.prototype, "rangeController", void 0);
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], RowRenderer.prototype, "agWire", null);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RowRenderer.prototype, "init", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RowRenderer.prototype, "destroy", null);
	    RowRenderer = __decorate([
	        context_1.Bean('rowRenderer')
	    ], RowRenderer);
	    return RowRenderer;
	}(beanStub_1.BeanStub));
	exports.RowRenderer = RowRenderer;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var columnController_1 = __webpack_require__(15);
	var rowRenderer_1 = __webpack_require__(23);
	var borderLayout_1 = __webpack_require__(25);
	var logger_1 = __webpack_require__(6);
	var context_1 = __webpack_require__(7);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var dragService_1 = __webpack_require__(26);
	var constants_1 = __webpack_require__(9);
	var selectionController_1 = __webpack_require__(27);
	var csvCreator_1 = __webpack_require__(13);
	var mouseEventService_1 = __webpack_require__(28);
	var focusedCellController_1 = __webpack_require__(38);
	var scrollVisibleService_1 = __webpack_require__(39);
	var beanStub_1 = __webpack_require__(36);
	var rowContainerComponent_1 = __webpack_require__(40);
	var paginationProxy_1 = __webpack_require__(41);
	var popupEditorWrapper_1 = __webpack_require__(42);
	var alignedGridsService_1 = __webpack_require__(43);
	var pinnedRowModel_1 = __webpack_require__(44);
	var gridApi_1 = __webpack_require__(12);
	var animationFrameService_1 = __webpack_require__(45);
	var rowComp_1 = __webpack_require__(47);
	// in the html below, it is important that there are no white space between some of the divs, as if there is white space,
	// it won't render correctly in safari, as safari renders white space as a gap
	var HEADER_SNIPPET = '<div class="ag-header" role="row">' +
	    '<div class="ag-pinned-left-header" role="presentation"></div>' +
	    '<div class="ag-pinned-right-header" role="presentation"></div>' +
	    '<div class="ag-header-viewport" role="presentation">' +
	    '<div class="ag-header-container" role="presentation"></div>' +
	    '</div>' +
	    '<div class="ag-header-overlay" role="presentation"></div>' +
	    '</div>';
	var FLOATING_TOP_SNIPPET = '<div class="ag-floating-top" role="presentation">' +
	    '<div class="ag-pinned-left-floating-top" role="presentation"></div>' +
	    '<div class="ag-pinned-right-floating-top" role="presentation"></div>' +
	    '<div class="ag-floating-top-viewport" role="presentation">' +
	    '<div class="ag-floating-top-container" role="presentation"></div>' +
	    '</div>' +
	    '<div class="ag-floating-top-full-width-container" role="presentation"></div>' +
	    '</div>';
	var FLOATING_BOTTOM_SNIPPET = '<div class="ag-floating-bottom" role="presentation">' +
	    '<div class="ag-pinned-left-floating-bottom" role="presentation"></div>' +
	    '<div class="ag-pinned-right-floating-bottom" role="presentation"></div>' +
	    '<div class="ag-floating-bottom-viewport" role="presentation">' +
	    '<div class="ag-floating-bottom-container" role="presentation"></div>' +
	    '</div>' +
	    '<div class="ag-floating-bottom-full-width-container" role="presentation"></div>' +
	    '</div>';
	var BODY_SNIPPET = '<div class="ag-body" role="presentation">' +
	    '<div class="ag-pinned-left-cols-viewport" role="presentation">' +
	    '<div class="ag-pinned-left-cols-container" role="presentation"></div>' +
	    '</div>' +
	    '<div class="ag-pinned-right-cols-viewport" role="presentation">' +
	    '<div class="ag-pinned-right-cols-container" role="presentation"></div>' +
	    '</div>' +
	    '<div class="ag-body-viewport-wrapper" role="presentation">' +
	    '<div class="ag-body-viewport" role="presentation">' +
	    '<div class="ag-body-container" role="presentation"></div>' +
	    '</div>' +
	    '</div>' +
	    '<div class="ag-full-width-viewport" role="presentation">' +
	    '<div class="ag-full-width-container" role="presentation"></div>' +
	    '</div>' +
	    '</div>';
	// the difference between the 'normal' and 'full height' template is the order of the floating and body,
	// for normal, the floating top and bottom go in first as they are fixed position,
	// for auto-height, the body is in the middle of the top and bottom as they are just normally laid out
	var GRID_PANEL_NORMAL_TEMPLATE = '<div class="ag-root ag-font-style" role="grid">' +
	    HEADER_SNIPPET + FLOATING_TOP_SNIPPET + FLOATING_BOTTOM_SNIPPET + BODY_SNIPPET +
	    '</div>';
	var GRID_PANEL_AUTO_HEIGHT_TEMPLATE = '<div class="ag-root ag-font-style" role="grid">' +
	    HEADER_SNIPPET + FLOATING_TOP_SNIPPET + BODY_SNIPPET + FLOATING_BOTTOM_SNIPPET +
	    '</div>';
	// the template for for-print is much easier than that others, as it doesn't have any pinned areas
	// or scrollable areas (so no viewports).
	var GRID_PANEL_FOR_PRINT_TEMPLATE = '<div class="ag-root ag-font-style">' +
	    // header
	    '<div class="ag-header-container"></div>' +
	    // floating
	    '<div class="ag-floating-top-container"></div>' +
	    // body
	    '<div class="ag-body-container"></div>' +
	    // floating bottom
	    '<div class="ag-floating-bottom-container"></div>' +
	    '</div>';
	// wrapping in outer div, and wrapper, is needed to center the loading icon
	// The idea for centering came from here: http://www.vanseodesign.com/css/vertical-centering/
	var OVERLAY_TEMPLATE = '<div class="ag-overlay-panel" role="presentation">' +
	    '<div class="ag-overlay-wrapper ag-overlay-[OVERLAY_NAME]-wrapper">[OVERLAY_TEMPLATE]</div>' +
	    '</div>';
	var LOADING_OVERLAY_TEMPLATE = '<span class="ag-overlay-loading-center">[LOADING...]</span>';
	var NO_ROWS_TO_SHOW_OVERLAY_TEMPLATE = '<span class="ag-overlay-no-rows-center">[NO_ROWS_TO_SHOW]</span>';
	var GridPanel = (function (_super) {
	    __extends(GridPanel, _super);
	    function GridPanel() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.scrollLeft = -1;
	        _this.nextScrollLeft = -1;
	        _this.scrollTop = -1;
	        _this.nextScrollTop = -1;
	        _this.verticalRedrawNeeded = false;
	        return _this;
	    }
	    GridPanel.prototype.agWire = function (loggerFactory) {
	        this.logger = loggerFactory.create('GridPanel');
	        // makes code below more readable if we pull 'forPrint' out
	        this.forPrint = this.gridOptionsWrapper.isForPrint();
	        this.autoHeight = this.gridOptionsWrapper.isAutoHeight();
	        this.scrollWidth = this.gridOptionsWrapper.getScrollbarWidth();
	        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();
	        this.loadTemplate();
	        this.findElements();
	    };
	    GridPanel.prototype.getVerticalPixelRange = function () {
	        var container = this.getPrimaryScrollViewport();
	        var result = {
	            top: container.scrollTop,
	            bottom: container.scrollTop + container.offsetHeight
	        };
	        return result;
	    };
	    // we override this, as the base class is missing the annotation
	    GridPanel.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	    };
	    GridPanel.prototype.onRowDataChanged = function () {
	        this.showOrHideOverlay();
	    };
	    GridPanel.prototype.showOrHideOverlay = function () {
	        if (this.paginationProxy.isEmpty() && !this.gridOptionsWrapper.isSuppressNoRowsOverlay()) {
	            this.showNoRowsOverlay();
	        }
	        else {
	            this.hideOverlay();
	        }
	    };
	    GridPanel.prototype.getLayout = function () {
	        return this.layout;
	    };
	    GridPanel.prototype.init = function () {
	        this.useAnimationFrame = !this.gridOptionsWrapper.isSuppressAnimationFrame();
	        this.addEventListeners();
	        this.addDragListeners();
	        this.layout = new borderLayout_1.BorderLayout({
	            overlays: {
	                loading: utils_1.Utils.loadTemplate(this.createLoadingOverlayTemplate()),
	                noRows: utils_1.Utils.loadTemplate(this.createNoRowsOverlayTemplate())
	            },
	            center: this.eRoot,
	            dontFill: this.forPrint,
	            fillHorizontalOnly: this.autoHeight,
	            name: 'eGridPanel'
	        });
	        this.layout.addSizeChangeListener(this.setBodyAndHeaderHeights.bind(this));
	        this.layout.addSizeChangeListener(this.setLeftAndRightBounds.bind(this));
	        this.addScrollListener();
	        if (this.gridOptionsWrapper.isSuppressHorizontalScroll()) {
	            this.eBodyViewport.style.overflowX = 'hidden';
	        }
	        if (this.gridOptionsWrapper.isRowModelDefault() && !this.gridOptionsWrapper.getRowData()) {
	            this.showLoadingOverlay();
	        }
	        this.setPinnedContainersVisible();
	        this.setBodyAndHeaderHeights();
	        this.disableBrowserDragging();
	        this.addShortcutKeyListeners();
	        this.addMouseListeners();
	        this.addKeyboardEvents();
	        this.addBodyViewportListener();
	        this.addStopEditingWhenGridLosesFocus();
	        if (this.$scope) {
	            this.addAngularApplyCheck();
	        }
	        this.onDisplayedColumnsWidthChanged();
	    };
	    GridPanel.prototype.addStopEditingWhenGridLosesFocus = function () {
	        var _this = this;
	        if (this.gridOptionsWrapper.isStopEditingWhenGridLosesFocus()) {
	            this.addDestroyableEventListener(this.eBody, 'focusout', function (event) {
	                // this is the element the focus is moving to
	                var elementWithFocus = event.relatedTarget;
	                // see if the element the focus is going to is part of the grid
	                var clickInsideGrid = false;
	                var pointer = elementWithFocus;
	                while (utils_1.Utils.exists(pointer) && !clickInsideGrid) {
	                    var isPopup = !!_this.gridOptionsWrapper.getDomData(pointer, popupEditorWrapper_1.PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER);
	                    var isBody = _this.eBody == pointer;
	                    clickInsideGrid = isPopup || isBody;
	                    pointer = pointer.parentNode;
	                }
	                if (!clickInsideGrid) {
	                    _this.rowRenderer.stopEditing();
	                }
	            });
	        }
	    };
	    GridPanel.prototype.addAngularApplyCheck = function () {
	        var _this = this;
	        // this makes sure if we queue up requests, we only execute oe
	        var applyTriggered = false;
	        var listener = function () {
	            // only need to do one apply at a time
	            if (applyTriggered) {
	                return;
	            }
	            applyTriggered = true; // mark 'need apply' to true
	            setTimeout(function () {
	                applyTriggered = false;
	                _this.$scope.$apply();
	            }, 0);
	        };
	        // these are the events we need to do an apply after - these are the ones that can end up
	        // with columns added or removed
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, listener);
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED, listener);
	    };
	    // if we do not do this, then the user can select a pic in the grid (eg an image in a custom cell renderer)
	    // and then that will start the browser native drag n' drop, which messes up with our own drag and drop.
	    GridPanel.prototype.disableBrowserDragging = function () {
	        this.eRoot.addEventListener('dragstart', function (event) {
	            if (event.target instanceof HTMLImageElement) {
	                event.preventDefault();
	                return false;
	            }
	        });
	    };
	    GridPanel.prototype.addEventListeners = function () {
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onDisplayedColumnsWidthChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_PINNED_ROW_DATA_CHANGED, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_ROW_DATA_CHANGED, this.onRowDataChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_ROW_DATA_UPDATED, this.onRowDataChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_HEADER_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.setBodyAndHeaderHeights.bind(this));
	    };
	    GridPanel.prototype.addDragListeners = function () {
	        var _this = this;
	        if (this.forPrint // no range select when doing 'for print'
	            || !this.gridOptionsWrapper.isEnableRangeSelection() // no range selection if no property
	            || utils_1.Utils.missing(this.rangeController)) {
	            return;
	        }
	        var containers = [this.ePinnedLeftColsContainer, this.ePinnedRightColsContainer, this.eBodyContainer,
	            this.eFloatingTop, this.eFloatingBottom];
	        containers.forEach(function (container) {
	            var params = {
	                dragStartPixels: 0,
	                eElement: container,
	                onDragStart: _this.rangeController.onDragStart.bind(_this.rangeController),
	                onDragStop: _this.rangeController.onDragStop.bind(_this.rangeController),
	                onDragging: _this.rangeController.onDragging.bind(_this.rangeController)
	            };
	            _this.dragService.addDragSource(params);
	            _this.addDestroyFunc(function () { return _this.dragService.removeDragSource(params); });
	        });
	    };
	    GridPanel.prototype.addMouseListeners = function () {
	        var _this = this;
	        var eventNames = ['click', 'mousedown', 'dblclick', 'contextmenu', 'mouseover', 'mouseout'];
	        eventNames.forEach(function (eventName) {
	            var listener = _this.processMouseEvent.bind(_this, eventName);
	            _this.eAllCellContainers.forEach(function (container) {
	                return _this.addDestroyableEventListener(container, eventName, listener);
	            });
	        });
	    };
	    GridPanel.prototype.addKeyboardEvents = function () {
	        var _this = this;
	        var eventNames = ['keydown', 'keypress'];
	        eventNames.forEach(function (eventName) {
	            var listener = _this.processKeyboardEvent.bind(_this, eventName);
	            _this.eAllCellContainers.forEach(function (container) {
	                _this.addDestroyableEventListener(container, eventName, listener);
	            });
	        });
	    };
	    GridPanel.prototype.addBodyViewportListener = function () {
	        var _this = this;
	        // we never add this when doing 'forPrint'
	        if (this.gridOptionsWrapper.isForPrint()) {
	            return;
	        }
	        // we want to listen for clicks directly on the eBodyViewport, so the user has a way of showing
	        // the context menu if no rows are displayed, or user simply clicks outside of a cell
	        var listener = function (mouseEvent) {
	            var target = utils_1.Utils.getTarget(mouseEvent);
	            if (target === _this.eBodyViewport || target === _this.ePinnedLeftColsViewport || target === _this.ePinnedRightColsViewport) {
	                // show it
	                _this.onContextMenu(mouseEvent);
	                _this.preventDefaultOnContextMenu(mouseEvent);
	            }
	        };
	        //For some reason listening only to this.eBody doesnt work... Maybe because the event is consumed somewhere else?
	        //In any case, not expending much time on this, if anyome comes accross this and knows how to make this work with
	        //one listener please go ahead and change it...
	        this.addDestroyableEventListener(this.eBodyViewport, 'contextmenu', listener);
	        this.addDestroyableEventListener(this.ePinnedRightColsViewport, 'contextmenu', listener);
	        this.addDestroyableEventListener(this.ePinnedLeftColsViewport, 'contextmenu', listener);
	    };
	    GridPanel.prototype.getRowForEvent = function (event) {
	        var sourceElement = utils_1.Utils.getTarget(event);
	        while (sourceElement) {
	            var renderedRow = this.gridOptionsWrapper.getDomData(sourceElement, rowComp_1.RowComp.DOM_DATA_KEY_RENDERED_ROW);
	            if (renderedRow) {
	                return renderedRow;
	            }
	            sourceElement = sourceElement.parentElement;
	        }
	        return null;
	    };
	    GridPanel.prototype.processKeyboardEvent = function (eventName, keyboardEvent) {
	        var renderedCell = this.mouseEventService.getRenderedCellForEvent(keyboardEvent);
	        if (!renderedCell) {
	            return;
	        }
	        switch (eventName) {
	            case 'keydown':
	                var pageScrollingKeys = [
	                    constants_1.Constants.DIAGONAL_SCROLL_KEYS,
	                    constants_1.Constants.HORIZONTAL_SCROLL_KEYS,
	                    constants_1.Constants.VERTICAL_SCROLL_KEYS
	                ];
	                var result = testKeyboardBindingGroups(pageScrollingKeys, keyboardEvent);
	                if (result) {
	                    this.handlePageScrollingKey(result.trappedKeyboardBindingGroup.id, result.trappedKeyboardBinding.id, keyboardEvent);
	                }
	                else {
	                    renderedCell.onKeyDown(keyboardEvent);
	                }
	                break;
	            case 'keypress':
	                renderedCell.onKeyPress(keyboardEvent);
	                break;
	        }
	    };
	    GridPanel.prototype.handlePageScrollingKey = function (pagingKeyGroup, pagingKey, keyboardEvent) {
	        switch (pagingKeyGroup) {
	            case constants_1.Constants.DIAGONAL_SCROLL_KEYS_ID:
	                this.pageDiagonally(pagingKey);
	                break;
	            case constants_1.Constants.VERTICAL_SCROLL_KEYS_ID:
	                this.pageVertically(pagingKey);
	                break;
	            case constants_1.Constants.HORIZONTAL_SCROLL_KEYS_ID:
	                this.pageHorizontally(pagingKey);
	                break;
	        }
	        //***************************************************************************
	        //Stop event defaults and propagation
	        keyboardEvent.preventDefault();
	    };
	    //Either CTL LEFT/RIGHT
	    GridPanel.prototype.pageHorizontally = function (pagingKey) {
	        //***************************************************************************
	        //column to select
	        var allColumns = this.columnController.getAllDisplayedColumns();
	        var columnToSelect = pagingKey === constants_1.Constants.KEY_CTRL_LEFT_NAME ?
	            allColumns[0] :
	            allColumns[allColumns.length - 1];
	        var horizontalScroll = {
	            type: ScrollType.HORIZONTAL,
	            columnToScrollTo: columnToSelect,
	            columnToFocus: columnToSelect
	        };
	        this.performScroll(horizontalScroll);
	    };
	    //Either HOME OR END
	    GridPanel.prototype.pageDiagonally = function (pagingKey) {
	        //***************************************************************************
	        //where to place the newly selected cell cursor after the scroll
	        var pageSize = this.getPrimaryScrollViewport().offsetHeight;
	        var selectionTopDelta = pagingKey === constants_1.Constants.KEY_PAGE_HOME_NAME ?
	            0 :
	            pageSize;
	        //***************************************************************************
	        //where to scroll to
	        var rowIndexToScrollTo = pagingKey === constants_1.Constants.KEY_PAGE_HOME_NAME ?
	            0 :
	            this.paginationProxy.getPageLastRow();
	        var rowToScrollTo = this.paginationProxy.getRow(rowIndexToScrollTo);
	        //***************************************************************************
	        //column to select
	        var allColumns = this.columnController.getAllDisplayedColumns();
	        var columnToSelect = pagingKey === constants_1.Constants.KEY_PAGE_HOME_NAME ?
	            allColumns[0] :
	            allColumns[allColumns.length - 1];
	        var diagonalScroll = {
	            focusedRowTopDelta: selectionTopDelta,
	            type: ScrollType.DIAGONAL,
	            rowToScrollTo: rowToScrollTo,
	            columnToScrollTo: columnToSelect
	        };
	        this.performScroll(diagonalScroll);
	    };
	    //EITHER CTRL UP/DOWN or PAGE UP/DOWN
	    GridPanel.prototype.pageVertically = function (pagingKey) {
	        if (pagingKey === constants_1.Constants.KEY_CTRL_UP_NAME) {
	            this.performScroll({
	                rowToScrollTo: this.paginationProxy.getRow(0),
	                focusedRowTopDelta: 0,
	                type: ScrollType.VERTICAL
	            });
	            return;
	        }
	        if (pagingKey === constants_1.Constants.KEY_CTRL_DOWN_NAME) {
	            this.performScroll({
	                rowToScrollTo: this.paginationProxy.getRow(this.paginationProxy.getPageLastRow()),
	                focusedRowTopDelta: this.getPrimaryScrollViewport().offsetHeight,
	                type: ScrollType.VERTICAL
	            });
	            return;
	        }
	        //*********PAGING KEYS******************************************************
	        //***************************************************************************
	        //where to place the newly selected cell cursor after the scroll
	        //  before we move the scroll
	        //      a) find the top position of the current selected cell
	        //      b) find what is the delta of that compared to the current scroll
	        var focusedCell = this.focusedCellController.getFocusedCell();
	        var focusedRowNode = this.paginationProxy.getRow(focusedCell.rowIndex);
	        var focusedAbsoluteTop = focusedRowNode.rowTop;
	        var selectionTopDelta = (focusedAbsoluteTop - this.getPrimaryScrollViewport().scrollTop) - this.paginationProxy.getPixelOffset();
	        //***************************************************************************
	        //how much to scroll:
	        //  a) One entire page from or to
	        //  b) the top of the first row in the current view
	        //  c) then find what is the row that would appear the first one in the screen and adjust it to its top pos
	        //      this will avoid having half printed rows at the top
	        var currentPageTopmostPixel = this.getPrimaryScrollViewport().scrollTop;
	        var currentPageTopRow = this.paginationProxy.getRowIndexAtPixel(currentPageTopmostPixel + this.paginationProxy.getPixelOffset());
	        var currentPageTopmostRow = this.paginationProxy.getRow(currentPageTopRow);
	        var viewportSize = this.getPrimaryScrollViewport().offsetHeight;
	        var maxPageSize = this.paginationProxy.getCurrentPageHeight();
	        var pageSize = maxPageSize < viewportSize ? maxPageSize : viewportSize;
	        var currentTopmostRowBottom = currentPageTopmostRow.rowTop + currentPageTopmostRow.rowHeight;
	        var toScrollUnadjusted = pagingKey == constants_1.Constants.KEY_PAGE_DOWN_NAME ?
	            pageSize + currentTopmostRowBottom :
	            currentTopmostRowBottom - pageSize;
	        var nextScreenTopmostRow = this.paginationProxy.getRow(this.paginationProxy.getRowIndexAtPixel(toScrollUnadjusted));
	        var verticalScroll = {
	            rowToScrollTo: nextScreenTopmostRow,
	            focusedRowTopDelta: selectionTopDelta,
	            type: ScrollType.VERTICAL
	        };
	        this.performScroll(verticalScroll);
	    };
	    // gets called by rowRenderer when new data loaded, as it will want to scroll
	    // to the top
	    GridPanel.prototype.scrollToTop = function () {
	        if (!this.forPrint) {
	            this.getPrimaryScrollViewport().scrollTop = 0;
	        }
	    };
	    //Performs any scroll
	    GridPanel.prototype.performScroll = function (scroll) {
	        var verticalScroll;
	        var diagonalScroll;
	        var horizontalScroll;
	        var focusedCellBeforeScrolling = this.focusedCellController.getFocusedCell();
	        //***************************************************************************
	        // Scroll screen
	        var newScrollTop;
	        switch (scroll.type) {
	            case ScrollType.VERTICAL:
	                verticalScroll = scroll;
	                this.ensureIndexVisible(verticalScroll.rowToScrollTo.rowIndex);
	                newScrollTop = verticalScroll.rowToScrollTo.rowTop - this.paginationProxy.getPixelOffset();
	                this.getPrimaryScrollViewport().scrollTop = newScrollTop;
	                break;
	            case ScrollType.DIAGONAL:
	                diagonalScroll = scroll;
	                this.ensureIndexVisible(diagonalScroll.rowToScrollTo.rowIndex);
	                newScrollTop = diagonalScroll.rowToScrollTo.rowTop - this.paginationProxy.getPixelOffset();
	                this.getPrimaryScrollViewport().scrollTop = newScrollTop;
	                this.getPrimaryScrollViewport().scrollLeft = diagonalScroll.columnToScrollTo.getLeft();
	                break;
	            case ScrollType.HORIZONTAL:
	                horizontalScroll = scroll;
	                this.getPrimaryScrollViewport().scrollLeft = horizontalScroll.columnToScrollTo.getLeft();
	                break;
	        }
	        //***************************************************************************
	        // This is needed so that when we try to focus on the cell is actually rendered.
	        var refreshViewParams = {
	            onlyBody: true,
	            suppressKeepFocus: true
	        };
	        this.rowRenderer.redrawAfterModelUpdate(refreshViewParams);
	        //***************************************************************************
	        // New focused cell
	        var focusedRowIndex;
	        var focusedColumn;
	        switch (scroll.type) {
	            case ScrollType.VERTICAL:
	                focusedRowIndex = this.paginationProxy.getRowIndexAtPixel(newScrollTop + this.paginationProxy.getPixelOffset() + verticalScroll.focusedRowTopDelta);
	                focusedColumn = focusedCellBeforeScrolling.column;
	                break;
	            case ScrollType.DIAGONAL:
	                focusedRowIndex = this.paginationProxy.getRowIndexAtPixel(newScrollTop + this.paginationProxy.getPixelOffset() + diagonalScroll.focusedRowTopDelta);
	                focusedColumn = diagonalScroll.columnToScrollTo;
	                break;
	            case ScrollType.HORIZONTAL:
	                focusedRowIndex = focusedCellBeforeScrolling.rowIndex;
	                focusedColumn = horizontalScroll.columnToScrollTo;
	                break;
	        }
	        this.focusedCellController.setFocusedCell(focusedRowIndex, focusedColumn, null, true);
	    };
	    GridPanel.prototype.processMouseEvent = function (eventName, mouseEvent) {
	        var cellComp = this.mouseEventService.getRenderedCellForEvent(mouseEvent);
	        if (cellComp) {
	            cellComp.onMouseEvent(eventName, mouseEvent);
	        }
	        var rowComp = this.getRowForEvent(mouseEvent);
	        if (rowComp) {
	            rowComp.onMouseEvent(eventName, mouseEvent);
	        }
	        this.preventDefaultOnContextMenu(mouseEvent);
	    };
	    GridPanel.prototype.onContextMenu = function (mouseEvent) {
	        // to allow us to debug in chrome, we ignore the event if ctrl is pressed.
	        // not everyone wants this, so first 'if' below allows to turn this hack off.
	        if (!this.gridOptionsWrapper.isAllowContextMenuWithControlKey()) {
	            // then do the check
	            if (mouseEvent.ctrlKey || mouseEvent.metaKey) {
	                return;
	            }
	        }
	        if (this.contextMenuFactory && !this.gridOptionsWrapper.isSuppressContextMenu()) {
	            this.contextMenuFactory.showMenu(null, null, null, mouseEvent);
	            mouseEvent.preventDefault();
	        }
	    };
	    GridPanel.prototype.preventDefaultOnContextMenu = function (mouseEvent) {
	        // if we don't do this, then middle click will never result in a 'click' event, as 'mousedown'
	        // will be consumed by the browser to mean 'scroll' (as you can scroll with the middle mouse
	        // button in the browser). so this property allows the user to receive middle button clicks if
	        // they want.
	        if (this.gridOptionsWrapper.isSuppressMiddleClickScrolls() && mouseEvent.which === 2) {
	            mouseEvent.preventDefault();
	        }
	    };
	    GridPanel.prototype.addShortcutKeyListeners = function () {
	        var _this = this;
	        this.eAllCellContainers.forEach(function (container) {
	            container.addEventListener('keydown', function (event) {
	                // if the cell the event came from is editing, then we do not
	                // want to do the default shortcut keys, otherwise the editor
	                // (eg a text field) would not be able to do the normal cut/copy/paste
	                var renderedCell = _this.mouseEventService.getRenderedCellForEvent(event);
	                if (renderedCell && renderedCell.isEditing()) {
	                    return;
	                }
	                // for copy / paste, we don't want to execute when the event
	                // was from a child grid (happens in master detail)
	                if (!_this.mouseEventService.isEventFromThisGrid(event)) {
	                    return;
	                }
	                if (event.ctrlKey || event.metaKey) {
	                    switch (event.which) {
	                        case constants_1.Constants.KEY_A: return _this.onCtrlAndA(event);
	                        case constants_1.Constants.KEY_C: return _this.onCtrlAndC(event);
	                        case constants_1.Constants.KEY_V: return _this.onCtrlAndV(event);
	                        case constants_1.Constants.KEY_D: return _this.onCtrlAndD(event);
	                    }
	                }
	            });
	        });
	    };
	    GridPanel.prototype.onCtrlAndA = function (event) {
	        if (this.rangeController && this.paginationProxy.isRowsToRender()) {
	            var rowEnd = void 0;
	            var floatingStart = void 0;
	            var floatingEnd = void 0;
	            if (this.pinnedRowModel.isEmpty(constants_1.Constants.PINNED_TOP)) {
	                floatingStart = null;
	            }
	            else {
	                floatingStart = constants_1.Constants.PINNED_TOP;
	            }
	            if (this.pinnedRowModel.isEmpty(constants_1.Constants.PINNED_BOTTOM)) {
	                floatingEnd = null;
	                rowEnd = this.paginationProxy.getTotalRowCount() - 1;
	            }
	            else {
	                floatingEnd = constants_1.Constants.PINNED_BOTTOM;
	                rowEnd = this.pinnedRowModel.getPinnedBottomRowData().length = 1;
	            }
	            var allDisplayedColumns = this.columnController.getAllDisplayedColumns();
	            if (utils_1.Utils.missingOrEmpty(allDisplayedColumns)) {
	                return;
	            }
	            this.rangeController.setRange({
	                rowStart: 0,
	                floatingStart: floatingStart,
	                rowEnd: rowEnd,
	                floatingEnd: floatingEnd,
	                columnStart: allDisplayedColumns[0],
	                columnEnd: allDisplayedColumns[allDisplayedColumns.length - 1]
	            });
	        }
	        event.preventDefault();
	        return false;
	    };
	    GridPanel.prototype.onCtrlAndC = function (event) {
	        if (!this.clipboardService) {
	            return;
	        }
	        var focusedCell = this.focusedCellController.getFocusedCell();
	        this.clipboardService.copyToClipboard();
	        event.preventDefault();
	        // the copy operation results in loosing focus on the cell,
	        // because of the trickery the copy logic uses with a temporary
	        // widget. so we set it back again.
	        if (focusedCell) {
	            this.focusedCellController.setFocusedCell(focusedCell.rowIndex, focusedCell.column, focusedCell.floating, true);
	        }
	        return false;
	    };
	    GridPanel.prototype.onCtrlAndV = function (event) {
	        if (!this.rangeController) {
	            return;
	        }
	        this.clipboardService.pasteFromClipboard();
	        return false;
	    };
	    GridPanel.prototype.onCtrlAndD = function (event) {
	        if (!this.clipboardService) {
	            return;
	        }
	        this.clipboardService.copyRangeDown();
	        event.preventDefault();
	        return false;
	    };
	    GridPanel.prototype.createOverlayTemplate = function (name, defaultTemplate, userProvidedTemplate) {
	        var template = OVERLAY_TEMPLATE
	            .replace('[OVERLAY_NAME]', name);
	        if (userProvidedTemplate) {
	            template = template.replace('[OVERLAY_TEMPLATE]', userProvidedTemplate);
	        }
	        else {
	            template = template.replace('[OVERLAY_TEMPLATE]', defaultTemplate);
	        }
	        return template;
	    };
	    GridPanel.prototype.createLoadingOverlayTemplate = function () {
	        var userProvidedTemplate = this.gridOptionsWrapper.getOverlayLoadingTemplate();
	        var templateNotLocalised = this.createOverlayTemplate('loading', LOADING_OVERLAY_TEMPLATE, userProvidedTemplate);
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var templateLocalised = templateNotLocalised.replace('[LOADING...]', localeTextFunc('loadingOoo', 'Loading...'));
	        return templateLocalised;
	    };
	    GridPanel.prototype.createNoRowsOverlayTemplate = function () {
	        var userProvidedTemplate = this.gridOptionsWrapper.getOverlayNoRowsTemplate();
	        var templateNotLocalised = this.createOverlayTemplate('no-rows', NO_ROWS_TO_SHOW_OVERLAY_TEMPLATE, userProvidedTemplate);
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var templateLocalised = templateNotLocalised.replace('[NO_ROWS_TO_SHOW]', localeTextFunc('noRowsToShow', 'No Rows To Show'));
	        return templateLocalised;
	    };
	    GridPanel.prototype.ensureIndexVisible = function (index) {
	        // if for print, everything is always visible
	        if (this.gridOptionsWrapper.isForPrint()) {
	            return;
	        }
	        this.logger.log('ensureIndexVisible: ' + index);
	        var rowCount = this.paginationProxy.getTotalRowCount();
	        if (typeof index !== 'number' || index < 0 || index >= rowCount) {
	            console.warn('invalid row index for ensureIndexVisible: ' + index);
	            return;
	        }
	        this.paginationProxy.goToPageWithIndex(index);
	        var nodeAtIndex = this.paginationProxy.getRow(index);
	        var pixelOffset = this.paginationProxy.getPixelOffset();
	        var rowTopPixel = nodeAtIndex.rowTop - pixelOffset;
	        var rowBottomPixel = rowTopPixel + nodeAtIndex.rowHeight;
	        var vRange = this.getVerticalPixelRange();
	        var vRangeTop = vRange.top;
	        var vRangeBottom = vRange.bottom;
	        var scrollShowing = this.isHorizontalScrollShowing();
	        if (scrollShowing) {
	            vRangeBottom -= this.scrollWidth;
	        }
	        var viewportScrolledPastRow = vRangeTop > rowTopPixel;
	        var viewportScrolledBeforeRow = vRangeBottom < rowBottomPixel;
	        var eViewportToScroll = this.getPrimaryScrollViewport();
	        if (viewportScrolledPastRow) {
	            // if row is before, scroll up with row at top
	            eViewportToScroll.scrollTop = rowTopPixel;
	            this.rowRenderer.redrawAfterScroll();
	        }
	        else if (viewportScrolledBeforeRow) {
	            // if row is below, scroll down with row at bottom
	            var viewportHeight = vRangeBottom - vRangeTop;
	            var newScrollPosition = rowBottomPixel - viewportHeight;
	            eViewportToScroll.scrollTop = newScrollPosition;
	            this.rowRenderer.redrawAfterScroll();
	        }
	        // otherwise, row is already in view, so do nothing
	    };
	    GridPanel.prototype.getPrimaryScrollViewport = function () {
	        if (this.enableRtl && this.columnController.isPinningLeft()) {
	            return this.ePinnedLeftColsViewport;
	        }
	        else if (!this.enableRtl && this.columnController.isPinningRight()) {
	            return this.ePinnedRightColsViewport;
	        }
	        else {
	            return this.eBodyViewport;
	        }
	    };
	    // + moveColumnController
	    GridPanel.prototype.getCenterWidth = function () {
	        return this.eBodyViewport.clientWidth;
	    };
	    GridPanel.prototype.isHorizontalScrollShowing = function () {
	        var result = utils_1.Utils.isHorizontalScrollShowing(this.eBodyViewport);
	        return result;
	    };
	    GridPanel.prototype.isVerticalScrollShowing = function () {
	        if (this.columnController.isPinningRight()) {
	            return utils_1.Utils.isVerticalScrollShowing(this.ePinnedRightColsViewport);
	        }
	        else {
	            return utils_1.Utils.isVerticalScrollShowing(this.eBodyViewport);
	        }
	    };
	    GridPanel.prototype.isBodyVerticalScrollShowing = function () {
	        // if the scroll is on the pinned panel, then it is never in the center panel.
	        // if LRT, then pinning right means scroll NOT on center
	        if (!this.enableRtl && this.columnController.isPinningRight()) {
	            return false;
	        }
	        // if RTL, then pinning left means scroll NOT on center
	        if (this.enableRtl && this.columnController.isPinningLeft()) {
	            return false;
	        }
	        return utils_1.Utils.isVerticalScrollShowing(this.eBodyViewport);
	    };
	    // gets called every 500 ms. we use this to set padding on right pinned column
	    GridPanel.prototype.periodicallyCheck = function () {
	        if (this.forPrint) {
	            return;
	        }
	        this.setBottomPaddingOnPinnedRight();
	        this.setMarginOnFullWidthCellContainer();
	        this.setScrollShowing();
	    };
	    GridPanel.prototype.setScrollShowing = function () {
	        var params = {
	            vBody: false,
	            hBody: false,
	            vPinnedLeft: false,
	            vPinnedRight: false
	        };
	        if (this.enableRtl) {
	            if (this.columnController.isPinningLeft()) {
	                params.vPinnedLeft = this.forPrint ? false : utils_1.Utils.isVerticalScrollShowing(this.ePinnedLeftColsViewport);
	            }
	            else {
	                params.vBody = utils_1.Utils.isVerticalScrollShowing(this.eBodyViewport);
	            }
	        }
	        else {
	            if (this.columnController.isPinningRight()) {
	                params.vPinnedRight = this.forPrint ? false : utils_1.Utils.isVerticalScrollShowing(this.ePinnedRightColsViewport);
	            }
	            else {
	                params.vBody = utils_1.Utils.isVerticalScrollShowing(this.eBodyViewport);
	            }
	        }
	        params.hBody = utils_1.Utils.isHorizontalScrollShowing(this.eBodyViewport);
	        this.scrollVisibleService.setScrollsVisible(params);
	    };
	    // the pinned container needs extra space at the bottom, some blank space, otherwise when
	    // vertically scrolled all the way down, the last row will be hidden behind the scrolls.
	    // this extra padding allows the last row to be lifted above the bottom scrollbar.
	    GridPanel.prototype.setBottomPaddingOnPinnedRight = function () {
	        if (this.forPrint) {
	            return;
	        }
	        if (this.columnController.isPinningRight()) {
	            var bodyHorizontalScrollShowing = this.eBodyViewport.clientWidth < this.eBodyViewport.scrollWidth;
	            if (bodyHorizontalScrollShowing) {
	                this.ePinnedRightColsContainer.style.marginBottom = this.scrollWidth + 'px';
	            }
	            else {
	                this.ePinnedRightColsContainer.style.marginBottom = '';
	            }
	        }
	    };
	    GridPanel.prototype.setMarginOnFullWidthCellContainer = function () {
	        if (this.forPrint) {
	            return;
	        }
	        // if either right or bottom scrollbars are showing, we need to make sure the
	        // fullWidthCell panel isn't covering the scrollbars. originally i tried to do this using
	        // margin, but the overflow was not getting clipped and going into the margin,
	        // so used border instead. dunno why it works, trial and error found the solution.
	        if (this.enableRtl) {
	            if (this.isVerticalScrollShowing()) {
	                this.eFullWidthCellViewport.style.borderLeft = this.scrollWidth + 'px solid transparent';
	            }
	            else {
	                this.eFullWidthCellViewport.style.borderLeft = '';
	            }
	        }
	        else {
	            if (this.isVerticalScrollShowing()) {
	                this.eFullWidthCellViewport.style.borderRight = this.scrollWidth + 'px solid transparent';
	            }
	            else {
	                this.eFullWidthCellViewport.style.borderRight = '';
	            }
	        }
	        if (this.isHorizontalScrollShowing()) {
	            this.eFullWidthCellViewport.style.borderBottom = this.scrollWidth + 'px solid transparent';
	        }
	        else {
	            this.eFullWidthCellViewport.style.borderBottom = '';
	        }
	    };
	    GridPanel.prototype.ensureColumnVisible = function (key) {
	        // if for print, everything is always visible
	        if (this.gridOptionsWrapper.isForPrint()) {
	            return;
	        }
	        var column = this.columnController.getGridColumn(key);
	        if (!column) {
	            return;
	        }
	        if (column.isPinned()) {
	            console.warn('calling ensureIndexVisible on a ' + column.getPinned() + ' pinned column doesn\'t make sense for column ' + column.getColId());
	            return;
	        }
	        if (!this.columnController.isColumnDisplayed(column)) {
	            console.warn('column is not currently visible');
	            return;
	        }
	        var colLeftPixel = column.getLeft();
	        var colRightPixel = colLeftPixel + column.getActualWidth();
	        var viewportWidth = this.eBodyViewport.clientWidth;
	        var scrollPosition = this.getBodyViewportScrollLeft();
	        var bodyWidth = this.columnController.getBodyContainerWidth();
	        var viewportLeftPixel;
	        var viewportRightPixel;
	        // the logic of working out left and right viewport px is both here and in the ColumnController,
	        // need to refactor it out to one place
	        if (this.enableRtl) {
	            viewportLeftPixel = bodyWidth - scrollPosition - viewportWidth;
	            viewportRightPixel = bodyWidth - scrollPosition;
	        }
	        else {
	            viewportLeftPixel = scrollPosition;
	            viewportRightPixel = viewportWidth + scrollPosition;
	        }
	        var viewportScrolledPastCol = viewportLeftPixel > colLeftPixel;
	        var viewportScrolledBeforeCol = viewportRightPixel < colRightPixel;
	        if (viewportScrolledPastCol) {
	            // if viewport's left side is after col's left side, scroll right to pull col into viewport at left
	            if (this.enableRtl) {
	                var newScrollPosition = bodyWidth - viewportWidth - colLeftPixel;
	                this.setBodyViewportScrollLeft(newScrollPosition);
	            }
	            else {
	                this.setBodyViewportScrollLeft(colLeftPixel);
	            }
	        }
	        else if (viewportScrolledBeforeCol) {
	            // if viewport's right side is before col's right side, scroll left to pull col into viewport at right
	            if (this.enableRtl) {
	                var newScrollPosition = bodyWidth - colRightPixel;
	                this.setBodyViewportScrollLeft(newScrollPosition);
	            }
	            else {
	                var newScrollPosition = colRightPixel - viewportWidth;
	                this.setBodyViewportScrollLeft(newScrollPosition);
	            }
	        }
	        else {
	            // otherwise, col is already in view, so do nothing
	        }
	        // this will happen anyway, as the move will cause a 'scroll' event on the body, however
	        // it is possible that the ensureColumnVisible method is called from within ag-Grid and
	        // the caller will need to have the columns rendered to continue, which will be before
	        // the event has been worked on (which is the case for cell navigation).
	        this.setLeftAndRightBounds();
	    };
	    GridPanel.prototype.showLoadingOverlay = function () {
	        if (!this.gridOptionsWrapper.isSuppressLoadingOverlay()) {
	            this.layout.showOverlay('loading');
	        }
	    };
	    GridPanel.prototype.showNoRowsOverlay = function () {
	        if (!this.gridOptionsWrapper.isSuppressNoRowsOverlay()) {
	            this.layout.showOverlay('noRows');
	        }
	    };
	    GridPanel.prototype.hideOverlay = function () {
	        this.layout.hideOverlay();
	    };
	    GridPanel.prototype.getWidthForSizeColsToFit = function () {
	        var availableWidth = this.eBody.clientWidth;
	        // if pinning right, then the scroll bar can show, however for some reason
	        // it overlays the grid and doesn't take space. so we are only interested
	        // in the body scroll showing.
	        var removeVerticalScrollWidth = this.isVerticalScrollShowing();
	        if (removeVerticalScrollWidth) {
	            availableWidth -= this.scrollWidth;
	        }
	        return availableWidth;
	    };
	    // method will call itself if no available width. this covers if the grid
	    // isn't visible, but is just about to be visible.
	    GridPanel.prototype.sizeColumnsToFit = function (nextTimeout) {
	        var _this = this;
	        var availableWidth = this.getWidthForSizeColsToFit();
	        if (availableWidth > 0) {
	            this.columnController.sizeColumnsToFit(availableWidth);
	        }
	        else {
	            if (nextTimeout === undefined) {
	                setTimeout(function () {
	                    _this.sizeColumnsToFit(100);
	                }, 0);
	            }
	            else if (nextTimeout === 100) {
	                setTimeout(function () {
	                    _this.sizeColumnsToFit(-1);
	                }, 100);
	            }
	            else {
	                console.log('ag-Grid: tried to call sizeColumnsToFit() but the grid is coming back with ' +
	                    'zero width, maybe the grid is not visible yet on the screen?');
	            }
	        }
	    };
	    GridPanel.prototype.getBodyContainer = function () {
	        return this.eBodyContainer;
	    };
	    GridPanel.prototype.getDropTargetBodyContainers = function () {
	        if (this.forPrint) {
	            return [this.eBodyContainer, this.eFloatingTopContainer, this.eFloatingBottomContainer];
	        }
	        else {
	            return [this.eBodyViewport, this.eFloatingTopViewport, this.eFloatingBottomViewport];
	        }
	    };
	    GridPanel.prototype.getBodyViewport = function () {
	        return this.eBodyViewport;
	    };
	    GridPanel.prototype.getDropTargetLeftContainers = function () {
	        if (this.forPrint) {
	            return [];
	        }
	        else {
	            return [this.ePinnedLeftColsViewport, this.ePinnedLeftFloatingBottom, this.ePinnedLeftFloatingTop];
	        }
	    };
	    GridPanel.prototype.getDropTargetPinnedRightContainers = function () {
	        if (this.forPrint) {
	            return [];
	        }
	        else {
	            return [this.ePinnedRightColsViewport, this.ePinnedRightFloatingBottom, this.ePinnedRightFloatingTop];
	        }
	    };
	    GridPanel.prototype.getHeaderContainer = function () {
	        return this.eHeaderContainer;
	    };
	    GridPanel.prototype.getHeaderOverlay = function () {
	        return this.eHeaderOverlay;
	    };
	    GridPanel.prototype.getRoot = function () {
	        return this.eRoot;
	    };
	    GridPanel.prototype.getPinnedLeftHeader = function () {
	        return this.ePinnedLeftHeader;
	    };
	    GridPanel.prototype.getPinnedRightHeader = function () {
	        return this.ePinnedRightHeader;
	    };
	    GridPanel.prototype.queryHtmlElement = function (selector) {
	        return this.eRoot.querySelector(selector);
	    };
	    GridPanel.prototype.loadTemplate = function () {
	        // the template we use is different when doing 'for print'
	        var template;
	        if (this.forPrint) {
	            template = GRID_PANEL_FOR_PRINT_TEMPLATE;
	        }
	        else if (this.autoHeight) {
	            template = GRID_PANEL_AUTO_HEIGHT_TEMPLATE;
	        }
	        else {
	            template = GRID_PANEL_NORMAL_TEMPLATE;
	        }
	        this.eRoot = utils_1.Utils.loadTemplate(template);
	    };
	    GridPanel.prototype.findElements = function () {
	        var _this = this;
	        if (this.forPrint) {
	            this.eHeaderContainer = this.queryHtmlElement('.ag-header-container');
	            this.eBodyContainer = this.queryHtmlElement('.ag-body-container');
	            this.eFloatingTopContainer = this.queryHtmlElement('.ag-floating-top-container');
	            this.eFloatingBottomContainer = this.queryHtmlElement('.ag-floating-bottom-container');
	            this.eAllCellContainers = [this.eBodyContainer, this.eFloatingTopContainer, this.eFloatingBottomContainer];
	            var containers = {
	                body: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eBodyContainer }),
	                fullWidth: null,
	                pinnedLeft: null,
	                pinnedRight: null,
	                floatingTop: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFloatingTopContainer }),
	                floatingTopPinnedLeft: null,
	                floatingTopPinnedRight: null,
	                floatingTopFullWidth: null,
	                floatingBottom: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFloatingBottomContainer }),
	                floatingBottomPinnedLeft: null,
	                floatingBottomPinnedRight: null,
	                floatingBottomFullWith: null
	            };
	            this.rowContainerComponents = containers;
	            // when doing forPrint, we don't have any fullWidth containers, instead we add directly to the main
	            // containers. this works in forPrint only as there are no pinned columns (no need for fullWidth to
	            // span pinned columns) and the rows are already the full width of the grid (the reason for fullWidth)
	            containers.fullWidth = containers.body;
	            containers.floatingBottomFullWith = containers.floatingBottom;
	            containers.floatingTopFullWidth = containers.floatingTop;
	        }
	        else {
	            this.eBody = this.queryHtmlElement('.ag-body');
	            this.eBodyContainer = this.queryHtmlElement('.ag-body-container');
	            this.eBodyViewport = this.queryHtmlElement('.ag-body-viewport');
	            this.eBodyViewportWrapper = this.queryHtmlElement('.ag-body-viewport-wrapper');
	            this.eFullWidthCellContainer = this.queryHtmlElement('.ag-full-width-container');
	            this.eFullWidthCellViewport = this.queryHtmlElement('.ag-full-width-viewport');
	            this.ePinnedLeftColsContainer = this.queryHtmlElement('.ag-pinned-left-cols-container');
	            this.ePinnedRightColsContainer = this.queryHtmlElement('.ag-pinned-right-cols-container');
	            this.ePinnedLeftColsViewport = this.queryHtmlElement('.ag-pinned-left-cols-viewport');
	            this.ePinnedRightColsViewport = this.queryHtmlElement('.ag-pinned-right-cols-viewport');
	            this.ePinnedLeftHeader = this.queryHtmlElement('.ag-pinned-left-header');
	            this.ePinnedRightHeader = this.queryHtmlElement('.ag-pinned-right-header');
	            this.eHeader = this.queryHtmlElement('.ag-header');
	            this.eHeaderContainer = this.queryHtmlElement('.ag-header-container');
	            this.eHeaderOverlay = this.queryHtmlElement('.ag-header-overlay');
	            this.eHeaderViewport = this.queryHtmlElement('.ag-header-viewport');
	            this.eFloatingTop = this.queryHtmlElement('.ag-floating-top');
	            this.ePinnedLeftFloatingTop = this.queryHtmlElement('.ag-pinned-left-floating-top');
	            this.ePinnedRightFloatingTop = this.queryHtmlElement('.ag-pinned-right-floating-top');
	            this.eFloatingTopContainer = this.queryHtmlElement('.ag-floating-top-container');
	            this.eFloatingTopViewport = this.queryHtmlElement('.ag-floating-top-viewport');
	            this.eFloatingTopFullWidthCellContainer = this.queryHtmlElement('.ag-floating-top-full-width-container');
	            this.eFloatingBottom = this.queryHtmlElement('.ag-floating-bottom');
	            this.ePinnedLeftFloatingBottom = this.queryHtmlElement('.ag-pinned-left-floating-bottom');
	            this.ePinnedRightFloatingBottom = this.queryHtmlElement('.ag-pinned-right-floating-bottom');
	            this.eFloatingBottomContainer = this.queryHtmlElement('.ag-floating-bottom-container');
	            this.eFloatingBottomViewport = this.queryHtmlElement('.ag-floating-bottom-viewport');
	            this.eFloatingBottomFullWidthCellContainer = this.queryHtmlElement('.ag-floating-bottom-full-width-container');
	            this.eAllCellContainers = [
	                this.ePinnedLeftColsContainer, this.ePinnedRightColsContainer, this.eBodyContainer,
	                this.eFloatingTop, this.eFloatingBottom, this.eFullWidthCellContainer
	            ];
	            this.rowContainerComponents = {
	                body: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eBodyContainer, eViewport: this.eBodyViewport }),
	                fullWidth: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFullWidthCellContainer, hideWhenNoChildren: true, eViewport: this.eFullWidthCellViewport }),
	                pinnedLeft: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.ePinnedLeftColsContainer, eViewport: this.ePinnedLeftColsViewport }),
	                pinnedRight: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.ePinnedRightColsContainer, eViewport: this.ePinnedRightColsViewport }),
	                floatingTop: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFloatingTopContainer }),
	                floatingTopPinnedLeft: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.ePinnedLeftFloatingTop }),
	                floatingTopPinnedRight: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.ePinnedRightFloatingTop }),
	                floatingTopFullWidth: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFloatingTopFullWidthCellContainer, hideWhenNoChildren: true }),
	                floatingBottom: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFloatingBottomContainer }),
	                floatingBottomPinnedLeft: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.ePinnedLeftFloatingBottom }),
	                floatingBottomPinnedRight: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.ePinnedRightFloatingBottom }),
	                floatingBottomFullWith: new rowContainerComponent_1.RowContainerComponent({ eContainer: this.eFloatingBottomFullWidthCellContainer, hideWhenNoChildren: true }),
	            };
	            this.addMouseWheelEventListeners();
	        }
	        utils_1.Utils.iterateObject(this.rowContainerComponents, function (key, container) {
	            if (container) {
	                _this.context.wireBean(container);
	            }
	        });
	    };
	    GridPanel.prototype.getRowContainers = function () {
	        return this.rowContainerComponents;
	    };
	    GridPanel.prototype.addMouseWheelEventListeners = function () {
	        // IE9, Chrome, Safari, Opera use 'mousewheel', Firefox uses 'DOMMouseScroll'
	        this.addDestroyableEventListener(this.eBodyViewport, 'mousewheel', this.centerMouseWheelListener.bind(this));
	        this.addDestroyableEventListener(this.eBodyViewport, 'DOMMouseScroll', this.centerMouseWheelListener.bind(this));
	        if (this.enableRtl) {
	            this.addDestroyableEventListener(this.ePinnedRightColsViewport, 'mousewheel', this.genericMouseWheelListener.bind(this));
	            this.addDestroyableEventListener(this.ePinnedRightColsViewport, 'DOMMouseScroll', this.genericMouseWheelListener.bind(this));
	        }
	        else {
	            this.addDestroyableEventListener(this.ePinnedLeftColsViewport, 'mousewheel', this.genericMouseWheelListener.bind(this));
	            this.addDestroyableEventListener(this.ePinnedLeftColsViewport, 'DOMMouseScroll', this.genericMouseWheelListener.bind(this));
	        }
	    };
	    GridPanel.prototype.getHeaderViewport = function () {
	        return this.eHeaderViewport;
	    };
	    GridPanel.prototype.centerMouseWheelListener = function (event) {
	        // we are only interested in mimicking the mouse wheel if we are not scrolling on the middle,
	        // otherwise the body has scrolls and the mouse wheel works for free
	        var bodyVScrollShowing = this.isBodyVerticalScrollActive();
	        if (!bodyVScrollShowing) {
	            var targetPanel = this.enableRtl ? this.ePinnedLeftColsViewport : this.ePinnedRightColsViewport;
	            return this.generalMouseWheelListener(event, targetPanel);
	        }
	    };
	    // used for listening to mouse wheel events on 1) left pinned and also the 2) fullWidthCell components.
	    // the fullWidthCell listener is added in renderedRow, hence public.
	    GridPanel.prototype.genericMouseWheelListener = function (event) {
	        var targetPanel;
	        var bodyVScrollActive = this.isBodyVerticalScrollActive();
	        if (bodyVScrollActive) {
	            targetPanel = this.eBodyViewport;
	        }
	        else {
	            targetPanel = this.enableRtl ? this.ePinnedLeftColsViewport : this.ePinnedRightColsViewport;
	        }
	        return this.generalMouseWheelListener(event, targetPanel);
	    };
	    GridPanel.prototype.generalMouseWheelListener = function (event, targetPanel) {
	        var wheelEvent = utils_1.Utils.normalizeWheel(event);
	        // we need to detect in which direction scroll is happening to allow trackpads scroll horizontally
	        // horizontal scroll
	        if (Math.abs(wheelEvent.pixelX) > Math.abs(wheelEvent.pixelY)) {
	            var newLeftPosition = this.eBodyViewport.scrollLeft + wheelEvent.pixelX;
	            this.eBodyViewport.scrollLeft = newLeftPosition;
	        }
	        else {
	            var newTopPosition = targetPanel.scrollTop + wheelEvent.pixelY;
	            targetPanel.scrollTop = newTopPosition;
	        }
	        // allow the option to pass mouse wheel events to the browser
	        // https://github.com/ag-grid/ag-grid/issues/800
	        // in the future, this should be tied in with 'forPrint' option, or have an option 'no vertical scrolls'
	        if (!this.gridOptionsWrapper.isSuppressPreventDefaultOnMouseWheel()) {
	            // if we don't prevent default, then the whole browser will scroll also as well as the grid
	            event.preventDefault();
	        }
	        return false;
	    };
	    GridPanel.prototype.onDisplayedColumnsChanged = function () {
	        this.setPinnedContainersVisible();
	        this.setBodyAndHeaderHeights();
	        this.setLeftAndRightBounds();
	    };
	    GridPanel.prototype.onDisplayedColumnsWidthChanged = function () {
	        this.setWidthsOfContainers();
	        this.setLeftAndRightBounds();
	        if (this.enableRtl) {
	            // because RTL is all backwards, a change in the width of the row
	            // can cause a change in the scroll position, without a scroll event,
	            // because the scroll position in RTL is a function that depends on
	            // the width. to be convinced of this, take out this line, enable RTL,
	            // scroll all the way to the left and then resize a column
	            this.horizontallyScrollHeaderCenterAndFloatingCenter();
	        }
	    };
	    GridPanel.prototype.onScrollVisibilityChanged = function () {
	        this.setWidthsOfContainers();
	    };
	    GridPanel.prototype.setWidthsOfContainers = function () {
	        var mainRowWidth = this.columnController.getBodyContainerWidth() + 'px';
	        this.eBodyContainer.style.width = mainRowWidth;
	        if (this.forPrint) {
	            // pinned col doesn't exist when doing forPrint
	            return;
	        }
	        this.eFloatingBottomContainer.style.width = mainRowWidth;
	        this.eFloatingTopContainer.style.width = mainRowWidth;
	        this.setPinnedLeftWidth();
	        this.setPinnedRightWidth();
	    };
	    GridPanel.prototype.setPinnedLeftWidth = function () {
	        var pinnedLeftWidth = this.scrollVisibleService.getPinnedLeftWidth() + 'px';
	        var pinnedLeftWidthWithScroll = this.scrollVisibleService.getPinnedLeftWithScrollWidth() + 'px';
	        this.ePinnedLeftColsViewport.style.width = pinnedLeftWidthWithScroll;
	        this.eBodyViewportWrapper.style.marginLeft = pinnedLeftWidthWithScroll;
	        this.ePinnedLeftFloatingBottom.style.width = pinnedLeftWidthWithScroll;
	        this.ePinnedLeftFloatingTop.style.width = pinnedLeftWidthWithScroll;
	        this.ePinnedLeftColsContainer.style.width = pinnedLeftWidth;
	    };
	    GridPanel.prototype.setPinnedRightWidth = function () {
	        var pinnedRightWidth = this.scrollVisibleService.getPinnedRightWidth() + 'px';
	        var pinnedRightWidthWithScroll = this.scrollVisibleService.getPinnedRightWithScrollWidth() + 'px';
	        this.ePinnedRightColsViewport.style.width = pinnedRightWidthWithScroll;
	        this.eBodyViewportWrapper.style.marginRight = pinnedRightWidthWithScroll;
	        this.ePinnedRightFloatingBottom.style.width = pinnedRightWidthWithScroll;
	        this.ePinnedRightFloatingTop.style.width = pinnedRightWidthWithScroll;
	        this.ePinnedRightColsContainer.style.width = pinnedRightWidth;
	    };
	    GridPanel.prototype.setPinnedContainersVisible = function () {
	        // no need to do this if not using scrolls
	        if (this.forPrint) {
	            return;
	        }
	        var changeDetected = false;
	        // if we are v scrolling, then one of these will have the scroll position.
	        // we us this inside the if(changedDetected), so we don't always use it, however
	        // it is changed when we make a pinned panel not visible, so we have to check it
	        // before we change display on the pinned panels
	        var scrollTop = Math.max(this.eBodyViewport.scrollTop, this.ePinnedLeftColsViewport.scrollTop, this.ePinnedRightColsViewport.scrollTop);
	        var showLeftPinned = this.columnController.isPinningLeft();
	        if (showLeftPinned !== this.pinningLeft) {
	            this.pinningLeft = showLeftPinned;
	            this.ePinnedLeftHeader.style.display = showLeftPinned ? 'inline-block' : 'none';
	            this.ePinnedLeftColsViewport.style.display = showLeftPinned ? 'inline' : 'none';
	            changeDetected = true;
	        }
	        var showRightPinned = this.columnController.isPinningRight();
	        if (showRightPinned !== this.pinningRight) {
	            this.pinningRight = showRightPinned;
	            this.ePinnedRightHeader.style.display = showRightPinned ? 'inline-block' : 'none';
	            this.ePinnedRightColsViewport.style.display = showRightPinned ? 'inline' : 'none';
	            changeDetected = true;
	        }
	        if (changeDetected) {
	            var bodyVScrollActive = this.isBodyVerticalScrollActive();
	            this.eBodyViewport.style.overflowY = bodyVScrollActive ? 'auto' : 'hidden';
	            // the body either uses it's scroll (when scrolling) or it's style.top
	            // (when following the scroll of a pinned section), so we need to set it
	            // back when changing from one to the other
	            if (bodyVScrollActive) {
	                this.setFakeScroll(this.eBodyContainer, 0);
	                // this.eBodyContainer.style.top = '0px';
	            }
	            else {
	                this.eBodyViewport.scrollTop = 0;
	            }
	            // when changing the primary scroll viewport, we copy over the scroll position,
	            // eg if body was getting scrolled and we were at position 100px, then we start
	            // pinning and pinned viewport is now the primary, we need to set it to 100px
	            var primaryScrollViewport = this.getPrimaryScrollViewport();
	            primaryScrollViewport.scrollTop = scrollTop;
	            // this adjusts the scroll position of all the faking panels. they should already
	            // be correct except body which has potentially just turned to be fake.
	            this.fakeVerticalScroll(scrollTop);
	        }
	    };
	    // init, layoutChanged, floatingDataChanged, headerHeightChanged
	    GridPanel.prototype.setBodyAndHeaderHeights = function () {
	        if (this.forPrint) {
	            // if doing 'for print' or 'auto height', then the header and footers are laid
	            // out naturally by the browser. it's whatever height that's needed to fit.
	            return;
	        }
	        var heightOfContainer = this.layout.getCentreHeight();
	        if (!heightOfContainer) {
	            return;
	        }
	        var headerRowCount = this.columnController.getHeaderRowCount();
	        var totalHeaderHeight;
	        var numberOfFloating = 0;
	        var groupHeight;
	        var headerHeight;
	        if (!this.columnController.isPivotMode()) {
	            utils_1.Utils.removeCssClass(this.eHeader, 'ag-pivot-on');
	            utils_1.Utils.addCssClass(this.eHeader, 'ag-pivot-off');
	            if (this.gridOptionsWrapper.isFloatingFilter()) {
	                headerRowCount++;
	            }
	            numberOfFloating = (this.gridOptionsWrapper.isFloatingFilter()) ? 1 : 0;
	            groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();
	            headerHeight = this.gridOptionsWrapper.getHeaderHeight();
	        }
	        else {
	            utils_1.Utils.removeCssClass(this.eHeader, 'ag-pivot-off');
	            utils_1.Utils.addCssClass(this.eHeader, 'ag-pivot-on');
	            numberOfFloating = 0;
	            groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();
	            headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();
	        }
	        var numberOfNonGroups = 1 + numberOfFloating;
	        var numberOfGroups = headerRowCount - numberOfNonGroups;
	        totalHeaderHeight = numberOfFloating * this.gridOptionsWrapper.getFloatingFiltersHeight();
	        totalHeaderHeight += numberOfGroups * groupHeight;
	        totalHeaderHeight += headerHeight;
	        this.eHeader.style['height'] = totalHeaderHeight + 'px';
	        // if we are doing auto-height, we only size the header, we don't size the
	        // other parts as we use the normal browser layout for that
	        if (this.autoHeight) {
	            return;
	        }
	        // padding top covers the header and the pinned rows on top
	        var floatingTopHeight = this.pinnedRowModel.getPinnedTopTotalHeight();
	        var paddingTop = totalHeaderHeight + floatingTopHeight;
	        // bottom is just the bottom pinned rows
	        var floatingBottomHeight = this.pinnedRowModel.getPinnedBottomTotalHeight();
	        var floatingBottomTop = heightOfContainer - floatingBottomHeight;
	        var bodyHeight = heightOfContainer - totalHeaderHeight - floatingBottomHeight - floatingTopHeight;
	        this.eBody.style.top = paddingTop + 'px';
	        this.eBody.style.height = bodyHeight + 'px';
	        this.eFloatingTop.style.top = totalHeaderHeight + 'px';
	        this.eFloatingTop.style.height = floatingTopHeight + 'px';
	        this.eFloatingBottom.style.height = floatingBottomHeight + 'px';
	        this.eFloatingBottom.style.top = floatingBottomTop + 'px';
	        this.ePinnedLeftColsViewport.style.height = bodyHeight + 'px';
	        this.ePinnedRightColsViewport.style.height = bodyHeight + 'px';
	        // bodyHeight property is used by pagination service, that may change number of rows
	        // in this page based on the height of the grid
	        if (this.bodyHeight !== bodyHeight) {
	            this.bodyHeight = bodyHeight;
	            var event_1 = {
	                type: events_1.Events.EVENT_BODY_HEIGHT_CHANGED,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	    };
	    GridPanel.prototype.getBodyHeight = function () {
	        return this.bodyHeight;
	    };
	    GridPanel.prototype.setHorizontalScrollPosition = function (hScrollPosition) {
	        this.eBodyViewport.scrollLeft = hScrollPosition;
	        // we need to manually do the event handling (rather than wait for the event)
	        // for the alignedGridsService, as if we don't, the aligned grid service gets
	        // notified async, and then it's 'consuming' flag doesn't get used right, and
	        // we can end up with an infinite loop
	        if (this.nextScrollLeft !== hScrollPosition) {
	            this.nextScrollLeft = hScrollPosition;
	            this.doHorizontalScroll();
	        }
	    };
	    // tries to scroll by pixels, but returns what the result actually was
	    GridPanel.prototype.scrollHorizontally = function (pixels) {
	        var oldScrollPosition = this.eBodyViewport.scrollLeft;
	        this.setHorizontalScrollPosition(oldScrollPosition + pixels);
	        var newScrollPosition = this.eBodyViewport.scrollLeft;
	        return newScrollPosition - oldScrollPosition;
	    };
	    GridPanel.prototype.addScrollListener = function () {
	        var _this = this;
	        // if printing, then no scrolling, so no point in listening for scroll events
	        if (this.forPrint) {
	            return;
	        }
	        this.addDestroyableEventListener(this.eBodyViewport, 'scroll', this.onBodyScroll.bind(this));
	        // below we add two things:
	        // pinnedScrollListener -> when pinned panel with scrollbar gets scrolled, it updates body and other pinned
	        // suppressScroll -> stops scrolling when pinned panel was moved - which can only happen when user is navigating
	        //     in the pinned container, as the pinned col should never scroll. so we rollback the scroll on the pinned.
	        var onPinnedLeftVerticalScroll = this.onVerticalScroll.bind(this, this.ePinnedLeftColsViewport);
	        var onPinnedRightVerticalScroll = this.onVerticalScroll.bind(this, this.ePinnedRightColsViewport);
	        if (this.enableRtl) {
	            this.addDestroyableEventListener(this.ePinnedLeftColsViewport, 'scroll', onPinnedLeftVerticalScroll);
	            var suppressRightScroll = function () { return _this.ePinnedRightColsViewport.scrollTop = 0; };
	            this.addDestroyableEventListener(this.ePinnedRightColsViewport, 'scroll', suppressRightScroll);
	        }
	        else {
	            this.addDestroyableEventListener(this.ePinnedRightColsViewport, 'scroll', onPinnedRightVerticalScroll);
	            var suppressLeftScroll = function () { return _this.ePinnedLeftColsViewport.scrollTop = 0; };
	            this.addDestroyableEventListener(this.ePinnedLeftColsViewport, 'scroll', suppressLeftScroll);
	        }
	        var suppressCenterScroll = function () {
	            if (_this.getPrimaryScrollViewport() !== _this.eBodyViewport) {
	                _this.eBodyViewport.scrollTop = 0;
	            }
	        };
	        this.addDestroyableEventListener(this.eBodyViewport, 'scroll', suppressCenterScroll);
	        this.addIEPinFix(onPinnedRightVerticalScroll, onPinnedLeftVerticalScroll);
	    };
	    GridPanel.prototype.onBodyScroll = function () {
	        this.onBodyHorizontalScroll();
	        this.onBodyVerticalScroll();
	    };
	    GridPanel.prototype.onBodyHorizontalScroll = function () {
	        var scrollLeft = this.eBodyViewport.scrollLeft;
	        if (this.nextScrollLeft !== scrollLeft) {
	            this.nextScrollLeft = scrollLeft;
	            if (this.useAnimationFrame) {
	                this.animationFrameService.schedule();
	            }
	            else {
	                this.doHorizontalScroll();
	            }
	        }
	    };
	    GridPanel.prototype.doHorizontalScroll = function () {
	        this.scrollLeft = this.nextScrollLeft;
	        var event = {
	            type: events_1.Events.EVENT_BODY_SCROLL,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            direction: 'horizontal',
	            left: this.scrollLeft,
	            top: this.scrollTop
	        };
	        this.eventService.dispatchEvent(event);
	        this.horizontallyScrollHeaderCenterAndFloatingCenter();
	        this.setLeftAndRightBounds();
	        // this.alignedGridsService.fireHorizontalScrollEvent(this.scrollLeft);
	    };
	    GridPanel.prototype.onBodyVerticalScroll = function () {
	        var bodyVScrollActive = this.isBodyVerticalScrollActive();
	        if (bodyVScrollActive) {
	            this.onVerticalScroll(this.eBodyViewport);
	        }
	    };
	    GridPanel.prototype.onVerticalScroll = function (sourceElement) {
	        var scrollTop = sourceElement.scrollTop;
	        if (this.useAnimationFrame) {
	            if (this.nextScrollTop !== scrollTop) {
	                this.nextScrollTop = scrollTop;
	                this.animationFrameService.schedule();
	            }
	        }
	        else {
	            if (scrollTop !== this.scrollTop) {
	                this.scrollTop = scrollTop;
	                this.fakeVerticalScroll(scrollTop);
	                this.redrawRowsAfterScroll();
	            }
	        }
	    };
	    GridPanel.prototype.executeFrame = function () {
	        if (this.scrollLeft !== this.nextScrollLeft) {
	            this.doHorizontalScroll();
	            return true;
	        }
	        else if (this.scrollTop !== this.nextScrollTop) {
	            this.scrollTop = this.nextScrollTop;
	            this.fakeVerticalScroll(this.scrollTop);
	            this.verticalRedrawNeeded = true;
	            return true;
	        }
	        else if (this.verticalRedrawNeeded) {
	            this.redrawRowsAfterScroll();
	            this.verticalRedrawNeeded = false;
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    GridPanel.prototype.redrawRowsAfterScroll = function () {
	        var event = {
	            type: events_1.Events.EVENT_BODY_SCROLL,
	            direction: 'vertical',
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            left: this.scrollLeft,
	            top: this.scrollTop
	        };
	        this.eventService.dispatchEvent(event);
	        this.rowRenderer.redrawAfterScroll();
	    };
	    // if LTR, we hide body scroll if pinning right (as scroll is in right pinned),
	    // if RTL, we hide body scroll if pinning left (as scroll is in left pinned)
	    GridPanel.prototype.isBodyVerticalScrollActive = function () {
	        var pinningRight = this.columnController.isPinningRight();
	        var pinningLeft = this.columnController.isPinningLeft();
	        var centerHasScroll = this.enableRtl ? !pinningLeft : !pinningRight;
	        return centerHasScroll;
	    };
	    // this bit is a fix / hack for IE due to this:
	    // https://www.ag-grid.com/forum/showthread.php?tid=4303
	    // it gets the left panel to reposition itself after a model change
	    GridPanel.prototype.addIEPinFix = function (onPinnedRightScroll, onPinnedLeftScroll) {
	        var _this = this;
	        var listener = function () {
	            if (_this.columnController.isPinningRight()) {
	                setTimeout(function () {
	                    if (_this.enableRtl) {
	                        onPinnedLeftScroll();
	                    }
	                    else {
	                        onPinnedRightScroll();
	                    }
	                }, 0);
	            }
	        };
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_MODEL_UPDATED, listener);
	    };
	    // this gets called whenever a change in the viewport, so we can inform column controller it has to work
	    // out the virtual columns again. gets called from following locations:
	    // + ensureColVisible, scroll, init, layoutChanged, displayedColumnsChanged
	    GridPanel.prototype.setLeftAndRightBounds = function () {
	        if (this.gridOptionsWrapper.isForPrint()) {
	            return;
	        }
	        var scrollWidth = this.eBodyViewport.clientWidth;
	        var scrollPosition = this.getBodyViewportScrollLeft();
	        this.columnController.setVirtualViewportPosition(scrollWidth, scrollPosition);
	    };
	    GridPanel.prototype.getBodyViewportScrollLeft = function () {
	        if (this.forPrint) {
	            return 0;
	        }
	        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser
	        return utils_1.Utils.getScrollLeft(this.eBodyViewport, this.enableRtl);
	    };
	    GridPanel.prototype.setBodyViewportScrollLeft = function (value) {
	        if (this.forPrint) {
	            return;
	        }
	        // we defer to a util, as how you calculated scrollLeft when doing RTL depends on the browser
	        utils_1.Utils.setScrollLeft(this.eBodyViewport, value, this.enableRtl);
	    };
	    GridPanel.prototype.horizontallyScrollHeaderCenterAndFloatingCenter = function () {
	        var scrollLeft = this.getBodyViewportScrollLeft();
	        var offset = this.enableRtl ? scrollLeft : -scrollLeft;
	        this.eHeaderContainer.style.left = offset + 'px';
	        this.eFloatingBottomContainer.style.left = offset + 'px';
	        this.eFloatingTopContainer.style.left = offset + 'px';
	    };
	    // we say fake scroll as only one panel (left, right or body) has scrolls,
	    // the other panels mimic the scroll by getting it's top position updated.
	    GridPanel.prototype.fakeVerticalScroll = function (position) {
	        if (this.enableRtl) {
	            // RTL
	            // if pinning left, then body scroll is faking
	            var pinningLeft = this.columnController.isPinningLeft();
	            if (pinningLeft) {
	                this.setFakeScroll(this.eBodyContainer, position);
	            }
	            // right is always faking
	            this.setFakeScroll(this.ePinnedRightColsContainer, position);
	        }
	        else {
	            // LTR
	            // if pinning right, then body scroll is faking
	            var pinningRight = this.columnController.isPinningRight();
	            if (pinningRight) {
	                this.setFakeScroll(this.eBodyContainer, position);
	            }
	            // left is always faking
	            this.setFakeScroll(this.ePinnedLeftColsContainer, position);
	        }
	        // always scroll fullWidth container, as this is never responsible for a scroll
	        this.setFakeScroll(this.eFullWidthCellContainer, position);
	    };
	    GridPanel.prototype.setFakeScroll = function (eContainer, pixels) {
	        eContainer.style.top = -pixels + 'px';
	        // eContainer.style.transform = `translateY(${-pixels}px)`;
	    };
	    GridPanel.prototype.addScrollEventListener = function (listener) {
	        this.eBodyViewport.addEventListener('scroll', listener);
	    };
	    GridPanel.prototype.removeScrollEventListener = function (listener) {
	        this.eBodyViewport.removeEventListener('scroll', listener);
	    };
	    __decorate([
	        context_1.Autowired('alignedGridsService'),
	        __metadata("design:type", alignedGridsService_1.AlignedGridsService)
	    ], GridPanel.prototype, "alignedGridsService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], GridPanel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], GridPanel.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], GridPanel.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_1.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel_1.PinnedRowModel)
	    ], GridPanel.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], GridPanel.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], GridPanel.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('animationFrameService'),
	        __metadata("design:type", animationFrameService_1.AnimationFrameService)
	    ], GridPanel.prototype, "animationFrameService", void 0);
	    __decorate([
	        context_1.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy_1.PaginationProxy)
	    ], GridPanel.prototype, "paginationProxy", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], GridPanel.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], GridPanel.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "rangeController", void 0);
	    __decorate([
	        context_1.Autowired('dragService'),
	        __metadata("design:type", dragService_1.DragService)
	    ], GridPanel.prototype, "dragService", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], GridPanel.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Optional('clipboardService'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "clipboardService", void 0);
	    __decorate([
	        context_1.Autowired('csvCreator'),
	        __metadata("design:type", csvCreator_1.CsvCreator)
	    ], GridPanel.prototype, "csvCreator", void 0);
	    __decorate([
	        context_1.Autowired('mouseEventService'),
	        __metadata("design:type", mouseEventService_1.MouseEventService)
	    ], GridPanel.prototype, "mouseEventService", void 0);
	    __decorate([
	        context_1.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController_1.FocusedCellController)
	    ], GridPanel.prototype, "focusedCellController", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('scrollVisibleService'),
	        __metadata("design:type", scrollVisibleService_1.ScrollVisibleService)
	    ], GridPanel.prototype, "scrollVisibleService", void 0);
	    __decorate([
	        context_1.Optional('contextMenuFactory'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "contextMenuFactory", void 0);
	    __decorate([
	        context_1.Autowired('frameworkFactory'),
	        __metadata("design:type", Object)
	    ], GridPanel.prototype, "frameworkFactory", void 0);
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], GridPanel.prototype, "agWire", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridPanel.prototype, "destroy", null);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridPanel.prototype, "init", null);
	    GridPanel = __decorate([
	        context_1.Bean('gridPanel')
	    ], GridPanel);
	    return GridPanel;
	}(beanStub_1.BeanStub));
	exports.GridPanel = GridPanel;
	var ScrollType;
	(function (ScrollType) {
	    ScrollType[ScrollType["HORIZONTAL"] = 0] = "HORIZONTAL";
	    ScrollType[ScrollType["VERTICAL"] = 1] = "VERTICAL";
	    ScrollType[ScrollType["DIAGONAL"] = 2] = "DIAGONAL";
	})(ScrollType || (ScrollType = {}));
	function testKeyboardBindingGroups(keyboardBindingGroups, event) {
	    for (var i = 0; i < keyboardBindingGroups.length; i++) {
	        var keyboardBindingGroup = keyboardBindingGroups[i];
	        for (var j = 0; j < keyboardBindingGroup.bindings.length; j++) {
	            var keyboardBinding = keyboardBindingGroup.bindings[j];
	            if (testKeyboardBinding(keyboardBinding, event)) {
	                return {
	                    trappedKeyboardBinding: keyboardBinding,
	                    trappedKeyboardBindingGroup: keyboardBindingGroup
	                };
	            }
	        }
	    }
	    return null;
	}
	function testKeyboardBinding(keyboardBinding, event) {
	    var key = event.which || event.keyCode;
	    return (keyboardBinding.ctlRequired === event.ctrlKey) &&
	        (keyboardBinding.keyCode === key) &&
	        (keyboardBinding.altRequired === event.altKey);
	}


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var BorderLayout = (function () {
	    function BorderLayout(params) {
	        this.centerHeightLastTime = -1;
	        this.centerWidthLastTime = -1;
	        this.centerLeftMarginLastTime = -1;
	        this.visibleLastTime = false;
	        this.sizeChangeListeners = [];
	        this.isLayoutPanel = true;
	        this.fullHeight = !params.north && !params.south;
	        var template;
	        if (params.dontFill) {
	            template = BorderLayout.TEMPLATE_DONT_FILL;
	            this.horizontalLayoutActive = false;
	            this.verticalLayoutActive = false;
	        }
	        else if (params.fillHorizontalOnly) {
	            template = BorderLayout.TEMPLATE_DONT_FILL;
	            this.horizontalLayoutActive = true;
	            this.verticalLayoutActive = false;
	        }
	        else {
	            if (this.fullHeight) {
	                template = BorderLayout.TEMPLATE_FULL_HEIGHT;
	            }
	            else {
	                template = BorderLayout.TEMPLATE_NORMAL;
	            }
	            this.horizontalLayoutActive = true;
	            this.verticalLayoutActive = true;
	        }
	        this.eGui = utils_1.Utils.loadTemplate(template);
	        this.id = 'borderLayout';
	        if (params.name) {
	            this.id += '_' + params.name;
	        }
	        this.eGui.setAttribute('id', this.id);
	        this.childPanels = [];
	        if (params) {
	            this.setupPanels(params);
	        }
	        this.overlays = params.overlays;
	        this.setupOverlays();
	    }
	    BorderLayout.prototype.addSizeChangeListener = function (listener) {
	        this.sizeChangeListeners.push(listener);
	    };
	    BorderLayout.prototype.fireSizeChanged = function () {
	        this.sizeChangeListeners.forEach(function (listener) {
	            listener();
	        });
	    };
	    // this logic is also in Component.ts - the plan is sometime in the future,
	    // this layout panel may (or may not) extend the Component class, and somehow
	    // act as a component.
	    BorderLayout.prototype.getRefElement = function (refName) {
	        return this.eGui.querySelector('[ref="' + refName + '"]');
	    };
	    BorderLayout.prototype.setupPanels = function (params) {
	        this.eNorthWrapper = this.getRefElement('north');
	        this.eSouthWrapper = this.getRefElement('south');
	        this.eEastWrapper = this.getRefElement('east');
	        this.eWestWrapper = this.getRefElement('west');
	        this.eCenterWrapper = this.getRefElement('center');
	        this.eOverlayWrapper = this.getRefElement('overlay');
	        this.eCenterRow = this.getRefElement('centerRow');
	        this.eNorthChildLayout = this.setupPanel(params.north, this.eNorthWrapper);
	        this.eSouthChildLayout = this.setupPanel(params.south, this.eSouthWrapper);
	        this.eEastChildLayout = this.setupPanel(params.east, this.eEastWrapper);
	        this.eWestChildLayout = this.setupPanel(params.west, this.eWestWrapper);
	        this.eCenterChildLayout = this.setupPanel(params.center, this.eCenterWrapper);
	    };
	    BorderLayout.prototype.setupPanel = function (content, ePanel) {
	        if (!ePanel) {
	            return;
	        }
	        if (content) {
	            if (content.isLayoutPanel) {
	                this.childPanels.push(content);
	                ePanel.appendChild(content.getGui());
	                return content;
	            }
	            else {
	                ePanel.appendChild(content);
	                return null;
	            }
	        }
	        else {
	            ePanel.parentNode.removeChild(ePanel);
	            return null;
	        }
	    };
	    BorderLayout.prototype.getGui = function () {
	        return this.eGui;
	    };
	    // returns true if any item changed size, otherwise returns false
	    BorderLayout.prototype.doLayout = function () {
	        var _this = this;
	        var isVisible = utils_1.Utils.isVisible(this.eGui);
	        if (!isVisible) {
	            this.visibleLastTime = false;
	            return false;
	        }
	        var atLeastOneChanged = false;
	        if (this.visibleLastTime !== isVisible) {
	            atLeastOneChanged = true;
	        }
	        this.visibleLastTime = true;
	        var childLayouts = [this.eNorthChildLayout, this.eSouthChildLayout, this.eEastChildLayout, this.eWestChildLayout];
	        childLayouts.forEach(function (childLayout) {
	            var childChangedSize = _this.layoutChild(childLayout);
	            if (childChangedSize) {
	                atLeastOneChanged = true;
	            }
	        });
	        if (this.horizontalLayoutActive) {
	            var ourWidthChanged = this.layoutWidth();
	            if (ourWidthChanged) {
	                atLeastOneChanged = true;
	            }
	        }
	        if (this.verticalLayoutActive) {
	            var ourHeightChanged = this.layoutHeight();
	            if (ourHeightChanged) {
	                atLeastOneChanged = true;
	            }
	        }
	        var centerChanged = this.layoutChild(this.eCenterChildLayout);
	        if (centerChanged) {
	            atLeastOneChanged = true;
	        }
	        if (atLeastOneChanged) {
	            this.fireSizeChanged();
	        }
	        return atLeastOneChanged;
	    };
	    BorderLayout.prototype.layoutChild = function (childPanel) {
	        if (childPanel) {
	            return childPanel.doLayout();
	        }
	        else {
	            return false;
	        }
	    };
	    BorderLayout.prototype.layoutHeight = function () {
	        if (this.fullHeight) {
	            return this.layoutHeightFullHeight();
	        }
	        else {
	            return this.layoutHeightNormal();
	        }
	    };
	    // full height never changes the height, because the center is always 100%,
	    // however we do check for change, to inform the listeners
	    BorderLayout.prototype.layoutHeightFullHeight = function () {
	        var centerHeight = utils_1.Utils.offsetHeight(this.eGui);
	        if (centerHeight < 0) {
	            centerHeight = 0;
	        }
	        if (this.centerHeightLastTime !== centerHeight) {
	            this.centerHeightLastTime = centerHeight;
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    BorderLayout.prototype.layoutHeightNormal = function () {
	        var totalHeight = utils_1.Utils.offsetHeight(this.eGui);
	        var northHeight = utils_1.Utils.offsetHeight(this.eNorthWrapper);
	        var southHeight = utils_1.Utils.offsetHeight(this.eSouthWrapper);
	        var centerHeight = totalHeight - northHeight - southHeight;
	        if (centerHeight < 0) {
	            centerHeight = 0;
	        }
	        if (this.centerHeightLastTime !== centerHeight) {
	            this.eCenterRow.style.height = centerHeight + 'px';
	            this.centerHeightLastTime = centerHeight;
	            return true; // return true because there was a change
	        }
	        else {
	            return false;
	        }
	    };
	    BorderLayout.prototype.getCentreHeight = function () {
	        return this.centerHeightLastTime;
	    };
	    BorderLayout.prototype.layoutWidth = function () {
	        var totalWidth = utils_1.Utils.offsetWidth(this.eGui);
	        var eastWidth = utils_1.Utils.offsetWidth(this.eEastWrapper);
	        var westWidth = utils_1.Utils.offsetWidth(this.eWestWrapper);
	        var centerWidth = totalWidth - eastWidth - westWidth;
	        if (centerWidth < 0) {
	            centerWidth = 0;
	        }
	        var atLeastOneChanged = false;
	        if (this.centerLeftMarginLastTime !== westWidth) {
	            this.centerLeftMarginLastTime = westWidth;
	            this.eCenterWrapper.style.marginLeft = westWidth + 'px';
	            atLeastOneChanged = true;
	        }
	        if (this.centerWidthLastTime !== centerWidth) {
	            this.centerWidthLastTime = centerWidth;
	            this.eCenterWrapper.style.width = centerWidth + 'px';
	            atLeastOneChanged = true;
	        }
	        return atLeastOneChanged;
	    };
	    BorderLayout.prototype.setEastVisible = function (visible) {
	        if (this.eEastWrapper) {
	            this.eEastWrapper.style.display = visible ? '' : 'none';
	        }
	        this.doLayout();
	    };
	    BorderLayout.prototype.setupOverlays = function () {
	        // if no overlays, just remove the panel
	        if (!this.overlays) {
	            this.eOverlayWrapper.parentNode.removeChild(this.eOverlayWrapper);
	            return;
	        }
	        this.hideOverlay();
	    };
	    BorderLayout.prototype.hideOverlay = function () {
	        utils_1.Utils.removeAllChildren(this.eOverlayWrapper);
	        this.eOverlayWrapper.style.display = 'none';
	    };
	    BorderLayout.prototype.showOverlay = function (key) {
	        var overlay = this.overlays ? this.overlays[key] : null;
	        if (overlay) {
	            utils_1.Utils.removeAllChildren(this.eOverlayWrapper);
	            this.eOverlayWrapper.style.display = '';
	            this.eOverlayWrapper.appendChild(overlay);
	        }
	        else {
	            console.log('ag-Grid: unknown overlay');
	            this.hideOverlay();
	        }
	    };
	    // this is used if there user has not specified any north or south parts
	    BorderLayout.TEMPLATE_FULL_HEIGHT = '<div class="ag-bl ag-bl-full-height">' +
	        '  <div class="ag-bl-west ag-bl-full-height-west" ref="west"></div>' +
	        '  <div class="ag-bl-east ag-bl-full-height-east" ref="east"></div>' +
	        '  <div class="ag-bl-center ag-bl-full-height-center" ref="center"></div>' +
	        '  <div class="ag-bl-overlay" ref="overlay"></div>' +
	        '</div>';
	    BorderLayout.TEMPLATE_NORMAL = '<div class="ag-bl ag-bl-normal">' +
	        '  <div ref="north"></div>' +
	        '  <div class="ag-bl-center-row ag-bl-normal-center-row" ref="centerRow">' +
	        '    <div class="ag-bl-west ag-bl-normal-west" ref="west"></div>' +
	        '    <div class="ag-bl-east ag-bl-normal-east" ref="east"></div>' +
	        '    <div class="ag-bl-center ag-bl-normal-center" ref="center"></div>' +
	        '  </div>' +
	        '  <div ref="south"></div>' +
	        '  <div class="ag-bl-overlay" ref="overlay"></div>' +
	        '</div>';
	    BorderLayout.TEMPLATE_DONT_FILL = '<div class="ag-bl ag-bl-dont-fill">' +
	        '  <div ref="north"></div>' +
	        '  <div ref="centerRow" class="ag-bl-center-row ag-bl-dont-fill-center-row">' +
	        '    <div ref="west" class="ag-bl-west ag-bl-dont-fill-west"></div>' +
	        '    <div ref="east" class="ag-bl-east ag-bl-dont-fill-east"></div>' +
	        '    <div ref="center" class="ag-bl-center ag-bl-dont-fill-center"></div>' +
	        '  </div>' +
	        '  <div ref="south"></div>' +
	        '  <div class="ag-bl-overlay" ref="overlay"></div>' +
	        '</div>';
	    return BorderLayout;
	}());
	exports.BorderLayout = BorderLayout;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var logger_1 = __webpack_require__(6);
	var utils_1 = __webpack_require__(8);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var columnController_1 = __webpack_require__(15);
	var gridApi_1 = __webpack_require__(12);
	/** Adds drag listening onto an element. In ag-Grid this is used twice, first is resizing columns,
	 * second is moving the columns and column groups around (ie the 'drag' part of Drag and Drop. */
	var DragService = (function () {
	    function DragService() {
	        this.onMouseUpListener = this.onMouseUp.bind(this);
	        this.onMouseMoveListener = this.onMouseMove.bind(this);
	        this.onTouchEndListener = this.onTouchUp.bind(this);
	        this.onTouchMoveListener = this.onTouchMove.bind(this);
	        this.dragEndFunctions = [];
	        this.dragSources = [];
	    }
	    DragService.prototype.init = function () {
	        this.logger = this.loggerFactory.create('DragService');
	    };
	    DragService.prototype.destroy = function () {
	        this.dragSources.forEach(this.removeListener.bind(this));
	        this.dragSources.length = 0;
	    };
	    DragService.prototype.removeListener = function (dragSourceAndListener) {
	        var element = dragSourceAndListener.dragSource.eElement;
	        var mouseDownListener = dragSourceAndListener.mouseDownListener;
	        element.removeEventListener('mousedown', mouseDownListener);
	        // remove touch listener only if it exists
	        if (dragSourceAndListener.touchEnabled) {
	            var touchStartListener = dragSourceAndListener.touchStartListener;
	            element.removeEventListener('touchstart', touchStartListener, { passive: true });
	        }
	    };
	    DragService.prototype.removeDragSource = function (params) {
	        var dragSourceAndListener = utils_1.Utils.find(this.dragSources, function (item) { return item.dragSource === params; });
	        if (!dragSourceAndListener) {
	            return;
	        }
	        this.removeListener(dragSourceAndListener);
	        utils_1.Utils.removeFromArray(this.dragSources, dragSourceAndListener);
	    };
	    DragService.prototype.setNoSelectToBody = function (noSelect) {
	        var usrDocument = this.gridOptionsWrapper.getDocument();
	        var eBody = usrDocument.querySelector('body');
	        if (utils_1.Utils.exists(eBody)) {
	            utils_1.Utils.addOrRemoveCssClass(eBody, 'ag-body-no-select', noSelect);
	        }
	    };
	    DragService.prototype.addDragSource = function (params, includeTouch) {
	        if (includeTouch === void 0) { includeTouch = false; }
	        var mouseListener = this.onMouseDown.bind(this, params);
	        params.eElement.addEventListener('mousedown', mouseListener);
	        var touchListener = null;
	        var suppressTouch = this.gridOptionsWrapper.isSuppressTouch();
	        var reallyIncludeTouch = includeTouch && !suppressTouch;
	        if (reallyIncludeTouch) {
	            touchListener = this.onTouchStart.bind(this, params);
	            params.eElement.addEventListener('touchstart', touchListener, { passive: false });
	        }
	        this.dragSources.push({
	            dragSource: params,
	            mouseDownListener: mouseListener,
	            touchStartListener: touchListener,
	            touchEnabled: includeTouch
	        });
	    };
	    // gets called whenever mouse down on any drag source
	    DragService.prototype.onTouchStart = function (params, touchEvent) {
	        var _this = this;
	        this.currentDragParams = params;
	        this.dragging = false;
	        var touch = touchEvent.touches[0];
	        this.touchLastTime = touch;
	        this.touchStart = touch;
	        touchEvent.preventDefault();
	        // we temporally add these listeners, for the duration of the drag, they
	        // are removed in touch end handling.
	        params.eElement.addEventListener('touchmove', this.onTouchMoveListener, { passive: true });
	        params.eElement.addEventListener('touchend', this.onTouchEndListener, { passive: true });
	        params.eElement.addEventListener('touchcancel', this.onTouchEndListener, { passive: true });
	        this.dragEndFunctions.push(function () {
	            params.eElement.removeEventListener('touchmove', _this.onTouchMoveListener, { passive: true });
	            params.eElement.removeEventListener('touchend', _this.onTouchEndListener, { passive: true });
	            params.eElement.removeEventListener('touchcancel', _this.onTouchEndListener, { passive: true });
	        });
	        // see if we want to start dragging straight away
	        if (params.dragStartPixels === 0) {
	            this.onCommonMove(touch, this.touchStart);
	        }
	    };
	    // gets called whenever mouse down on any drag source
	    DragService.prototype.onMouseDown = function (params, mouseEvent) {
	        var _this = this;
	        // only interested in left button clicks
	        if (mouseEvent.button !== 0) {
	            return;
	        }
	        this.currentDragParams = params;
	        this.dragging = false;
	        this.mouseEventLastTime = mouseEvent;
	        this.mouseStartEvent = mouseEvent;
	        var usrDocument = this.gridOptionsWrapper.getDocument();
	        // we temporally add these listeners, for the duration of the drag, they
	        // are removed in mouseup handling.
	        usrDocument.addEventListener('mousemove', this.onMouseMoveListener);
	        usrDocument.addEventListener('mouseup', this.onMouseUpListener);
	        this.dragEndFunctions.push(function () {
	            usrDocument.removeEventListener('mousemove', _this.onMouseMoveListener);
	            usrDocument.removeEventListener('mouseup', _this.onMouseUpListener);
	        });
	        // see if we want to start dragging straight away
	        if (params.dragStartPixels === 0) {
	            this.onMouseMove(mouseEvent);
	        }
	    };
	    // returns true if the event is close to the original event by X pixels either vertically or horizontally.
	    // we only start dragging after X pixels so this allows us to know if we should start dragging yet.
	    DragService.prototype.isEventNearStartEvent = function (currentEvent, startEvent) {
	        // by default, we wait 4 pixels before starting the drag
	        var requiredPixelDiff = utils_1.Utils.exists(this.currentDragParams.dragStartPixels) ? this.currentDragParams.dragStartPixels : 4;
	        return utils_1.Utils.areEventsNear(currentEvent, startEvent, requiredPixelDiff);
	    };
	    DragService.prototype.getFirstActiveTouch = function (touchList) {
	        for (var i = 0; i < touchList.length; i++) {
	            var matches = touchList[i].identifier === this.touchStart.identifier;
	            if (matches) {
	                return touchList[i];
	            }
	        }
	        return null;
	    };
	    DragService.prototype.onCommonMove = function (currentEvent, startEvent) {
	        if (!this.dragging) {
	            // if mouse hasn't travelled from the start position enough, do nothing
	            var toEarlyToDrag = !this.dragging && this.isEventNearStartEvent(currentEvent, startEvent);
	            if (toEarlyToDrag) {
	                return;
	            }
	            else {
	                // alert(`started`);
	                this.dragging = true;
	                var event_1 = {
	                    type: events_1.Events.EVENT_DRAG_STARTED,
	                    api: this.gridApi,
	                    columnApi: this.columnApi
	                };
	                this.eventService.dispatchEvent(event_1);
	                this.currentDragParams.onDragStart(startEvent);
	                this.setNoSelectToBody(true);
	            }
	        }
	        this.currentDragParams.onDragging(currentEvent);
	    };
	    DragService.prototype.onTouchMove = function (touchEvent) {
	        var touch = this.getFirstActiveTouch(touchEvent.touches);
	        if (!touch) {
	            return;
	        }
	        // this.___statusBar.setInfoText(Math.random() + ' onTouchMove preventDefault stopPropagation');
	        // if we don't preview default, then the browser will try and do it's own touch stuff,
	        // like do 'back button' (chrome does this) or scroll the page (eg drag column could  be confused
	        // with scroll page in the app)
	        // touchEvent.preventDefault();
	        this.onCommonMove(touch, this.touchStart);
	    };
	    // only gets called after a mouse down - as this is only added after mouseDown
	    // and is removed when mouseUp happens
	    DragService.prototype.onMouseMove = function (mouseEvent) {
	        this.onCommonMove(mouseEvent, this.mouseStartEvent);
	    };
	    DragService.prototype.onTouchUp = function (touchEvent) {
	        var touch = this.getFirstActiveTouch(touchEvent.targetTouches);
	        // i haven't worked this out yet, but there is no matching touch
	        // when we get the touch up event. to get around this, we swap in
	        // the last touch. this is a hack to 'get it working' while we
	        // figure out what's going on, why we are not getting a touch in
	        // current event.
	        if (!touch) {
	            touch = this.touchLastTime;
	        }
	        // if mouse was left up before we started to move, then this is a tap.
	        // we check this before onUpCommon as onUpCommon resets the dragging
	        // let tap = !this.dragging;
	        // let tapTarget = this.currentDragParams.eElement;
	        this.onUpCommon(touch);
	        // if tap, tell user
	        // console.log(`${Math.random()} tap = ${tap}`);
	        // if (tap) {
	        //     tapTarget.click();
	        // }
	    };
	    DragService.prototype.onMouseUp = function (mouseEvent) {
	        this.onUpCommon(mouseEvent);
	    };
	    DragService.prototype.onUpCommon = function (eventOrTouch) {
	        if (this.dragging) {
	            this.dragging = false;
	            this.currentDragParams.onDragStop(eventOrTouch);
	            var event_2 = {
	                type: events_1.Events.EVENT_DRAG_STOPPED,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_2);
	        }
	        this.setNoSelectToBody(false);
	        this.mouseStartEvent = null;
	        this.mouseEventLastTime = null;
	        this.touchStart = null;
	        this.touchLastTime = null;
	        this.currentDragParams = null;
	        this.dragEndFunctions.forEach(function (func) { return func(); });
	        this.dragEndFunctions.length = 0;
	    };
	    __decorate([
	        context_1.Autowired('loggerFactory'),
	        __metadata("design:type", logger_1.LoggerFactory)
	    ], DragService.prototype, "loggerFactory", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], DragService.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], DragService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], DragService.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], DragService.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], DragService.prototype, "init", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], DragService.prototype, "destroy", null);
	    DragService = __decorate([
	        context_1.Bean('dragService')
	    ], DragService);
	    return DragService;
	}());
	exports.DragService = DragService;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var context_1 = __webpack_require__(7);
	var context_2 = __webpack_require__(7);
	var logger_1 = __webpack_require__(6);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var context_3 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var context_4 = __webpack_require__(7);
	var constants_1 = __webpack_require__(9);
	var columnController_1 = __webpack_require__(15);
	var gridApi_1 = __webpack_require__(12);
	var SelectionController = (function () {
	    function SelectionController() {
	    }
	    SelectionController.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('SelectionController');
	        this.reset();
	        if (this.gridOptionsWrapper.isRowModelDefault()) {
	            this.eventService.addEventListener(events_1.Events.EVENT_ROW_DATA_CHANGED, this.reset.bind(this));
	        }
	        else {
	            this.logger.log('dont know what to do here');
	        }
	    };
	    SelectionController.prototype.init = function () {
	        this.groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
	        this.eventService.addEventListener(events_1.Events.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
	    };
	    SelectionController.prototype.setLastSelectedNode = function (rowNode) {
	        this.lastSelectedNode = rowNode;
	    };
	    SelectionController.prototype.getLastSelectedNode = function () {
	        return this.lastSelectedNode;
	    };
	    SelectionController.prototype.getSelectedNodes = function () {
	        var selectedNodes = [];
	        utils_1.Utils.iterateObject(this.selectedNodes, function (key, rowNode) {
	            if (rowNode) {
	                selectedNodes.push(rowNode);
	            }
	        });
	        return selectedNodes;
	    };
	    SelectionController.prototype.getSelectedRows = function () {
	        var selectedRows = [];
	        utils_1.Utils.iterateObject(this.selectedNodes, function (key, rowNode) {
	            if (rowNode) {
	                selectedRows.push(rowNode.data);
	            }
	        });
	        return selectedRows;
	    };
	    SelectionController.prototype.removeGroupsFromSelection = function () {
	        var _this = this;
	        utils_1.Utils.iterateObject(this.selectedNodes, function (key, rowNode) {
	            if (rowNode && rowNode.group) {
	                _this.selectedNodes[rowNode.id] = undefined;
	            }
	        });
	    };
	    // should only be called if groupSelectsChildren=true
	    SelectionController.prototype.updateGroupsFromChildrenSelections = function () {
	        if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY) {
	            console.warn('updateGroupsFromChildrenSelections not available when rowModel is not normal');
	        }
	        var inMemoryRowModel = this.rowModel;
	        inMemoryRowModel.getTopLevelNodes().forEach(function (rowNode) {
	            rowNode.depthFirstSearch(function (rowNode) {
	                if (rowNode.group) {
	                    rowNode.calculateSelectedFromChildren();
	                }
	            });
	        });
	    };
	    SelectionController.prototype.getNodeForIdIfSelected = function (id) {
	        return this.selectedNodes[id];
	    };
	    SelectionController.prototype.clearOtherNodes = function (rowNodeToKeepSelected) {
	        var _this = this;
	        var groupsToRefresh = {};
	        var updatedCount = 0;
	        utils_1.Utils.iterateObject(this.selectedNodes, function (key, otherRowNode) {
	            if (otherRowNode && otherRowNode.id !== rowNodeToKeepSelected.id) {
	                var rowNode = _this.selectedNodes[otherRowNode.id];
	                updatedCount += rowNode.setSelectedParams({ newValue: false, clearSelection: false, tailingNodeInSequence: true });
	                if (_this.groupSelectsChildren && otherRowNode.parent) {
	                    groupsToRefresh[otherRowNode.parent.id] = otherRowNode.parent;
	                }
	            }
	        });
	        utils_1.Utils.iterateObject(groupsToRefresh, function (key, group) {
	            group.calculateSelectedFromChildren();
	        });
	        return updatedCount;
	    };
	    SelectionController.prototype.onRowSelected = function (event) {
	        var rowNode = event.node;
	        // we do not store the group rows when the groups select children
	        if (this.groupSelectsChildren && rowNode.group) {
	            return;
	        }
	        if (rowNode.isSelected()) {
	            this.selectedNodes[rowNode.id] = rowNode;
	        }
	        else {
	            this.selectedNodes[rowNode.id] = undefined;
	        }
	    };
	    SelectionController.prototype.syncInRowNode = function (rowNode, oldNode) {
	        this.syncInOldRowNode(rowNode, oldNode);
	        this.syncInNewRowNode(rowNode);
	    };
	    // if the id has changed for the node, then this means the rowNode
	    // is getting used for a different data item, which breaks
	    // our selectedNodes, as the node now is mapped by the old id
	    // which is inconsistent. so to keep the old node as selected,
	    // we swap in the clone (with the old id and old data). this means
	    // the oldNode is effectively a daemon we keep a reference to,
	    // so if client calls api.getSelectedNodes(), it gets the daemon
	    // in the result. when the client un-selects, the reference to the
	    // daemon is removed. the daemon, because it's an oldNode, is not
	    // used by the grid for rendering, it's a copy of what the node used
	    // to be like before the id was changed.
	    SelectionController.prototype.syncInOldRowNode = function (rowNode, oldNode) {
	        var oldNodeHasDifferentId = utils_1.Utils.exists(oldNode) && (rowNode.id !== oldNode.id);
	        if (oldNodeHasDifferentId) {
	            var oldNodeSelected = utils_1.Utils.exists(this.selectedNodes[oldNode.id]);
	            if (oldNodeSelected) {
	                this.selectedNodes[oldNode.id] = oldNode;
	            }
	        }
	    };
	    SelectionController.prototype.syncInNewRowNode = function (rowNode) {
	        if (utils_1.Utils.exists(this.selectedNodes[rowNode.id])) {
	            rowNode.setSelectedInitialValue(true);
	            this.selectedNodes[rowNode.id] = rowNode;
	        }
	        else {
	            rowNode.setSelectedInitialValue(false);
	        }
	    };
	    SelectionController.prototype.reset = function () {
	        this.logger.log('reset');
	        this.selectedNodes = {};
	        this.lastSelectedNode = null;
	    };
	    // returns a list of all nodes at 'best cost' - a feature to be used
	    // with groups / trees. if a group has all it's children selected,
	    // then the group appears in the result, but not the children.
	    // Designed for use with 'children' as the group selection type,
	    // where groups don't actually appear in the selection normally.
	    SelectionController.prototype.getBestCostNodeSelection = function () {
	        if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY) {
	            console.warn('getBestCostNodeSelection is only avilable when using normal row model');
	        }
	        var inMemoryRowModel = this.rowModel;
	        var topLevelNodes = inMemoryRowModel.getTopLevelNodes();
	        if (topLevelNodes === null) {
	            console.warn('selectAll not available doing rowModel=virtual');
	            return;
	        }
	        var result = [];
	        // recursive function, to find the selected nodes
	        function traverse(nodes) {
	            for (var i = 0, l = nodes.length; i < l; i++) {
	                var node = nodes[i];
	                if (node.isSelected()) {
	                    result.push(node);
	                }
	                else {
	                    // if not selected, then if it's a group, and the group
	                    // has children, continue to search for selections
	                    if (node.group && node.children) {
	                        traverse(node.children);
	                    }
	                }
	            }
	        }
	        traverse(topLevelNodes);
	        return result;
	    };
	    SelectionController.prototype.setRowModel = function (rowModel) {
	        this.rowModel = rowModel;
	    };
	    SelectionController.prototype.isEmpty = function () {
	        var count = 0;
	        utils_1.Utils.iterateObject(this.selectedNodes, function (nodeId, rowNode) {
	            if (rowNode) {
	                count++;
	            }
	        });
	        return count === 0;
	    };
	    SelectionController.prototype.deselectAllRowNodes = function (justFiltered) {
	        if (justFiltered === void 0) { justFiltered = false; }
	        var callback = function (rowNode) { return rowNode.selectThisNode(false); };
	        var rowModelInMemory = this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY;
	        if (justFiltered) {
	            if (!rowModelInMemory) {
	                console.error('ag-Grid: selecting just filtered only works with In Memory Row Model');
	                return;
	            }
	            var inMemoryRowModel = this.rowModel;
	            inMemoryRowModel.forEachNodeAfterFilter(callback);
	        }
	        else {
	            utils_1.Utils.iterateObject(this.selectedNodes, function (id, rowNode) {
	                // remember the reference can be to null, as we never 'delete' from the map
	                if (rowNode) {
	                    callback(rowNode);
	                }
	            });
	        }
	        // this clears down the map (whereas above only sets the items in map to 'undefined')
	        this.reset();
	        // the above does not clean up the parent rows if they are selected
	        if (rowModelInMemory && this.groupSelectsChildren) {
	            this.updateGroupsFromChildrenSelections();
	        }
	        var event = {
	            type: events_1.Events.EVENT_SELECTION_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    SelectionController.prototype.selectAllRowNodes = function (justFiltered) {
	        if (justFiltered === void 0) { justFiltered = false; }
	        if (this.rowModel.getType() !== constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY) {
	            throw "selectAll only available with normal row model, ie not " + this.rowModel.getType();
	        }
	        var inMemoryRowModel = this.rowModel;
	        var callback = function (rowNode) { return rowNode.selectThisNode(true); };
	        if (justFiltered) {
	            inMemoryRowModel.forEachNodeAfterFilter(callback);
	        }
	        else {
	            inMemoryRowModel.forEachNode(callback);
	        }
	        // the above does not clean up the parent rows if they are selected
	        if (this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY && this.groupSelectsChildren) {
	            this.updateGroupsFromChildrenSelections();
	        }
	        var event = {
	            type: events_1.Events.EVENT_SELECTION_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    // Deprecated method
	    SelectionController.prototype.selectNode = function (rowNode, tryMulti) {
	        rowNode.setSelectedParams({ newValue: true, clearSelection: !tryMulti });
	    };
	    // Deprecated method
	    SelectionController.prototype.deselectIndex = function (rowIndex) {
	        var node = this.rowModel.getRow(rowIndex);
	        this.deselectNode(node);
	    };
	    // Deprecated method
	    SelectionController.prototype.deselectNode = function (rowNode) {
	        rowNode.setSelectedParams({ newValue: false, clearSelection: false });
	    };
	    // Deprecated method
	    SelectionController.prototype.selectIndex = function (index, tryMulti) {
	        var node = this.rowModel.getRow(index);
	        this.selectNode(node, tryMulti);
	    };
	    __decorate([
	        context_3.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], SelectionController.prototype, "eventService", void 0);
	    __decorate([
	        context_3.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], SelectionController.prototype, "rowModel", void 0);
	    __decorate([
	        context_3.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], SelectionController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_3.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], SelectionController.prototype, "columnApi", void 0);
	    __decorate([
	        context_3.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], SelectionController.prototype, "gridApi", void 0);
	    __decorate([
	        __param(0, context_2.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], SelectionController.prototype, "setBeans", null);
	    __decorate([
	        context_4.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], SelectionController.prototype, "init", null);
	    SelectionController = __decorate([
	        context_1.Bean('selectionController')
	    ], SelectionController);
	    return SelectionController;
	}());
	exports.SelectionController = SelectionController;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var context_2 = __webpack_require__(7);
	var utils_1 = __webpack_require__(8);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var cellComp_1 = __webpack_require__(29);
	var MouseEventService = (function () {
	    function MouseEventService() {
	        this.gridInstanceId = MouseEventService_1.gridInstanceSequence.next();
	    }
	    MouseEventService_1 = MouseEventService;
	    MouseEventService.prototype.init = function () {
	        this.stampDomElementWithGridInstance();
	    };
	    // we put the instance id onto the main DOM element. this is used for events, when grids are inside grids,
	    // so the grid can work out if the even came from this grid or a grid inside this one. see the ctrl+v logic
	    // for where this is used.
	    MouseEventService.prototype.stampDomElementWithGridInstance = function () {
	        this.eGridDiv[MouseEventService_1.GRID_DOM_KEY] = this.gridInstanceId;
	    };
	    MouseEventService.prototype.getRenderedCellForEvent = function (event) {
	        var sourceElement = utils_1.Utils.getTarget(event);
	        while (sourceElement) {
	            var renderedCell = this.gridOptionsWrapper.getDomData(sourceElement, cellComp_1.CellComp.DOM_DATA_KEY_CELL_COMP);
	            if (renderedCell) {
	                return renderedCell;
	            }
	            sourceElement = sourceElement.parentElement;
	        }
	        return null;
	    };
	    // walks the path of the event, and returns true if this grid is the first one that it finds. if doing
	    // master / detail grids, and a child grid is found, then it returns false. this stops things like copy/paste
	    // getting executed on many grids at the same time.
	    MouseEventService.prototype.isEventFromThisGrid = function (event) {
	        var ePointer = utils_1.Utils.getTarget(event);
	        var eventFromThisGrid = false;
	        var finished = utils_1.Utils.missing(ePointer);
	        // while we have not found a grid, look for one
	        while (!finished) {
	            var instanceId = ePointer[MouseEventService_1.GRID_DOM_KEY];
	            if (utils_1.Utils.exists(instanceId)) {
	                eventFromThisGrid = instanceId === this.gridInstanceId;
	                finished = true;
	            }
	            ePointer = ePointer.parentElement;
	        }
	        return eventFromThisGrid;
	    };
	    MouseEventService.prototype.getGridCellForEvent = function (event) {
	        var cellComp = this.getRenderedCellForEvent(event);
	        return cellComp ? cellComp.getGridCell() : null;
	    };
	    MouseEventService.gridInstanceSequence = new utils_1.NumberSequence();
	    MouseEventService.GRID_DOM_KEY = '__ag_grid_instance';
	    __decorate([
	        context_2.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], MouseEventService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_2.Autowired('eGridDiv'),
	        __metadata("design:type", HTMLElement)
	    ], MouseEventService.prototype, "eGridDiv", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], MouseEventService.prototype, "init", null);
	    MouseEventService = MouseEventService_1 = __decorate([
	        context_1.Bean('mouseEventService')
	    ], MouseEventService);
	    return MouseEventService;
	    var MouseEventService_1;
	}());
	exports.MouseEventService = MouseEventService;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var column_1 = __webpack_require__(17);
	var rowNode_1 = __webpack_require__(30);
	var constants_1 = __webpack_require__(9);
	var events_1 = __webpack_require__(11);
	var gridCell_1 = __webpack_require__(33);
	var component_1 = __webpack_require__(35);
	var checkboxSelectionComponent_1 = __webpack_require__(37);
	var CellComp = (function (_super) {
	    __extends(CellComp, _super);
	    function CellComp(scope, beans, column, rowNode, rowComp) {
	        var _this = _super.call(this) || this;
	        _this.scope = scope;
	        _this.beans = beans;
	        _this.column = column;
	        _this.rowNode = rowNode;
	        _this.rowComp = rowComp;
	        _this.createGridCellVo();
	        _this.rangeSelectionEnabled = beans.enterprise && beans.gridOptionsWrapper.isEnableRangeSelection();
	        _this.cellFocused = _this.beans.focusedCellController.isCellFocused(_this.gridCell);
	        _this.firstRightPinned = _this.column.isFirstRightPinned();
	        _this.lastLeftPinned = _this.column.isLastLeftPinned();
	        if (_this.rangeSelectionEnabled) {
	            _this.rangeCount = _this.beans.rangeController.getCellRangeCount(_this.gridCell);
	        }
	        _this.value = _this.getValue();
	        _this.setUsingWrapper();
	        _this.chooseCellRenderer();
	        _this.setupColSpan();
	        return _this;
	    }
	    CellComp.prototype.getCreateTemplate = function () {
	        var templateParts = [];
	        var col = this.column;
	        var width = this.getCellWidth();
	        var left = col.getLeft();
	        var valueToRender = this.getInitialValueToRender();
	        var tooltip = this.getToolTip();
	        var wrapperStartTemplate;
	        var wrapperEndTemplate;
	        var stylesFromColDef = this.preProcessStylesFromColDef();
	        var cssClasses = this.getInitialCssClasses();
	        if (this.usingWrapper) {
	            wrapperStartTemplate = '<span ref="eCellWrapper" class="ag-cell-wrapper"><span ref="eCellValue" class="ag-cell-value">';
	            wrapperEndTemplate = '</span></span>';
	        }
	        // hey, this looks like React!!!
	        templateParts.push("<div");
	        templateParts.push(" tabindex=\"-1\"");
	        templateParts.push(" role=\"gridcell\"");
	        templateParts.push(" comp-id=\"" + this.getCompId() + "\" ");
	        templateParts.push(" col-id=\"" + col.getId() + "\"");
	        templateParts.push(" class=\"" + cssClasses.join(' ') + "\"");
	        templateParts.push(tooltip ? " title=\"" + tooltip + "\"" : "");
	        templateParts.push(" style=\"width: " + width + "px; left: " + left + "px; " + stylesFromColDef + "\" >");
	        templateParts.push(wrapperStartTemplate);
	        templateParts.push(valueToRender);
	        templateParts.push(wrapperEndTemplate);
	        templateParts.push("</div>");
	        return templateParts.join('');
	    };
	    CellComp.prototype.afterAttached = function () {
	        var querySelector = "[comp-id=\"" + this.getCompId() + "\"]";
	        var eGui = this.eParentRow.querySelector(querySelector);
	        this.setHtmlElementNoHydrate(eGui);
	        // all of these have dependencies on the eGui, so only do them after eGui is set
	        this.addDomData();
	        this.addSelectionCheckbox();
	        this.attachCellRenderer();
	        this.angular1Compile();
	        this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_CELL_FOCUSED, this.onCellFocused.bind(this));
	        this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_FLASH_CELLS, this.onFlashCells.bind(this));
	        this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_CELL_CHANGED, this.onCellChanged.bind(this));
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_WIDTH_CHANGED, this.onWidthChanged.bind(this));
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_FIRST_RIGHT_PINNED_CHANGED, this.onFirstRightPinnedChanged.bind(this));
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_LAST_LEFT_PINNED_CHANGED, this.onLastLeftPinnedChanged.bind(this));
	        // if not doing enterprise, then range selection service would be missing
	        // so need to check before trying to use it
	        if (this.rangeSelectionEnabled) {
	            this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));
	        }
	    };
	    CellComp.prototype.onColumnHover = function () {
	        var isHovered = this.beans.columnHoverService.isHovered(this.column);
	        utils_1._.addOrRemoveCssClass(this.getHtmlElement(), 'ag-column-hover', isHovered);
	    };
	    CellComp.prototype.onCellChanged = function (event) {
	        var eventImpactsThisCell = event.column === this.column;
	        if (eventImpactsThisCell) {
	            this.refreshCell({});
	        }
	    };
	    CellComp.prototype.getCellLeft = function () {
	        var mostLeftCol;
	        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
	            mostLeftCol = this.colsSpanning[this.colsSpanning.length - 1];
	        }
	        else {
	            mostLeftCol = this.column;
	        }
	        return mostLeftCol.getLeft();
	    };
	    CellComp.prototype.getCellWidth = function () {
	        if (this.colsSpanning) {
	            var result_1 = 0;
	            this.colsSpanning.forEach(function (col) { return result_1 += col.getActualWidth(); });
	            return result_1;
	        }
	        else {
	            return this.column.getActualWidth();
	        }
	    };
	    CellComp.prototype.onFlashCells = function (event) {
	        var cellId = this.gridCell.createId();
	        var shouldFlash = event.cells[cellId];
	        if (shouldFlash) {
	            this.animateCell('highlight');
	        }
	    };
	    CellComp.prototype.setupColSpan = function () {
	        // if no col span is active, then we don't set it up, as it would be wasteful of CPU
	        if (utils_1._.missing(this.column.getColDef().colSpan)) {
	            return;
	        }
	        // because we are col spanning, a reorder of the cols can change what cols we are spanning over
	        this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayColumnsChanged.bind(this));
	        // because we are spanning over multiple cols, we check for width any time any cols width changes.
	        // this is expensive - really we should be explicitly checking only the cols we are spanning over
	        // instead of every col, however it would be tricky code to track the cols we are spanning over, so
	        // because hardly anyone will be using colSpan, am favoring this easier way for more maintainable code.
	        this.addDestroyableEventListener(this.beans.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onWidthChanged.bind(this));
	        this.colsSpanning = this.getColSpanningList();
	    };
	    CellComp.prototype.getColSpanningList = function () {
	        var colSpan = this.column.getColSpan(this.rowNode);
	        var colsSpanning = [];
	        // if just one col, the col span is just the column we are in
	        if (colSpan === 1) {
	            colsSpanning.push(this.column);
	        }
	        else {
	            var pointer = this.column;
	            var pinned = this.column.getPinned();
	            for (var i = 0; i < colSpan; i++) {
	                colsSpanning.push(pointer);
	                pointer = this.beans.columnController.getDisplayedColAfter(pointer);
	                if (utils_1._.missing(pointer)) {
	                    break;
	                }
	                // we do not allow col spanning to span outside of pinned areas
	                if (pinned !== pointer.getPinned()) {
	                    break;
	                }
	            }
	        }
	        return colsSpanning;
	    };
	    CellComp.prototype.onDisplayColumnsChanged = function () {
	        var colsSpanning = this.getColSpanningList();
	        if (!utils_1._.compareArrays(this.colsSpanning, colsSpanning)) {
	            this.colsSpanning = colsSpanning;
	            this.onWidthChanged();
	            this.onLeftChanged(); // left changes when doing RTL
	        }
	    };
	    CellComp.prototype.getInitialCssClasses = function () {
	        var cssClasses = ["ag-cell", "ag-cell-not-inline-editing"];
	        cssClasses.push(this.cellFocused ? 'ag-cell-focus' : 'ag-cell-no-focus');
	        if (this.firstRightPinned) {
	            cssClasses.push('ag-cell-first-right-pinned');
	        }
	        if (this.lastLeftPinned) {
	            cssClasses.push('ag-cell-last-left-pinned');
	        }
	        if (this.beans.columnHoverService.isHovered(this.column)) {
	            cssClasses.push('ag-column-hover');
	        }
	        utils_1._.pushAll(cssClasses, this.preProcessClassesFromColDef());
	        utils_1._.pushAll(cssClasses, this.preProcessCellClassRules());
	        utils_1._.pushAll(cssClasses, this.getRangeClasses());
	        // if using the wrapper, this class goes on the wrapper instead
	        if (!this.usingWrapper) {
	            cssClasses.push('ag-cell-value');
	        }
	        return cssClasses;
	    };
	    CellComp.prototype.getInitialValueToRender = function () {
	        // if using a cellRenderer, then render the html from the cell renderer if it exists
	        if (this.usingCellRenderer) {
	            if (typeof this.cellRendererGui === 'string') {
	                return this.cellRendererGui;
	            }
	            else {
	                return '';
	            }
	        }
	        var colDef = this.column.getColDef();
	        if (colDef.template) {
	            // template is really only used for angular 1 - as people using ng1 are used to providing templates with
	            // bindings in it. in ng2, people will hopefully want to provide components, not templates.
	            return colDef.template;
	        }
	        else if (colDef.templateUrl) {
	            // likewise for templateUrl - it's for ng1 really - when we move away from ng1, we can take these out.
	            // niall was pro angular 1 when writing template and templateUrl, if writing from scratch now, would
	            // not do these, but would follow a pattern that was friendly towards components, not templates.
	            var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));
	            if (template) {
	                return template;
	            }
	            else {
	                return '';
	            }
	        }
	        else {
	            var valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, null, this.value);
	            var valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;
	            return valueFormattedExits ? valueFormatted : this.value;
	        }
	    };
	    CellComp.prototype.getRenderedRow = function () {
	        return this.rowComp;
	    };
	    CellComp.prototype.isSuppressNavigable = function () {
	        return this.column.isSuppressNavigable(this.rowNode);
	    };
	    // + stop editing {forceRefresh: true, suppressFlash: true}
	    // + event cellChanged {}
	    // + cellRenderer.params.refresh() {} -> method passes 'as is' to the cellRenderer, so params could be anything
	    // + rowComp: event dataChanged {animate: update, newData: !update}
	    // + rowComp: api refreshCells() {animate: true/false}
	    // + rowRenderer: api softRefreshView() {}
	    CellComp.prototype.refreshCell = function (params) {
	        if (this.editingCell) {
	            return;
	        }
	        var newData = params && params.newData;
	        var suppressFlash = params && params.suppressFlash;
	        var volatile = params && params.volatile;
	        var forceRefresh = params && params.forceRefresh;
	        // if only refreshing volatile cells, then skip the refresh if we are not volatile
	        if (volatile && !this.isVolatile()) {
	            return;
	        }
	        var oldValue = this.value;
	        this.value = this.getValue();
	        // for simple values only (not pojo's), see if the value is the same, and if it is, skip the refresh.
	        // when never allow skipping after an edit, as after editing, we need to put the GUI back to the way
	        // if was before the edit.
	        var skipRefresh = !forceRefresh && this.valuesAreEqual(oldValue, this.value);
	        if (skipRefresh) {
	            return;
	        }
	        var cellRendererRefreshed;
	        // if it's 'new data', then we don't refresh the cellRenderer, even if refresh method is available.
	        // this is because if the whole data is new (ie we are showing stock price 'BBA' now and not 'SSD')
	        // then we are not showing a movement in the stock price, rather we are showing different stock.
	        if (newData || suppressFlash) {
	            cellRendererRefreshed = false;
	        }
	        else {
	            cellRendererRefreshed = this.attemptCellRendererRefresh();
	        }
	        // we do the replace if not doing refresh, or if refresh was unsuccessful.
	        // the refresh can be unsuccessful if we are using a framework (eg ng2 or react) and the framework
	        // wrapper has the refresh method, but the underlying component doesn't
	        if (!cellRendererRefreshed) {
	            this.replaceContentsAfterRefresh();
	        }
	        if (!suppressFlash) {
	            this.flashCell();
	        }
	        // need to check rules. note, we ignore colDef classes and styles, these are assumed to be static
	        this.postProcessStylesFromColDef();
	        this.postProcessClassesFromColDef();
	        this.postProcessCellClassRules();
	    };
	    CellComp.prototype.flashCell = function () {
	        if (this.beans.gridOptionsWrapper.isEnableCellChangeFlash() || this.column.getColDef().enableCellChangeFlash) {
	            this.animateCell('data-changed');
	        }
	    };
	    CellComp.prototype.animateCell = function (cssName) {
	        var fullName = 'ag-cell-' + cssName;
	        var animationFullName = 'ag-cell-' + cssName + '-animation';
	        var element = this.getHtmlElement();
	        // we want to highlight the cells, without any animation
	        utils_1._.addCssClass(element, fullName);
	        utils_1._.removeCssClass(element, animationFullName);
	        // then once that is applied, we remove the highlight with animation
	        setTimeout(function () {
	            utils_1._.removeCssClass(element, fullName);
	            utils_1._.addCssClass(element, animationFullName);
	            setTimeout(function () {
	                // and then to leave things as we got them, we remove the animation
	                utils_1._.removeCssClass(element, animationFullName);
	            }, 1000);
	        }, 500);
	    };
	    CellComp.prototype.replaceContentsAfterRefresh = function () {
	        // otherwise we rip out the cell and replace it
	        utils_1._.removeAllChildren(this.eParentOfValue);
	        // remove old renderer component if it exists
	        if (this.cellRenderer && this.cellRenderer.destroy) {
	            this.cellRenderer.destroy();
	        }
	        this.cellRenderer = null;
	        this.cellRendererGui = null;
	        // populate
	        this.putDataIntoCellAfterRefresh();
	        this.angular1Compile();
	    };
	    CellComp.prototype.angular1Compile = function () {
	        // if angular compiling, then need to also compile the cell again (angular compiling sucks, please wait...)
	        if (this.beans.gridOptionsWrapper.isAngularCompileRows()) {
	            var eGui = this.getGui();
	            this.beans.$compile(eGui)(this.scope);
	        }
	    };
	    CellComp.prototype.postProcessStylesFromColDef = function () {
	        var stylesToUse = this.processStylesFromColDef();
	        if (stylesToUse) {
	            utils_1._.addStylesToElement(this.getGui(), stylesToUse);
	        }
	    };
	    CellComp.prototype.preProcessStylesFromColDef = function () {
	        var stylesToUse = this.processStylesFromColDef();
	        return utils_1._.cssStyleObjectToMarkup(stylesToUse);
	    };
	    CellComp.prototype.processStylesFromColDef = function () {
	        var colDef = this.column.getColDef();
	        if (colDef.cellStyle) {
	            var cssToUse = void 0;
	            if (typeof colDef.cellStyle === 'function') {
	                var cellStyleParams = {
	                    value: this.value,
	                    data: this.rowNode.data,
	                    node: this.rowNode,
	                    colDef: colDef,
	                    column: this.column,
	                    $scope: this.scope,
	                    context: this.beans.gridOptionsWrapper.getContext(),
	                    api: this.beans.gridOptionsWrapper.getApi()
	                };
	                var cellStyleFunc = colDef.cellStyle;
	                cssToUse = cellStyleFunc(cellStyleParams);
	            }
	            else {
	                cssToUse = colDef.cellStyle;
	            }
	            return cssToUse;
	        }
	    };
	    CellComp.prototype.postProcessClassesFromColDef = function () {
	        var _this = this;
	        this.processClassesFromColDef(function (className) { return utils_1._.addCssClass(_this.getHtmlElement(), className); });
	    };
	    CellComp.prototype.preProcessClassesFromColDef = function () {
	        var res = [];
	        this.processClassesFromColDef(function (className) { return res.push(className); });
	        return res;
	    };
	    CellComp.prototype.processClassesFromColDef = function (onApplicableClass) {
	        this.beans.stylingService.processStaticCellClasses(this.column.getColDef(), {
	            value: this.value,
	            data: this.rowNode.data,
	            node: this.rowNode,
	            colDef: this.column.getColDef(),
	            rowIndex: this.rowNode.rowIndex,
	            $scope: this.scope,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            context: this.beans.gridOptionsWrapper.getContext()
	        }, onApplicableClass);
	    };
	    CellComp.prototype.putDataIntoCellAfterRefresh = function () {
	        // template gets preference, then cellRenderer, then do it ourselves
	        var colDef = this.column.getColDef();
	        if (colDef.template) {
	            // template is really only used for angular 1 - as people using ng1 are used to providing templates with
	            // bindings in it. in ng2, people will hopefully want to provide components, not templates.
	            this.eParentOfValue.innerHTML = colDef.template;
	        }
	        else if (colDef.templateUrl) {
	            // likewise for templateUrl - it's for ng1 really - when we move away from ng1, we can take these out.
	            // niall was pro angular 1 when writing template and templateUrl, if writing from scratch now, would
	            // not do these, but would follow a pattern that was friendly towards components, not templates.
	            var template = this.beans.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));
	            if (template) {
	                this.eParentOfValue.innerHTML = template;
	            }
	            // use cell renderer if it exists
	        }
	        else if (this.usingCellRenderer) {
	            this.attachCellRenderer();
	        }
	        else {
	            var valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, this.value);
	            var valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;
	            var valueToRender = valueFormattedExits ? valueFormatted : this.value;
	            if (valueToRender !== null && valueToRender !== undefined) {
	                this.eParentOfValue.innerText = valueToRender;
	            }
	        }
	        if (colDef.tooltipField) {
	            var data = this.rowNode.data;
	            if (utils_1._.exists(data)) {
	                var tooltip = utils_1._.getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());
	                if (utils_1._.exists(tooltip)) {
	                    this.eParentOfValue.setAttribute('title', tooltip);
	                }
	            }
	        }
	    };
	    CellComp.prototype.attemptCellRendererRefresh = function () {
	        if (utils_1._.missing(this.cellRenderer) || utils_1._.missing(this.cellRenderer.refresh)) {
	            return false;
	        }
	        // if the cell renderer has a refresh method, we call this instead of doing a refresh
	        // note: should pass in params here instead of value?? so that client has formattedValue
	        var valueFormatted = this.formatValue(this.value);
	        var params = this.createCellRendererParams(valueFormatted);
	        var result = this.cellRenderer.refresh(params);
	        // NOTE on undefined: previous version of the cellRenderer.refresh() interface
	        // returned nothing, if the method existed, we assumed it refreshed. so for
	        // backwards compatibility, we assume if method exists and returns nothing,
	        // that it was successful.
	        return result === true || result === undefined;
	    };
	    CellComp.prototype.isVolatile = function () {
	        return this.column.getColDef().volatile;
	    };
	    CellComp.prototype.valuesAreEqual = function (val1, val2) {
	        // if the user provided an equals method, use that, otherwise do simple comparison
	        var colDef = this.column.getColDef();
	        var equalsMethod = colDef ? colDef.equals : null;
	        if (equalsMethod) {
	            return equalsMethod(val1, val2);
	        }
	        else {
	            return val1 === val2;
	        }
	    };
	    CellComp.prototype.getToolTip = function () {
	        var colDef = this.column.getColDef();
	        var data = this.rowNode.data;
	        if (colDef.tooltipField && utils_1._.exists(data)) {
	            return utils_1._.getValueUsingField(data, colDef.tooltipField, this.column.isTooltipFieldContainsDots());
	        }
	        else {
	            return null;
	        }
	    };
	    CellComp.prototype.processCellClassRules = function (onApplicableClass, onNotApplicableClass) {
	        this.beans.stylingService.processCellClassRules(this.column.getColDef(), {
	            value: this.value,
	            data: this.rowNode.data,
	            node: this.rowNode,
	            colDef: this.column.getColDef(),
	            rowIndex: this.gridCell.rowIndex,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            context: this.beans.gridOptionsWrapper.getContext()
	        }, onApplicableClass, onNotApplicableClass);
	    };
	    CellComp.prototype.postProcessCellClassRules = function () {
	        var _this = this;
	        this.processCellClassRules(function (className) {
	            utils_1._.addCssClass(_this.getHtmlElement(), className);
	        }, function (className) {
	            utils_1._.removeCssClass(_this.getHtmlElement(), className);
	        });
	    };
	    CellComp.prototype.preProcessCellClassRules = function () {
	        var res = [];
	        this.processCellClassRules(function (className) {
	            res.push(className);
	        }, function (className) {
	            // not catered for, if creating, no need
	            // to remove class as it was never there
	        });
	        return res;
	    };
	    // a wrapper is used when we are putting a selection checkbox in the cell with the value
	    CellComp.prototype.setUsingWrapper = function () {
	        var colDef = this.column.getColDef();
	        // never allow selection on pinned rows
	        if (this.rowNode.rowPinned) {
	            this.usingWrapper = false;
	        }
	        else if (typeof colDef.checkboxSelection === 'boolean') {
	            this.usingWrapper = colDef.checkboxSelection;
	        }
	        else if (typeof colDef.checkboxSelection === 'function') {
	            // if checkboxSelection is a function, then the checkbox may or may not be present,
	            // so we include the HTML wrapper to cater for either case
	            this.usingWrapper = true;
	        }
	        else {
	            this.usingWrapper = false;
	        }
	    };
	    CellComp.prototype.chooseCellRenderer = function () {
	        // template gets preference, then cellRenderer, then do it ourselves
	        var colDef = this.column.getColDef();
	        // templates are for ng1, ideally we wouldn't have these, they are ng1 support
	        // inside the core which is bad
	        if (colDef.template || colDef.templateUrl) {
	            this.usingCellRenderer = false;
	            return;
	        }
	        var cellRenderer = this.beans.componentResolver.getComponentToUse(colDef, 'cellRenderer');
	        var pinnedRowCellRenderer = this.beans.componentResolver.getComponentToUse(colDef, 'pinnedRowCellRenderer');
	        if (pinnedRowCellRenderer && this.rowNode.rowPinned) {
	            this.cellRendererType = 'pinnedRowCellRenderer';
	            this.usingCellRenderer = true;
	        }
	        else if (cellRenderer) {
	            this.cellRendererType = 'cellRenderer';
	            this.usingCellRenderer = true;
	        }
	        else {
	            this.usingCellRenderer = false;
	        }
	    };
	    CellComp.prototype.createCellRendererInstance = function () {
	        var valueToRender = this.formatValue(this.value);
	        var params = this.createCellRendererParams(valueToRender);
	        this.cellRenderer = this.beans.componentResolver.createAgGridComponent(this.column.getColDef(), params, this.cellRendererType);
	        this.cellRendererGui = this.cellRenderer.getGui();
	        if (this.cellRendererGui === null || this.cellRendererGui === undefined) {
	            console.warn('ag-Grid: cellRenderer should return back a string or a DOM object, but got ' + this.cellRendererGui);
	        }
	    };
	    CellComp.prototype.attachCellRenderer = function () {
	        if (!this.usingCellRenderer) {
	            return;
	        }
	        this.createCellRendererInstance();
	        if (typeof this.cellRendererGui !== 'object') {
	            //First check for simple return types
	            this.eParentOfValue.innerHTML = this.cellRendererGui + '';
	            this.cellRendererGui = this.eParentOfValue.firstChild;
	        }
	        else if (this.cellRendererGui instanceof Node) {
	            //Is this an HTML Element
	            this.eParentOfValue.appendChild(this.cellRendererGui);
	        }
	        else if (this.cellRendererGui.toString) {
	            //Lastly before given up... Does it have a toString
	            this.eParentOfValue.innerHTML = this.cellRendererGui.toString() + '';
	            this.cellRendererGui = this.eParentOfValue.firstChild;
	        }
	    };
	    CellComp.prototype.createCellRendererParams = function (valueFormatted) {
	        var _this = this;
	        var params = {
	            value: this.value,
	            valueFormatted: valueFormatted,
	            getValue: this.getValue.bind(this),
	            setValue: function (value) { _this.beans.valueService.setValue(_this.rowNode, _this.column, value); },
	            formatValue: this.formatValue.bind(this),
	            data: this.rowNode.data,
	            node: this.rowNode,
	            colDef: this.column.getColDef(),
	            column: this.column,
	            $scope: this.scope,
	            rowIndex: this.gridCell.rowIndex,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            context: this.beans.gridOptionsWrapper.getContext(),
	            refreshCell: this.refreshCell.bind(this),
	            // todo danger - in the new world, these are not present :(
	            eGridCell: this.getGui(),
	            eParentOfValue: this.eParentOfValue,
	            // these bits are not documented anywhere, so we could drop them?
	            // it was in the olden days to allow user to register for when rendered
	            // row was removed (the row comp was removed), however now that the user
	            // can provide components for cells, the destroy method gets call when this
	            // happens so no longer need to fire event.
	            addRowCompListener: this.rowComp.addEventListener.bind(this.rowComp),
	            addRenderedRowListener: function (eventType, listener) {
	                console.warn('ag-Grid: since ag-Grid .v11, params.addRenderedRowListener() is now params.addRowCompListener()');
	                _this.rowComp.addEventListener(eventType, listener);
	            }
	        };
	        return params;
	    };
	    CellComp.prototype.formatValue = function (value) {
	        var valueFormatted = this.beans.valueFormatterService.formatValue(this.column, this.rowNode, this.scope, value);
	        var valueFormattedExists = valueFormatted !== null && valueFormatted !== undefined;
	        return valueFormattedExists ? valueFormatted : value;
	    };
	    CellComp.prototype.getValue = function () {
	        // if we don't check this, then the grid will render leaf groups as open even if we are not
	        // allowing the user to open leaf groups. confused? remember for pivot mode we don't allow
	        // opening leaf groups, so we have to force leafGroups to be closed in case the user expanded
	        // them via the API, or user user expanded them in the UI before turning on pivot mode
	        var lockedClosedGroup = this.rowNode.leafGroup && this.beans.columnController.isPivotMode();
	        var isOpenGroup = this.rowNode.group && this.rowNode.expanded && !this.rowNode.footer && !lockedClosedGroup;
	        if (isOpenGroup && this.beans.gridOptionsWrapper.isGroupIncludeFooter()) {
	            // if doing grouping and footers, we don't want to include the agg value
	            // in the header when the group is open
	            return this.beans.valueService.getValue(this.column, this.rowNode, true);
	        }
	        else {
	            return this.beans.valueService.getValue(this.column, this.rowNode);
	        }
	    };
	    CellComp.prototype.onMouseEvent = function (eventName, mouseEvent) {
	        switch (eventName) {
	            case 'click':
	                this.onCellClicked(mouseEvent);
	                break;
	            case 'mousedown':
	                this.onMouseDown();
	                break;
	            case 'dblclick':
	                this.onCellDoubleClicked(mouseEvent);
	                break;
	            case 'contextmenu':
	                this.onContextMenu(mouseEvent);
	                break;
	            case 'mouseout':
	                this.onMouseOut(mouseEvent);
	                break;
	            case 'mouseover':
	                this.onMouseOver(mouseEvent);
	                break;
	        }
	    };
	    CellComp.prototype.createEvent = function (domEvent, eventType) {
	        var event = {
	            node: this.rowNode,
	            data: this.rowNode.data,
	            value: this.value,
	            column: this.column,
	            colDef: this.column.getColDef(),
	            context: this.beans.gridOptionsWrapper.getContext(),
	            api: this.beans.gridApi,
	            columnApi: this.beans.columnApi,
	            rowPinned: this.rowNode.rowPinned,
	            event: domEvent,
	            type: eventType,
	            rowIndex: this.rowNode.rowIndex
	        };
	        // because we are hacking in $scope for angular 1, we have to de-reference
	        if (this.scope) {
	            event.$scope = this.scope;
	        }
	        return event;
	    };
	    CellComp.prototype.onMouseOut = function (mouseEvent) {
	        var cellMouseOutEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_MOUSE_OUT);
	        this.beans.eventService.dispatchEvent(cellMouseOutEvent);
	    };
	    CellComp.prototype.onMouseOver = function (mouseEvent) {
	        var cellMouseOverEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_MOUSE_OVER);
	        this.beans.eventService.dispatchEvent(cellMouseOverEvent);
	    };
	    CellComp.prototype.onContextMenu = function (mouseEvent) {
	        // to allow us to debug in chrome, we ignore the event if ctrl is pressed.
	        // not everyone wants this, so first 'if' below allows to turn this hack off.
	        if (!this.beans.gridOptionsWrapper.isAllowContextMenuWithControlKey()) {
	            // then do the check
	            if (mouseEvent.ctrlKey || mouseEvent.metaKey) {
	                return;
	            }
	        }
	        var colDef = this.column.getColDef();
	        var cellContextMenuEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_CONTEXT_MENU);
	        this.beans.eventService.dispatchEvent(cellContextMenuEvent);
	        if (colDef.onCellContextMenu) {
	            colDef.onCellContextMenu(cellContextMenuEvent);
	        }
	        if (this.beans.contextMenuFactory && !this.beans.gridOptionsWrapper.isSuppressContextMenu()) {
	            this.beans.contextMenuFactory.showMenu(this.rowNode, this.column, this.value, mouseEvent);
	            mouseEvent.preventDefault();
	        }
	    };
	    CellComp.prototype.onCellDoubleClicked = function (mouseEvent) {
	        var colDef = this.column.getColDef();
	        // always dispatch event to eventService
	        var cellDoubleClickedEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_DOUBLE_CLICKED);
	        this.beans.eventService.dispatchEvent(cellDoubleClickedEvent);
	        // check if colDef also wants to handle event
	        if (typeof colDef.onCellDoubleClicked === 'function') {
	            colDef.onCellDoubleClicked(cellDoubleClickedEvent);
	        }
	        var editOnDoubleClick = !this.beans.gridOptionsWrapper.isSingleClickEdit()
	            && !this.beans.gridOptionsWrapper.isSuppressClickEdit();
	        if (editOnDoubleClick) {
	            this.startRowOrCellEdit();
	        }
	    };
	    // called by rowRenderer when user navigates via tab key
	    CellComp.prototype.startRowOrCellEdit = function (keyPress, charPress) {
	        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
	            this.rowComp.startRowEditing(keyPress, charPress, this);
	        }
	        else {
	            this.startEditingIfEnabled(keyPress, charPress, true);
	        }
	    };
	    CellComp.prototype.isCellEditable = function () {
	        return this.column.isCellEditable(this.rowNode);
	    };
	    // either called internally if single cell editing, or called by rowRenderer if row editing
	    CellComp.prototype.startEditingIfEnabled = function (keyPress, charPress, cellStartedEdit) {
	        if (keyPress === void 0) { keyPress = null; }
	        if (charPress === void 0) { charPress = null; }
	        if (cellStartedEdit === void 0) { cellStartedEdit = false; }
	        // don't do it if not editable
	        if (!this.isCellEditable()) {
	            return;
	        }
	        // don't do it if already editing
	        if (this.editingCell) {
	            return;
	        }
	        var cellEditor = this.createCellEditor(keyPress, charPress, cellStartedEdit);
	        if (cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart()) {
	            if (cellEditor.destroy) {
	                cellEditor.destroy();
	            }
	            return false;
	        }
	        if (!cellEditor.getGui) {
	            console.warn("ag-Grid: cellEditor for column " + this.column.getId() + " is missing getGui() method");
	            // no getGui, for React guys, see if they attached a react component directly
	            if (cellEditor.render) {
	                console.warn("ag-Grid: we found 'render' on the component, are you trying to set a React renderer but added it as colDef.cellEditor instead of colDef.cellEditorFmk?");
	            }
	            return false;
	        }
	        this.cellEditor = cellEditor;
	        this.editingCell = true;
	        this.cellEditorInPopup = this.cellEditor.isPopup && this.cellEditor.isPopup();
	        this.setInlineEditingClass();
	        if (this.cellEditorInPopup) {
	            this.addPopupCellEditor();
	        }
	        else {
	            this.addInCellEditor();
	        }
	        if (cellEditor.afterGuiAttached) {
	            cellEditor.afterGuiAttached();
	        }
	        var event = this.createEvent(null, events_1.Events.EVENT_CELL_EDITING_STARTED);
	        this.beans.eventService.dispatchEvent(event);
	        return true;
	    };
	    CellComp.prototype.addInCellEditor = function () {
	        utils_1._.removeAllChildren(this.getHtmlElement());
	        this.getHtmlElement().appendChild(utils_1._.assertHtmlElement(this.cellEditor.getGui()));
	        this.angular1Compile();
	    };
	    CellComp.prototype.addPopupCellEditor = function () {
	        var _this = this;
	        var ePopupGui = this.cellEditor.getGui();
	        this.hideEditorPopup = this.beans.popupService.addAsModalPopup(ePopupGui, true, 
	        // callback for when popup disappears
	        function () {
	            _this.onPopupEditorClosed();
	        });
	        this.beans.popupService.positionPopupOverComponent({
	            column: this.column,
	            rowNode: this.rowNode,
	            type: 'popupCellEditor',
	            eventSource: this.getHtmlElement(),
	            ePopup: utils_1._.assertHtmlElement(ePopupGui),
	            keepWithinBounds: true
	        });
	        this.angular1Compile();
	    };
	    CellComp.prototype.onPopupEditorClosed = function () {
	        // we only call stopEditing if we are editing, as
	        // it's possible the popup called 'stop editing'
	        // before this, eg if 'enter key' was pressed on
	        // the editor.
	        if (this.editingCell) {
	            // note: this only happens when use clicks outside of the grid. if use clicks on another
	            // cell, then the editing will have already stopped on this cell
	            this.stopRowOrCellEdit();
	            // we only focus cell again if this cell is still focused. it is possible
	            // it is not focused if the user cancelled the edit by clicking on another
	            // cell outside of this one
	            if (this.beans.focusedCellController.isCellFocused(this.gridCell)) {
	                this.focusCell(true);
	            }
	        }
	    };
	    // if we are editing inline, then we don't have the padding in the cell (set in the themes)
	    // to allow the text editor full access to the entire cell
	    CellComp.prototype.setInlineEditingClass = function () {
	        var editingInline = this.editingCell && !this.cellEditorInPopup;
	        utils_1._.addOrRemoveCssClass(this.getHtmlElement(), 'ag-cell-inline-editing', editingInline);
	        utils_1._.addOrRemoveCssClass(this.getHtmlElement(), 'ag-cell-not-inline-editing', !editingInline);
	    };
	    CellComp.prototype.createCellEditor = function (keyPress, charPress, cellStartedEdit) {
	        var params = this.createCellEditorParams(keyPress, charPress, cellStartedEdit);
	        var cellEditor = this.beans.cellEditorFactory.createCellEditor(this.column.getCellEditor(), params);
	        return cellEditor;
	    };
	    CellComp.prototype.createCellEditorParams = function (keyPress, charPress, cellStartedEdit) {
	        var params = {
	            value: this.getValue(),
	            keyPress: keyPress,
	            charPress: charPress,
	            column: this.column,
	            rowIndex: this.gridCell.rowIndex,
	            node: this.rowNode,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            cellStartedEdit: cellStartedEdit,
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            context: this.beans.gridOptionsWrapper.getContext(),
	            $scope: this.scope,
	            onKeyDown: this.onKeyDown.bind(this),
	            stopEditing: this.stopEditingAndFocus.bind(this),
	            eGridCell: this.getHtmlElement(),
	            parseValue: this.parseValue.bind(this),
	            formatValue: this.formatValue.bind(this)
	        };
	        var colDef = this.column.getColDef();
	        if (colDef.cellEditorParams) {
	            utils_1._.assign(params, colDef.cellEditorParams);
	        }
	        return params;
	    };
	    // cell editors call this, when they want to stop for reasons other
	    // than what we pick up on. eg selecting from a dropdown ends editing.
	    CellComp.prototype.stopEditingAndFocus = function () {
	        this.stopRowOrCellEdit();
	        this.focusCell(true);
	    };
	    CellComp.prototype.parseValue = function (newValue) {
	        var params = {
	            node: this.rowNode,
	            data: this.rowNode.data,
	            oldValue: this.value,
	            newValue: newValue,
	            colDef: this.column.getColDef(),
	            column: this.column,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            context: this.beans.gridOptionsWrapper.getContext()
	        };
	        var valueParser = this.column.getColDef().valueParser;
	        return utils_1._.exists(valueParser) ? this.beans.expressionService.evaluate(valueParser, params) : newValue;
	    };
	    CellComp.prototype.focusCell = function (forceBrowserFocus) {
	        if (forceBrowserFocus === void 0) { forceBrowserFocus = false; }
	        this.beans.focusedCellController.setFocusedCell(this.gridCell.rowIndex, this.column, this.rowNode.rowPinned, forceBrowserFocus);
	    };
	    CellComp.prototype.setFocusInOnEditor = function () {
	        if (this.editingCell && this.cellEditor && this.cellEditor.focusIn) {
	            this.cellEditor.focusIn();
	        }
	    };
	    CellComp.prototype.isEditing = function () {
	        return this.editingCell;
	    };
	    CellComp.prototype.onKeyDown = function (event) {
	        var key = event.which || event.keyCode;
	        // give user a chance to cancel event processing
	        if (this.doesUserWantToCancelKeyboardEvent(event)) {
	            return;
	        }
	        switch (key) {
	            case constants_1.Constants.KEY_ENTER:
	                this.onEnterKeyDown();
	                break;
	            case constants_1.Constants.KEY_F2:
	                this.onF2KeyDown();
	                break;
	            case constants_1.Constants.KEY_ESCAPE:
	                this.onEscapeKeyDown();
	                break;
	            case constants_1.Constants.KEY_TAB:
	                this.onTabKeyDown(event);
	                break;
	            case constants_1.Constants.KEY_BACKSPACE:
	            case constants_1.Constants.KEY_DELETE:
	                this.onBackspaceOrDeleteKeyPressed(key);
	                break;
	            case constants_1.Constants.KEY_DOWN:
	            case constants_1.Constants.KEY_UP:
	            case constants_1.Constants.KEY_RIGHT:
	            case constants_1.Constants.KEY_LEFT:
	                this.onNavigationKeyPressed(event, key);
	                break;
	        }
	    };
	    CellComp.prototype.doesUserWantToCancelKeyboardEvent = function (event) {
	        var callback = this.column.getColDef().suppressKeyboardEvent;
	        if (utils_1._.missing(callback)) {
	            return false;
	        }
	        else {
	            // if editing is null or undefined, this sets it to false
	            var editing = this.editingCell === true;
	            var params = {
	                event: event,
	                editing: editing,
	                column: this.column,
	                api: this.beans.gridOptionsWrapper.getApi(),
	                node: this.rowNode,
	                colDef: this.column.getColDef(),
	                context: this.beans.gridOptionsWrapper.getContext(),
	                columnApi: this.beans.gridOptionsWrapper.getColumnApi()
	            };
	            return callback(params);
	        }
	    };
	    CellComp.prototype.setFocusOutOnEditor = function () {
	        if (this.editingCell && this.cellEditor && this.cellEditor.focusOut) {
	            this.cellEditor.focusOut();
	        }
	    };
	    CellComp.prototype.onNavigationKeyPressed = function (event, key) {
	        if (this.editingCell) {
	            this.stopRowOrCellEdit();
	        }
	        this.beans.rowRenderer.navigateToNextCell(event, key, this.gridCell.rowIndex, this.column, this.rowNode.rowPinned);
	        // if we don't prevent default, the grid will scroll with the navigation keys
	        event.preventDefault();
	    };
	    CellComp.prototype.onTabKeyDown = function (event) {
	        if (this.beans.gridOptionsWrapper.isSuppressTabbing()) {
	            return;
	        }
	        this.beans.rowRenderer.onTabKeyDown(this, event);
	    };
	    CellComp.prototype.onBackspaceOrDeleteKeyPressed = function (key) {
	        if (!this.editingCell) {
	            this.startRowOrCellEdit(key);
	        }
	    };
	    CellComp.prototype.onEnterKeyDown = function () {
	        if (this.editingCell) {
	            this.stopRowOrCellEdit();
	            this.focusCell(true);
	        }
	        else {
	            this.startRowOrCellEdit(constants_1.Constants.KEY_ENTER);
	        }
	    };
	    CellComp.prototype.onF2KeyDown = function () {
	        if (!this.editingCell) {
	            this.startRowOrCellEdit(constants_1.Constants.KEY_F2);
	        }
	    };
	    CellComp.prototype.onEscapeKeyDown = function () {
	        if (this.editingCell) {
	            this.stopRowOrCellEdit(true);
	            this.focusCell(true);
	        }
	    };
	    CellComp.prototype.onKeyPress = function (event) {
	        // check this, in case focus is on a (for example) a text field inside the cell,
	        // in which cse we should not be listening for these key pressed
	        var eventTarget = utils_1._.getTarget(event);
	        var eventOnChildComponent = eventTarget !== this.getGui();
	        if (eventOnChildComponent) {
	            return;
	        }
	        if (!this.editingCell) {
	            var pressedChar = String.fromCharCode(event.charCode);
	            if (pressedChar === ' ') {
	                this.onSpaceKeyPressed(event);
	            }
	            else {
	                if (utils_1._.isEventFromPrintableCharacter(event)) {
	                    this.startRowOrCellEdit(null, pressedChar);
	                    // if we don't prevent default, then the keypress also gets applied to the text field
	                    // (at least when doing the default editor), but we need to allow the editor to decide
	                    // what it wants to do. we only do this IF editing was started - otherwise it messes
	                    // up when the use is not doing editing, but using rendering with text fields in cellRenderer
	                    // (as it would block the the user from typing into text fields).
	                    event.preventDefault();
	                }
	            }
	        }
	    };
	    CellComp.prototype.onSpaceKeyPressed = function (event) {
	        if (!this.editingCell && this.beans.gridOptionsWrapper.isRowSelection()) {
	            var selected = this.rowNode.isSelected();
	            this.rowNode.setSelected(!selected);
	        }
	        // prevent default as space key, by default, moves browser scroll down
	        event.preventDefault();
	    };
	    CellComp.prototype.onMouseDown = function () {
	        // we pass false to focusCell, as we don't want the cell to focus
	        // also get the browser focus. if we did, then the cellRenderer could
	        // have a text field in it, for example, and as the user clicks on the
	        // text field, the text field, the focus doesn't get to the text
	        // field, instead to goes to the div behind, making it impossible to
	        // select the text field.
	        this.focusCell(false);
	        // if it's a right click, then if the cell is already in range,
	        // don't change the range, however if the cell is not in a range,
	        // we set a new range
	        if (this.beans.rangeController) {
	            var thisCell = this.gridCell;
	            var cellAlreadyInRange = this.beans.rangeController.isCellInAnyRange(thisCell);
	            if (!cellAlreadyInRange) {
	                this.beans.rangeController.setRangeToCell(thisCell);
	            }
	        }
	    };
	    CellComp.prototype.onCellClicked = function (mouseEvent) {
	        var cellClickedEvent = this.createEvent(mouseEvent, events_1.Events.EVENT_CELL_CLICKED);
	        this.beans.eventService.dispatchEvent(cellClickedEvent);
	        var colDef = this.column.getColDef();
	        if (colDef.onCellClicked) {
	            colDef.onCellClicked(cellClickedEvent);
	        }
	        var editOnSingleClick = this.beans.gridOptionsWrapper.isSingleClickEdit()
	            && !this.beans.gridOptionsWrapper.isSuppressClickEdit();
	        if (editOnSingleClick) {
	            this.startRowOrCellEdit();
	        }
	        this.doIeFocusHack();
	    };
	    // https://ag-grid.com/forum/showthread.php?tid=4362
	    // when in IE or Edge, when you are editing a cell, then click on another cell,
	    // the other cell doesn't keep focus, so navigation keys, type to start edit etc
	    // don't work. appears that when you update the dom in IE it looses focus
	    CellComp.prototype.doIeFocusHack = function () {
	        if (utils_1._.isBrowserIE() || utils_1._.isBrowserEdge()) {
	            if (utils_1._.missing(document.activeElement) || document.activeElement === document.body) {
	                // console.log('missing focus');
	                this.getHtmlElement().focus();
	            }
	        }
	    };
	    CellComp.prototype.createGridCellVo = function () {
	        var gridCellDef = {
	            rowIndex: this.rowNode.rowIndex,
	            floating: this.rowNode.rowPinned,
	            column: this.column
	        };
	        this.gridCell = new gridCell_1.GridCell(gridCellDef);
	    };
	    CellComp.prototype.getGridCell = function () {
	        return this.gridCell;
	    };
	    CellComp.prototype.getParentRow = function () {
	        return this.eParentRow;
	    };
	    CellComp.prototype.setParentRow = function (eParentRow) {
	        this.eParentRow = eParentRow;
	    };
	    CellComp.prototype.getColumn = function () {
	        return this.column;
	    };
	    CellComp.prototype.detach = function () {
	        this.eParentRow.removeChild(this.getHtmlElement());
	    };
	    // if the row is also getting destroyed, then we don't need to remove from dom,
	    // as the row will also get removed, so no need to take out the cells from the row
	    // if the row is going (removing is an expensive operation, so only need to remove
	    // the top part)
	    CellComp.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        if (this.cellEditor && this.cellEditor.destroy) {
	            this.cellEditor.destroy();
	        }
	        if (this.cellRenderer && this.cellRenderer.destroy) {
	            this.cellRenderer.destroy();
	        }
	    };
	    CellComp.prototype.onLeftChanged = function () {
	        var left = this.getCellLeft();
	        this.getHtmlElement().style.left = left + 'px';
	    };
	    CellComp.prototype.onWidthChanged = function () {
	        var width = this.getCellWidth();
	        this.getHtmlElement().style.width = width + 'px';
	    };
	    CellComp.prototype.getRangeClasses = function () {
	        var res = [];
	        if (!this.rangeSelectionEnabled) {
	            return res;
	        }
	        if (this.rangeCount !== 0) {
	            res.push('ag-cell-range-selected');
	        }
	        if (this.rangeCount === 1) {
	            res.push('ag-cell-range-selected-1');
	        }
	        if (this.rangeCount === 2) {
	            res.push('ag-cell-range-selected-2');
	        }
	        if (this.rangeCount === 3) {
	            res.push('ag-cell-range-selected-3');
	        }
	        if (this.rangeCount >= 4) {
	            res.push('ag-cell-range-selected-4');
	        }
	        return res;
	    };
	    CellComp.prototype.onRowIndexChanged = function () {
	        // when index changes, this influences items that need the index, so we update the
	        // grid cell so they are working off the new index.
	        this.createGridCellVo();
	        // when the index of the row changes, ie means the cell may have lost or gained focus
	        this.onCellFocused();
	        // check range selection
	        this.onRangeSelectionChanged();
	    };
	    CellComp.prototype.onRangeSelectionChanged = function () {
	        if (!this.beans.enterprise) {
	            return;
	        }
	        var newRangeCount = this.beans.rangeController.getCellRangeCount(this.gridCell);
	        var element = this.getHtmlElement();
	        if (this.rangeCount !== newRangeCount) {
	            utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected', newRangeCount !== 0);
	            utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected-1', newRangeCount === 1);
	            utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected-2', newRangeCount === 2);
	            utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected-3', newRangeCount === 3);
	            utils_1._.addOrRemoveCssClass(element, 'ag-cell-range-selected-4', newRangeCount >= 4);
	            this.rangeCount = newRangeCount;
	        }
	    };
	    CellComp.prototype.onFirstRightPinnedChanged = function () {
	        var firstRightPinned = this.column.isFirstRightPinned();
	        if (this.firstRightPinned !== firstRightPinned) {
	            this.firstRightPinned = firstRightPinned;
	            utils_1._.addOrRemoveCssClass(this.getHtmlElement(), 'ag-cell-first-right-pinned', firstRightPinned);
	        }
	    };
	    CellComp.prototype.onLastLeftPinnedChanged = function () {
	        var lastLeftPinned = this.column.isLastLeftPinned();
	        if (this.lastLeftPinned !== lastLeftPinned) {
	            this.lastLeftPinned = lastLeftPinned;
	            utils_1._.addOrRemoveCssClass(this.getHtmlElement(), 'ag-cell-last-left-pinned', lastLeftPinned);
	        }
	    };
	    CellComp.prototype.addSelectionCheckbox = function () {
	        if (this.usingWrapper) {
	            this.eParentOfValue = this.getRefElement('eCellValue');
	            this.eCellWrapper = this.getRefElement('eCellWrapper');
	            var cbSelectionComponent_1 = new checkboxSelectionComponent_1.CheckboxSelectionComponent();
	            this.beans.context.wireBean(cbSelectionComponent_1);
	            var visibleFunc = this.column.getColDef().checkboxSelection;
	            visibleFunc = typeof visibleFunc === 'function' ? visibleFunc : null;
	            cbSelectionComponent_1.init({ rowNode: this.rowNode, column: this.column, visibleFunc: visibleFunc });
	            this.addDestroyFunc(function () { return cbSelectionComponent_1.destroy(); });
	            // put the checkbox in before the value
	            this.eCellWrapper.insertBefore(cbSelectionComponent_1.getHtmlElement(), this.eParentOfValue);
	        }
	        else {
	            this.eParentOfValue = this.getHtmlElement();
	        }
	    };
	    CellComp.prototype.addDomData = function () {
	        var _this = this;
	        var element = this.getHtmlElement();
	        this.beans.gridOptionsWrapper.setDomData(element, CellComp.DOM_DATA_KEY_CELL_COMP, this);
	        this.addDestroyFunc(function () {
	            return _this.beans.gridOptionsWrapper.setDomData(element, CellComp.DOM_DATA_KEY_CELL_COMP, null);
	        });
	    };
	    CellComp.prototype.onCellFocused = function (event) {
	        var cellFocused = this.beans.focusedCellController.isCellFocused(this.gridCell);
	        // see if we need to change the classes on this cell
	        if (cellFocused !== this.cellFocused) {
	            utils_1._.addOrRemoveCssClass(this.getHtmlElement(), 'ag-cell-focus', cellFocused);
	            utils_1._.addOrRemoveCssClass(this.getHtmlElement(), 'ag-cell-no-focus', !cellFocused);
	            this.cellFocused = cellFocused;
	        }
	        // if this cell was just focused, see if we need to force browser focus, his can
	        // happen if focus is programmatically set.
	        if (cellFocused && event && event.forceBrowserFocus) {
	            this.getHtmlElement().focus();
	        }
	        // if another cell was focused, and we are editing, then stop editing
	        var fullRowEdit = this.beans.gridOptionsWrapper.isFullRowEdit();
	        if (!cellFocused && !fullRowEdit && this.editingCell) {
	            this.stopRowOrCellEdit();
	        }
	    };
	    // pass in 'true' to cancel the editing.
	    CellComp.prototype.stopRowOrCellEdit = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        if (this.beans.gridOptionsWrapper.isFullRowEdit()) {
	            this.rowComp.stopRowEditing(cancel);
	        }
	        else {
	            this.stopEditing(cancel);
	        }
	    };
	    CellComp.prototype.stopEditing = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        if (!this.editingCell) {
	            return;
	        }
	        if (!cancel) {
	            // also have another option here to cancel after editing, so for example user could have a popup editor and
	            // it is closed by user clicking outside the editor. then the editor will close automatically (with false
	            // passed above) and we need to see if the editor wants to accept the new value.
	            var userWantsToCancel = this.cellEditor.isCancelAfterEnd && this.cellEditor.isCancelAfterEnd();
	            if (!userWantsToCancel) {
	                var newValue = this.cellEditor.getValue();
	                this.beans.valueService.setValue(this.rowNode, this.column, newValue);
	                this.value = this.getValue();
	            }
	        }
	        // it is important we set this after setValue() above, as otherwise the cell will flash
	        // when editing stops. the 'refresh' method checks editing, and doesn't refresh editing cells.
	        // thus it will skip the refresh on this cell until the end of this method where we call
	        // refresh directly and we suppress the flash.
	        this.editingCell = false;
	        if (this.cellEditor.destroy) {
	            this.cellEditor.destroy();
	        }
	        if (this.cellEditorInPopup) {
	            this.hideEditorPopup();
	            this.hideEditorPopup = null;
	        }
	        else {
	            utils_1._.removeAllChildren(this.getHtmlElement());
	            // put the cell back the way it was before editing
	            if (this.usingWrapper) {
	                // if wrapper, then put the wrapper back
	                this.getHtmlElement().appendChild(this.eCellWrapper);
	            }
	            else {
	                // if cellRenderer, then put the gui back in. if the renderer has
	                // a refresh, it will be called. however if it doesn't, then later
	                // the renderer will be destroyed and a new one will be created.
	                if (this.cellRenderer) {
	                    // we know it's a dom element (not a string) because we converted
	                    // it after the gui was attached if it was a string.
	                    var eCell = this.cellRendererGui;
	                    this.getHtmlElement().appendChild(eCell);
	                }
	            }
	        }
	        this.setInlineEditingClass();
	        // we suppress the flash, as it is not correct to flash the cell the user has finished editing,
	        // the user doesn't need to flash as they were the one who did the edit, the flash is pointless
	        // (as the flash is meant to draw the user to a change that they didn't manually do themselves).
	        this.refreshCell({ forceRefresh: true, suppressFlash: true });
	        var event = this.createEvent(null, events_1.Events.EVENT_CELL_EDITING_STOPPED);
	        this.beans.eventService.dispatchEvent(event);
	    };
	    CellComp.DOM_DATA_KEY_CELL_COMP = 'cellComp';
	    return CellComp;
	}(component_1.Component));
	exports.CellComp = CellComp;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var selectionController_1 = __webpack_require__(27);
	var valueService_1 = __webpack_require__(31);
	var columnController_1 = __webpack_require__(15);
	var context_1 = __webpack_require__(7);
	var constants_1 = __webpack_require__(9);
	var utils_1 = __webpack_require__(8);
	var valueCache_1 = __webpack_require__(32);
	var gridApi_1 = __webpack_require__(12);
	var RowNode = (function () {
	    function RowNode() {
	        /** Children mapped by the pivot columns */
	        this.childrenMapped = {};
	        this.selected = false;
	    }
	    RowNode.prototype.setData = function (data) {
	        var oldData = this.data;
	        this.data = data;
	        this.valueCache.onDataChanged();
	        var event = this.createDataChangedEvent(data, oldData, false);
	        this.dispatchLocalEvent(event);
	    };
	    RowNode.prototype.createDataChangedEvent = function (newData, oldData, update) {
	        return {
	            type: RowNode.EVENT_DATA_CHANGED,
	            node: this,
	            oldData: oldData,
	            newData: newData,
	            update: update
	        };
	    };
	    RowNode.prototype.createLocalRowEvent = function (type) {
	        return {
	            type: type,
	            node: this
	        };
	    };
	    // similar to setRowData, however it is expected that the data is the same data item. this
	    // is intended to be used with Redux type stores, where the whole data can be changed. we are
	    // guaranteed that the data is the same entity (so grid doesn't need to worry about the id of the
	    // underlying data changing, hence doesn't need to worry about selection). the grid, upon receiving
	    // dataChanged event, will refresh the cells rather than rip them all out (so user can show transitions).
	    RowNode.prototype.updateData = function (data) {
	        var oldData = this.data;
	        this.data = data;
	        var event = this.createDataChangedEvent(data, oldData, true);
	        this.dispatchLocalEvent(event);
	    };
	    RowNode.prototype.getRowIndexString = function () {
	        if (this.rowPinned === constants_1.Constants.PINNED_TOP) {
	            return 't-' + this.rowIndex;
	        }
	        else if (this.rowPinned === constants_1.Constants.PINNED_BOTTOM) {
	            return 'b-' + this.rowIndex;
	        }
	        else {
	            return this.rowIndex.toString();
	        }
	    };
	    RowNode.prototype.createDaemonNode = function () {
	        var oldNode = new RowNode();
	        this.context.wireBean(oldNode);
	        // just copy the id and data, this is enough for the node to be used
	        // in the selection controller (the selection controller is the only
	        // place where daemon nodes can live).
	        oldNode.id = this.id;
	        oldNode.data = this.data;
	        oldNode.daemon = true;
	        oldNode.selected = this.selected;
	        oldNode.level = this.level;
	        return oldNode;
	    };
	    RowNode.prototype.setDataAndId = function (data, id) {
	        var oldNode = utils_1.Utils.exists(this.id) ? this.createDaemonNode() : null;
	        var oldData = this.data;
	        this.data = data;
	        this.setId(id);
	        this.selectionController.syncInRowNode(this, oldNode);
	        var event = this.createDataChangedEvent(data, oldData, false);
	        this.dispatchLocalEvent(event);
	    };
	    RowNode.prototype.setId = function (id) {
	        // see if user is providing the id's
	        var getRowNodeId = this.gridOptionsWrapper.getRowNodeIdFunc();
	        if (getRowNodeId) {
	            // if user is providing the id's, then we set the id only after the data has been set.
	            // this is important for virtual pagination and viewport, where empty rows exist.
	            if (this.data) {
	                this.id = getRowNodeId(this.data);
	            }
	            else {
	                // this can happen if user has set blank into the rowNode after the row previously
	                // having data. this happens in virtual page row model, when data is delete and
	                // the page is refreshed.
	                this.id = undefined;
	            }
	        }
	        else {
	            this.id = id;
	        }
	    };
	    RowNode.prototype.isPixelInRange = function (pixel) {
	        return pixel >= this.rowTop && pixel < (this.rowTop + this.rowHeight);
	    };
	    RowNode.prototype.clearRowTop = function () {
	        this.oldRowTop = this.rowTop;
	        this.setRowTop(null);
	    };
	    RowNode.prototype.setFirstChild = function (firstChild) {
	        if (this.firstChild === firstChild) {
	            return;
	        }
	        this.firstChild = firstChild;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_FIRST_CHILD_CHANGED));
	        }
	    };
	    RowNode.prototype.setLastChild = function (lastChild) {
	        if (this.lastChild === lastChild) {
	            return;
	        }
	        this.lastChild = lastChild;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_LAST_CHILD_CHANGED));
	        }
	    };
	    RowNode.prototype.setChildIndex = function (childIndex) {
	        if (this.childIndex === childIndex) {
	            return;
	        }
	        this.childIndex = childIndex;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_CHILD_INDEX_CHANGED));
	        }
	    };
	    RowNode.prototype.setRowTop = function (rowTop) {
	        if (this.rowTop === rowTop) {
	            return;
	        }
	        this.rowTop = rowTop;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_TOP_CHANGED));
	        }
	    };
	    RowNode.prototype.setAllChildrenCount = function (allChildrenCount) {
	        if (this.allChildrenCount === allChildrenCount) {
	            return;
	        }
	        this.allChildrenCount = allChildrenCount;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ALL_CHILDREN_COUNT_CELL_CHANGED));
	        }
	    };
	    RowNode.prototype.setRowHeight = function (rowHeight) {
	        this.rowHeight = rowHeight;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_HEIGHT_CHANGED));
	        }
	    };
	    RowNode.prototype.setRowIndex = function (rowIndex) {
	        this.rowIndex = rowIndex;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_INDEX_CHANGED));
	        }
	    };
	    RowNode.prototype.setUiLevel = function (uiLevel) {
	        if (this.uiLevel === uiLevel) {
	            return;
	        }
	        this.uiLevel = uiLevel;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_UI_LEVEL_CHANGED));
	        }
	    };
	    RowNode.prototype.setExpanded = function (expanded) {
	        if (this.expanded === expanded) {
	            return;
	        }
	        this.expanded = expanded;
	        if (this.eventService) {
	            this.eventService.dispatchEvent(this.createLocalRowEvent(RowNode.EVENT_EXPANDED_CHANGED));
	        }
	        var event = this.createGlobalRowEvent(events_1.Events.EVENT_ROW_GROUP_OPENED);
	        this.mainEventService.dispatchEvent(event);
	    };
	    RowNode.prototype.createGlobalRowEvent = function (type) {
	        var event = {
	            type: type,
	            node: this,
	            data: this.data,
	            rowIndex: this.rowIndex,
	            rowPinned: this.rowPinned,
	            context: this.gridOptionsWrapper.getContext(),
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi()
	        };
	        return event;
	    };
	    RowNode.prototype.dispatchLocalEvent = function (event) {
	        if (this.eventService) {
	            this.eventService.dispatchEvent(event);
	        }
	    };
	    // we also allow editing the value via the editors. when it is done via
	    // the editors, no 'cell changed' event gets fired, as it's assumed that
	    // the cell knows about the change given it's in charge of the editing.
	    // this method is for the client to call, so the cell listens for the change
	    // event, and also flashes the cell when the change occurs.
	    RowNode.prototype.setDataValue = function (colKey, newValue) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        this.valueService.setValue(this, column, newValue);
	        this.dispatchCellChangedEvent(column, newValue);
	    };
	    RowNode.prototype.setGroupValue = function (colKey, newValue) {
	        var column = this.columnController.getGridColumn(colKey);
	        if (utils_1.Utils.missing(this.groupData)) {
	            this.groupData = {};
	        }
	        this.groupData[column.getColId()] = newValue;
	        this.dispatchCellChangedEvent(column, newValue);
	    };
	    // sets the data for an aggregation
	    RowNode.prototype.setAggData = function (newAggData) {
	        var _this = this;
	        // find out all keys that could potentially change
	        var colIds = utils_1.Utils.getAllKeysInObjects([this.aggData, newAggData]);
	        this.aggData = newAggData;
	        // if no event service, nobody has registered for events, so no need fire event
	        if (this.eventService) {
	            colIds.forEach(function (colId) {
	                var column = _this.columnController.getGridColumn(colId);
	                var value = _this.data ? _this.data[colId] : undefined;
	                _this.dispatchCellChangedEvent(column, value);
	            });
	        }
	    };
	    RowNode.prototype.dispatchCellChangedEvent = function (column, newValue) {
	        var cellChangedEvent = {
	            type: RowNode.EVENT_CELL_CHANGED,
	            node: this,
	            column: column,
	            newValue: newValue
	        };
	        this.dispatchLocalEvent(cellChangedEvent);
	    };
	    RowNode.prototype.resetQuickFilterAggregateText = function () {
	        this.quickFilterAggregateText = null;
	    };
	    RowNode.prototype.isExpandable = function () {
	        return this.group || this.canFlower;
	    };
	    RowNode.prototype.isSelected = function () {
	        // for footers, we just return what our sibling selected state is, as cannot select a footer
	        if (this.footer) {
	            return this.sibling.isSelected();
	        }
	        return this.selected;
	    };
	    RowNode.prototype.depthFirstSearch = function (callback) {
	        if (this.childrenAfterGroup) {
	            this.childrenAfterGroup.forEach(function (child) { return child.depthFirstSearch(callback); });
	        }
	        callback(this);
	    };
	    // + rowController.updateGroupsInSelection()
	    RowNode.prototype.calculateSelectedFromChildren = function () {
	        var atLeastOneSelected = false;
	        var atLeastOneDeSelected = false;
	        var atLeastOneMixed = false;
	        var newSelectedValue;
	        if (this.childrenAfterGroup) {
	            for (var i = 0; i < this.childrenAfterGroup.length; i++) {
	                var childState = this.childrenAfterGroup[i].isSelected();
	                switch (childState) {
	                    case true:
	                        atLeastOneSelected = true;
	                        break;
	                    case false:
	                        atLeastOneDeSelected = true;
	                        break;
	                    default:
	                        atLeastOneMixed = true;
	                        break;
	                }
	            }
	        }
	        if (atLeastOneMixed) {
	            newSelectedValue = undefined;
	        }
	        else if (atLeastOneSelected && !atLeastOneDeSelected) {
	            newSelectedValue = true;
	        }
	        else if (!atLeastOneSelected && atLeastOneDeSelected) {
	            newSelectedValue = false;
	        }
	        else {
	            newSelectedValue = undefined;
	        }
	        this.selectThisNode(newSelectedValue);
	    };
	    RowNode.prototype.calculateSelectedFromChildrenBubbleUp = function () {
	        this.calculateSelectedFromChildren();
	        if (this.parent) {
	            this.parent.calculateSelectedFromChildrenBubbleUp();
	        }
	    };
	    RowNode.prototype.setSelectedInitialValue = function (selected) {
	        this.selected = selected;
	    };
	    RowNode.prototype.setSelected = function (newValue, clearSelection, tailingNodeInSequence) {
	        if (clearSelection === void 0) { clearSelection = false; }
	        if (tailingNodeInSequence === void 0) { tailingNodeInSequence = false; }
	        this.setSelectedParams({
	            newValue: newValue,
	            clearSelection: clearSelection,
	            tailingNodeInSequence: tailingNodeInSequence,
	            rangeSelect: false
	        });
	    };
	    RowNode.prototype.isRowPinned = function () {
	        return this.rowPinned === constants_1.Constants.PINNED_TOP || this.rowPinned === constants_1.Constants.PINNED_BOTTOM;
	    };
	    // to make calling code more readable, this is the same method as setSelected except it takes names parameters
	    RowNode.prototype.setSelectedParams = function (params) {
	        var groupSelectsChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
	        var newValue = params.newValue === true;
	        var clearSelection = params.clearSelection === true;
	        var tailingNodeInSequence = params.tailingNodeInSequence === true;
	        var rangeSelect = params.rangeSelect === true;
	        // groupSelectsFiltered only makes sense when group selects children
	        var groupSelectsFiltered = groupSelectsChildren && (params.groupSelectsFiltered === true);
	        if (this.id === undefined) {
	            console.warn('ag-Grid: cannot select node until id for node is known');
	            return 0;
	        }
	        if (this.rowPinned) {
	            console.log('ag-Grid: cannot select pinned rows');
	            return 0;
	        }
	        // if we are a footer, we don't do selection, just pass the info
	        // to the sibling (the parent of the group)
	        if (this.footer) {
	            var count = this.sibling.setSelectedParams(params);
	            return count;
	        }
	        if (rangeSelect) {
	            var newRowClicked = this.selectionController.getLastSelectedNode() !== this;
	            var allowMultiSelect = this.gridOptionsWrapper.isRowSelectionMulti();
	            if (newRowClicked && allowMultiSelect) {
	                return this.doRowRangeSelection();
	            }
	        }
	        var updatedCount = 0;
	        // when groupSelectsFiltered, then this node may end up intermediate despite
	        // trying to set it to true / false. this group will be calculated further on
	        // down when we call calculatedSelectedForAllGroupNodes(). we need to skip it
	        // here, otherwise the updatedCount would include it.
	        var skipThisNode = groupSelectsFiltered && this.group;
	        if (!skipThisNode) {
	            var thisNodeWasSelected = this.selectThisNode(newValue);
	            if (thisNodeWasSelected) {
	                updatedCount++;
	            }
	        }
	        if (groupSelectsChildren && this.group) {
	            updatedCount += this.selectChildNodes(newValue, groupSelectsFiltered);
	        }
	        // clear other nodes if not doing multi select
	        var actionWasOnThisNode = !tailingNodeInSequence;
	        if (actionWasOnThisNode) {
	            if (newValue && (clearSelection || !this.gridOptionsWrapper.isRowSelectionMulti())) {
	                updatedCount += this.selectionController.clearOtherNodes(this);
	            }
	            // only if we selected something, then update groups and fire events
	            if (updatedCount > 0) {
	                // update groups
	                if (groupSelectsFiltered) {
	                    // if the group was selecting filtered, then all nodes above and or below
	                    // this node could have check, unchecked or intermediate, so easiest is to
	                    // recalculate selected state for all group nodes
	                    this.calculatedSelectedForAllGroupNodes();
	                }
	                else {
	                    // if no selecting filtered, then everything below the group node was either
	                    // selected or not selected, no intermediate, so no need to check items below
	                    // this one, just the parents all the way up to the root
	                    if (groupSelectsChildren && this.parent) {
	                        this.parent.calculateSelectedFromChildrenBubbleUp();
	                    }
	                }
	                // fire events
	                // this is the very end of the 'action node', so we are finished all the updates,
	                // include any parent / child changes that this method caused
	                var event_1 = {
	                    type: events_1.Events.EVENT_SELECTION_CHANGED,
	                    api: this.gridApi,
	                    columnApi: this.columnApi
	                };
	                this.mainEventService.dispatchEvent(event_1);
	            }
	            // so if user next does shift-select, we know where to start the selection from
	            if (newValue) {
	                this.selectionController.setLastSelectedNode(this);
	            }
	        }
	        return updatedCount;
	    };
	    // selects all rows between this node and the last selected node (or the top if this is the first selection).
	    // not to be mixed up with 'cell range selection' where you drag the mouse, this is row range selection, by
	    // holding down 'shift'.
	    RowNode.prototype.doRowRangeSelection = function () {
	        var updatedCount = 0;
	        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
	        var lastSelectedNode = this.selectionController.getLastSelectedNode();
	        var nodesToSelect = this.rowModel.getNodesInRangeForSelection(lastSelectedNode, this);
	        nodesToSelect.forEach(function (rowNode) {
	            if (rowNode.group && groupsSelectChildren) {
	                return;
	            }
	            var nodeWasSelected = rowNode.selectThisNode(true);
	            if (nodeWasSelected) {
	                updatedCount++;
	            }
	        });
	        if (groupsSelectChildren) {
	            this.calculatedSelectedForAllGroupNodes();
	        }
	        var event = {
	            type: events_1.Events.EVENT_SELECTION_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.mainEventService.dispatchEvent(event);
	        return updatedCount;
	    };
	    RowNode.prototype.isParentOfNode = function (potentialParent) {
	        var parentNode = this.parent;
	        while (parentNode) {
	            if (parentNode === potentialParent) {
	                return true;
	            }
	            parentNode = parentNode.parent;
	        }
	        return false;
	    };
	    RowNode.prototype.calculatedSelectedForAllGroupNodes = function () {
	        // we have to make sure we do this dept first, as parent nodes
	        // will have dependencies on the children having correct values
	        var inMemoryRowModel = this.rowModel;
	        inMemoryRowModel.getTopLevelNodes().forEach(function (topLevelNode) {
	            if (topLevelNode.group) {
	                topLevelNode.depthFirstSearch(function (childNode) {
	                    if (childNode.group) {
	                        childNode.calculateSelectedFromChildren();
	                    }
	                });
	                topLevelNode.calculateSelectedFromChildren();
	            }
	        });
	    };
	    RowNode.prototype.selectThisNode = function (newValue) {
	        if (this.selected === newValue) {
	            return false;
	        }
	        this.selected = newValue;
	        if (this.eventService) {
	            this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_ROW_SELECTED));
	        }
	        var event = this.createGlobalRowEvent(events_1.Events.EVENT_ROW_SELECTED);
	        this.mainEventService.dispatchEvent(event);
	        return true;
	    };
	    RowNode.prototype.selectChildNodes = function (newValue, groupSelectsFiltered) {
	        var children = groupSelectsFiltered ? this.childrenAfterFilter : this.childrenAfterGroup;
	        var updatedCount = 0;
	        if (utils_1.Utils.missing(children)) {
	            return;
	        }
	        for (var i = 0; i < children.length; i++) {
	            updatedCount += children[i].setSelectedParams({
	                newValue: newValue,
	                clearSelection: false,
	                tailingNodeInSequence: true
	            });
	        }
	        return updatedCount;
	    };
	    RowNode.prototype.addEventListener = function (eventType, listener) {
	        if (!this.eventService) {
	            this.eventService = new eventService_1.EventService();
	        }
	        this.eventService.addEventListener(eventType, listener);
	    };
	    RowNode.prototype.removeEventListener = function (eventType, listener) {
	        this.eventService.removeEventListener(eventType, listener);
	    };
	    RowNode.prototype.onMouseEnter = function () {
	        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_ENTER));
	    };
	    RowNode.prototype.onMouseLeave = function () {
	        this.dispatchLocalEvent(this.createLocalRowEvent(RowNode.EVENT_MOUSE_LEAVE));
	    };
	    RowNode.prototype.getFirstChildOfFirstChild = function (rowGroupColumn) {
	        var currentRowNode = this;
	        // if we are hiding groups, then if we are the first child, of the first child,
	        // all the way up to the column we are interested in, then we show the group cell.
	        var isCandidate = true;
	        var foundFirstChildPath = false;
	        var nodeToSwapIn;
	        while (isCandidate && !foundFirstChildPath) {
	            var parentRowNode = currentRowNode.parent;
	            var firstChild = utils_1.Utils.exists(parentRowNode) && currentRowNode.firstChild;
	            if (firstChild) {
	                if (parentRowNode.rowGroupColumn === rowGroupColumn) {
	                    foundFirstChildPath = true;
	                    nodeToSwapIn = parentRowNode;
	                }
	            }
	            else {
	                isCandidate = false;
	            }
	            currentRowNode = parentRowNode;
	        }
	        return foundFirstChildPath ? nodeToSwapIn : null;
	    };
	    RowNode.EVENT_ROW_SELECTED = 'rowSelected';
	    RowNode.EVENT_DATA_CHANGED = 'dataChanged';
	    RowNode.EVENT_CELL_CHANGED = 'cellChanged';
	    RowNode.EVENT_ALL_CHILDREN_COUNT_CELL_CHANGED = 'allChildrenCountChanged';
	    RowNode.EVENT_MOUSE_ENTER = 'mouseEnter';
	    RowNode.EVENT_MOUSE_LEAVE = 'mouseLeave';
	    RowNode.EVENT_HEIGHT_CHANGED = 'heightChanged';
	    RowNode.EVENT_TOP_CHANGED = 'topChanged';
	    RowNode.EVENT_FIRST_CHILD_CHANGED = 'firstChildChanged';
	    RowNode.EVENT_LAST_CHILD_CHANGED = 'lastChildChanged';
	    RowNode.EVENT_CHILD_INDEX_CHANGED = 'childIndexChanged';
	    RowNode.EVENT_ROW_INDEX_CHANGED = 'rowIndexChanged';
	    RowNode.EVENT_EXPANDED_CHANGED = 'expandedChanged';
	    RowNode.EVENT_UI_LEVEL_CHANGED = 'uiLevelChanged';
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], RowNode.prototype, "mainEventService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], RowNode.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], RowNode.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], RowNode.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], RowNode.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], RowNode.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], RowNode.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('valueCache'),
	        __metadata("design:type", valueCache_1.ValueCache)
	    ], RowNode.prototype, "valueCache", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], RowNode.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], RowNode.prototype, "gridApi", void 0);
	    return RowNode;
	}());
	exports.RowNode = RowNode;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var expressionService_1 = __webpack_require__(20);
	var columnController_1 = __webpack_require__(15);
	var context_1 = __webpack_require__(7);
	var utils_1 = __webpack_require__(8);
	var events_1 = __webpack_require__(11);
	var eventService_1 = __webpack_require__(5);
	var valueCache_1 = __webpack_require__(32);
	var ValueService = (function () {
	    function ValueService() {
	        this.initialised = false;
	    }
	    ValueService.prototype.init = function () {
	        this.cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();
	        this.initialised = true;
	    };
	    ValueService.prototype.getValue = function (column, rowNode, ignoreAggData) {
	        // console.log(`turnActive = ${this.turnActive}`);
	        if (ignoreAggData === void 0) { ignoreAggData = false; }
	        // hack - the grid is getting refreshed before this bean gets initialised, race condition.
	        // really should have a way so they get initialised in the right order???
	        if (!this.initialised) {
	            this.init();
	        }
	        // pull these out to make code below easier to read
	        var colDef = column.getColDef();
	        var field = colDef.field;
	        var colId = column.getId();
	        var data = rowNode.data;
	        var result;
	        // if there is a value getter, this gets precedence over a field
	        var groupDataExists = rowNode.groupData && rowNode.groupData[colId] !== undefined;
	        var aggDataExists = !ignoreAggData && rowNode.aggData && rowNode.aggData[colId] !== undefined;
	        if (groupDataExists) {
	            result = rowNode.groupData[colId];
	        }
	        else if (aggDataExists) {
	            result = rowNode.aggData[colId];
	        }
	        else if (colDef.valueGetter) {
	            result = this.executeValueGetter(colDef.valueGetter, data, column, rowNode);
	        }
	        else if (field && data) {
	            result = utils_1._.getValueUsingField(data, field, column.isFieldContainsDots());
	        }
	        else {
	            result = undefined;
	        }
	        // the result could be an expression itself, if we are allowing cell values to be expressions
	        if (this.cellExpressions && (typeof result === 'string') && result.indexOf('=') === 0) {
	            var cellValueGetter = result.substring(1);
	            result = this.executeValueGetter(cellValueGetter, data, column, rowNode);
	        }
	        return result;
	    };
	    ValueService.prototype.setValue = function (rowNode, colKey, newValue) {
	        var column = this.columnController.getPrimaryColumn(colKey);
	        if (!rowNode || !column) {
	            return;
	        }
	        // this will only happen if user is trying to paste into a group row, which doesn't make sense
	        // the user should not be trying to paste into group rows
	        var data = rowNode.data;
	        if (utils_1._.missing(data)) {
	            rowNode.data = {};
	        }
	        var _a = column.getColDef(), field = _a.field, newValueHandler = _a.newValueHandler, valueSetter = _a.valueSetter;
	        // need either a field or a newValueHandler for this to work
	        if (utils_1._.missing(field) && utils_1._.missing(newValueHandler) && utils_1._.missing(valueSetter)) {
	            // we don't tell user about newValueHandler, as that is deprecated
	            console.warn("ag-Grid: you need either field or valueSetter set on colDef for editing to work");
	            return;
	        }
	        var params = {
	            node: rowNode,
	            data: rowNode.data,
	            oldValue: this.getValue(column, rowNode),
	            newValue: newValue,
	            colDef: column.getColDef(),
	            column: column,
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi(),
	            context: this.gridOptionsWrapper.getContext()
	        };
	        params.newValue = newValue;
	        var valueWasDifferent;
	        if (utils_1._.exists(newValueHandler)) {
	            valueWasDifferent = newValueHandler(params);
	        }
	        else if (utils_1._.exists(valueSetter)) {
	            valueWasDifferent = this.expressionService.evaluate(valueSetter, params);
	        }
	        else {
	            valueWasDifferent = this.setValueUsingField(data, field, newValue, column.isFieldContainsDots());
	        }
	        // in case user forgot to return something (possible if they are not using TypeScript
	        // and just forgot, or using an old newValueHandler we didn't always expect a return
	        // value here), we default the return value to true, so we always refresh.
	        if (valueWasDifferent === undefined) {
	            valueWasDifferent = true;
	        }
	        // if no change to the value, then no need to do the updating, or notifying via events.
	        // otherwise the user could be tabbing around the grid, and cellValueChange would get called
	        // all the time.
	        if (!valueWasDifferent) {
	            return;
	        }
	        // reset quick filter on this row
	        rowNode.resetQuickFilterAggregateText();
	        this.valueCache.onDataChanged();
	        params.newValue = this.getValue(column, rowNode);
	        if (typeof column.getColDef().onCellValueChanged === 'function') {
	            column.getColDef().onCellValueChanged(params);
	        }
	        var event = {
	            type: events_1.Events.EVENT_CELL_VALUE_CHANGED,
	            event: null,
	            rowIndex: rowNode.rowIndex,
	            rowPinned: rowNode.rowPinned,
	            column: params.column,
	            api: params.api,
	            colDef: params.colDef,
	            columnApi: params.columnApi,
	            context: params.context,
	            data: rowNode.data,
	            node: rowNode,
	            oldValue: params.oldValue,
	            newValue: params.newValue,
	            value: params.newValue
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ValueService.prototype.setValueUsingField = function (data, field, newValue, isFieldContainsDots) {
	        // if no '.', then it's not a deep value
	        var valuesAreSame;
	        if (!isFieldContainsDots) {
	            data[field] = newValue;
	        }
	        else {
	            // otherwise it is a deep value, so need to dig for it
	            var fieldPieces = field.split('.');
	            var currentObject = data;
	            while (fieldPieces.length > 0 && currentObject) {
	                var fieldPiece = fieldPieces.shift();
	                if (fieldPieces.length === 0) {
	                    currentObject[fieldPiece] = newValue;
	                }
	                else {
	                    currentObject = currentObject[fieldPiece];
	                }
	            }
	        }
	        return !valuesAreSame;
	    };
	    ValueService.prototype.executeValueGetter = function (valueGetter, data, column, rowNode) {
	        var colId = column.getId();
	        // if inside the same turn, just return back the value we got last time
	        var valueFromCache = this.valueCache.getValue(rowNode, colId);
	        if (valueFromCache !== undefined) {
	            return valueFromCache;
	        }
	        var params = {
	            data: data,
	            node: rowNode,
	            column: column,
	            colDef: column.getColDef(),
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi(),
	            context: this.gridOptionsWrapper.getContext(),
	            getValue: this.getValueCallback.bind(this, rowNode)
	        };
	        var result = this.expressionService.evaluate(valueGetter, params);
	        // if a turn is active, store the value in case the grid asks for it again
	        this.valueCache.setValue(rowNode, colId, result);
	        return result;
	    };
	    ValueService.prototype.getValueCallback = function (node, field) {
	        var otherColumn = this.columnController.getPrimaryColumn(field);
	        if (otherColumn) {
	            return this.getValue(otherColumn, node);
	        }
	        else {
	            return null;
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ValueService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], ValueService.prototype, "expressionService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], ValueService.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], ValueService.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('valueCache'),
	        __metadata("design:type", valueCache_1.ValueCache)
	    ], ValueService.prototype, "valueCache", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ValueService.prototype, "init", null);
	    ValueService = __decorate([
	        context_1.Bean('valueService')
	    ], ValueService);
	    return ValueService;
	}());
	exports.ValueService = ValueService;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var ValueCache = (function () {
	    function ValueCache() {
	        this.cacheVersion = 0;
	    }
	    ValueCache.prototype.init = function () {
	        this.active = this.gridOptionsWrapper.isValueCache();
	        this.neverExpires = this.gridOptionsWrapper.isValueCacheNeverExpires();
	    };
	    ValueCache.prototype.onDataChanged = function () {
	        if (this.neverExpires) {
	            return;
	        }
	        this.expire();
	    };
	    ValueCache.prototype.expire = function () {
	        this.cacheVersion++;
	    };
	    ValueCache.prototype.setValue = function (rowNode, colId, value) {
	        if (this.active) {
	            if (rowNode.__cacheVersion !== this.cacheVersion) {
	                rowNode.__cacheVersion = this.cacheVersion;
	                rowNode.__cacheData = {};
	            }
	            rowNode.__cacheData[colId] = value;
	        }
	    };
	    ValueCache.prototype.getValue = function (rowNode, colId) {
	        var valueInCache = this.active
	            && rowNode.__cacheVersion === this.cacheVersion
	            && rowNode.__cacheData[colId] !== undefined;
	        if (valueInCache) {
	            return rowNode.__cacheData[colId];
	        }
	        else {
	            return undefined;
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ValueCache.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ValueCache.prototype, "init", null);
	    ValueCache = __decorate([
	        context_1.Bean('valueCache')
	    ], ValueCache);
	    return ValueCache;
	}());
	exports.ValueCache = ValueCache;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var gridRow_1 = __webpack_require__(34);
	var GridCell = (function () {
	    function GridCell(gridCellDef) {
	        this.rowIndex = gridCellDef.rowIndex;
	        this.column = gridCellDef.column;
	        this.floating = utils_1.Utils.makeNull(gridCellDef.floating);
	    }
	    GridCell.prototype.getGridCellDef = function () {
	        return {
	            rowIndex: this.rowIndex,
	            column: this.column,
	            floating: this.floating
	        };
	    };
	    GridCell.prototype.getGridRow = function () {
	        return new gridRow_1.GridRow(this.rowIndex, this.floating);
	    };
	    GridCell.prototype.toString = function () {
	        return "rowIndex = " + this.rowIndex + ", floating = " + this.floating + ", column = " + (this.column ? this.column.getId() : null);
	    };
	    GridCell.prototype.createId = function () {
	        return this.rowIndex + "." + this.floating + "." + this.column.getId();
	    };
	    return GridCell;
	}());
	exports.GridCell = GridCell;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var constants_1 = __webpack_require__(9);
	var utils_1 = __webpack_require__(8);
	var gridCell_1 = __webpack_require__(33);
	var GridRow = (function () {
	    function GridRow(rowIndex, floating) {
	        this.rowIndex = rowIndex;
	        this.floating = utils_1.Utils.makeNull(floating);
	    }
	    GridRow.prototype.isFloatingTop = function () {
	        return this.floating === constants_1.Constants.PINNED_TOP;
	    };
	    GridRow.prototype.isFloatingBottom = function () {
	        return this.floating === constants_1.Constants.PINNED_BOTTOM;
	    };
	    GridRow.prototype.isNotFloating = function () {
	        return !this.isFloatingBottom() && !this.isFloatingTop();
	    };
	    GridRow.prototype.equals = function (otherSelection) {
	        return this.rowIndex === otherSelection.rowIndex
	            && this.floating === otherSelection.floating;
	    };
	    GridRow.prototype.toString = function () {
	        return "rowIndex = " + this.rowIndex + ", floating = " + this.floating;
	    };
	    GridRow.prototype.getGridCell = function (column) {
	        var gridCellDef = { rowIndex: this.rowIndex, floating: this.floating, column: column };
	        return new gridCell_1.GridCell(gridCellDef);
	    };
	    // tests if this row selection is before the other row selection
	    GridRow.prototype.before = function (otherSelection) {
	        var otherFloating = otherSelection.floating;
	        switch (this.floating) {
	            case constants_1.Constants.PINNED_TOP:
	                // we we are floating top, and other isn't, then we are always before
	                if (otherFloating !== constants_1.Constants.PINNED_TOP) {
	                    return true;
	                }
	                break;
	            case constants_1.Constants.PINNED_BOTTOM:
	                // if we are floating bottom, and the other isn't, then we are never before
	                if (otherFloating !== constants_1.Constants.PINNED_BOTTOM) {
	                    return false;
	                }
	                break;
	            default:
	                // if we are not floating, but the other one is floating...
	                if (utils_1.Utils.exists(otherFloating)) {
	                    if (otherFloating === constants_1.Constants.PINNED_TOP) {
	                        // we are not floating, other is floating top, we are first
	                        return false;
	                    }
	                    else {
	                        // we are not floating, other is floating bottom, we are always first
	                        return true;
	                    }
	                }
	                break;
	        }
	        return this.rowIndex < otherSelection.rowIndex;
	    };
	    return GridRow;
	}());
	exports.GridRow = GridRow;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var beanStub_1 = __webpack_require__(36);
	var compIdSequence = new utils_1.NumberSequence();
	var Component = (function (_super) {
	    __extends(Component, _super);
	    function Component(template) {
	        var _this = _super.call(this) || this;
	        _this.childComponents = [];
	        _this.hydrated = false;
	        _this.annotatedEventListeners = [];
	        _this.visible = true;
	        // unique id for this row component. this is used for getting a reference to the HTML dom.
	        // we cannot use the RowNode id as this is not unique (due to animation, old rows can be lying
	        // around as we create a new rowComp instance for the same row node).
	        _this.compId = compIdSequence.next();
	        if (template) {
	            _this.setTemplate(template);
	        }
	        return _this;
	    }
	    Component.prototype.setTemplateNoHydrate = function (template) {
	        this.template = template;
	    };
	    Component.prototype.afterGuiAttached = function (params) {
	        if (!this.eHtmlElement && params.eComponent) {
	            this.setHtmlElement(params.eComponent);
	        }
	    };
	    Component.prototype.getCompId = function () {
	        return this.compId;
	    };
	    Component.prototype.instantiate = function (context) {
	        var element = this.getHtmlElement();
	        this.instantiateRecurse(element, context);
	    };
	    Component.prototype.instantiateRecurse = function (parentNode, context) {
	        var childCount = parentNode.childNodes ? parentNode.childNodes.length : 0;
	        for (var i = 0; i < childCount; i++) {
	            var childNode = parentNode.childNodes[i];
	            var newComponent = context.createComponent(childNode);
	            if (newComponent) {
	                this.swapComponentForNode(newComponent, parentNode, childNode);
	            }
	            else {
	                if (childNode.childNodes) {
	                    this.instantiateRecurse(childNode, context);
	                }
	            }
	        }
	    };
	    Component.prototype.swapComponentForNode = function (newComponent, parentNode, childNode) {
	        var element = newComponent.getHtmlElement();
	        parentNode.replaceChild(element, childNode);
	        this.childComponents.push(newComponent);
	        this.swapInComponentForQuerySelectors(newComponent, childNode);
	    };
	    Component.prototype.swapInComponentForQuerySelectors = function (newComponent, childNode) {
	        var thisProto = Object.getPrototypeOf(this);
	        var thisNoType = this;
	        while (thisProto != null) {
	            var metaData = thisProto.__agComponentMetaData;
	            var currentProtoName = (thisProto.constructor).name;
	            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
	                metaData[currentProtoName].querySelectors.forEach(function (querySelector) {
	                    if (thisNoType[querySelector.attributeName] === childNode) {
	                        thisNoType[querySelector.attributeName] = newComponent;
	                    }
	                });
	            }
	            thisProto = Object.getPrototypeOf(thisProto);
	        }
	    };
	    Component.prototype.setTemplate = function (template) {
	        this.template = template;
	        var eGui = utils_1.Utils.loadTemplate(template);
	        this.setHtmlElement(eGui);
	    };
	    Component.prototype.setHtmlElement = function (element) {
	        this.eHtmlElement = element;
	        this.eHtmlElement.__agComponent = this;
	        this.hydrate();
	    };
	    Component.prototype.hydrate = function () {
	        this.addAnnotatedEventListeners();
	        this.wireQuerySelectors();
	        this.hydrated = true;
	    };
	    Component.prototype.attributesSet = function () {
	    };
	    Component.prototype.wireQuerySelectors = function () {
	        var element = this.getHtmlElement();
	        if (!element) {
	            return;
	        }
	        var thisProto = Object.getPrototypeOf(this);
	        var _loop_1 = function () {
	            var metaData = thisProto.__agComponentMetaData;
	            var currentProtoName = (thisProto.constructor).name;
	            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].querySelectors) {
	                var thisNoType_1 = this_1;
	                metaData[currentProtoName].querySelectors.forEach(function (querySelector) {
	                    var resultOfQuery = element.querySelector(querySelector.querySelector);
	                    if (resultOfQuery) {
	                        var backingComponent = resultOfQuery.__agComponent;
	                        if (backingComponent) {
	                            thisNoType_1[querySelector.attributeName] = backingComponent;
	                        }
	                        else {
	                            thisNoType_1[querySelector.attributeName] = resultOfQuery;
	                        }
	                    }
	                    else {
	                        // put debug msg in here if query selector fails???
	                    }
	                });
	            }
	            thisProto = Object.getPrototypeOf(thisProto);
	        };
	        var this_1 = this;
	        while (thisProto != null) {
	            _loop_1();
	        }
	    };
	    Component.prototype.addAnnotatedEventListeners = function () {
	        var _this = this;
	        this.removeAnnotatedEventListeners();
	        var element = this.getHtmlElement();
	        if (!element) {
	            return;
	        }
	        var thisProto = Object.getPrototypeOf(this);
	        while (thisProto != null) {
	            var metaData = thisProto.__agComponentMetaData;
	            var currentProtoName = (thisProto.constructor).name;
	            if (metaData && metaData[currentProtoName] && metaData[currentProtoName].listenerMethods) {
	                if (!this.annotatedEventListeners) {
	                    this.annotatedEventListeners = [];
	                }
	                metaData[currentProtoName].listenerMethods.forEach(function (eventListener) {
	                    var listener = _this[eventListener.methodName].bind(_this);
	                    element.addEventListener(eventListener.eventName, listener);
	                    _this.annotatedEventListeners.push({ eventName: eventListener.eventName, listener: listener });
	                });
	            }
	            thisProto = Object.getPrototypeOf(thisProto);
	        }
	    };
	    Component.prototype.removeAnnotatedEventListeners = function () {
	        if (!this.annotatedEventListeners) {
	            return;
	        }
	        var element = this.getHtmlElement();
	        if (!element) {
	            return;
	        }
	        this.annotatedEventListeners.forEach(function (eventListener) {
	            element.removeEventListener(eventListener.eventName, eventListener.listener);
	        });
	        this.annotatedEventListeners = null;
	    };
	    Component.prototype.getGui = function () {
	        if (this.eHtmlElement) {
	            return this.eHtmlElement;
	        }
	        else {
	            return this.template;
	        }
	    };
	    Component.prototype.getHtmlElement = function () {
	        if (this.eHtmlElement) {
	            return this.eHtmlElement;
	        }
	        else {
	            console.warn('getHtmlElement() called on component before gui was attached');
	            return null;
	        }
	    };
	    // used by Cell Comp (and old header code), design is a bit poor, overlap with afterGuiAttached???
	    Component.prototype.setHtmlElementNoHydrate = function (eHtmlElement) {
	        this.eHtmlElement = eHtmlElement;
	    };
	    Component.prototype.queryForHtmlElement = function (cssSelector) {
	        var element = this.getHtmlElement();
	        return element.querySelector(cssSelector);
	    };
	    Component.prototype.queryForHtmlInputElement = function (cssSelector) {
	        var element = this.getHtmlElement();
	        return element.querySelector(cssSelector);
	    };
	    Component.prototype.appendChild = function (newChild) {
	        var element = this.getHtmlElement();
	        if (utils_1.Utils.isNodeOrElement(newChild)) {
	            element.appendChild(newChild);
	        }
	        else {
	            var childComponent = newChild;
	            element.appendChild(utils_1.Utils.ensureElement(childComponent.getGui()));
	            this.childComponents.push(childComponent);
	        }
	    };
	    Component.prototype.addFeature = function (context, feature) {
	        context.wireBean(feature);
	        if (feature.destroy) {
	            this.addDestroyFunc(feature.destroy.bind(feature));
	        }
	    };
	    Component.prototype.isVisible = function () {
	        return this.visible;
	    };
	    Component.prototype.setVisible = function (visible) {
	        var element = this.getHtmlElement();
	        if (visible !== this.visible) {
	            this.visible = visible;
	            utils_1.Utils.addOrRemoveCssClass(element, 'ag-hidden', !visible);
	            var event_1 = {
	                type: Component.EVENT_VISIBLE_CHANGED,
	                visible: this.visible
	            };
	            this.dispatchEvent(event_1);
	        }
	    };
	    Component.prototype.addOrRemoveCssClass = function (className, addOrRemove) {
	        var element = this.getHtmlElement();
	        utils_1.Utils.addOrRemoveCssClass(element, className, addOrRemove);
	    };
	    Component.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.childComponents.forEach(function (childComponent) { return childComponent.destroy(); });
	        this.childComponents.length = 0;
	        if (this.hydrated) {
	            this.removeAnnotatedEventListeners();
	        }
	    };
	    Component.prototype.addGuiEventListener = function (event, listener) {
	        var element = this.getHtmlElement();
	        element.addEventListener(event, listener);
	        this.addDestroyFunc(function () { return element.removeEventListener(event, listener); });
	    };
	    Component.prototype.addCssClass = function (className) {
	        var element = this.getHtmlElement();
	        utils_1.Utils.addCssClass(element, className);
	    };
	    Component.prototype.removeCssClass = function (className) {
	        var element = this.getHtmlElement();
	        utils_1.Utils.removeCssClass(element, className);
	    };
	    Component.prototype.getAttribute = function (key) {
	        var element = this.getHtmlElement();
	        if (element) {
	            return element.getAttribute(key);
	        }
	        else {
	            return null;
	        }
	    };
	    Component.prototype.getRefElement = function (refName) {
	        return this.queryForHtmlElement('[ref="' + refName + '"]');
	    };
	    Component.EVENT_VISIBLE_CHANGED = 'visibleChanged';
	    return Component;
	}(beanStub_1.BeanStub));
	exports.Component = Component;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var eventService_1 = __webpack_require__(5);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var utils_1 = __webpack_require__(8);
	var BeanStub = (function () {
	    function BeanStub() {
	        this.destroyFunctions = [];
	    }
	    BeanStub.prototype.destroy = function () {
	        this.destroyFunctions.forEach(function (func) { return func(); });
	        this.destroyFunctions.length = 0;
	    };
	    BeanStub.prototype.addEventListener = function (eventType, listener) {
	        if (!this.localEventService) {
	            this.localEventService = new eventService_1.EventService();
	        }
	        this.localEventService.addEventListener(eventType, listener);
	    };
	    BeanStub.prototype.removeEventListener = function (eventType, listener) {
	        if (this.localEventService) {
	            this.localEventService.removeEventListener(eventType, listener);
	        }
	    };
	    BeanStub.prototype.dispatchEventAsync = function (event) {
	        var _this = this;
	        setTimeout(function () { return _this.dispatchEvent(event); }, 0);
	    };
	    BeanStub.prototype.dispatchEvent = function (event) {
	        if (this.localEventService) {
	            this.localEventService.dispatchEvent(event);
	        }
	    };
	    BeanStub.prototype.addDestroyableEventListener = function (eElement, event, listener) {
	        if (eElement instanceof HTMLElement) {
	            utils_1._.addSafePassiveEventListener(eElement, event, listener);
	        }
	        else if (eElement instanceof gridOptionsWrapper_1.GridOptionsWrapper) {
	            eElement.addEventListener(event, listener);
	        }
	        else {
	            eElement.addEventListener(event, listener);
	        }
	        this.destroyFunctions.push(function () {
	            if (eElement instanceof HTMLElement) {
	                eElement.removeEventListener(event, listener);
	            }
	            else if (eElement instanceof gridOptionsWrapper_1.GridOptionsWrapper) {
	                eElement.removeEventListener(event, listener);
	            }
	            else {
	                eElement.removeEventListener(event, listener);
	            }
	        });
	    };
	    BeanStub.prototype.addDestroyFunc = function (func) {
	        this.destroyFunctions.push(func);
	    };
	    return BeanStub;
	}());
	exports.BeanStub = BeanStub;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(35);
	var rowNode_1 = __webpack_require__(30);
	var utils_1 = __webpack_require__(8);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var events_1 = __webpack_require__(11);
	var eventService_1 = __webpack_require__(5);
	var gridApi_1 = __webpack_require__(12);
	var columnController_1 = __webpack_require__(15);
	var CheckboxSelectionComponent = (function (_super) {
	    __extends(CheckboxSelectionComponent, _super);
	    function CheckboxSelectionComponent() {
	        return _super.call(this, "<span class=\"ag-selection-checkbox\"/>") || this;
	    }
	    CheckboxSelectionComponent.prototype.createAndAddIcons = function () {
	        this.eCheckedIcon = utils_1.Utils.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, this.column);
	        this.eUncheckedIcon = utils_1.Utils.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, this.column);
	        this.eIndeterminateIcon = utils_1.Utils.createIconNoSpan('checkboxIndeterminate', this.gridOptionsWrapper, this.column);
	        var element = this.getHtmlElement();
	        element.appendChild(this.eCheckedIcon);
	        element.appendChild(this.eUncheckedIcon);
	        element.appendChild(this.eIndeterminateIcon);
	    };
	    CheckboxSelectionComponent.prototype.onSelectionChanged = function () {
	        var state = this.rowNode.isSelected();
	        utils_1.Utils.setVisible(this.eCheckedIcon, state === true);
	        utils_1.Utils.setVisible(this.eUncheckedIcon, state === false);
	        utils_1.Utils.setVisible(this.eIndeterminateIcon, typeof state !== 'boolean');
	    };
	    CheckboxSelectionComponent.prototype.onCheckedClicked = function () {
	        var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
	        var updatedCount = this.rowNode.setSelectedParams({ newValue: false, groupSelectsFiltered: groupSelectsFiltered });
	        return updatedCount;
	    };
	    CheckboxSelectionComponent.prototype.onUncheckedClicked = function (event) {
	        var groupSelectsFiltered = this.gridOptionsWrapper.isGroupSelectsFiltered();
	        var updatedCount = this.rowNode.setSelectedParams({ newValue: true, rangeSelect: event.shiftKey, groupSelectsFiltered: groupSelectsFiltered });
	        return updatedCount;
	    };
	    CheckboxSelectionComponent.prototype.onIndeterminateClicked = function (event) {
	        var result = this.onUncheckedClicked(event);
	        if (result === 0) {
	            this.onCheckedClicked();
	        }
	    };
	    CheckboxSelectionComponent.prototype.init = function (params) {
	        this.rowNode = params.rowNode;
	        this.column = params.column;
	        this.visibleFunc = params.visibleFunc;
	        this.createAndAddIcons();
	        this.onSelectionChanged();
	        // we don't want the row clicked event to fire when selecting the checkbox, otherwise the row
	        // would possibly get selected twice
	        this.addGuiEventListener('click', function (event) { return event.stopPropagation(); });
	        // likewise we don't want double click on this icon to open a group
	        this.addGuiEventListener('dblclick', function (event) { return event.stopPropagation(); });
	        this.addDestroyableEventListener(this.eCheckedIcon, 'click', this.onCheckedClicked.bind(this));
	        this.addDestroyableEventListener(this.eUncheckedIcon, 'click', this.onUncheckedClicked.bind(this));
	        this.addDestroyableEventListener(this.eIndeterminateIcon, 'click', this.onIndeterminateClicked.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_ROW_SELECTED, this.onSelectionChanged.bind(this));
	        if (this.visibleFunc) {
	            this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelect.bind(this));
	            this.showOrHideSelect();
	        }
	    };
	    CheckboxSelectionComponent.prototype.showOrHideSelect = function () {
	        var params = this.createParams();
	        var visible = this.visibleFunc(params);
	        this.setVisible(visible);
	    };
	    CheckboxSelectionComponent.prototype.createParams = function () {
	        var params = {
	            node: this.rowNode,
	            data: this.rowNode.data,
	            column: this.column,
	            colDef: this.column.getColDef(),
	            context: this.gridOptionsWrapper.getContext(),
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        return params;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], CheckboxSelectionComponent.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], CheckboxSelectionComponent.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], CheckboxSelectionComponent.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], CheckboxSelectionComponent.prototype, "columnApi", void 0);
	    return CheckboxSelectionComponent;
	}(component_1.Component));
	exports.CheckboxSelectionComponent = CheckboxSelectionComponent;


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var columnController_1 = __webpack_require__(15);
	var utils_1 = __webpack_require__(8);
	var gridCell_1 = __webpack_require__(33);
	var gridApi_1 = __webpack_require__(12);
	var cellComp_1 = __webpack_require__(29);
	var FocusedCellController = (function () {
	    function FocusedCellController() {
	    }
	    FocusedCellController.prototype.init = function () {
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_GROUP_OPENED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_MOVED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_PINNED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearFocusedCell.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_VISIBLE, this.clearFocusedCell.bind(this));
	    };
	    FocusedCellController.prototype.clearFocusedCell = function () {
	        this.focusedCell = null;
	        this.onCellFocused(false);
	    };
	    FocusedCellController.prototype.getFocusedCell = function () {
	        return this.focusedCell;
	    };
	    // we check if the browser is focusing something, and if it is, and
	    // it's the cell we think is focused, then return the cell. so this
	    // methods returns the cell if a) we think it has focus and b) the
	    // browser thinks it has focus. this then returns nothing if we
	    // first focus a cell, then second click outside the grid, as then the
	    // grid cell will still be focused as far as the grid is concerned,
	    // however the browser focus will have moved somewhere else.
	    FocusedCellController.prototype.getFocusCellToUseAfterRefresh = function () {
	        if (this.gridOptionsWrapper.isSuppressFocusAfterRefresh()) {
	            return null;
	        }
	        if (!this.focusedCell) {
	            return null;
	        }
	        var browserFocusedCell = this.getGridCellForDomElement(document.activeElement);
	        if (!browserFocusedCell) {
	            return null;
	        }
	        var gridFocusId = this.focusedCell.createId();
	        var browserFocusId = browserFocusedCell.createId();
	        if (gridFocusId === browserFocusId) {
	            return this.focusedCell;
	        }
	        else {
	            return null;
	        }
	    };
	    FocusedCellController.prototype.getGridCellForDomElement = function (eBrowserCell) {
	        var ePointer = eBrowserCell;
	        while (ePointer) {
	            var cellComp = this.gridOptionsWrapper.getDomData(ePointer, cellComp_1.CellComp.DOM_DATA_KEY_CELL_COMP);
	            if (cellComp) {
	                return cellComp.getGridCell();
	            }
	            ePointer = ePointer.parentNode;
	        }
	        return null;
	    };
	    FocusedCellController.prototype.setFocusedCell = function (rowIndex, colKey, floating, forceBrowserFocus) {
	        if (forceBrowserFocus === void 0) { forceBrowserFocus = false; }
	        if (this.gridOptionsWrapper.isSuppressCellSelection()) {
	            return;
	        }
	        var column = utils_1.Utils.makeNull(this.columnController.getGridColumn(colKey));
	        this.focusedCell = new gridCell_1.GridCell({ rowIndex: rowIndex,
	            floating: utils_1.Utils.makeNull(floating),
	            column: column });
	        this.onCellFocused(forceBrowserFocus);
	    };
	    FocusedCellController.prototype.isCellFocused = function (gridCell) {
	        if (utils_1.Utils.missing(this.focusedCell)) {
	            return false;
	        }
	        return this.focusedCell.column === gridCell.column && this.isRowFocused(gridCell.rowIndex, gridCell.floating);
	    };
	    FocusedCellController.prototype.isRowNodeFocused = function (rowNode) {
	        return this.isRowFocused(rowNode.rowIndex, rowNode.rowPinned);
	    };
	    FocusedCellController.prototype.isAnyCellFocused = function () {
	        return !!this.focusedCell;
	    };
	    FocusedCellController.prototype.isRowFocused = function (rowIndex, floating) {
	        if (utils_1.Utils.missing(this.focusedCell)) {
	            return false;
	        }
	        var floatingOrNull = utils_1.Utils.makeNull(floating);
	        return this.focusedCell.rowIndex === rowIndex && this.focusedCell.floating === floatingOrNull;
	    };
	    FocusedCellController.prototype.onCellFocused = function (forceBrowserFocus) {
	        var event = {
	            type: events_1.Events.EVENT_CELL_FOCUSED,
	            forceBrowserFocus: forceBrowserFocus,
	            rowIndex: null,
	            column: null,
	            floating: null,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            rowPinned: null
	        };
	        if (this.focusedCell) {
	            event.rowIndex = this.focusedCell.rowIndex;
	            event.column = this.focusedCell.column;
	            event.rowPinned = this.focusedCell.floating;
	        }
	        this.eventService.dispatchEvent(event);
	    };
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], FocusedCellController.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], FocusedCellController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], FocusedCellController.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], FocusedCellController.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], FocusedCellController.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], FocusedCellController.prototype, "init", null);
	    FocusedCellController = __decorate([
	        context_1.Bean('focusedCellController')
	    ], FocusedCellController);
	    return FocusedCellController;
	}());
	exports.FocusedCellController = FocusedCellController;


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var utils_1 = __webpack_require__(8);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var columnController_1 = __webpack_require__(15);
	var gridApi_1 = __webpack_require__(12);
	var ScrollVisibleService = (function () {
	    function ScrollVisibleService() {
	    }
	    ScrollVisibleService.prototype.setScrollsVisible = function (params) {
	        var atLeastOneDifferent = this.vBody !== params.vBody
	            || this.hBody !== params.hBody
	            || this.vPinnedLeft !== params.vPinnedLeft
	            || this.vPinnedRight !== params.vPinnedRight;
	        if (atLeastOneDifferent) {
	            this.vBody = params.vBody;
	            this.hBody = params.hBody;
	            this.vPinnedLeft = params.vPinnedLeft;
	            this.vPinnedRight = params.vPinnedRight;
	            var event_1 = {
	                type: events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	    };
	    ScrollVisibleService.prototype.isVBodyShowing = function () {
	        return this.vBody;
	    };
	    ScrollVisibleService.prototype.isHBodyShowing = function () {
	        return this.hBody;
	    };
	    ScrollVisibleService.prototype.isVPinnedLeftShowing = function () {
	        return this.vPinnedLeft;
	    };
	    ScrollVisibleService.prototype.isVPinnedRightShowing = function () {
	        return this.vPinnedRight;
	    };
	    ScrollVisibleService.prototype.getPinnedLeftWidth = function () {
	        return this.columnController.getPinnedLeftContainerWidth();
	    };
	    ScrollVisibleService.prototype.getPinnedLeftWithScrollWidth = function () {
	        var result = this.getPinnedLeftWidth();
	        if (this.vPinnedLeft) {
	            result += utils_1.Utils.getScrollbarWidth();
	        }
	        return result;
	    };
	    ScrollVisibleService.prototype.getPinnedRightWidth = function () {
	        return this.columnController.getPinnedRightContainerWidth();
	    };
	    ScrollVisibleService.prototype.getPinnedRightWithScrollWidth = function () {
	        var result = this.getPinnedRightWidth();
	        if (this.vPinnedRight) {
	            result += utils_1.Utils.getScrollbarWidth();
	        }
	        return result;
	    };
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], ScrollVisibleService.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], ScrollVisibleService.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], ScrollVisibleService.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], ScrollVisibleService.prototype, "gridApi", void 0);
	    ScrollVisibleService = __decorate([
	        context_1.Bean('scrollVisibleService')
	    ], ScrollVisibleService);
	    return ScrollVisibleService;
	}());
	exports.ScrollVisibleService = ScrollVisibleService;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	/**
	 * There are many instances of this component covering each of the areas a row can be entered
	 * eg body, pinned left, fullWidth. The component differs from others in that it's given the
	 * elements, there is no template. All of the elements are part of the GridPanel.
	 */
	var RowContainerComponent = (function () {
	    function RowContainerComponent(params) {
	        this.childCount = 0;
	        this.rowTemplatesToAdd = [];
	        this.afterGuiAttachedCallbacks = [];
	        this.eContainer = params.eContainer;
	        this.eViewport = params.eViewport;
	        this.hideWhenNoChildren = params.hideWhenNoChildren;
	    }
	    RowContainerComponent.prototype.postConstruct = function () {
	        this.domOrder = this.gridOptionsWrapper.isEnsureDomOrder() && !this.gridOptionsWrapper.isForPrint();
	        this.checkVisibility();
	    };
	    RowContainerComponent.prototype.getRowElement = function (compId) {
	        return this.eContainer.querySelector("[comp-id=\"" + compId + "\"]");
	    };
	    RowContainerComponent.prototype.setHeight = function (height) {
	        this.eContainer.style.height = height + "px";
	    };
	    RowContainerComponent.prototype.flushRowTemplates = function () {
	        // if doing dom order, then rowTemplates will be empty,
	        // or if now rows added since last time also empty.
	        if (this.rowTemplatesToAdd.length !== 0) {
	            var htmlToAdd = this.rowTemplatesToAdd.join('');
	            utils_1.Utils.appendHtml(this.eContainer, htmlToAdd);
	            this.rowTemplatesToAdd.length = 0;
	        }
	        // this only empty if no rows since last time, as when
	        // doing dom order, we still have callbacks to process
	        this.afterGuiAttachedCallbacks.forEach(function (func) { return func(); });
	        this.afterGuiAttachedCallbacks.length = 0;
	        this.lastPlacedElement = null;
	    };
	    RowContainerComponent.prototype.appendRowTemplate = function (rowTemplate, callback) {
	        if (this.domOrder) {
	            this.lastPlacedElement = utils_1.Utils.insertTemplateWithDomOrder(this.eContainer, rowTemplate, this.lastPlacedElement);
	        }
	        else {
	            this.rowTemplatesToAdd.push(rowTemplate);
	        }
	        this.afterGuiAttachedCallbacks.push(callback);
	        // it is important we put items in in order, so that when we open a row group,
	        // the new rows are inserted after the opened group, but before the rows below.
	        // that way, the rows below are over the new rows (as dom renders last in dom over
	        // items previous in dom), otherwise the child rows would cover the row below and
	        // that meant the user doesn't see the rows below slide away.
	        this.childCount++;
	        this.checkVisibility();
	    };
	    RowContainerComponent.prototype.ensureDomOrder = function (eRow) {
	        if (this.domOrder) {
	            utils_1.Utils.ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);
	            this.lastPlacedElement = eRow;
	        }
	    };
	    RowContainerComponent.prototype.removeRowElement = function (eRow) {
	        this.eContainer.removeChild(eRow);
	        this.childCount--;
	        this.checkVisibility();
	    };
	    RowContainerComponent.prototype.checkVisibility = function () {
	        if (!this.hideWhenNoChildren) {
	            return;
	        }
	        var eGui = this.eViewport ? this.eViewport : this.eContainer;
	        var visible = this.childCount > 0;
	        if (this.visible !== visible) {
	            this.visible = visible;
	            utils_1.Utils.setVisible(eGui, visible);
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], RowContainerComponent.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RowContainerComponent.prototype, "postConstruct", null);
	    return RowContainerComponent;
	}());
	exports.RowContainerComponent = RowContainerComponent;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var beanStub_1 = __webpack_require__(36);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var utils_1 = __webpack_require__(8);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var gridPanel_1 = __webpack_require__(24);
	var scrollVisibleService_1 = __webpack_require__(39);
	var selectionController_1 = __webpack_require__(27);
	var columnController_1 = __webpack_require__(15);
	var gridApi_1 = __webpack_require__(12);
	var PaginationAutoPageSizeService = (function (_super) {
	    __extends(PaginationAutoPageSizeService, _super);
	    function PaginationAutoPageSizeService() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    PaginationAutoPageSizeService.prototype.notActive = function () {
	        return !this.gridOptionsWrapper.isPaginationAutoPageSize();
	    };
	    PaginationAutoPageSizeService.prototype.postConstruct = function () {
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_BODY_HEIGHT_CHANGED, this.onBodyHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
	        this.checkPageSize();
	    };
	    PaginationAutoPageSizeService.prototype.onScrollVisibilityChanged = function () {
	        this.checkPageSize();
	    };
	    PaginationAutoPageSizeService.prototype.onBodyHeightChanged = function () {
	        this.checkPageSize();
	    };
	    PaginationAutoPageSizeService.prototype.checkPageSize = function () {
	        if (this.notActive()) {
	            return;
	        }
	        var rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
	        var bodyHeight = this.gridPanel.getBodyHeight();
	        if (this.scrollVisibleService.isHBodyShowing()) {
	            bodyHeight = bodyHeight - this.gridOptionsWrapper.getScrollbarWidth();
	        }
	        if (bodyHeight > 0) {
	            var newPageSize = Math.floor(bodyHeight / rowHeight);
	            this.gridOptionsWrapper.setProperty('paginationPageSize', newPageSize);
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], PaginationAutoPageSizeService.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], PaginationAutoPageSizeService.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], PaginationAutoPageSizeService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('scrollVisibleService'),
	        __metadata("design:type", scrollVisibleService_1.ScrollVisibleService)
	    ], PaginationAutoPageSizeService.prototype, "scrollVisibleService", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], PaginationAutoPageSizeService.prototype, "postConstruct", null);
	    PaginationAutoPageSizeService = __decorate([
	        context_1.Bean('paginationAutoPageSizeService')
	    ], PaginationAutoPageSizeService);
	    return PaginationAutoPageSizeService;
	}(beanStub_1.BeanStub));
	exports.PaginationAutoPageSizeService = PaginationAutoPageSizeService;
	var PaginationProxy = (function (_super) {
	    __extends(PaginationProxy, _super);
	    function PaginationProxy() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.currentPage = 0;
	        _this.topRowIndex = 0;
	        _this.bottomRowIndex = 0;
	        _this.pixelOffset = 0;
	        return _this;
	    }
	    PaginationProxy.prototype.postConstruct = function () {
	        this.active = this.gridOptionsWrapper.isPagination();
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, 'paginationPageSize', this.onModelUpdated.bind(this));
	        this.onModelUpdated();
	    };
	    PaginationProxy.prototype.isLastRowFound = function () {
	        return this.rowModel.isLastRowFound();
	    };
	    PaginationProxy.prototype.onModelUpdated = function (modelUpdatedEvent) {
	        this.setIndexesAndBounds();
	        var paginationChangedEvent = {
	            type: events_1.Events.EVENT_PAGINATION_CHANGED,
	            animate: modelUpdatedEvent ? modelUpdatedEvent.animate : false,
	            newData: modelUpdatedEvent ? modelUpdatedEvent.newData : false,
	            newPage: modelUpdatedEvent ? modelUpdatedEvent.newPage : false,
	            keepRenderedRows: modelUpdatedEvent ? modelUpdatedEvent.keepRenderedRows : false,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(paginationChangedEvent);
	    };
	    PaginationProxy.prototype.goToPage = function (page) {
	        if (!this.active) {
	            return;
	        }
	        if (this.currentPage === page) {
	            return;
	        }
	        this.currentPage = page;
	        var event = {
	            type: events_1.Events.EVENT_MODEL_UPDATED,
	            animate: false,
	            keepRenderedRows: false,
	            newData: false,
	            newPage: true,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.onModelUpdated(event);
	    };
	    PaginationProxy.prototype.getPixelOffset = function () {
	        return this.pixelOffset;
	    };
	    PaginationProxy.prototype.getRow = function (index) {
	        return this.rowModel.getRow(index);
	    };
	    PaginationProxy.prototype.getRowIndexAtPixel = function (pixel) {
	        return this.rowModel.getRowIndexAtPixel(pixel);
	    };
	    PaginationProxy.prototype.getCurrentPageHeight = function () {
	        if (utils_1._.missing(this.topRowBounds) || utils_1._.missing(this.bottomRowBounds)) {
	            return 0;
	        }
	        return this.bottomRowBounds.rowTop + this.bottomRowBounds.rowHeight - this.topRowBounds.rowTop;
	    };
	    PaginationProxy.prototype.isRowPresent = function (rowNode) {
	        if (!this.rowModel.isRowPresent(rowNode)) {
	            return false;
	        }
	        var nodeIsInPage = rowNode.rowIndex >= this.topRowIndex && rowNode.rowIndex <= this.bottomRowIndex;
	        return nodeIsInPage;
	    };
	    PaginationProxy.prototype.isEmpty = function () {
	        return this.rowModel.isEmpty();
	    };
	    PaginationProxy.prototype.isRowsToRender = function () {
	        return this.rowModel.isRowsToRender();
	    };
	    PaginationProxy.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
	        return this.rowModel.getNodesInRangeForSelection(firstInRange, lastInRange);
	    };
	    PaginationProxy.prototype.forEachNode = function (callback) {
	        return this.rowModel.forEachNode(callback);
	    };
	    PaginationProxy.prototype.getType = function () {
	        return this.rowModel.getType();
	    };
	    PaginationProxy.prototype.getRowBounds = function (index) {
	        return this.rowModel.getRowBounds(index);
	    };
	    PaginationProxy.prototype.getPageFirstRow = function () {
	        return this.pageSize * this.currentPage;
	    };
	    PaginationProxy.prototype.getPageLastRow = function () {
	        var totalLastRow = (this.pageSize * (this.currentPage + 1)) - 1;
	        var pageLastRow = this.rowModel.getPageLastRow();
	        if (pageLastRow > totalLastRow) {
	            return totalLastRow;
	        }
	        else {
	            return pageLastRow;
	        }
	    };
	    PaginationProxy.prototype.getRowCount = function () {
	        return this.rowModel.getRowCount();
	    };
	    PaginationProxy.prototype.goToPageWithIndex = function (index) {
	        if (!this.active) {
	            return;
	        }
	        var pageNumber = Math.floor(index / this.pageSize);
	        this.goToPage(pageNumber);
	    };
	    PaginationProxy.prototype.getTotalRowCount = function () {
	        return this.rowModel.getPageLastRow() + 1;
	    };
	    PaginationProxy.prototype.isLastPageFound = function () {
	        return this.rowModel.isLastRowFound();
	    };
	    PaginationProxy.prototype.getCurrentPage = function () {
	        return this.currentPage;
	    };
	    PaginationProxy.prototype.goToNextPage = function () {
	        this.goToPage(this.currentPage + 1);
	    };
	    PaginationProxy.prototype.goToPreviousPage = function () {
	        this.goToPage(this.currentPage - 1);
	    };
	    PaginationProxy.prototype.goToFirstPage = function () {
	        this.goToPage(0);
	    };
	    PaginationProxy.prototype.goToLastPage = function () {
	        var rowCount = this.rowModel.getPageLastRow() + 1;
	        var lastPage = Math.floor(rowCount / this.pageSize);
	        this.goToPage(lastPage);
	    };
	    PaginationProxy.prototype.getPageSize = function () {
	        return this.pageSize;
	    };
	    PaginationProxy.prototype.getTotalPages = function () {
	        return this.totalPages;
	    };
	    PaginationProxy.prototype.setPageSize = function () {
	        // show put this into super class
	        this.pageSize = this.gridOptionsWrapper.getPaginationPageSize();
	        if (!(this.pageSize >= 1)) {
	            this.pageSize = 100;
	        }
	    };
	    PaginationProxy.prototype.setIndexesAndBounds = function () {
	        if (this.active) {
	            this.setPageSize();
	            var totalRowCount = this.getTotalRowCount();
	            this.totalPages = Math.floor((totalRowCount - 1) / this.pageSize) + 1;
	            if (this.currentPage >= this.totalPages) {
	                this.currentPage = this.totalPages - 1;
	            }
	            if (!utils_1._.isNumeric(this.currentPage) || this.currentPage < 0) {
	                this.currentPage = 0;
	            }
	            this.topRowIndex = this.pageSize * this.currentPage;
	            this.bottomRowIndex = (this.pageSize * (this.currentPage + 1)) - 1;
	            var maxRowAllowed = this.rowModel.getPageLastRow();
	            if (this.bottomRowIndex > maxRowAllowed) {
	                this.bottomRowIndex = maxRowAllowed;
	            }
	        }
	        else {
	            this.pageSize = this.rowModel.getPageLastRow() + 1;
	            this.totalPages = 1;
	            this.currentPage = 0;
	            this.topRowIndex = 0;
	            this.bottomRowIndex = this.rowModel.getPageLastRow();
	        }
	        this.topRowBounds = this.rowModel.getRowBounds(this.topRowIndex);
	        this.bottomRowBounds = this.rowModel.getRowBounds(this.bottomRowIndex);
	        this.pixelOffset = utils_1._.exists(this.topRowBounds) ? this.topRowBounds.rowTop : 0;
	    };
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], PaginationProxy.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], PaginationProxy.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], PaginationProxy.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], PaginationProxy.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], PaginationProxy.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], PaginationProxy.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], PaginationProxy.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], PaginationProxy.prototype, "postConstruct", null);
	    PaginationProxy = __decorate([
	        context_1.Bean('paginationProxy')
	    ], PaginationProxy);
	    return PaginationProxy;
	}(beanStub_1.BeanStub));
	exports.PaginationProxy = PaginationProxy;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(35);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var utils_1 = __webpack_require__(8);
	var PopupEditorWrapper = (function (_super) {
	    __extends(PopupEditorWrapper, _super);
	    function PopupEditorWrapper(cellEditor) {
	        var _this = _super.call(this, "<div class=\"ag-popup-editor\" tabindex=\"-1\"/>") || this;
	        _this.getGuiCalledOnChild = false;
	        _this.cellEditor = cellEditor;
	        return _this;
	    }
	    PopupEditorWrapper.prototype.onKeyDown = function (event) {
	        this.params.onKeyDown(event);
	    };
	    PopupEditorWrapper.prototype.getGui = function () {
	        // we call getGui() on child here (rather than in the constructor)
	        // as we should wait for 'init' to be called on child first.
	        if (!this.getGuiCalledOnChild) {
	            this.appendChild(utils_1._.assertHtmlElement(this.cellEditor.getGui()));
	            this.getGuiCalledOnChild = true;
	        }
	        return _super.prototype.getGui.call(this);
	    };
	    PopupEditorWrapper.prototype.init = function (params) {
	        var _this = this;
	        this.params = params;
	        this.gridOptionsWrapper.setDomData(this.getHtmlElement(), PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER, true);
	        this.addDestroyFunc(function () {
	            if (_this.cellEditor.destroy) {
	                _this.cellEditor.destroy();
	            }
	        });
	        this.addDestroyableEventListener(
	        // this needs to be 'super' and not 'this' as if we call 'this',
	        // it ends up called 'getGui()' on the child before 'init' was called,
	        // which is not good
	        _super.prototype.getHtmlElement.call(this), 'keydown', this.onKeyDown.bind(this));
	    };
	    PopupEditorWrapper.prototype.afterGuiAttached = function () {
	        if (this.cellEditor.afterGuiAttached) {
	            this.cellEditor.afterGuiAttached({
	                eComponent: utils_1._.assertHtmlElement(this.cellEditor.getGui())
	            });
	        }
	    };
	    PopupEditorWrapper.prototype.getValue = function () {
	        return this.cellEditor.getValue();
	    };
	    PopupEditorWrapper.prototype.isPopup = function () {
	        return true;
	    };
	    PopupEditorWrapper.prototype.isCancelBeforeStart = function () {
	        if (this.cellEditor.isCancelBeforeStart) {
	            return this.cellEditor.isCancelBeforeStart();
	        }
	    };
	    PopupEditorWrapper.prototype.isCancelAfterEnd = function () {
	        if (this.cellEditor.isCancelAfterEnd) {
	            return this.cellEditor.isCancelAfterEnd();
	        }
	    };
	    PopupEditorWrapper.prototype.focusIn = function () {
	        if (this.cellEditor.focusIn) {
	            this.cellEditor.focusIn();
	        }
	    };
	    PopupEditorWrapper.prototype.focusOut = function () {
	        if (this.cellEditor.focusOut) {
	            this.cellEditor.focusOut();
	        }
	    };
	    PopupEditorWrapper.DOM_KEY_POPUP_EDITOR_WRAPPER = 'popupEditorWrapper';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], PopupEditorWrapper.prototype, "gridOptionsWrapper", void 0);
	    return PopupEditorWrapper;
	}(component_1.Component));
	exports.PopupEditorWrapper = PopupEditorWrapper;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var columnController_1 = __webpack_require__(15);
	var gridPanel_1 = __webpack_require__(24);
	var eventService_1 = __webpack_require__(5);
	var logger_1 = __webpack_require__(6);
	var events_1 = __webpack_require__(11);
	var context_1 = __webpack_require__(7);
	var context_2 = __webpack_require__(7);
	var context_3 = __webpack_require__(7);
	var context_4 = __webpack_require__(7);
	var counter = 0;
	var AlignedGridsService = (function () {
	    function AlignedGridsService() {
	        this.instanceId = counter++;
	        // flag to mark if we are consuming. to avoid cyclic events (ie other grid firing back to master
	        // while processing a master event) we mark this if consuming an event, and if we are, then
	        // we don't fire back any events.
	        this.consuming = false;
	    }
	    AlignedGridsService.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('AlignedGridsService');
	    };
	    AlignedGridsService.prototype.init = function () {
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_BODY_SCROLL, this.fireScrollEvent.bind(this));
	    };
	    // common logic across all the fire methods
	    AlignedGridsService.prototype.fireEvent = function (callback) {
	        // if we are already consuming, then we are acting on an event from a master,
	        // so we don't cause a cyclic firing of events
	        if (this.consuming) {
	            return;
	        }
	        // iterate through the aligned grids, and pass each aligned grid service to the callback
	        var otherGrids = this.gridOptionsWrapper.getAlignedGrids();
	        if (otherGrids) {
	            otherGrids.forEach(function (otherGridOptions) {
	                if (otherGridOptions.api) {
	                    var alignedGridService = otherGridOptions.api.__getAlignedGridService();
	                    callback(alignedGridService);
	                }
	            });
	        }
	    };
	    // common logic across all consume methods. very little common logic, however extracting
	    // guarantees consistency across the methods.
	    AlignedGridsService.prototype.onEvent = function (callback) {
	        this.consuming = true;
	        callback();
	        this.consuming = false;
	    };
	    AlignedGridsService.prototype.fireColumnEvent = function (event) {
	        this.fireEvent(function (alignedGridsService) {
	            alignedGridsService.onColumnEvent(event);
	        });
	    };
	    AlignedGridsService.prototype.fireScrollEvent = function (event) {
	        if (event.direction !== 'horizontal') {
	            return;
	        }
	        this.fireEvent(function (alignedGridsService) {
	            alignedGridsService.onScrollEvent(event);
	        });
	    };
	    AlignedGridsService.prototype.onScrollEvent = function (event) {
	        var _this = this;
	        this.onEvent(function () {
	            _this.gridPanel.setHorizontalScrollPosition(event.left);
	        });
	    };
	    AlignedGridsService.prototype.getMasterColumns = function (event) {
	        var result = [];
	        if (event.columns) {
	            event.columns.forEach(function (column) {
	                result.push(column);
	            });
	        }
	        else if (event.column) {
	            result.push(event.column);
	        }
	        return result;
	    };
	    AlignedGridsService.prototype.getColumnIds = function (event) {
	        var result = [];
	        if (event.columns) {
	            event.columns.forEach(function (column) {
	                result.push(column.getColId());
	            });
	        }
	        else if (event.columns) {
	            result.push(event.column.getColId());
	        }
	        return result;
	    };
	    AlignedGridsService.prototype.onColumnEvent = function (event) {
	        var _this = this;
	        this.onEvent(function () {
	            switch (event.type) {
	                case events_1.Events.EVENT_COLUMN_MOVED:
	                case events_1.Events.EVENT_COLUMN_VISIBLE:
	                case events_1.Events.EVENT_COLUMN_PINNED:
	                case events_1.Events.EVENT_COLUMN_RESIZED:
	                    var colEvent = event;
	                    _this.processColumnEvent(colEvent);
	                    break;
	                case events_1.Events.EVENT_COLUMN_GROUP_OPENED:
	                    var groupOpenedEvent = event;
	                    _this.processGroupOpenedEvent(groupOpenedEvent);
	                    break;
	                case events_1.Events.EVENT_COLUMN_PIVOT_CHANGED:
	                    // we cannot support pivoting with aligned grids as the columns will be out of sync as the
	                    // grids will have columns created based on the row data of the grid.
	                    console.warn('ag-Grid: pivoting is not supported with aligned grids. ' +
	                        'You can only use one of these features at a time in a grid.');
	                    break;
	            }
	        });
	    };
	    AlignedGridsService.prototype.processGroupOpenedEvent = function (groupOpenedEvent) {
	        // likewise for column group
	        var masterColumnGroup = groupOpenedEvent.columnGroup;
	        var otherColumnGroup;
	        if (masterColumnGroup) {
	            var groupId = masterColumnGroup.getGroupId();
	            otherColumnGroup = this.columnController.getOriginalColumnGroup(groupId);
	        }
	        if (masterColumnGroup && !otherColumnGroup) {
	            return;
	        }
	        this.logger.log('onColumnEvent-> processing ' + event + ' expanded = ' + masterColumnGroup.isExpanded());
	        this.columnController.setColumnGroupOpened(otherColumnGroup, masterColumnGroup.isExpanded());
	    };
	    AlignedGridsService.prototype.processColumnEvent = function (colEvent) {
	        var _this = this;
	        // the column in the event is from the master grid. need to
	        // look up the equivalent from this (other) grid
	        var masterColumn = colEvent.column;
	        var otherColumn;
	        if (masterColumn) {
	            otherColumn = this.columnController.getPrimaryColumn(masterColumn.getColId());
	        }
	        // if event was with respect to a master column, that is not present in this
	        // grid, then we ignore the event
	        if (masterColumn && !otherColumn) {
	            return;
	        }
	        // in time, all the methods below should use the column ids, it's a more generic way
	        // of handling columns, and also allows for single or multi column events
	        var columnIds = this.getColumnIds(colEvent);
	        var masterColumns = this.getMasterColumns(colEvent);
	        switch (colEvent.type) {
	            case events_1.Events.EVENT_COLUMN_MOVED:
	                var movedEvent = colEvent;
	                this.logger.log('onColumnEvent-> processing ' + colEvent.type + ' toIndex = ' + movedEvent.toIndex);
	                this.columnController.moveColumns(columnIds, movedEvent.toIndex);
	                break;
	            case events_1.Events.EVENT_COLUMN_VISIBLE:
	                var visibleEvent = colEvent;
	                this.logger.log('onColumnEvent-> processing ' + colEvent.type + ' visible = ' + visibleEvent.visible);
	                this.columnController.setColumnsVisible(columnIds, visibleEvent.visible);
	                break;
	            case events_1.Events.EVENT_COLUMN_PINNED:
	                var pinnedEvent = colEvent;
	                this.logger.log('onColumnEvent-> processing ' + colEvent.type + ' pinned = ' + pinnedEvent.pinned);
	                this.columnController.setColumnsPinned(columnIds, pinnedEvent.pinned);
	                break;
	            case events_1.Events.EVENT_COLUMN_RESIZED:
	                var resizedEvent_1 = colEvent;
	                masterColumns.forEach(function (masterColumn) {
	                    _this.logger.log('onColumnEvent-> processing ' + colEvent.type + ' actualWidth = ' + masterColumn.getActualWidth());
	                    _this.columnController.setColumnWidth(masterColumn.getColId(), masterColumn.getActualWidth(), resizedEvent_1.finished);
	                });
	                break;
	        }
	    };
	    __decorate([
	        context_3.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], AlignedGridsService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_3.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], AlignedGridsService.prototype, "columnController", void 0);
	    __decorate([
	        context_3.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], AlignedGridsService.prototype, "gridPanel", void 0);
	    __decorate([
	        context_3.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], AlignedGridsService.prototype, "eventService", void 0);
	    __decorate([
	        __param(0, context_2.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], AlignedGridsService.prototype, "setBeans", null);
	    __decorate([
	        context_4.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], AlignedGridsService.prototype, "init", null);
	    AlignedGridsService = __decorate([
	        context_1.Bean('alignedGridsService')
	    ], AlignedGridsService);
	    return AlignedGridsService;
	}());
	exports.AlignedGridsService = AlignedGridsService;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var rowNode_1 = __webpack_require__(30);
	var context_1 = __webpack_require__(7);
	var eventService_1 = __webpack_require__(5);
	var context_2 = __webpack_require__(7);
	var events_1 = __webpack_require__(11);
	var context_3 = __webpack_require__(7);
	var constants_1 = __webpack_require__(9);
	var utils_1 = __webpack_require__(8);
	var columnController_1 = __webpack_require__(15);
	var gridApi_1 = __webpack_require__(12);
	var PinnedRowModel = (function () {
	    function PinnedRowModel() {
	    }
	    PinnedRowModel.prototype.init = function () {
	        this.setPinnedTopRowData(this.gridOptionsWrapper.getPinnedTopRowData());
	        this.setPinnedBottomRowData(this.gridOptionsWrapper.getPinnedBottomRowData());
	    };
	    PinnedRowModel.prototype.isEmpty = function (floating) {
	        var rows = floating === constants_1.Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
	        return utils_1.Utils.missingOrEmpty(rows);
	    };
	    PinnedRowModel.prototype.isRowsToRender = function (floating) {
	        return !this.isEmpty(floating);
	    };
	    PinnedRowModel.prototype.getRowAtPixel = function (pixel, floating) {
	        var rows = floating === constants_1.Constants.PINNED_TOP ? this.pinnedTopRows : this.pinnedBottomRows;
	        if (utils_1.Utils.missingOrEmpty(rows)) {
	            return 0; // this should never happen, just in case, 0 is graceful failure
	        }
	        for (var i = 0; i < rows.length; i++) {
	            var rowNode = rows[i];
	            var rowTopPixel = rowNode.rowTop + rowNode.rowHeight - 1;
	            // only need to range check against the top pixel, as we are going through the list
	            // in order, first row to hit the pixel wins
	            if (rowTopPixel >= pixel) {
	                return i;
	            }
	        }
	        return rows.length - 1;
	    };
	    PinnedRowModel.prototype.setPinnedTopRowData = function (rowData) {
	        this.pinnedTopRows = this.createNodesFromData(rowData, true);
	        var event = {
	            type: events_1.Events.EVENT_PINNED_ROW_DATA_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    PinnedRowModel.prototype.setPinnedBottomRowData = function (rowData) {
	        this.pinnedBottomRows = this.createNodesFromData(rowData, false);
	        var event = {
	            type: events_1.Events.EVENT_PINNED_ROW_DATA_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    PinnedRowModel.prototype.createNodesFromData = function (allData, isTop) {
	        var _this = this;
	        var rowNodes = [];
	        if (allData) {
	            var nextRowTop_1 = 0;
	            allData.forEach(function (dataItem, index) {
	                var rowNode = new rowNode_1.RowNode();
	                _this.context.wireBean(rowNode);
	                rowNode.data = dataItem;
	                rowNode.rowPinned = isTop ? constants_1.Constants.PINNED_TOP : constants_1.Constants.PINNED_BOTTOM;
	                rowNode.setRowTop(nextRowTop_1);
	                rowNode.setRowHeight(_this.gridOptionsWrapper.getRowHeightForNode(rowNode));
	                rowNode.setRowIndex(index);
	                nextRowTop_1 += rowNode.rowHeight;
	                rowNodes.push(rowNode);
	            });
	        }
	        return rowNodes;
	    };
	    PinnedRowModel.prototype.getPinnedTopRowData = function () {
	        return this.pinnedTopRows;
	    };
	    PinnedRowModel.prototype.getPinnedBottomRowData = function () {
	        return this.pinnedBottomRows;
	    };
	    PinnedRowModel.prototype.getPinnedTopTotalHeight = function () {
	        return this.getTotalHeight(this.pinnedTopRows);
	    };
	    PinnedRowModel.prototype.getPinnedTopRowCount = function () {
	        return this.pinnedTopRows ? this.pinnedTopRows.length : 0;
	    };
	    PinnedRowModel.prototype.getPinnedBottomRowCount = function () {
	        return this.pinnedBottomRows ? this.pinnedBottomRows.length : 0;
	    };
	    PinnedRowModel.prototype.getPinnedTopRow = function (index) {
	        return this.pinnedTopRows[index];
	    };
	    PinnedRowModel.prototype.getPinnedBottomRow = function (index) {
	        return this.pinnedBottomRows[index];
	    };
	    PinnedRowModel.prototype.forEachPinnedTopRow = function (callback) {
	        if (utils_1.Utils.missingOrEmpty(this.pinnedTopRows)) {
	            return;
	        }
	        this.pinnedTopRows.forEach(callback);
	    };
	    PinnedRowModel.prototype.forEachPinnedBottomRow = function (callback) {
	        if (utils_1.Utils.missingOrEmpty(this.pinnedBottomRows)) {
	            return;
	        }
	        this.pinnedBottomRows.forEach(callback);
	    };
	    PinnedRowModel.prototype.getPinnedBottomTotalHeight = function () {
	        return this.getTotalHeight(this.pinnedBottomRows);
	    };
	    PinnedRowModel.prototype.getTotalHeight = function (rowNodes) {
	        if (!rowNodes || rowNodes.length === 0) {
	            return 0;
	        }
	        else {
	            var lastNode = rowNodes[rowNodes.length - 1];
	            return lastNode.rowTop + lastNode.rowHeight;
	        }
	    };
	    __decorate([
	        context_2.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], PinnedRowModel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_2.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], PinnedRowModel.prototype, "eventService", void 0);
	    __decorate([
	        context_2.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], PinnedRowModel.prototype, "context", void 0);
	    __decorate([
	        context_2.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], PinnedRowModel.prototype, "columnApi", void 0);
	    __decorate([
	        context_2.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], PinnedRowModel.prototype, "gridApi", void 0);
	    __decorate([
	        context_3.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], PinnedRowModel.prototype, "init", null);
	    PinnedRowModel = __decorate([
	        context_1.Bean('pinnedRowModel')
	    ], PinnedRowModel);
	    return PinnedRowModel;
	}());
	exports.PinnedRowModel = PinnedRowModel;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var gridPanel_1 = __webpack_require__(24);
	var linkedList_1 = __webpack_require__(46);
	var AnimationFrameService = (function () {
	    function AnimationFrameService() {
	        this.p1Tasks = new linkedList_1.LinkedList();
	        this.p2Tasks = new linkedList_1.LinkedList();
	        this.ticking = false;
	    }
	    AnimationFrameService.prototype.addP1Task = function (task) {
	        this.p1Tasks.add(task);
	        this.schedule();
	    };
	    AnimationFrameService.prototype.addP2Task = function (task) {
	        this.p2Tasks.add(task);
	        this.schedule();
	    };
	    AnimationFrameService.prototype.executeFrame = function (millis) {
	        var frameStart = new Date().getTime();
	        var duration = (new Date().getTime()) - frameStart;
	        var gridPanelNeedsAFrame = true;
	        // 16ms is 60 fps
	        var noMaxMillis = millis <= 0;
	        while (noMaxMillis || duration < millis) {
	            if (gridPanelNeedsAFrame) {
	                gridPanelNeedsAFrame = this.gridPanel.executeFrame();
	            }
	            else if (!this.p1Tasks.isEmpty()) {
	                var task = this.p1Tasks.remove();
	                task();
	            }
	            else if (!this.p2Tasks.isEmpty()) {
	                var task = this.p2Tasks.remove();
	                task();
	            }
	            else {
	                break;
	            }
	            duration = (new Date().getTime()) - frameStart;
	        }
	        if (gridPanelNeedsAFrame || !this.p1Tasks.isEmpty() || !this.p1Tasks.isEmpty()) {
	            this.requestFrame();
	        }
	        else {
	            this.ticking = false;
	        }
	    };
	    AnimationFrameService.prototype.flushAllFrames = function () {
	        this.executeFrame(-1);
	    };
	    AnimationFrameService.prototype.schedule = function () {
	        if (!this.ticking) {
	            this.ticking = true;
	            this.requestFrame();
	        }
	    };
	    AnimationFrameService.prototype.requestFrame = function () {
	        // check for the existence of requestAnimationFrame, and if
	        // it's missing, then we polyfill it with setTimeout()
	        var callback = this.executeFrame.bind(this, 60);
	        if (window.requestAnimationFrame) {
	            window.requestAnimationFrame(callback);
	        }
	        else if (window.webkitRequestAnimationFrame) {
	            window.webkitRequestAnimationFrame(callback);
	        }
	        else {
	            setTimeout(callback, 0);
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], AnimationFrameService.prototype, "gridPanel", void 0);
	    AnimationFrameService = __decorate([
	        context_1.Bean('animationFrameService')
	    ], AnimationFrameService);
	    return AnimationFrameService;
	}());
	exports.AnimationFrameService = AnimationFrameService;


/***/ }),
/* 46 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var LinkedList = (function () {
	    function LinkedList() {
	        this.first = null;
	        this.last = null;
	    }
	    LinkedList.prototype.add = function (item) {
	        var entry = {
	            item: item,
	            next: null
	        };
	        if (this.last) {
	            this.last.next = entry;
	        }
	        else {
	            this.first = entry;
	        }
	        this.last = entry;
	    };
	    LinkedList.prototype.remove = function () {
	        var result = this.first;
	        if (result) {
	            this.first = result.next;
	            if (!this.first) {
	                this.last = null;
	            }
	        }
	        return result.item;
	    };
	    LinkedList.prototype.isEmpty = function () {
	        return !this.first;
	    };
	    return LinkedList;
	}());
	exports.LinkedList = LinkedList;
	var LinkedListItem = (function () {
	    function LinkedListItem() {
	    }
	    return LinkedListItem;
	}());


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var cellComp_1 = __webpack_require__(29);
	var rowNode_1 = __webpack_require__(30);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var column_1 = __webpack_require__(17);
	var events_1 = __webpack_require__(11);
	var eventService_1 = __webpack_require__(5);
	var context_1 = __webpack_require__(7);
	var component_1 = __webpack_require__(35);
	var componentAnnotations_1 = __webpack_require__(48);
	var LoadingCellRenderer = (function (_super) {
	    __extends(LoadingCellRenderer, _super);
	    function LoadingCellRenderer() {
	        return _super.call(this, LoadingCellRenderer.TEMPLATE) || this;
	    }
	    LoadingCellRenderer.prototype.init = function (params) {
	        var eLoadingIcon = utils_1._.createIconNoSpan('groupLoading', this.gridOptionsWrapper, null);
	        this.eLoadingIcon.appendChild(eLoadingIcon);
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        this.eLoadingText.innerText = localeTextFunc('loadingOoo', 'Loading');
	    };
	    LoadingCellRenderer.prototype.refresh = function (params) {
	        return false;
	    };
	    LoadingCellRenderer.TEMPLATE = "<div class=\"ag-stub-cell\">\n            <span class=\"ag-loading-icon\" ref=\"eLoadingIcon\"></span>\n            <span class=\"ag-loading-text\" ref=\"eLoadingText\"></span>\n        </div>";
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], LoadingCellRenderer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eLoadingIcon'),
	        __metadata("design:type", HTMLElement)
	    ], LoadingCellRenderer.prototype, "eLoadingIcon", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eLoadingText'),
	        __metadata("design:type", HTMLElement)
	    ], LoadingCellRenderer.prototype, "eLoadingText", void 0);
	    return LoadingCellRenderer;
	}(component_1.Component));
	exports.LoadingCellRenderer = LoadingCellRenderer;
	var RowComp = (function (_super) {
	    __extends(RowComp, _super);
	    function RowComp(parentScope, bodyContainerComp, pinnedLeftContainerComp, pinnedRightContainerComp, fullWidthContainerComp, rowNode, beans, animateIn, useAnimationFrameForCreate) {
	        var _this = _super.call(this) || this;
	        _this.eAllRowContainers = [];
	        _this.active = true;
	        _this.columnRefreshPending = false;
	        _this.cellComps = {};
	        // for animations, there are bits we want done in the next VM turn, to all DOM to update first.
	        // instead of each row doing a setTimeout(func,0), we put the functions here and the rowRenderer
	        // executes them all in one timeout
	        _this.createSecondPassFuncs = [];
	        // these get called before the row is destroyed - they set up the DOM for the remove animation (ie they
	        // set the DOM up for the animation), then the delayedDestroyFunctions get called when the animation is
	        // complete (ie removes from the dom).
	        _this.removeFirstPassFuncs = [];
	        // for animations, these functions get called 400ms after the row is cleared, called by the rowRenderer
	        // so each row isn't setting up it's own timeout
	        _this.removeSecondPassFuncs = [];
	        _this.initialised = false;
	        _this.parentScope = parentScope;
	        _this.beans = beans;
	        _this.bodyContainerComp = bodyContainerComp;
	        _this.pinnedLeftContainerComp = pinnedLeftContainerComp;
	        _this.pinnedRightContainerComp = pinnedRightContainerComp;
	        _this.fullWidthContainerComp = fullWidthContainerComp;
	        _this.rowNode = rowNode;
	        _this.rowIsEven = _this.rowNode.rowIndex % 2 === 0;
	        _this.paginationPage = _this.beans.paginationProxy.getCurrentPage();
	        _this.useAnimationFrameForCreate = useAnimationFrameForCreate;
	        _this.setAnimateFlags(animateIn);
	        return _this;
	    }
	    RowComp.prototype.init = function () {
	        var _this = this;
	        this.rowFocused = this.beans.focusedCellController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
	        this.scope = this.createChildScopeOrNull(this.rowNode.data);
	        this.setupRowContainers();
	        this.addListeners();
	        if (this.slideRowIn) {
	            this.createSecondPassFuncs.push(function () {
	                _this.onTopChanged();
	            });
	        }
	        if (this.fadeRowIn) {
	            this.createSecondPassFuncs.push(function () {
	                _this.eAllRowContainers.forEach(function (eRow) { return utils_1._.removeCssClass(eRow, 'ag-opacity-zero'); });
	            });
	        }
	        this.executeProcessRowPostCreateFunc();
	    };
	    RowComp.prototype.createTemplate = function (contents, extraCssClass) {
	        if (extraCssClass === void 0) { extraCssClass = null; }
	        var templateParts = [];
	        var rowHeight = this.rowNode.rowHeight;
	        var rowClasses = this.getInitialRowClasses(extraCssClass).join(' ');
	        var rowId = this.rowNode.id;
	        var userRowStyles = this.preProcessStylesFromGridOptions();
	        var businessKey = this.getRowBusinessKey();
	        var rowTopStyle = this.getInitialRowTopStyle();
	        templateParts.push("<div");
	        templateParts.push(" role=\"row\"");
	        templateParts.push(" row-index=\"" + this.rowNode.getRowIndexString() + "\"");
	        templateParts.push(rowId ? " row-id=\"" + rowId + "\"" : "");
	        templateParts.push(businessKey ? " row-business-key=\"" + businessKey + "\"" : "");
	        templateParts.push(" comp-id=\"" + this.getCompId() + "\"");
	        templateParts.push(" class=\"" + rowClasses + "\"");
	        templateParts.push(" style=\"height: " + rowHeight + "px; " + rowTopStyle + " " + userRowStyles + "\">");
	        // add in the template for the cells
	        templateParts.push(contents);
	        templateParts.push("</div>");
	        return templateParts.join('');
	    };
	    RowComp.prototype.getCellForCol = function (column) {
	        var cellComp = this.cellComps[column.getColId()];
	        if (cellComp) {
	            return cellComp.getHtmlElement();
	        }
	        else {
	            return null;
	        }
	    };
	    RowComp.prototype.afterFlush = function () {
	        if (!this.initialised) {
	            this.initialised = true;
	            this.executeProcessRowPostCreateFunc();
	        }
	    };
	    RowComp.prototype.executeProcessRowPostCreateFunc = function () {
	        var func = this.beans.gridOptionsWrapper.getProcessRowPostCreateFunc();
	        if (func) {
	            var params = {
	                eRow: this.eBodyRow,
	                ePinnedLeftRow: this.ePinnedLeftRow,
	                ePinnedRightRow: this.ePinnedRightRow,
	                node: this.rowNode,
	                api: this.beans.gridOptionsWrapper.getApi(),
	                rowIndex: this.rowNode.rowIndex,
	                addRenderedRowListener: this.addEventListener.bind(this),
	                columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	                context: this.beans.gridOptionsWrapper.getContext()
	            };
	            func(params);
	        }
	    };
	    RowComp.prototype.getInitialRowTopStyle = function () {
	        var rowTopStyle = '';
	        var setRowTop = !this.beans.forPrint && !this.beans.gridOptionsWrapper.isAutoHeight();
	        if (setRowTop) {
	            // if sliding in, we take the old row top. otherwise we just set the current row top.
	            var pixels = this.slideRowIn ? this.roundRowTopToBounds(this.rowNode.oldRowTop) : this.rowNode.rowTop;
	            var pixelsWithOffset = this.applyPixelOffset(pixels);
	            // if not setting row top, then below is empty string
	            rowTopStyle = "top: " + pixelsWithOffset + "px; ";
	        }
	        return rowTopStyle;
	    };
	    RowComp.prototype.getRowBusinessKey = function () {
	        if (typeof this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc() === 'function') {
	            var businessKey = this.beans.gridOptionsWrapper.getBusinessKeyForNodeFunc()(this.rowNode);
	            return businessKey;
	        }
	    };
	    RowComp.prototype.lazyCreateCells = function (cols, eRow) {
	        if (this.active) {
	            var cellTemplatesAndComps = this.createCells(cols);
	            eRow.innerHTML = cellTemplatesAndComps.template;
	            this.callAfterRowAttachedOnCells(cellTemplatesAndComps.cellComps, eRow);
	        }
	    };
	    RowComp.prototype.createRowContainer = function (rowContainerComp, cols, callback) {
	        var _this = this;
	        var cellTemplatesAndComps;
	        if (this.useAnimationFrameForCreate) {
	            cellTemplatesAndComps = { cellComps: [], template: '' };
	        }
	        else {
	            cellTemplatesAndComps = this.createCells(cols);
	        }
	        var rowTemplate = this.createTemplate(cellTemplatesAndComps.template);
	        rowContainerComp.appendRowTemplate(rowTemplate, function () {
	            var eRow = rowContainerComp.getRowElement(_this.getCompId());
	            _this.afterRowAttached(rowContainerComp, eRow);
	            callback(eRow);
	            if (_this.useAnimationFrameForCreate) {
	                _this.beans.taskQueue.addP1Task(_this.lazyCreateCells.bind(_this, cols, eRow));
	            }
	            else {
	                _this.callAfterRowAttachedOnCells(cellTemplatesAndComps.cellComps, eRow);
	            }
	        });
	    };
	    RowComp.prototype.createChildScopeOrNull = function (data) {
	        if (this.beans.gridOptionsWrapper.isAngularCompileRows()) {
	            var newChildScope = this.parentScope.$new();
	            newChildScope.data = data;
	            newChildScope.rowNode = this.rowNode;
	            newChildScope.context = this.beans.gridOptionsWrapper.getContext();
	            return newChildScope;
	        }
	        else {
	            return null;
	        }
	    };
	    RowComp.prototype.setupRowStub = function () {
	        this.fullWidthRow = true;
	        this.fullWidthRowEmbedded = this.beans.gridOptionsWrapper.isEmbedFullWidthRows();
	        this.createFullWidthRows(RowComp.LOADING_CELL_RENDERER);
	    };
	    RowComp.prototype.setupRowContainers = function () {
	        var isFullWidthCellFunc = this.beans.gridOptionsWrapper.getIsFullWidthCellFunc();
	        var isFullWidthCell = isFullWidthCellFunc ? isFullWidthCellFunc(this.rowNode) : false;
	        var isGroupSpanningRow = this.rowNode.group && this.beans.gridOptionsWrapper.isGroupUseEntireRow();
	        if (this.rowNode.stub) {
	            this.setupRowStub();
	        }
	        else if (isFullWidthCell) {
	            this.setupFullWidthContainers();
	        }
	        else if (isGroupSpanningRow) {
	            this.setupFullWidthGroupContainers();
	        }
	        else {
	            this.setupNormalRowContainers();
	        }
	    };
	    RowComp.prototype.setupFullWidthContainers = function () {
	        this.fullWidthRow = true;
	        this.fullWidthRowEmbedded = this.beans.gridOptionsWrapper.isEmbedFullWidthRows();
	        this.createFullWidthRows(RowComp.FULL_WIDTH_CELL_RENDERER);
	    };
	    RowComp.prototype.setupFullWidthGroupContainers = function () {
	        this.fullWidthRow = true;
	        this.fullWidthRowEmbedded = this.beans.gridOptionsWrapper.isEmbedFullWidthRows();
	        this.createFullWidthRows(RowComp.GROUP_ROW_RENDERER);
	    };
	    RowComp.prototype.setupNormalRowContainers = function () {
	        var _this = this;
	        var centerCols = this.beans.columnController.getAllDisplayedCenterVirtualColumnsForRow(this.rowNode);
	        this.createRowContainer(this.bodyContainerComp, centerCols, function (eRow) { return _this.eBodyRow = eRow; });
	        if (!this.beans.forPrint) {
	            var leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
	            var rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
	            this.createRowContainer(this.pinnedRightContainerComp, rightCols, function (eRow) { return _this.ePinnedRightRow = eRow; });
	            this.createRowContainer(this.pinnedLeftContainerComp, leftCols, function (eRow) { return _this.ePinnedLeftRow = eRow; });
	        }
	    };
	    RowComp.prototype.createFullWidthRows = function (type) {
	        var _this = this;
	        if (this.fullWidthRowEmbedded) {
	            this.createFullWidthRowContainer(this.bodyContainerComp, null, null, type, function (eRow, cellRenderer) {
	                _this.eFullWidthRowBody = eRow;
	                _this.fullWidthRowComponentBody = cellRenderer;
	            });
	            this.createFullWidthRowContainer(this.pinnedLeftContainerComp, column_1.Column.PINNED_LEFT, 'ag-cell-last-left-pinned', type, function (eRow, cellRenderer) {
	                _this.eFullWidthRowLeft = eRow;
	                _this.fullWidthRowComponentLeft = cellRenderer;
	            });
	            this.createFullWidthRowContainer(this.pinnedRightContainerComp, column_1.Column.PINNED_RIGHT, 'ag-cell-first-right-pinned', type, function (eRow, cellRenderer) {
	                _this.eFullWidthRowRight = eRow;
	                _this.fullWidthRowComponentRight = cellRenderer;
	            });
	        }
	        else {
	            // otherwise we add to the fullWidth container as normal
	            // let previousFullWidth = ensureDomOrder ? this.lastPlacedElements.eFullWidth : null;
	            this.createFullWidthRowContainer(this.fullWidthContainerComp, null, null, type, function (eRow, cellRenderer) {
	                _this.eFullWidthRow = eRow;
	                _this.fullWidthRowComponent = cellRenderer;
	                // and fake the mouse wheel for the fullWidth container
	                if (!_this.beans.forPrint) {
	                    _this.addMouseWheelListenerToFullWidthRow();
	                }
	            });
	        }
	    };
	    RowComp.prototype.addMouseWheelListenerToFullWidthRow = function () {
	        var mouseWheelListener = this.beans.gridPanel.genericMouseWheelListener.bind(this.beans.gridPanel);
	        // IE9, Chrome, Safari, Opera
	        this.addDestroyableEventListener(this.eFullWidthRow, 'mousewheel', mouseWheelListener);
	        // Firefox
	        this.addDestroyableEventListener(this.eFullWidthRow, 'DOMMouseScroll', mouseWheelListener);
	    };
	    RowComp.prototype.setAnimateFlags = function (animateIn) {
	        if (animateIn) {
	            var oldRowTopExists = utils_1._.exists(this.rowNode.oldRowTop);
	            // if the row had a previous position, we slide it in (animate row top)
	            this.slideRowIn = oldRowTopExists;
	            // if the row had no previous position, we fade it in (animate
	            this.fadeRowIn = !oldRowTopExists;
	        }
	        else {
	            this.slideRowIn = false;
	            this.fadeRowIn = false;
	        }
	    };
	    RowComp.prototype.isEditing = function () {
	        return false;
	    };
	    RowComp.prototype.stopRowEditing = function (cancel) {
	        this.stopEditing(cancel);
	    };
	    RowComp.prototype.isFullWidth = function () {
	        return this.fullWidthRow;
	    };
	    RowComp.prototype.addListeners = function () {
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_HEIGHT_CHANGED, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_ROW_SELECTED, this.onRowSelected.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_ROW_INDEX_CHANGED, this.onRowIndexChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_TOP_CHANGED, this.onTopChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_EXPANDED_CHANGED, this.onExpandedChanged.bind(this));
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_DATA_CHANGED, this.onRowNodeDataChanged.bind(this));
	        var eventService = this.beans.eventService;
	        this.addDestroyableEventListener(eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	        this.addDestroyableEventListener(eventService, events_1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
	        this.addDestroyableEventListener(eventService, events_1.Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
	        this.addDestroyableEventListener(eventService, events_1.Events.EVENT_CELL_FOCUSED, this.onCellFocusChanged.bind(this));
	        this.addDestroyableEventListener(eventService, events_1.Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
	        this.addDestroyableEventListener(eventService, events_1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
	    };
	    // when grid columns change, then all cells should be cleaned out,
	    // as the new columns could have same id as the previous columns and may conflict
	    RowComp.prototype.onGridColumnsChanged = function () {
	        var allRenderedCellIds = Object.keys(this.cellComps);
	        this.removeRenderedCells(allRenderedCellIds);
	    };
	    RowComp.prototype.onRowNodeDataChanged = function (event) {
	        // if this is an update, we want to refresh, as this will allow the user to put in a transition
	        // into the cellRenderer refresh method. otherwise this might be completely new data, in which case
	        // we will want to completely replace the cells
	        this.forEachCellComp(function (cellComp) {
	            return cellComp.refreshCell({
	                suppressFlash: !event.update,
	                newData: !event.update
	            });
	        });
	        // check for selected also, as this could be after lazy loading of the row data, in which case
	        // the id might of just gotten set inside the row and the row selected state may of changed
	        // as a result. this is what happens when selected rows are loaded in virtual pagination.
	        // - niall note - since moving to the stub component, this may no longer be true, as replacing
	        // the stub component now replaces the entire row
	        this.onRowSelected();
	        // as data has changed, then the style and class needs to be recomputed
	        this.postProcessStylesFromGridOptions();
	        this.postProcessClassesFromGridOptions();
	    };
	    RowComp.prototype.onExpandedChanged = function () {
	        if (this.rowNode.group && !this.rowNode.footer) {
	            var expanded_1 = this.rowNode.expanded;
	            this.eAllRowContainers.forEach(function (row) { return utils_1._.addOrRemoveCssClass(row, 'ag-row-group-expanded', expanded_1); });
	            this.eAllRowContainers.forEach(function (row) { return utils_1._.addOrRemoveCssClass(row, 'ag-row-group-contracted', !expanded_1); });
	        }
	    };
	    RowComp.prototype.onDisplayedColumnsChanged = function () {
	        if (!this.fullWidthRow) {
	            this.refreshCells();
	        }
	    };
	    RowComp.prototype.destroyFullWidthComponents = function () {
	        if (this.fullWidthRowComponent) {
	            if (this.fullWidthRowComponent.destroy) {
	                this.fullWidthRowComponent.destroy();
	            }
	            this.fullWidthRowComponent = null;
	        }
	        if (this.fullWidthRowComponentBody) {
	            if (this.fullWidthRowComponentBody.destroy) {
	                this.fullWidthRowComponentBody.destroy();
	            }
	            this.fullWidthRowComponent = null;
	        }
	        if (this.fullWidthRowComponentLeft) {
	            if (this.fullWidthRowComponentLeft.destroy) {
	                this.fullWidthRowComponentLeft.destroy();
	            }
	            this.fullWidthRowComponentLeft = null;
	        }
	        if (this.fullWidthRowComponentRight) {
	            if (this.fullWidthRowComponentRight.destroy) {
	                this.fullWidthRowComponentRight.destroy();
	            }
	            this.fullWidthRowComponent = null;
	        }
	    };
	    RowComp.prototype.getContainerForCell = function (pinnedType) {
	        switch (pinnedType) {
	            case column_1.Column.PINNED_LEFT: return this.ePinnedLeftRow;
	            case column_1.Column.PINNED_RIGHT: return this.ePinnedRightRow;
	            default: return this.eBodyRow;
	        }
	    };
	    RowComp.prototype.onVirtualColumnsChanged = function () {
	        if (!this.fullWidthRow) {
	            this.refreshCells();
	        }
	    };
	    RowComp.prototype.onColumnResized = function () {
	        if (!this.fullWidthRow) {
	            this.refreshCells();
	        }
	    };
	    RowComp.prototype.refreshCells = function () {
	        if (this.beans.gridOptionsWrapper.isSuppressAnimationFrame()) {
	            this.refreshCellsInAnimationFrame();
	        }
	        else {
	            if (this.columnRefreshPending) {
	                return;
	            }
	            this.beans.taskQueue.addP1Task(this.refreshCellsInAnimationFrame.bind(this));
	        }
	    };
	    RowComp.prototype.refreshCellsInAnimationFrame = function () {
	        if (!this.active) {
	            return;
	        }
	        this.columnRefreshPending = false;
	        var centerCols = this.beans.columnController.getAllDisplayedCenterVirtualColumnsForRow(this.rowNode);
	        var leftCols = this.beans.columnController.getDisplayedLeftColumnsForRow(this.rowNode);
	        var rightCols = this.beans.columnController.getDisplayedRightColumnsForRow(this.rowNode);
	        this.insertCellsIntoContainer(this.eBodyRow, centerCols);
	        this.insertCellsIntoContainer(this.ePinnedLeftRow, leftCols);
	        this.insertCellsIntoContainer(this.ePinnedRightRow, rightCols);
	        var colIdsToRemove = Object.keys(this.cellComps);
	        centerCols.forEach(function (col) { return utils_1._.removeFromArray(colIdsToRemove, col.getId()); });
	        leftCols.forEach(function (col) { return utils_1._.removeFromArray(colIdsToRemove, col.getId()); });
	        rightCols.forEach(function (col) { return utils_1._.removeFromArray(colIdsToRemove, col.getId()); });
	        // we never remove editing cells, as this would cause the cells to loose their values while editing
	        // as the grid is scrolling horizontally.
	        colIdsToRemove = utils_1._.filter(colIdsToRemove, this.isCellEligibleToBeRemoved.bind(this));
	        // remove old cells from gui, but we don't destroy them, we might use them again
	        this.removeRenderedCells(colIdsToRemove);
	    };
	    RowComp.prototype.removeRenderedCells = function (colIds) {
	        var _this = this;
	        colIds.forEach(function (key) {
	            var cellComp = _this.cellComps[key];
	            // could be old reference, ie removed cell
	            if (utils_1._.missing(cellComp)) {
	                return;
	            }
	            cellComp.detach();
	            cellComp.destroy();
	            _this.cellComps[key] = null;
	        });
	    };
	    RowComp.prototype.isCellEligibleToBeRemoved = function (indexStr) {
	        var displayedColumns = this.beans.columnController.getAllDisplayedColumns();
	        var REMOVE_CELL = true;
	        var KEEP_CELL = false;
	        var renderedCell = this.cellComps[indexStr];
	        if (!renderedCell) {
	            return REMOVE_CELL;
	        }
	        // always remove the cell if it's in the wrong pinned location
	        if (this.isCellInWrongRow(renderedCell)) {
	            return REMOVE_CELL;
	        }
	        // we want to try and keep editing and focused cells
	        var editing = renderedCell.isEditing();
	        var focused = this.beans.focusedCellController.isCellFocused(renderedCell.getGridCell());
	        var mightWantToKeepCell = editing || focused;
	        if (mightWantToKeepCell) {
	            var column = renderedCell.getColumn();
	            var cellStillDisplayed = displayedColumns.indexOf(column) >= 0;
	            return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;
	        }
	        else {
	            return REMOVE_CELL;
	        }
	    };
	    RowComp.prototype.ensureCellInCorrectContainer = function (cellComp) {
	        var element = cellComp.getHtmlElement();
	        var column = cellComp.getColumn();
	        var pinnedType = column.getPinned();
	        var eContainer = this.getContainerForCell(pinnedType);
	        // if in wrong container, remove it
	        var eOldContainer = cellComp.getParentRow();
	        var inWrongRow = eOldContainer !== eContainer;
	        if (inWrongRow) {
	            // take out from old row
	            if (eOldContainer) {
	                eOldContainer.removeChild(element);
	            }
	            eContainer.appendChild(element);
	            cellComp.setParentRow(eContainer);
	        }
	    };
	    RowComp.prototype.isCellInWrongRow = function (cellComp) {
	        var column = cellComp.getColumn();
	        var rowWeWant = this.getContainerForCell(column.getPinned());
	        // if in wrong container, remove it
	        var oldRow = cellComp.getParentRow();
	        return oldRow !== rowWeWant;
	    };
	    RowComp.prototype.insertCellsIntoContainer = function (eRow, cols) {
	        var _this = this;
	        if (!eRow) {
	            return;
	        }
	        var cellTemplates = [];
	        var newCellComps = [];
	        cols.forEach(function (col) {
	            var colId = col.getId();
	            var oldCell = _this.cellComps[colId];
	            if (oldCell) {
	                _this.ensureCellInCorrectContainer(oldCell);
	            }
	            else {
	                _this.createNewCell(col, eRow, cellTemplates, newCellComps);
	            }
	        });
	        if (cellTemplates.length > 0) {
	            utils_1._.appendHtml(eRow, cellTemplates.join(''));
	            this.callAfterRowAttachedOnCells(newCellComps, eRow);
	        }
	    };
	    RowComp.prototype.addDomData = function (eRowContainer) {
	        var gow = this.beans.gridOptionsWrapper;
	        gow.setDomData(eRowContainer, RowComp.DOM_DATA_KEY_RENDERED_ROW, this);
	        this.addDestroyFunc(function () {
	            gow.setDomData(eRowContainer, RowComp.DOM_DATA_KEY_RENDERED_ROW, null);
	        });
	    };
	    RowComp.prototype.createNewCell = function (col, eContainer, cellTemplates, newCellComps) {
	        var newCellComp = new cellComp_1.CellComp(this.scope, this.beans, col, this.rowNode, this);
	        var cellTemplate = newCellComp.getCreateTemplate();
	        cellTemplates.push(cellTemplate);
	        newCellComps.push(newCellComp);
	        this.cellComps[col.getId()] = newCellComp;
	        newCellComp.setParentRow(eContainer);
	    };
	    RowComp.prototype.onMouseEvent = function (eventName, mouseEvent) {
	        switch (eventName) {
	            case 'dblclick':
	                this.onRowDblClick(mouseEvent);
	                break;
	            case 'click':
	                this.onRowClick(mouseEvent);
	                break;
	        }
	    };
	    RowComp.prototype.createRowEvent = function (type, domEvent) {
	        return {
	            type: type,
	            node: this.rowNode,
	            data: this.rowNode.data,
	            rowIndex: this.rowNode.rowIndex,
	            rowPinned: this.rowNode.rowPinned,
	            context: this.beans.gridOptionsWrapper.getContext(),
	            api: this.beans.gridOptionsWrapper.getApi(),
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            event: domEvent
	        };
	    };
	    RowComp.prototype.createRowEventWithSource = function (type, domEvent) {
	        var event = this.createRowEvent(type, domEvent);
	        // when first developing this, we included the rowComp in the event.
	        // this seems very weird. so when introducing the event types, i left the 'source'
	        // out of the type, and just include the source in the two places where this event
	        // was fired (rowClicked and rowDoubleClicked). it doesn't make sense for any
	        // users to be using this, as the rowComp isn't an object we expose, so would be
	        // very surprising if a user was using it.
	        event.source = this;
	        return event;
	    };
	    RowComp.prototype.onRowDblClick = function (mouseEvent) {
	        var agEvent = this.createRowEventWithSource(events_1.Events.EVENT_ROW_DOUBLE_CLICKED, mouseEvent);
	        this.beans.eventService.dispatchEvent(agEvent);
	    };
	    RowComp.prototype.onRowClick = function (mouseEvent) {
	        var agEvent = this.createRowEventWithSource(events_1.Events.EVENT_ROW_CLICKED, mouseEvent);
	        this.beans.eventService.dispatchEvent(agEvent);
	        // ctrlKey for windows, metaKey for Apple
	        var multiSelectKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;
	        var shiftKeyPressed = mouseEvent.shiftKey;
	        // we do not allow selecting groups by clicking (as the click here expands the group)
	        // so return if it's a group row
	        if (this.rowNode.group) {
	            return;
	        }
	        // we also don't allow selection of pinned rows
	        if (this.rowNode.rowPinned) {
	            return;
	        }
	        // if no selection method enabled, do nothing
	        if (!this.beans.gridOptionsWrapper.isRowSelection()) {
	            return;
	        }
	        // if click selection suppressed, do nothing
	        if (this.beans.gridOptionsWrapper.isSuppressRowClickSelection()) {
	            return;
	        }
	        if (this.rowNode.isSelected()) {
	            if (multiSelectKeyPressed) {
	                if (this.beans.gridOptionsWrapper.isRowDeselection()) {
	                    this.rowNode.setSelectedParams({ newValue: false });
	                }
	            }
	            else {
	                // selected with no multi key, must make sure anything else is unselected
	                this.rowNode.setSelectedParams({ newValue: true, clearSelection: true });
	            }
	        }
	        else {
	            this.rowNode.setSelectedParams({ newValue: true, clearSelection: !multiSelectKeyPressed, rangeSelect: shiftKeyPressed });
	        }
	    };
	    RowComp.prototype.createFullWidthRowContainer = function (rowContainerComp, pinned, extraCssClass, cellRendererType, callback) {
	        var _this = this;
	        var rowTemplate = this.createTemplate('', extraCssClass);
	        rowContainerComp.appendRowTemplate(rowTemplate, function () {
	            var eRow = rowContainerComp.getRowElement(_this.getCompId());
	            var params = _this.createFullWidthParams(eRow, pinned);
	            var cellRenderer = _this.beans.componentResolver.createAgGridComponent(null, params, cellRendererType);
	            var gui = utils_1._.ensureElement(cellRenderer.getGui());
	            eRow.appendChild(gui);
	            _this.afterRowAttached(rowContainerComp, eRow);
	            callback(eRow, cellRenderer);
	            _this.angular1Compile(eRow);
	        });
	    };
	    RowComp.prototype.angular1Compile = function (element) {
	        if (this.scope) {
	            this.beans.$compile(element)(this.scope);
	        }
	    };
	    RowComp.prototype.createFullWidthParams = function (eRow, pinned) {
	        var params = {
	            fullWidth: true,
	            data: this.rowNode.data,
	            node: this.rowNode,
	            value: this.rowNode.key,
	            $scope: this.scope,
	            rowIndex: this.rowNode.rowIndex,
	            api: this.beans.gridOptionsWrapper.getApi(),
	            columnApi: this.beans.gridOptionsWrapper.getColumnApi(),
	            context: this.beans.gridOptionsWrapper.getContext(),
	            // these need to be taken out, as part of 'afterAttached' now
	            eGridCell: eRow,
	            eParentOfValue: eRow,
	            pinned: pinned,
	            addRenderedRowListener: this.addEventListener.bind(this)
	        };
	        return params;
	    };
	    RowComp.prototype.getInitialRowClasses = function (extraCssClass) {
	        var classes = [];
	        if (utils_1._.exists(extraCssClass)) {
	            classes.push(extraCssClass);
	        }
	        classes.push('ag-row');
	        classes.push(this.rowFocused ? 'ag-row-focus' : 'ag-row-no-focus');
	        if (this.fadeRowIn) {
	            classes.push('ag-opacity-zero');
	        }
	        if (this.rowIsEven) {
	            classes.push('ag-row-even');
	        }
	        else {
	            classes.push('ag-row-odd');
	        }
	        if (this.beans.gridOptionsWrapper.isAnimateRows()) {
	            classes.push('ag-row-animation');
	        }
	        else {
	            classes.push('ag-row-no-animation');
	        }
	        if (this.rowNode.isSelected()) {
	            classes.push('ag-row-selected');
	        }
	        if (this.rowNode.group) {
	            classes.push('ag-row-group');
	            // if a group, put the level of the group in
	            classes.push('ag-row-level-' + this.rowNode.level);
	            if (this.rowNode.footer) {
	                classes.push('ag-row-footer');
	            }
	        }
	        else {
	            // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item
	            if (this.rowNode.parent) {
	                classes.push('ag-row-level-' + (this.rowNode.parent.level + 1));
	            }
	            else {
	                classes.push('ag-row-level-0');
	            }
	        }
	        if (this.rowNode.stub) {
	            classes.push('ag-row-stub');
	        }
	        if (this.fullWidthRow) {
	            classes.push('ag-full-width-row');
	        }
	        if (this.rowNode.group && !this.rowNode.footer) {
	            classes.push(this.rowNode.expanded ? 'ag-row-group-expanded' : 'ag-row-group-contracted');
	        }
	        utils_1._.pushAll(classes, this.processClassesFromGridOptions());
	        return classes;
	    };
	    RowComp.prototype.stopEditing = function (cancel) {
	        if (cancel === void 0) { cancel = false; }
	        this.forEachCellComp(function (renderedCell) {
	            renderedCell.stopEditing(cancel);
	        });
	        if (this.editingRow) {
	            if (!cancel) {
	                var event_1 = this.createRowEvent(events_1.Events.EVENT_ROW_VALUE_CHANGED);
	                this.beans.eventService.dispatchEvent(event_1);
	            }
	            this.setEditingRow(false);
	        }
	    };
	    RowComp.prototype.setEditingRow = function (value) {
	        this.editingRow = value;
	        this.eAllRowContainers.forEach(function (row) { return utils_1._.addOrRemoveCssClass(row, 'ag-row-editing', value); });
	        var event = value ?
	            this.createRowEvent(events_1.Events.EVENT_ROW_EDITING_STARTED)
	            : this.createRowEvent(events_1.Events.EVENT_ROW_EDITING_STOPPED);
	        this.beans.eventService.dispatchEvent(event);
	    };
	    RowComp.prototype.startRowEditing = function (keyPress, charPress, sourceRenderedCell) {
	        if (keyPress === void 0) { keyPress = null; }
	        if (charPress === void 0) { charPress = null; }
	        if (sourceRenderedCell === void 0) { sourceRenderedCell = null; }
	        // don't do it if already editing
	        if (this.editingRow) {
	            return;
	        }
	        this.forEachCellComp(function (renderedCell) {
	            var cellStartedEdit = renderedCell === sourceRenderedCell;
	            if (cellStartedEdit) {
	                renderedCell.startEditingIfEnabled(keyPress, charPress, cellStartedEdit);
	            }
	            else {
	                renderedCell.startEditingIfEnabled(null, null, cellStartedEdit);
	            }
	        });
	        this.setEditingRow(true);
	    };
	    RowComp.prototype.forEachCellComp = function (callback) {
	        utils_1._.iterateObject(this.cellComps, function (key, cellComp) {
	            if (cellComp) {
	                callback(cellComp);
	            }
	        });
	    };
	    RowComp.prototype.postProcessClassesFromGridOptions = function () {
	        var _this = this;
	        var cssClasses = this.processClassesFromGridOptions();
	        if (cssClasses) {
	            cssClasses.forEach(function (classStr) {
	                _this.eAllRowContainers.forEach(function (row) { return utils_1._.addCssClass(row, classStr); });
	            });
	        }
	    };
	    RowComp.prototype.processClassesFromGridOptions = function () {
	        var res = [];
	        var process = function (rowClass) {
	            if (typeof rowClass === 'string') {
	                res.push(rowClass);
	            }
	            else if (Array.isArray(rowClass)) {
	                rowClass.forEach(function (e) { return res.push(e); });
	            }
	        };
	        // part 1 - rowClass
	        var rowClass = this.beans.gridOptionsWrapper.getRowClass();
	        if (rowClass) {
	            if (typeof rowClass === 'function') {
	                console.warn('ag-Grid: rowClass should not be a function, please use getRowClass instead');
	                return;
	            }
	            process(rowClass);
	        }
	        // part 2 - rowClassFunc
	        var rowClassFunc = this.beans.gridOptionsWrapper.getRowClassFunc();
	        if (rowClassFunc) {
	            var params = {
	                node: this.rowNode,
	                data: this.rowNode.data,
	                rowIndex: this.rowNode.rowIndex,
	                context: this.beans.gridOptionsWrapper.getContext(),
	                api: this.beans.gridOptionsWrapper.getApi()
	            };
	            var rowClassFuncResult = rowClassFunc(params);
	            process(rowClassFuncResult);
	        }
	        return res;
	    };
	    RowComp.prototype.preProcessStylesFromGridOptions = function () {
	        var rowStyles = this.processStylesFromGridOptions();
	        return utils_1._.cssStyleObjectToMarkup(rowStyles);
	    };
	    RowComp.prototype.postProcessStylesFromGridOptions = function () {
	        var rowStyles = this.processStylesFromGridOptions();
	        this.eAllRowContainers.forEach(function (row) { return utils_1._.addStylesToElement(row, rowStyles); });
	    };
	    RowComp.prototype.processStylesFromGridOptions = function () {
	        // part 1 - rowStyle
	        var rowStyle = this.beans.gridOptionsWrapper.getRowStyle();
	        if (rowStyle && typeof rowStyle === 'function') {
	            console.log('ag-Grid: rowStyle should be an object of key/value styles, not be a function, use getRowStyle() instead');
	            return;
	        }
	        // part 1 - rowStyleFunc
	        var rowStyleFunc = this.beans.gridOptionsWrapper.getRowStyleFunc();
	        var rowStyleFuncResult;
	        if (rowStyleFunc) {
	            var params = {
	                data: this.rowNode.data,
	                node: this.rowNode,
	                api: this.beans.gridOptionsWrapper.getApi(),
	                context: this.beans.gridOptionsWrapper.getContext(),
	                $scope: this.scope
	            };
	            rowStyleFuncResult = rowStyleFunc(params);
	        }
	        return utils_1._.assign({}, rowStyle, rowStyleFuncResult);
	    };
	    RowComp.prototype.createCells = function (cols) {
	        var _this = this;
	        var templateParts = [];
	        var newCellComps = [];
	        cols.forEach(function (col) {
	            var newCellComp = new cellComp_1.CellComp(_this.scope, _this.beans, col, _this.rowNode, _this);
	            var cellTemplate = newCellComp.getCreateTemplate();
	            templateParts.push(cellTemplate);
	            newCellComps.push(newCellComp);
	            _this.cellComps[col.getId()] = newCellComp;
	        });
	        var templateAndComps = {
	            template: templateParts.join(''),
	            cellComps: newCellComps
	        };
	        return templateAndComps;
	    };
	    RowComp.prototype.onRowSelected = function () {
	        var selected = this.rowNode.isSelected();
	        this.eAllRowContainers.forEach(function (row) { return utils_1._.addOrRemoveCssClass(row, 'ag-row-selected', selected); });
	    };
	    RowComp.prototype.callAfterRowAttachedOnCells = function (newCellComps, eRow) {
	        var _this = this;
	        newCellComps.forEach(function (cellComp) {
	            cellComp.setParentRow(eRow);
	            cellComp.afterAttached();
	            // if we are editing the row, then the cell needs to turn
	            // into edit mode
	            if (_this.editingRow) {
	                cellComp.startEditingIfEnabled();
	            }
	        });
	    };
	    RowComp.prototype.afterRowAttached = function (rowContainerComp, eRow) {
	        var _this = this;
	        this.addDomData(eRow);
	        this.removeSecondPassFuncs.push(function () {
	            // console.log(eRow);
	            rowContainerComp.removeRowElement(eRow);
	        });
	        this.removeFirstPassFuncs.push(function () {
	            if (utils_1._.exists(_this.rowNode.rowTop)) {
	                // the row top is updated anyway, however we set it here again
	                // to something more reasonable for the animation - ie if the
	                // row top is 10000px away, the row will flash out, so this
	                // gives it a rounded value, so row animates out more slowly
	                var rowTop = _this.roundRowTopToBounds(_this.rowNode.rowTop);
	                _this.setRowTop(rowTop);
	            }
	            else {
	                utils_1._.addCssClass(eRow, 'ag-opacity-zero');
	            }
	        });
	        this.eAllRowContainers.push(eRow);
	        // adding hover functionality adds listener to this row, so we
	        // do it lazily in an animation frame
	        if (this.useAnimationFrameForCreate) {
	            this.beans.taskQueue.addP1Task(this.addHoverFunctionality.bind(this, eRow));
	        }
	        else {
	            this.addHoverFunctionality(eRow);
	        }
	    };
	    RowComp.prototype.addHoverFunctionality = function (eRow) {
	        var _this = this;
	        // because we use animation frames to do this, it's possible the row no longer exists
	        // by the time we get to add it
	        if (!this.active) {
	            return;
	        }
	        // because mouseenter and mouseleave do not propagate, we cannot listen on the gridPanel
	        // like we do for all the other mouse events.
	        // because of the pinning, we cannot simply add / remove the class based on the eRow. we
	        // have to check all eRow's (body & pinned). so the trick is if any of the rows gets a
	        // mouse hover, it sets such in the rowNode, and then all three reflect the change as
	        // all are listening for event on the row node.
	        // step 1 - add listener, to set flag on row node
	        this.addDestroyableEventListener(eRow, 'mouseenter', function () { return _this.rowNode.onMouseEnter(); });
	        this.addDestroyableEventListener(eRow, 'mouseleave', function () { return _this.rowNode.onMouseLeave(); });
	        // step 2 - listen for changes on row node (which any eRow can trigger)
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_MOUSE_ENTER, function () {
	            utils_1._.addCssClass(eRow, 'ag-row-hover');
	        });
	        this.addDestroyableEventListener(this.rowNode, rowNode_1.RowNode.EVENT_MOUSE_LEAVE, function () {
	            utils_1._.removeCssClass(eRow, 'ag-row-hover');
	        });
	    };
	    // for animation, we don't want to animate entry or exit to a very far away pixel,
	    // otherwise the row would move so fast, it would appear to disappear. so this method
	    // moves the row closer to the viewport if it is far away, so the row slide in / out
	    // at a speed the user can see.
	    RowComp.prototype.roundRowTopToBounds = function (rowTop) {
	        var range = this.beans.gridPanel.getVerticalPixelRange();
	        var minPixel = range.top - 100;
	        var maxPixel = range.bottom + 100;
	        if (rowTop < minPixel) {
	            return minPixel;
	        }
	        else if (rowTop > maxPixel) {
	            return maxPixel;
	        }
	        else {
	            return rowTop;
	        }
	    };
	    RowComp.prototype.onRowHeightChanged = function () {
	        // check for exists first - if the user is resetting the row height, then
	        // it will be null (or undefined) momentarily until the next time the flatten
	        // stage is called where the row will then update again with a new height
	        if (utils_1._.exists(this.rowNode.rowHeight)) {
	            var heightPx_1 = this.rowNode.rowHeight + 'px';
	            this.eAllRowContainers.forEach(function (row) { return row.style.height = heightPx_1; });
	        }
	    };
	    RowComp.prototype.addEventListener = function (eventType, listener) {
	        if (eventType === 'renderedRowRemoved') {
	            eventType = RowComp.EVENT_ROW_REMOVED;
	            console.warn('ag-Grid: Since version 11, event renderedRowRemoved is now called ' + RowComp.EVENT_ROW_REMOVED);
	        }
	        if (!this.renderedRowEventService) {
	            this.renderedRowEventService = new eventService_1.EventService();
	        }
	        this.renderedRowEventService.addEventListener(eventType, listener);
	    };
	    RowComp.prototype.removeEventListener = function (eventType, listener) {
	        if (eventType === 'renderedRowRemoved') {
	            eventType = RowComp.EVENT_ROW_REMOVED;
	            console.warn('ag-Grid: Since version 11, event renderedRowRemoved is now called ' + RowComp.EVENT_ROW_REMOVED);
	        }
	        this.renderedRowEventService.removeEventListener(eventType, listener);
	    };
	    RowComp.prototype.destroyScope = function () {
	        if (this.scope) {
	            this.scope.$destroy();
	            this.scope = null;
	        }
	    };
	    RowComp.prototype.destroy = function (animate) {
	        if (animate === void 0) { animate = false; }
	        _super.prototype.destroy.call(this);
	        this.destroyScope();
	        this.active = false;
	        // why do we have this method? shouldn't everything below be added as a destroy func beside
	        // the corresponding create logic?
	        this.destroyFullWidthComponents();
	        if (animate) {
	            this.removeFirstPassFuncs.forEach(function (func) { return func(); });
	            this.removeSecondPassFuncs.push(this.destroyContainingCells.bind(this));
	        }
	        else {
	            this.destroyContainingCells();
	            // we are not animating, so execute the second stage of removal now.
	            // we call getAndClear, so that they are only called once
	            var delayedDestroyFunctions = this.getAndClearDelayedDestroyFunctions();
	            delayedDestroyFunctions.forEach(function (func) { return func(); });
	        }
	        var event = this.createRowEvent(events_1.Events.EVENT_VIRTUAL_ROW_REMOVED);
	        if (this.renderedRowEventService) {
	            this.renderedRowEventService.dispatchEvent(event);
	        }
	        this.beans.eventService.dispatchEvent(event);
	    };
	    RowComp.prototype.destroyContainingCells = function () {
	        this.forEachCellComp(function (renderedCell) { return renderedCell.destroy(); });
	        this.destroyFullWidthComponents();
	    };
	    // we clear so that the functions are never executed twice
	    RowComp.prototype.getAndClearDelayedDestroyFunctions = function () {
	        var result = this.removeSecondPassFuncs;
	        this.removeSecondPassFuncs = [];
	        return result;
	    };
	    RowComp.prototype.onCellFocusChanged = function () {
	        var rowFocused = this.beans.focusedCellController.isRowFocused(this.rowNode.rowIndex, this.rowNode.rowPinned);
	        if (rowFocused !== this.rowFocused) {
	            this.eAllRowContainers.forEach(function (row) { return utils_1._.addOrRemoveCssClass(row, 'ag-row-focus', rowFocused); });
	            this.eAllRowContainers.forEach(function (row) { return utils_1._.addOrRemoveCssClass(row, 'ag-row-no-focus', !rowFocused); });
	            this.rowFocused = rowFocused;
	        }
	        // if we are editing, then moving the focus out of a row will stop editing
	        if (!rowFocused && this.editingRow) {
	            this.stopEditing(false);
	        }
	    };
	    RowComp.prototype.onPaginationChanged = function () {
	        var currentPage = this.beans.paginationProxy.getCurrentPage();
	        // it is possible this row is in the new page, but the page number has changed, which means
	        // it needs to reposition itself relative to the new page
	        if (this.paginationPage !== currentPage) {
	            this.paginationPage = currentPage;
	            this.onTopChanged();
	        }
	    };
	    RowComp.prototype.onTopChanged = function () {
	        // top is not used in forPrint, as the rows are just laid out naturally
	        var doNotSetRowTop = this.beans.forPrint || this.beans.gridOptionsWrapper.isAutoHeight();
	        if (doNotSetRowTop) {
	            return;
	        }
	        this.setRowTop(this.rowNode.rowTop);
	    };
	    RowComp.prototype.applyPixelOffset = function (pixels) {
	        if (this.rowNode.isRowPinned()) {
	            return pixels;
	        }
	        else {
	            return pixels - this.beans.paginationProxy.getPixelOffset();
	        }
	    };
	    RowComp.prototype.setRowTop = function (pixels) {
	        // need to make sure rowTop is not null, as this can happen if the node was once
	        // visible (ie parent group was expanded) but is now not visible
	        if (utils_1._.exists(pixels)) {
	            var pixelsWithOffset = this.applyPixelOffset(pixels);
	            var topPx_1 = pixelsWithOffset + "px";
	            this.eAllRowContainers.forEach(function (row) { return row.style.top = topPx_1; });
	        }
	    };
	    // we clear so that the functions are never executed twice
	    RowComp.prototype.getAndClearNextVMTurnFunctions = function () {
	        var result = this.createSecondPassFuncs;
	        this.createSecondPassFuncs = [];
	        return result;
	    };
	    RowComp.prototype.getRowNode = function () {
	        return this.rowNode;
	    };
	    RowComp.prototype.getRenderedCellForColumn = function (column) {
	        return this.cellComps[column.getColId()];
	    };
	    RowComp.prototype.onRowIndexChanged = function () {
	        this.onCellFocusChanged();
	        this.updateRowIndexes();
	    };
	    RowComp.prototype.updateRowIndexes = function () {
	        var rowIndexStr = this.rowNode.getRowIndexString();
	        var rowIsEven = this.rowNode.rowIndex % 2 === 0;
	        var rowIsEvenChanged = this.rowIsEven !== rowIsEven;
	        if (rowIsEvenChanged) {
	            this.rowIsEven = rowIsEven;
	        }
	        this.eAllRowContainers.forEach(function (eRow) {
	            eRow.setAttribute('index', rowIndexStr);
	            if (rowIsEvenChanged) {
	                utils_1._.addOrRemoveCssClass(eRow, 'ag-row-even', rowIsEven);
	                utils_1._.addOrRemoveCssClass(eRow, 'ag-row-odd', !rowIsEven);
	            }
	        });
	    };
	    RowComp.prototype.ensureDomOrder = function () {
	        var body = this.getBodyRowElement();
	        if (body) {
	            this.bodyContainerComp.ensureDomOrder(body);
	        }
	        var left = this.getPinnedLeftRowElement();
	        if (left) {
	            this.pinnedLeftContainerComp.ensureDomOrder(left);
	        }
	        var right = this.getPinnedRightRowElement();
	        if (right) {
	            this.pinnedRightContainerComp.ensureDomOrder(right);
	        }
	        var fullWidth = this.getFullWidthRowElement();
	        if (fullWidth) {
	            this.fullWidthContainerComp.ensureDomOrder(fullWidth);
	        }
	    };
	    // returns the pinned left container, either the normal one, or the embedded full with one if exists
	    RowComp.prototype.getPinnedLeftRowElement = function () {
	        return this.ePinnedLeftRow ? this.ePinnedLeftRow : this.eFullWidthRowLeft;
	    };
	    // returns the pinned right container, either the normal one, or the embedded full with one if exists
	    RowComp.prototype.getPinnedRightRowElement = function () {
	        return this.ePinnedRightRow ? this.ePinnedRightRow : this.eFullWidthRowRight;
	    };
	    // returns the body container, either the normal one, or the embedded full with one if exists
	    RowComp.prototype.getBodyRowElement = function () {
	        return this.eBodyRow ? this.eBodyRow : this.eFullWidthRowBody;
	    };
	    // returns the full width container
	    RowComp.prototype.getFullWidthRowElement = function () {
	        return this.eFullWidthRow;
	    };
	    RowComp.EVENT_ROW_REMOVED = 'rowRemoved';
	    RowComp.DOM_DATA_KEY_RENDERED_ROW = 'renderedRow';
	    RowComp.FULL_WIDTH_CELL_RENDERER = 'fullWidthCellRenderer';
	    RowComp.GROUP_ROW_RENDERER = 'groupRowRenderer';
	    RowComp.LOADING_CELL_RENDERER = 'loadingCellRenderer';
	    return RowComp;
	}(component_1.Component));
	exports.RowComp = RowComp;


/***/ }),
/* 48 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	function QuerySelector(selector) {
	    return querySelectorFunc.bind(this, selector);
	}
	exports.QuerySelector = QuerySelector;
	function RefSelector(ref) {
	    return querySelectorFunc.bind(this, '[ref=' + ref + ']');
	}
	exports.RefSelector = RefSelector;
	function querySelectorFunc(selector, classPrototype, methodOrAttributeName, index) {
	    if (selector === null) {
	        console.error('ag-Grid: QuerySelector selector should not be null');
	        return;
	    }
	    if (typeof index === 'number') {
	        console.error('ag-Grid: QuerySelector should be on an attribute');
	        return;
	    }
	    // it's an attribute on the class
	    var props = getOrCreateProps(classPrototype, classPrototype.constructor.name);
	    if (!props.querySelectors) {
	        props.querySelectors = [];
	    }
	    props.querySelectors.push({
	        attributeName: methodOrAttributeName,
	        querySelector: selector
	    });
	}
	function Listener(eventName) {
	    return listenerFunc.bind(this, eventName);
	}
	exports.Listener = Listener;
	function listenerFunc(eventName, target, methodName, descriptor) {
	    if (eventName === null) {
	        console.error('ag-Grid: EventListener eventName should not be null');
	        return;
	    }
	    // it's an attribute on the class
	    var props = getOrCreateProps(target, target.constructor.name);
	    if (!props.listenerMethods) {
	        props.listenerMethods = [];
	    }
	    props.listenerMethods.push({
	        methodName: methodName,
	        eventName: eventName
	    });
	}
	function getOrCreateProps(target, instanceName) {
	    if (!target.__agComponentMetaData) {
	        target.__agComponentMetaData = {};
	    }
	    if (!target.__agComponentMetaData[instanceName]) {
	        target.__agComponentMetaData[instanceName] = {};
	    }
	    return target.__agComponentMetaData[instanceName];
	}


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var context_2 = __webpack_require__(7);
	var TemplateService = (function () {
	    function TemplateService() {
	        this.templateCache = {};
	        this.waitingCallbacks = {};
	    }
	    // returns the template if it is loaded, or null if it is not loaded
	    // but will call the callback when it is loaded
	    TemplateService.prototype.getTemplate = function (url, callback) {
	        var templateFromCache = this.templateCache[url];
	        if (templateFromCache) {
	            return templateFromCache;
	        }
	        var callbackList = this.waitingCallbacks[url];
	        var that = this;
	        if (!callbackList) {
	            // first time this was called, so need a new list for callbacks
	            callbackList = [];
	            this.waitingCallbacks[url] = callbackList;
	            // and also need to do the http request
	            var client = new XMLHttpRequest();
	            client.onload = function () {
	                that.handleHttpResult(this, url);
	            };
	            client.open("GET", url);
	            client.send();
	        }
	        // add this callback
	        if (callback) {
	            callbackList.push(callback);
	        }
	        // caller needs to wait for template to load, so return null
	        return null;
	    };
	    TemplateService.prototype.handleHttpResult = function (httpResult, url) {
	        if (httpResult.status !== 200 || httpResult.response === null) {
	            console.warn('Unable to get template error ' + httpResult.status + ' - ' + url);
	            return;
	        }
	        // response success, so process it
	        // in IE9 the response is in - responseText
	        this.templateCache[url] = httpResult.response || httpResult.responseText;
	        // inform all listeners that this is now in the cache
	        var callbacks = this.waitingCallbacks[url];
	        for (var i = 0; i < callbacks.length; i++) {
	            var callback = callbacks[i];
	            // we could pass the callback the response, however we know the client of this code
	            // is the cell renderer, and it passes the 'cellRefresh' method in as the callback
	            // which doesn't take any parameters.
	            callback();
	        }
	        if (this.$scope) {
	            var that_1 = this;
	            setTimeout(function () {
	                that_1.$scope.$apply();
	            }, 0);
	        }
	    };
	    __decorate([
	        context_2.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], TemplateService.prototype, "$scope", void 0);
	    TemplateService = __decorate([
	        context_1.Bean('templateService')
	    ], TemplateService);
	    return TemplateService;
	}());
	exports.TemplateService = TemplateService;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var columnController_1 = __webpack_require__(15);
	var rowRenderer_1 = __webpack_require__(23);
	var filterManager_1 = __webpack_require__(51);
	var eventService_1 = __webpack_require__(5);
	var gridPanel_1 = __webpack_require__(24);
	var logger_1 = __webpack_require__(6);
	var constants_1 = __webpack_require__(9);
	var popupService_1 = __webpack_require__(52);
	var events_1 = __webpack_require__(11);
	var utils_1 = __webpack_require__(8);
	var borderLayout_1 = __webpack_require__(25);
	var context_1 = __webpack_require__(7);
	var focusedCellController_1 = __webpack_require__(38);
	var component_1 = __webpack_require__(35);
	var paginationComp_1 = __webpack_require__(86);
	var gridApi_1 = __webpack_require__(12);
	var GridCore = (function () {
	    function GridCore(loggerFactory) {
	        this.destroyFunctions = [];
	        this.logger = loggerFactory.create('GridCore');
	    }
	    GridCore.prototype.init = function () {
	        var _this = this;
	        var eSouthPanel = this.createSouthPanel();
	        var eastPanel;
	        var westPanel;
	        if (this.toolPanel && !this.gridOptionsWrapper.isForPrint()) {
	            // if we are doing RTL, then the tool panel appears on the left
	            if (this.gridOptionsWrapper.isEnableRtl()) {
	                westPanel = this.toolPanel.getHtmlElement();
	            }
	            else {
	                eastPanel = this.toolPanel.getHtmlElement();
	            }
	        }
	        var createTopPanelGui = this.createNorthPanel();
	        this.eRootPanel = new borderLayout_1.BorderLayout({
	            center: this.gridPanel.getLayout(),
	            east: eastPanel,
	            west: westPanel,
	            north: createTopPanelGui,
	            south: eSouthPanel,
	            dontFill: this.gridOptionsWrapper.isForPrint(),
	            fillHorizontalOnly: this.gridOptionsWrapper.isAutoHeight(),
	            name: 'eRootPanel'
	        });
	        // parts of the CSS need to know if we are in 'for print' mode or not,
	        // so we add a class to allow applying CSS based on this.
	        if (this.gridOptionsWrapper.isForPrint()) {
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-layout-for-print');
	            // kept to limit breaking changes, ag-no-scrolls was renamed to ag-layout-for-print
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-no-scrolls');
	        }
	        else if (this.gridOptionsWrapper.isAutoHeight()) {
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-layout-auto-height');
	        }
	        else {
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-layout-normal');
	            // kept to limit breaking changes, ag-scrolls was renamed to ag-layout-normal
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-scrolls');
	        }
	        // see what the grid options are for default of toolbar
	        this.showToolPanel(this.gridOptionsWrapper.isShowToolPanel());
	        this.eGridDiv.appendChild(this.eRootPanel.getGui());
	        // if using angular, watch for quickFilter changes
	        if (this.$scope) {
	            this.$scope.$watch(this.quickFilterOnScope, function (newFilter) { return _this.filterManager.setQuickFilter(newFilter); });
	        }
	        if (!this.gridOptionsWrapper.isForPrint()) {
	            this.addWindowResizeListener();
	        }
	        // important to set rtl before doLayout, as setting the RTL class impacts the scroll position,
	        // which doLayout indirectly depends on
	        this.addRtlSupport();
	        this.doLayout();
	        this.finished = false;
	        this.periodicallyDoLayout();
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onRowGroupChanged.bind(this));
	        this.onRowGroupChanged();
	        this.logger.log('ready');
	    };
	    GridCore.prototype.addRtlSupport = function () {
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-rtl');
	        }
	        else {
	            utils_1.Utils.addCssClass(this.eRootPanel.getGui(), 'ag-ltr');
	        }
	    };
	    GridCore.prototype.createNorthPanel = function () {
	        var _this = this;
	        if (!this.gridOptionsWrapper.isEnterprise()) {
	            return null;
	        }
	        var topPanelGui = document.createElement('div');
	        var dropPanelVisibleListener = this.onDropPanelVisible.bind(this);
	        this.rowGroupComp = this.rowGroupCompFactory.create();
	        this.pivotComp = this.pivotCompFactory.create();
	        topPanelGui.appendChild(this.rowGroupComp.getHtmlElement());
	        topPanelGui.appendChild(this.pivotComp.getHtmlElement());
	        this.rowGroupComp.addEventListener(component_1.Component.EVENT_VISIBLE_CHANGED, dropPanelVisibleListener);
	        this.pivotComp.addEventListener(component_1.Component.EVENT_VISIBLE_CHANGED, dropPanelVisibleListener);
	        this.destroyFunctions.push(function () {
	            _this.rowGroupComp.removeEventListener(component_1.Component.EVENT_VISIBLE_CHANGED, dropPanelVisibleListener);
	            _this.pivotComp.removeEventListener(component_1.Component.EVENT_VISIBLE_CHANGED, dropPanelVisibleListener);
	        });
	        this.onDropPanelVisible();
	        return topPanelGui;
	    };
	    GridCore.prototype.onDropPanelVisible = function () {
	        var bothVisible = this.rowGroupComp.isVisible() && this.pivotComp.isVisible();
	        this.rowGroupComp.addOrRemoveCssClass('ag-width-half', bothVisible);
	        this.pivotComp.addOrRemoveCssClass('ag-width-half', bothVisible);
	    };
	    GridCore.prototype.getRootGui = function () {
	        return this.eRootPanel.getGui();
	    };
	    GridCore.prototype.createSouthPanel = function () {
	        if (!this.statusBar && this.gridOptionsWrapper.isEnableStatusBar()) {
	            console.warn('ag-Grid: status bar is only available in ag-Grid-Enterprise');
	        }
	        var statusBarEnabled = this.statusBar && this.gridOptionsWrapper.isEnableStatusBar();
	        var isPaging = this.gridOptionsWrapper.isPagination();
	        var paginationPanelEnabled = isPaging
	            && !this.gridOptionsWrapper.isForPrint()
	            && !this.gridOptionsWrapper.isSuppressPaginationPanel();
	        if (!statusBarEnabled && !paginationPanelEnabled) {
	            return null;
	        }
	        var eSouthPanel = document.createElement('div');
	        if (statusBarEnabled) {
	            eSouthPanel.appendChild(this.statusBar.getHtmlElement());
	        }
	        if (paginationPanelEnabled) {
	            var paginationComp = new paginationComp_1.PaginationComp();
	            this.context.wireBean(paginationComp);
	            eSouthPanel.appendChild(paginationComp.getHtmlElement());
	            this.destroyFunctions.push(paginationComp.destroy.bind(paginationComp));
	        }
	        return eSouthPanel;
	    };
	    GridCore.prototype.onRowGroupChanged = function () {
	        if (!this.rowGroupComp) {
	            return;
	        }
	        var rowGroupPanelShow = this.gridOptionsWrapper.getRowGroupPanelShow();
	        if (rowGroupPanelShow === constants_1.Constants.ALWAYS) {
	            this.rowGroupComp.setVisible(true);
	        }
	        else if (rowGroupPanelShow === constants_1.Constants.ONLY_WHEN_GROUPING) {
	            var grouping = !this.columnController.isRowGroupEmpty();
	            this.rowGroupComp.setVisible(grouping);
	        }
	        else {
	            this.rowGroupComp.setVisible(false);
	        }
	        this.eRootPanel.doLayout();
	    };
	    GridCore.prototype.addWindowResizeListener = function () {
	        var eventListener = this.doLayout.bind(this);
	        window.addEventListener('resize', eventListener);
	        this.destroyFunctions.push(function () { return window.removeEventListener('resize', eventListener); });
	    };
	    GridCore.prototype.periodicallyDoLayout = function () {
	        var _this = this;
	        if (!this.finished) {
	            var intervalMillis = this.gridOptionsWrapper.getLayoutInterval();
	            // if interval is negative, this stops the layout from happening
	            if (intervalMillis > 0) {
	                this.frameworkFactory.setTimeout(function () {
	                    _this.doLayout();
	                    _this.gridPanel.periodicallyCheck();
	                    _this.periodicallyDoLayout();
	                }, intervalMillis);
	            }
	            else {
	                // if user provided negative number, we still do the check every 5 seconds,
	                // in case the user turns the number positive again
	                this.frameworkFactory.setTimeout(function () {
	                    _this.periodicallyDoLayout();
	                }, 5000);
	            }
	        }
	    };
	    GridCore.prototype.showToolPanel = function (show) {
	        if (show && !this.toolPanel) {
	            console.warn('ag-Grid: toolPanel is only available in ag-Grid Enterprise');
	            this.toolPanelShowing = false;
	            return;
	        }
	        this.toolPanelShowing = show;
	        if (this.toolPanel) {
	            this.toolPanel.setVisible(show);
	            this.eRootPanel.doLayout();
	        }
	    };
	    GridCore.prototype.isToolPanelShowing = function () {
	        return this.toolPanelShowing;
	    };
	    GridCore.prototype.destroy = function () {
	        this.finished = true;
	        this.eGridDiv.removeChild(this.eRootPanel.getGui());
	        this.logger.log('Grid DOM removed');
	        this.destroyFunctions.forEach(function (func) { return func(); });
	    };
	    GridCore.prototype.ensureNodeVisible = function (comparator) {
	        if (this.doingVirtualPaging) {
	            throw 'Cannot use ensureNodeVisible when doing virtual paging, as we cannot check rows that are not in memory';
	        }
	        // look for the node index we want to display
	        var rowCount = this.rowModel.getPageLastRow() + 1;
	        var comparatorIsAFunction = typeof comparator === 'function';
	        var indexToSelect = -1;
	        // go through all the nodes, find the one we want to show
	        for (var i = 0; i < rowCount; i++) {
	            var node = this.rowModel.getRow(i);
	            if (comparatorIsAFunction) {
	                if (comparator(node)) {
	                    indexToSelect = i;
	                    break;
	                }
	            }
	            else {
	                // check object equality against node and data
	                if (comparator === node || comparator === node.data) {
	                    indexToSelect = i;
	                    break;
	                }
	            }
	        }
	        if (indexToSelect >= 0) {
	            this.gridPanel.ensureIndexVisible(indexToSelect);
	        }
	    };
	    GridCore.prototype.doLayout = function () {
	        // need to do layout first, as drawVirtualRows and setPinnedColHeight
	        // need to know the result of the resizing of the panels.
	        var sizeChanged = this.eRootPanel.doLayout();
	        // not sure why, this is a hack, but if size changed, it may need to be called
	        // again - as the size change can change whether scrolls are visible or not (i think).
	        // to see why, take this second 'doLayout' call out, and see example in docs for
	        // width & height, the grid will flicker as it doesn't get laid out correctly with
	        // one call to doLayout()
	        if (sizeChanged) {
	            this.eRootPanel.doLayout();
	        }
	        // both of the two below should be done in gridPanel, the gridPanel should register 'resize' to the panel
	        if (sizeChanged) {
	            this.rowRenderer.redrawAfterScroll();
	            var event_1 = {
	                type: events_1.Events.EVENT_GRID_SIZE_CHANGED,
	                clientWidth: this.eRootPanel.getGui().clientWidth,
	                clientHeight: this.eRootPanel.getGui().clientHeight,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptions'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "gridOptions", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], GridCore.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('frameworkFactory'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "frameworkFactory", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], GridCore.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], GridCore.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], GridCore.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], GridCore.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], GridCore.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('eGridDiv'),
	        __metadata("design:type", HTMLElement)
	    ], GridCore.prototype, "eGridDiv", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('quickFilterOnScope'),
	        __metadata("design:type", String)
	    ], GridCore.prototype, "quickFilterOnScope", void 0);
	    __decorate([
	        context_1.Autowired('popupService'),
	        __metadata("design:type", popupService_1.PopupService)
	    ], GridCore.prototype, "popupService", void 0);
	    __decorate([
	        context_1.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController_1.FocusedCellController)
	    ], GridCore.prototype, "focusedCellController", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], GridCore.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], GridCore.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], GridCore.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Optional('rowGroupCompFactory'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "rowGroupCompFactory", void 0);
	    __decorate([
	        context_1.Optional('pivotCompFactory'),
	        __metadata("design:type", Object)
	    ], GridCore.prototype, "pivotCompFactory", void 0);
	    __decorate([
	        context_1.Optional('toolPanel'),
	        __metadata("design:type", component_1.Component)
	    ], GridCore.prototype, "toolPanel", void 0);
	    __decorate([
	        context_1.Optional('statusBar'),
	        __metadata("design:type", component_1.Component)
	    ], GridCore.prototype, "statusBar", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridCore.prototype, "init", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], GridCore.prototype, "destroy", null);
	    GridCore = __decorate([
	        context_1.Bean('gridCore'),
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory])
	    ], GridCore);
	    return GridCore;
	}());
	exports.GridCore = GridCore;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var popupService_1 = __webpack_require__(52);
	var valueService_1 = __webpack_require__(31);
	var columnController_1 = __webpack_require__(15);
	var textFilter_1 = __webpack_require__(53);
	var numberFilter_1 = __webpack_require__(55);
	var context_1 = __webpack_require__(7);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var dateFilter_1 = __webpack_require__(56);
	var gridApi_1 = __webpack_require__(12);
	var FilterManager = (function () {
	    function FilterManager() {
	        this.allFilters = {};
	        this.quickFilter = null;
	        this.availableFilters = {
	            'text': textFilter_1.TextFilter,
	            'number': numberFilter_1.NumberFilter,
	            'date': dateFilter_1.DateFilter
	        };
	    }
	    FilterManager_1 = FilterManager;
	    FilterManager.prototype.init = function () {
	        this.eventService.addEventListener(events_1.Events.EVENT_ROW_DATA_CHANGED, this.onNewRowsLoaded.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_NEW_COLUMNS_LOADED, this.onNewColumnsLoaded.bind(this));
	        this.quickFilter = this.parseQuickFilter(this.gridOptionsWrapper.getQuickFilterText());
	        // check this here, in case there is a filter from the start
	        this.checkExternalFilter();
	    };
	    FilterManager.prototype.registerFilter = function (key, Filter) {
	        this.availableFilters[key] = Filter;
	    };
	    FilterManager.prototype.setFilterModel = function (model) {
	        var _this = this;
	        if (model) {
	            // mark the filters as we set them, so any active filters left over we stop
	            var modelKeys_1 = Object.keys(model);
	            utils_1.Utils.iterateObject(this.allFilters, function (colId, filterWrapper) {
	                utils_1.Utils.removeFromArray(modelKeys_1, colId);
	                var newModel = model[colId];
	                _this.setModelOnFilterWrapper(filterWrapper.filter, newModel);
	            });
	            // at this point, processedFields contains data for which we don't have a filter working yet
	            utils_1.Utils.iterateArray(modelKeys_1, function (colId) {
	                var column = _this.columnController.getPrimaryColumn(colId);
	                if (!column) {
	                    console.warn('Warning ag-grid setFilterModel - no column found for colId ' + colId);
	                    return;
	                }
	                var filterWrapper = _this.getOrCreateFilterWrapper(column);
	                _this.setModelOnFilterWrapper(filterWrapper.filter, model[colId]);
	            });
	        }
	        else {
	            utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	                _this.setModelOnFilterWrapper(filterWrapper.filter, null);
	            });
	        }
	        this.onFilterChanged();
	    };
	    FilterManager.prototype.setModelOnFilterWrapper = function (filter, newModel) {
	        if (typeof filter.setModel !== 'function') {
	            console.warn('Warning ag-grid - filter missing setModel method, which is needed for setFilterModel');
	            return;
	        }
	        filter.setModel(newModel);
	    };
	    FilterManager.prototype.getFilterModel = function () {
	        var result = {};
	        utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            // because user can provide filters, we provide useful error checking and messages
	            var filter = filterWrapper.filter;
	            if (typeof filter.getModel !== 'function') {
	                console.warn('Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel');
	                return;
	            }
	            var model = filter.getModel();
	            if (utils_1.Utils.exists(model)) {
	                result[key] = model;
	            }
	        });
	        return result;
	    };
	    // returns true if any advanced filter (ie not quick filter) active
	    FilterManager.prototype.isAdvancedFilterPresent = function () {
	        return this.advancedFilterPresent;
	    };
	    FilterManager.prototype.setAdvancedFilterPresent = function () {
	        var atLeastOneActive = false;
	        utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            if (filterWrapper.filter.isFilterActive()) {
	                atLeastOneActive = true;
	            }
	        });
	        this.advancedFilterPresent = atLeastOneActive;
	    };
	    FilterManager.prototype.updateFilterFlagInColumns = function () {
	        utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            var filterActive = filterWrapper.filter.isFilterActive();
	            filterWrapper.column.setFilterActive(filterActive);
	        });
	    };
	    // returns true if quickFilter or advancedFilter
	    FilterManager.prototype.isAnyFilterPresent = function () {
	        return this.isQuickFilterPresent() || this.advancedFilterPresent || this.externalFilterPresent;
	    };
	    FilterManager.prototype.doesFilterPass = function (node, filterToSkip) {
	        var data = node.data;
	        var colKeys = Object.keys(this.allFilters);
	        for (var i = 0, l = colKeys.length; i < l; i++) {
	            var colId = colKeys[i];
	            var filterWrapper = this.allFilters[colId];
	            // if no filter, always pass
	            if (filterWrapper === undefined) {
	                continue;
	            }
	            if (filterWrapper.filter === filterToSkip) {
	                continue;
	            }
	            // don't bother with filters that are not active
	            if (!filterWrapper.filter.isFilterActive()) {
	                continue;
	            }
	            if (!filterWrapper.filter.doesFilterPass) {
	                console.error('Filter is missing method doesFilterPass');
	            }
	            var params = {
	                node: node,
	                data: data
	            };
	            if (!filterWrapper.filter.doesFilterPass(params)) {
	                return false;
	            }
	        }
	        // all filters passed
	        return true;
	    };
	    FilterManager.prototype.parseQuickFilter = function (newFilter) {
	        if (utils_1.Utils.missing(newFilter) || newFilter === "") {
	            return null;
	        }
	        if (this.gridOptionsWrapper.isRowModelInfinite()) {
	            console.warn('ag-grid: cannot do quick filtering when doing virtual paging');
	            return null;
	        }
	        return newFilter.toUpperCase();
	    };
	    // returns true if it has changed (not just same value again)
	    FilterManager.prototype.setQuickFilter = function (newFilter) {
	        var parsedFilter = this.parseQuickFilter(newFilter);
	        if (this.quickFilter !== parsedFilter) {
	            this.quickFilter = parsedFilter;
	            this.onFilterChanged();
	        }
	    };
	    FilterManager.prototype.checkExternalFilter = function () {
	        this.externalFilterPresent = this.gridOptionsWrapper.isExternalFilterPresent();
	    };
	    FilterManager.prototype.onFilterChanged = function () {
	        this.setAdvancedFilterPresent();
	        this.updateFilterFlagInColumns();
	        this.checkExternalFilter();
	        utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            if (filterWrapper.filter.onAnyFilterChanged) {
	                filterWrapper.filter.onAnyFilterChanged();
	            }
	        });
	        var event = {
	            type: events_1.Events.EVENT_FILTER_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    FilterManager.prototype.isQuickFilterPresent = function () {
	        return this.quickFilter !== null;
	    };
	    FilterManager.prototype.doesRowPassOtherFilters = function (filterToSkip, node) {
	        return this.doesRowPassFilter(node, filterToSkip);
	    };
	    FilterManager.prototype.doesRowPassQuickFilterNoCache = function (node) {
	        var _this = this;
	        var columns = this.columnController.getAllPrimaryColumns();
	        var filterPasses = false;
	        columns.forEach(function (column) {
	            if (filterPasses) {
	                return;
	            }
	            var part = _this.getQuickFilterTextForColumn(column, node);
	            if (utils_1.Utils.exists(part)) {
	                if (part.indexOf(_this.quickFilter) >= 0) {
	                    filterPasses = true;
	                }
	            }
	        });
	        return filterPasses;
	    };
	    FilterManager.prototype.doesRowPassQuickFilterCache = function (node) {
	        if (!node.quickFilterAggregateText) {
	            this.aggregateRowForQuickFilter(node);
	        }
	        var filterPasses = node.quickFilterAggregateText.indexOf(this.quickFilter) >= 0;
	        return filterPasses;
	    };
	    FilterManager.prototype.doesRowPassQuickFilter = function (node) {
	        var filterPasses;
	        if (this.gridOptionsWrapper.isCacheQuickFilter()) {
	            filterPasses = this.doesRowPassQuickFilterCache(node);
	        }
	        else {
	            filterPasses = this.doesRowPassQuickFilterNoCache(node);
	        }
	        return filterPasses;
	    };
	    FilterManager.prototype.doesRowPassFilter = function (node, filterToSkip) {
	        // the row must pass ALL of the filters, so if any of them fail,
	        // we return true. that means if a row passes the quick filter,
	        // but fails the column filter, it fails overall
	        // first up, check quick filter
	        if (this.isQuickFilterPresent()) {
	            if (!this.doesRowPassQuickFilter(node)) {
	                return false;
	            }
	        }
	        // secondly, give the client a chance to reject this row
	        if (this.externalFilterPresent) {
	            if (!this.gridOptionsWrapper.doesExternalFilterPass(node)) {
	                return false;
	            }
	        }
	        // lastly, check our internal advanced filter
	        if (this.advancedFilterPresent) {
	            if (!this.doesFilterPass(node, filterToSkip)) {
	                return false;
	            }
	        }
	        // got this far, all filters pass
	        return true;
	    };
	    FilterManager.prototype.getQuickFilterTextForColumn = function (column, rowNode) {
	        var value = this.valueService.getValue(column, rowNode);
	        var valueAfterCallback;
	        var colDef = column.getColDef();
	        if (column.getColDef().getQuickFilterText) {
	            var params = {
	                value: value,
	                node: rowNode,
	                data: rowNode.data,
	                column: column,
	                colDef: colDef
	            };
	            valueAfterCallback = column.getColDef().getQuickFilterText(params);
	        }
	        else {
	            valueAfterCallback = value;
	        }
	        if (valueAfterCallback && valueAfterCallback !== '') {
	            return valueAfterCallback.toString().toUpperCase();
	        }
	        else {
	            return null;
	        }
	    };
	    FilterManager.prototype.aggregateRowForQuickFilter = function (node) {
	        var _this = this;
	        var stringParts = [];
	        var columns = this.columnController.getAllPrimaryColumns();
	        columns.forEach(function (column) {
	            var part = _this.getQuickFilterTextForColumn(column, node);
	            if (utils_1.Utils.exists(part)) {
	                stringParts.push(part);
	            }
	        });
	        node.quickFilterAggregateText = stringParts.join(FilterManager_1.QUICK_FILTER_SEPARATOR);
	    };
	    FilterManager.prototype.onNewRowsLoaded = function () {
	        utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            if (filterWrapper.filter.onNewRowsLoaded) {
	                filterWrapper.filter.onNewRowsLoaded();
	            }
	        });
	        this.updateFilterFlagInColumns();
	        this.setAdvancedFilterPresent();
	    };
	    FilterManager.prototype.createValueGetter = function (column) {
	        var that = this;
	        return function valueGetter(node) {
	            return that.valueService.getValue(column, node);
	        };
	    };
	    FilterManager.prototype.getFilterComponent = function (column) {
	        var filterWrapper = this.getOrCreateFilterWrapper(column);
	        return filterWrapper.filter;
	    };
	    FilterManager.prototype.getOrCreateFilterWrapper = function (column) {
	        var filterWrapper = this.cachedFilter(column);
	        if (!filterWrapper) {
	            filterWrapper = this.createFilterWrapper(column);
	            this.allFilters[column.getColId()] = filterWrapper;
	        }
	        return filterWrapper;
	    };
	    FilterManager.prototype.cachedFilter = function (column) {
	        return this.allFilters[column.getColId()];
	    };
	    FilterManager.prototype.createFilterInstance = function (column) {
	        var filter = column.getFilter();
	        var filterIsComponent = typeof filter === 'function';
	        var filterIsName = utils_1.Utils.missing(filter) || typeof filter === 'string';
	        var FilterClass;
	        if (filterIsComponent) {
	            // if user provided a filter, just use it
	            FilterClass = filter;
	            // now create filter (had to cast to any to get 'new' working)
	            this.assertMethodHasNoParameters(FilterClass);
	        }
	        else if (filterIsName) {
	            var filterName = filter;
	            FilterClass = this.getFilterFromCache(filterName);
	        }
	        else {
	            console.error('ag-Grid: colDef.filter should be function or a string');
	            return null;
	        }
	        var filterInstance = new FilterClass();
	        this.checkFilterHasAllMandatoryMethods(filterInstance, column);
	        this.context.wireBean(filterInstance);
	        return filterInstance;
	    };
	    FilterManager.prototype.checkFilterHasAllMandatoryMethods = function (filterInstance, column) {
	        // help the user, check the mandatory methods exist
	        ['getGui', 'isFilterActive', 'doesFilterPass', 'getModel', 'setModel'].forEach(function (methodName) {
	            var methodIsMissing = !filterInstance[methodName];
	            if (methodIsMissing) {
	                throw "Filter for column " + column.getColId() + " is missing method " + methodName;
	            }
	        });
	    };
	    FilterManager.prototype.createParams = function (filterWrapper) {
	        var _this = this;
	        var filterChangedCallback = this.onFilterChanged.bind(this);
	        var event = {
	            type: events_1.Events.EVENT_FILTER_MODIFIED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        var filterModifiedCallback = function () { return _this.eventService.dispatchEvent(event); };
	        var doesRowPassOtherFilters = this.doesRowPassOtherFilters.bind(this, filterWrapper.filter);
	        var colDef = filterWrapper.column.getColDef();
	        var params = {
	            column: filterWrapper.column,
	            colDef: colDef,
	            rowModel: this.rowModel,
	            filterChangedCallback: filterChangedCallback,
	            filterModifiedCallback: filterModifiedCallback,
	            valueGetter: this.createValueGetter(filterWrapper.column),
	            doesRowPassOtherFilter: doesRowPassOtherFilters,
	            context: this.gridOptionsWrapper.getContext(),
	            $scope: filterWrapper.scope
	        };
	        if (colDef.filterParams) {
	            utils_1.Utils.assign(params, colDef.filterParams);
	        }
	        return params;
	    };
	    FilterManager.prototype.createFilterWrapper = function (column) {
	        var filterWrapper = {
	            column: column,
	            filter: null,
	            scope: null,
	            gui: null
	        };
	        filterWrapper.filter = this.createFilterInstance(column);
	        this.initialiseFilterAndPutIntoGui(filterWrapper);
	        return filterWrapper;
	    };
	    FilterManager.prototype.initialiseFilterAndPutIntoGui = function (filterWrapper) {
	        // first up, create child scope if needed
	        if (this.gridOptionsWrapper.isAngularCompileFilters()) {
	            filterWrapper.scope = this.$scope.$new();
	            filterWrapper.scope.context = this.gridOptionsWrapper.getContext();
	        }
	        var params = this.createParams(filterWrapper);
	        filterWrapper.filter.init(params);
	        var eFilterGui = document.createElement('div');
	        eFilterGui.className = 'ag-filter';
	        var guiFromFilter = filterWrapper.filter.getGui();
	        // for backwards compatibility with Angular 1 - we
	        // used to allow providing back HTML from getGui().
	        // once we move away from supporting Angular 1
	        // directly, we can change this.
	        if (typeof guiFromFilter === 'string') {
	            guiFromFilter = utils_1.Utils.loadTemplate(guiFromFilter);
	        }
	        eFilterGui.appendChild(guiFromFilter);
	        if (filterWrapper.scope) {
	            filterWrapper.gui = this.$compile(eFilterGui)(filterWrapper.scope)[0];
	        }
	        else {
	            filterWrapper.gui = eFilterGui;
	        }
	    };
	    FilterManager.prototype.getFilterFromCache = function (filterType) {
	        var defaultFilterType = this.enterprise ? 'set' : 'text';
	        var defaultFilter = this.availableFilters[defaultFilterType];
	        if (utils_1.Utils.missing(filterType)) {
	            return defaultFilter;
	        }
	        if (!this.enterprise && filterType === 'set') {
	            console.warn('ag-Grid: Set filter is only available in Enterprise ag-Grid');
	            filterType = 'text';
	        }
	        if (this.availableFilters[filterType]) {
	            return this.availableFilters[filterType];
	        }
	        else {
	            console.error('ag-Grid: Could not find filter type ' + filterType);
	            return this.availableFilters[defaultFilter];
	        }
	    };
	    FilterManager.prototype.onNewColumnsLoaded = function () {
	        this.destroy();
	    };
	    // destroys the filter, so it not longer takes part
	    FilterManager.prototype.destroyFilter = function (column) {
	        var filterWrapper = this.allFilters[column.getColId()];
	        if (filterWrapper) {
	            this.disposeFilterWrapper(filterWrapper);
	            this.onFilterChanged();
	        }
	    };
	    FilterManager.prototype.disposeFilterWrapper = function (filterWrapper) {
	        filterWrapper.filter.setModel(null);
	        if (filterWrapper.filter.destroy) {
	            filterWrapper.filter.destroy();
	        }
	        filterWrapper.column.setFilterActive(false);
	        delete this.allFilters[filterWrapper.column.getColId()];
	    };
	    FilterManager.prototype.destroy = function () {
	        var _this = this;
	        utils_1.Utils.iterateObject(this.allFilters, function (key, filterWrapper) {
	            _this.disposeFilterWrapper(filterWrapper);
	        });
	    };
	    FilterManager.prototype.assertMethodHasNoParameters = function (theMethod) {
	        var getRowsParams = utils_1.Utils.getFunctionParameters(theMethod);
	        if (getRowsParams.length > 0) {
	            console.warn('ag-grid: It looks like your filter is of the old type and expecting parameters in the constructor.');
	            console.warn('ag-grid: From ag-grid 1.14, the constructor should take no parameters and init() used instead.');
	        }
	    };
	    FilterManager.QUICK_FILTER_SEPARATOR = '\n';
	    __decorate([
	        context_1.Autowired('$compile'),
	        __metadata("design:type", Object)
	    ], FilterManager.prototype, "$compile", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], FilterManager.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], FilterManager.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('gridCore'),
	        __metadata("design:type", Object)
	    ], FilterManager.prototype, "gridCore", void 0);
	    __decorate([
	        context_1.Autowired('popupService'),
	        __metadata("design:type", popupService_1.PopupService)
	    ], FilterManager.prototype, "popupService", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], FilterManager.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], FilterManager.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], FilterManager.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], FilterManager.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('enterprise'),
	        __metadata("design:type", Boolean)
	    ], FilterManager.prototype, "enterprise", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], FilterManager.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], FilterManager.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], FilterManager.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], FilterManager.prototype, "init", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], FilterManager.prototype, "destroy", null);
	    FilterManager = FilterManager_1 = __decorate([
	        context_1.Bean('filterManager')
	    ], FilterManager);
	    return FilterManager;
	    var FilterManager_1;
	}());
	exports.FilterManager = FilterManager;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var constants_1 = __webpack_require__(9);
	var context_1 = __webpack_require__(7);
	var gridCore_1 = __webpack_require__(50);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var PopupService = (function () {
	    function PopupService() {
	    }
	    // this.popupService.setPopupParent(this.eRootPanel.getGui());
	    PopupService.prototype.getPopupParent = function () {
	        return this.gridCore.getRootGui();
	    };
	    PopupService.prototype.positionPopupForMenu = function (params) {
	        var sourceRect = params.eventSource.getBoundingClientRect();
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        var y = sourceRect.top - parentRect.top;
	        y = this.keepYWithinBounds(params, y);
	        var minWidth = (params.ePopup.clientWidth > 0) ? params.ePopup.clientWidth : 200;
	        var widthOfParent = parentRect.right - parentRect.left;
	        var maxX = widthOfParent - minWidth;
	        // the x position of the popup depends on RTL or LTR. for normal cases, LTR, we put the child popup
	        // to the right, unless it doesn't fit and we then put it to the left. for RTL it's the other way around,
	        // we try place it first to the left, and then if not to the right.
	        var x;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // for RTL, try left first
	            x = xLeftPosition();
	            if (x < 0) {
	                x = xRightPosition();
	            }
	            if (x > maxX) {
	                x = 0;
	            }
	        }
	        else {
	            // for LTR, try right first
	            x = xRightPosition();
	            if (x > maxX) {
	                x = xLeftPosition();
	            }
	            if (x < 0) {
	                x = 0;
	            }
	        }
	        params.ePopup.style.left = x + "px";
	        params.ePopup.style.top = y + "px";
	        function xRightPosition() {
	            return sourceRect.right - parentRect.left - 2;
	        }
	        function xLeftPosition() {
	            return sourceRect.left - parentRect.left - minWidth;
	        }
	    };
	    PopupService.prototype.positionPopupUnderMouseEvent = function (params) {
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        this.positionPopup({
	            ePopup: params.ePopup,
	            x: params.mouseEvent.clientX - parentRect.left,
	            y: params.mouseEvent.clientY - parentRect.top,
	            keepWithinBounds: true
	        });
	        this.callPostProcessPopup(params.ePopup, null, params.mouseEvent, params.type, params.column, params.rowNode);
	    };
	    PopupService.prototype.positionPopupUnderComponent = function (params) {
	        var sourceRect = params.eventSource.getBoundingClientRect();
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        this.positionPopup({
	            ePopup: params.ePopup,
	            minWidth: params.minWidth,
	            nudgeX: params.nudgeX,
	            nudgeY: params.nudgeY,
	            x: sourceRect.left - parentRect.left,
	            y: sourceRect.top - parentRect.top + sourceRect.height,
	            keepWithinBounds: params.keepWithinBounds
	        });
	        this.callPostProcessPopup(params.ePopup, params.eventSource, null, params.type, params.column, params.rowNode);
	    };
	    PopupService.prototype.callPostProcessPopup = function (ePopup, eventSource, mouseEvent, type, column, rowNode) {
	        var callback = this.gridOptionsWrapper.getPostProcessPopupFunc();
	        if (callback) {
	            var params = {
	                column: column,
	                rowNode: rowNode,
	                ePopup: ePopup,
	                type: type,
	                eventSource: eventSource,
	                mouseEvent: mouseEvent
	            };
	            callback(params);
	        }
	    };
	    PopupService.prototype.positionPopupOverComponent = function (params) {
	        var sourceRect = params.eventSource.getBoundingClientRect();
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        this.positionPopup({
	            ePopup: params.ePopup,
	            minWidth: params.minWidth,
	            nudgeX: params.nudgeX,
	            nudgeY: params.nudgeY,
	            x: sourceRect.left - parentRect.left,
	            y: sourceRect.top - parentRect.top,
	            keepWithinBounds: params.keepWithinBounds
	        });
	        this.callPostProcessPopup(params.ePopup, params.eventSource, null, params.type, params.column, params.rowNode);
	    };
	    PopupService.prototype.positionPopup = function (params) {
	        var x = params.x;
	        var y = params.y;
	        if (params.nudgeX) {
	            x += params.nudgeX;
	        }
	        if (params.nudgeY) {
	            y += params.nudgeY;
	        }
	        // if popup is overflowing to the bottom, move it up
	        if (params.keepWithinBounds) {
	            x = this.keepXWithinBounds(params, x);
	            y = this.keepYWithinBounds(params, y);
	        }
	        params.ePopup.style.left = x + "px";
	        params.ePopup.style.top = y + "px";
	    };
	    PopupService.prototype.keepYWithinBounds = function (params, y) {
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        var minHeight;
	        if (params.ePopup.clientHeight > 0) {
	            minHeight = params.ePopup.clientHeight;
	        }
	        else {
	            minHeight = 200;
	        }
	        var heightOfParent = parentRect.bottom - parentRect.top;
	        var maxY = heightOfParent - minHeight - 5;
	        if (y > maxY) {
	            return maxY;
	        }
	        else if (y < 0) {
	            return 0;
	        }
	        else {
	            return y;
	        }
	    };
	    PopupService.prototype.keepXWithinBounds = function (params, x) {
	        var parentRect = this.getPopupParent().getBoundingClientRect();
	        var minWidth;
	        if (params.minWidth > 0) {
	            minWidth = params.minWidth;
	        }
	        else if (params.ePopup.clientWidth > 0) {
	            minWidth = params.ePopup.clientWidth;
	        }
	        else {
	            minWidth = 200;
	        }
	        var widthOfParent = parentRect.right - parentRect.left;
	        var maxX = widthOfParent - minWidth - 5;
	        if (x > maxX) {
	            return maxX;
	        }
	        else if (x < 0) {
	            return 0;
	        }
	        else {
	            return x;
	        }
	    };
	    //adds an element to a div, but also listens to background checking for clicks,
	    //so that when the background is clicked, the child is removed again, giving
	    //a model look to popups.
	    PopupService.prototype.addAsModalPopup = function (eChild, closeOnEsc, closedCallback) {
	        var eBody = this.gridOptionsWrapper.getDocument();
	        if (!eBody) {
	            console.warn('ag-grid: could not find the body of the document, document.body is empty');
	            return;
	        }
	        eChild.style.top = '0px';
	        eChild.style.left = '0px';
	        var popupAlreadyShown = utils_1.Utils.isVisible(eChild);
	        if (popupAlreadyShown) {
	            return;
	        }
	        this.getPopupParent().appendChild(eChild);
	        var that = this;
	        var popupHidden = false;
	        // if we add these listeners now, then the current mouse
	        // click will be included, which we don't want
	        setTimeout(function () {
	            if (closeOnEsc) {
	                eBody.addEventListener('keydown', hidePopupOnEsc);
	            }
	            eBody.addEventListener('click', hidePopup);
	            eBody.addEventListener('touchstart', hidePopup);
	            eBody.addEventListener('contextmenu', hidePopup);
	            //eBody.addEventListener('mousedown', hidePopup);
	            eChild.addEventListener('click', consumeMouseClick);
	            eChild.addEventListener('touchstart', consumeTouchClick);
	            //eChild.addEventListener('mousedown', consumeClick);
	        }, 0);
	        // let timeOfMouseEventOnChild = new Date().getTime();
	        var childMouseClick = null;
	        var childTouch = null;
	        function hidePopupOnEsc(event) {
	            var key = event.which || event.keyCode;
	            if (key === constants_1.Constants.KEY_ESCAPE) {
	                hidePopup(null);
	            }
	        }
	        function hidePopup(event) {
	            // we don't hide popup if the event was on the child
	            if (event && event === childMouseClick) {
	                return;
	            }
	            if (event && event === childTouch) {
	                return;
	            }
	            // this method should only be called once. the client can have different
	            // paths, each one wanting to close, so this method may be called multiple
	            // times.
	            if (popupHidden) {
	                return;
	            }
	            popupHidden = true;
	            that.getPopupParent().removeChild(eChild);
	            eBody.removeEventListener('keydown', hidePopupOnEsc);
	            //eBody.removeEventListener('mousedown', hidePopupOnEsc);
	            eBody.removeEventListener('click', hidePopup);
	            eBody.removeEventListener('touchstart', hidePopup);
	            eBody.removeEventListener('contextmenu', hidePopup);
	            eChild.removeEventListener('click', consumeMouseClick);
	            eChild.removeEventListener('touchstart', consumeTouchClick);
	            //eChild.removeEventListener('mousedown', consumeClick);
	            if (closedCallback) {
	                closedCallback();
	            }
	        }
	        function consumeMouseClick(event) {
	            childMouseClick = event;
	        }
	        function consumeTouchClick(event) {
	            childTouch = event;
	        }
	        return hidePopup;
	    };
	    __decorate([
	        context_1.Autowired('gridCore'),
	        __metadata("design:type", gridCore_1.GridCore)
	    ], PopupService.prototype, "gridCore", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], PopupService.prototype, "gridOptionsWrapper", void 0);
	    PopupService = __decorate([
	        context_1.Bean('popupService')
	    ], PopupService);
	    return PopupService;
	}());
	exports.PopupService = PopupService;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var baseFilter_1 = __webpack_require__(54);
	var componentAnnotations_1 = __webpack_require__(48);
	var TextFilter = (function (_super) {
	    __extends(TextFilter, _super);
	    function TextFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    TextFilter.prototype.getDefaultType = function () {
	        return baseFilter_1.BaseFilter.CONTAINS;
	    };
	    TextFilter.prototype.customInit = function () {
	        this.comparator = this.filterParams.textCustomComparator ? this.filterParams.textCustomComparator : TextFilter.DEFAULT_COMPARATOR;
	        this.formatter =
	            this.filterParams.textFormatter ? this.filterParams.textFormatter :
	                this.filterParams.caseSensitive == true ? TextFilter.DEFAULT_FORMATTER :
	                    TextFilter.DEFAULT_LOWERCASE_FORMATTER;
	        _super.prototype.customInit.call(this);
	    };
	    TextFilter.prototype.modelFromFloatingFilter = function (from) {
	        return {
	            type: this.filter,
	            filter: from,
	            filterType: 'text'
	        };
	    };
	    TextFilter.prototype.getApplicableFilterTypes = function () {
	        return [baseFilter_1.BaseFilter.EQUALS, baseFilter_1.BaseFilter.NOT_EQUAL, baseFilter_1.BaseFilter.STARTS_WITH, baseFilter_1.BaseFilter.ENDS_WITH,
	            baseFilter_1.BaseFilter.CONTAINS, baseFilter_1.BaseFilter.NOT_CONTAINS];
	    };
	    TextFilter.prototype.bodyTemplate = function () {
	        var translate = this.translate.bind(this);
	        return "<div class=\"ag-filter-body\">\n            <input class=\"ag-filter-filter\" id=\"filterText\" type=\"text\" placeholder=\"" + translate('filterOoo', 'Filter...') + "\"/>\n        </div>";
	    };
	    TextFilter.prototype.initialiseFilterBodyUi = function () {
	        _super.prototype.initialiseFilterBodyUi.call(this);
	        var debounceMs = this.filterParams.debounceMs != null ? this.filterParams.debounceMs : 500;
	        var toDebounce = utils_1.Utils.debounce(this.onFilterTextFieldChanged.bind(this), debounceMs);
	        this.addDestroyableEventListener(this.eFilterTextField, 'input', toDebounce);
	    };
	    TextFilter.prototype.refreshFilterBodyUi = function () { };
	    TextFilter.prototype.afterGuiAttached = function () {
	        this.eFilterTextField.focus();
	    };
	    TextFilter.prototype.filterValues = function () {
	        return this.filterText;
	    };
	    TextFilter.prototype.doesFilterPass = function (params) {
	        if (!this.filterText) {
	            return true;
	        }
	        var value = this.filterParams.valueGetter(params.node);
	        if (!value) {
	            if (this.filter === baseFilter_1.BaseFilter.NOT_EQUAL || this.filter === baseFilter_1.BaseFilter.NOT_CONTAINS) {
	                // if there is no value, but the filter type was 'not equals',
	                // then it should pass, as a missing value is not equal whatever
	                // the user is filtering on
	                return true;
	            }
	            else {
	                // otherwise it's some type of comparison, to which empty value
	                // will always fail
	                return false;
	            }
	        }
	        var valueFormatted = this.formatter(value);
	        return this.comparator(this.filter, valueFormatted, this.filterText);
	    };
	    TextFilter.prototype.onFilterTextFieldChanged = function () {
	        var filterText = utils_1.Utils.makeNull(this.eFilterTextField.value);
	        if (filterText && filterText.trim() === '') {
	            filterText = null;
	        }
	        if (this.filterText !== filterText) {
	            var newLowerCase = filterText && this.filterParams.caseSensitive != true ? filterText.toLowerCase() :
	                filterText;
	            var previousLowerCase = this.filterText && this.filterParams.caseSensitive != true ? this.filterText.toLowerCase() :
	                this.filterText;
	            this.filterText = this.formatter(filterText);
	            if (previousLowerCase !== newLowerCase) {
	                this.onFilterChanged();
	            }
	        }
	    };
	    TextFilter.prototype.setFilter = function (filter) {
	        filter = utils_1.Utils.makeNull(filter);
	        if (filter) {
	            this.filterText = this.formatter(filter);
	            this.eFilterTextField.value = filter;
	        }
	        else {
	            this.filterText = null;
	            this.eFilterTextField.value = null;
	        }
	    };
	    TextFilter.prototype.getFilter = function () {
	        return this.filterText;
	    };
	    TextFilter.prototype.resetState = function () {
	        this.setFilter(null);
	        this.setFilterType(baseFilter_1.BaseFilter.CONTAINS);
	    };
	    TextFilter.prototype.serialize = function () {
	        return {
	            type: this.filter ? this.filter : this.defaultFilter,
	            filter: this.filterText,
	            filterType: 'text'
	        };
	    };
	    TextFilter.prototype.parse = function (model) {
	        this.setFilterType(model.type);
	        this.setFilter(model.filter);
	    };
	    TextFilter.prototype.setType = function (filterType) {
	        this.setFilterType(filterType);
	    };
	    TextFilter.DEFAULT_FORMATTER = function (from) {
	        return from;
	    };
	    TextFilter.DEFAULT_LOWERCASE_FORMATTER = function (from) {
	        if (from == null)
	            return null;
	        return from.toString().toLowerCase();
	    };
	    TextFilter.DEFAULT_COMPARATOR = function (filter, value, filterText) {
	        switch (filter) {
	            case TextFilter.CONTAINS:
	                return value.indexOf(filterText) >= 0;
	            case TextFilter.NOT_CONTAINS:
	                return value.indexOf(filterText) === -1;
	            case TextFilter.EQUALS:
	                return value === filterText;
	            case TextFilter.NOT_EQUAL:
	                return value != filterText;
	            case TextFilter.STARTS_WITH:
	                return value.indexOf(filterText) === 0;
	            case TextFilter.ENDS_WITH:
	                var index = value.lastIndexOf(filterText);
	                return index >= 0 && index === (value.length - filterText.length);
	            default:
	                // should never happen
	                console.warn('invalid filter type ' + filter);
	                return false;
	        }
	    };
	    __decorate([
	        componentAnnotations_1.QuerySelector('#filterText'),
	        __metadata("design:type", HTMLInputElement)
	    ], TextFilter.prototype, "eFilterTextField", void 0);
	    return TextFilter;
	}(baseFilter_1.ComparableBaseFilter));
	exports.TextFilter = TextFilter;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(35);
	var componentAnnotations_1 = __webpack_require__(48);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var utils_1 = __webpack_require__(8);
	var DEFAULT_TRANSLATIONS = {
	    equals: 'Equals',
	    notEqual: 'Not equal',
	    lessThan: 'Less than',
	    greaterThan: 'Greater than',
	    inRange: 'In range',
	    lessThanOrEqual: 'Less than or equals',
	    greaterThanOrEqual: 'Greater than or equals',
	    filterOoo: 'Filter...',
	    contains: 'Contains',
	    notContains: 'Not contains',
	    startsWith: 'Starts with',
	    endsWith: 'Ends with',
	    searchOoo: 'Search...',
	    selectAll: 'Select All',
	    applyFilter: 'Apply Filter',
	    clearFilter: 'Clear Filter'
	};
	/**
	 * T(ype) The type of this filter. ie in DateFilter T=Date
	 * P(arams) The params that this filter can take
	 * M(model getModel/setModel) The object that this filter serializes to
	 * F Floating filter params
	 *
	 * Contains common logic to ALL filters.. Translation, apply and clear button
	 * get/setModel context wiring....
	 */
	var BaseFilter = (function (_super) {
	    __extends(BaseFilter, _super);
	    function BaseFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    BaseFilter.prototype.init = function (params) {
	        this.filterParams = params;
	        this.defaultFilter = this.filterParams.defaultOption;
	        if (this.filterParams.filterOptions) {
	            if (this.filterParams.filterOptions.lastIndexOf(BaseFilter.EQUALS) < 0) {
	                this.defaultFilter = this.filterParams.filterOptions[0];
	            }
	        }
	        this.customInit();
	        this.filter = this.defaultFilter;
	        this.clearActive = params.clearButton === true;
	        //Allowing for old param property apply, even though is not advertised through the interface
	        this.applyActive = ((params.applyButton === true) || (params.apply === true));
	        this.newRowsActionKeep = params.newRowsAction === 'keep';
	        this.setTemplate(this.generateTemplate());
	        utils_1._.setVisible(this.eApplyButton, this.applyActive);
	        if (this.applyActive) {
	            this.addDestroyableEventListener(this.eApplyButton, "click", this.filterParams.filterChangedCallback);
	        }
	        utils_1._.setVisible(this.eClearButton, this.clearActive);
	        if (this.clearActive) {
	            this.addDestroyableEventListener(this.eClearButton, "click", this.onClearButton.bind(this));
	        }
	        var anyButtonVisible = this.applyActive || this.clearActive;
	        utils_1._.setVisible(this.eButtonsPanel, anyButtonVisible);
	        this.instantiate(this.context);
	        this.initialiseFilterBodyUi();
	        this.refreshFilterBodyUi();
	    };
	    BaseFilter.prototype.onClearButton = function () {
	        this.setModel(null);
	        this.onFilterChanged();
	    };
	    BaseFilter.prototype.floatingFilter = function (from) {
	        if (from !== '') {
	            var model = this.modelFromFloatingFilter(from);
	            this.setModel(model);
	        }
	        else {
	            this.resetState();
	        }
	        this.onFilterChanged();
	    };
	    BaseFilter.prototype.onNewRowsLoaded = function () {
	        if (!this.newRowsActionKeep) {
	            this.resetState();
	        }
	    };
	    BaseFilter.prototype.getModel = function () {
	        if (this.isFilterActive()) {
	            return this.serialize();
	        }
	        else {
	            return null;
	        }
	    };
	    BaseFilter.prototype.getNullableModel = function () {
	        return this.serialize();
	    };
	    BaseFilter.prototype.setModel = function (model) {
	        if (model) {
	            this.parse(model);
	        }
	        else {
	            this.resetState();
	        }
	        this.refreshFilterBodyUi();
	    };
	    BaseFilter.prototype.doOnFilterChanged = function (applyNow) {
	        if (applyNow === void 0) { applyNow = false; }
	        this.filterParams.filterModifiedCallback();
	        var requiresApplyAndIsApplying = this.applyActive && applyNow;
	        var notRequiresApply = !this.applyActive;
	        var shouldFilter = notRequiresApply || requiresApplyAndIsApplying;
	        if (shouldFilter) {
	            this.filterParams.filterChangedCallback();
	        }
	        this.refreshFilterBodyUi();
	        return shouldFilter;
	    };
	    BaseFilter.prototype.onFilterChanged = function () {
	        this.doOnFilterChanged();
	    };
	    BaseFilter.prototype.onFloatingFilterChanged = function (change) {
	        //It has to be of the type FloatingFilterWithApplyChange if it gets here
	        var casted = change;
	        this.setModel(casted ? casted.model : null);
	        return this.doOnFilterChanged(casted ? casted.apply : false);
	    };
	    BaseFilter.prototype.generateFilterHeader = function () {
	        return '';
	    };
	    BaseFilter.prototype.generateTemplate = function () {
	        var translate = this.translate.bind(this);
	        var body = this.bodyTemplate();
	        return "<div>\n                    " + this.generateFilterHeader() + "\n                    " + body + "\n                    <div class=\"ag-filter-apply-panel\" id=\"applyPanel\">\n                        <button type=\"button\" id=\"clearButton\">" + translate('clearFilter') + "</button>\n                        <button type=\"button\" id=\"applyButton\">" + translate('applyFilter') + "</button>\n                    </div>\n                </div>";
	    };
	    BaseFilter.prototype.translate = function (toTranslate) {
	        var translate = this.gridOptionsWrapper.getLocaleTextFunc();
	        return translate(toTranslate, DEFAULT_TRANSLATIONS[toTranslate]);
	    };
	    BaseFilter.EQUALS = 'equals';
	    BaseFilter.NOT_EQUAL = 'notEqual';
	    BaseFilter.LESS_THAN = 'lessThan';
	    BaseFilter.LESS_THAN_OR_EQUAL = 'lessThanOrEqual';
	    BaseFilter.GREATER_THAN = 'greaterThan';
	    BaseFilter.GREATER_THAN_OR_EQUAL = 'greaterThanOrEqual';
	    BaseFilter.IN_RANGE = 'inRange';
	    BaseFilter.CONTAINS = 'contains'; //1;
	    BaseFilter.NOT_CONTAINS = 'notContains'; //1;
	    BaseFilter.STARTS_WITH = 'startsWith'; //4;
	    BaseFilter.ENDS_WITH = 'endsWith'; //5;
	    __decorate([
	        componentAnnotations_1.QuerySelector('#applyPanel'),
	        __metadata("design:type", HTMLElement)
	    ], BaseFilter.prototype, "eButtonsPanel", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('#applyButton'),
	        __metadata("design:type", HTMLElement)
	    ], BaseFilter.prototype, "eApplyButton", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('#clearButton'),
	        __metadata("design:type", HTMLElement)
	    ], BaseFilter.prototype, "eClearButton", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], BaseFilter.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], BaseFilter.prototype, "gridOptionsWrapper", void 0);
	    return BaseFilter;
	}(component_1.Component));
	exports.BaseFilter = BaseFilter;
	/**
	 * Every filter with a dropdown where the user can specify a comparing type against the filter values
	 */
	var ComparableBaseFilter = (function (_super) {
	    __extends(ComparableBaseFilter, _super);
	    function ComparableBaseFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ComparableBaseFilter.prototype.init = function (params) {
	        _super.prototype.init.call(this, params);
	        this.addDestroyableEventListener(this.eTypeSelector, "change", this.onFilterTypeChanged.bind(this));
	    };
	    ComparableBaseFilter.prototype.customInit = function () {
	        if (!this.defaultFilter) {
	            this.defaultFilter = this.getDefaultType();
	        }
	    };
	    ComparableBaseFilter.prototype.generateFilterHeader = function () {
	        var _this = this;
	        var defaultFilterTypes = this.getApplicableFilterTypes();
	        var restrictedFilterTypes = this.filterParams.filterOptions;
	        var actualFilterTypes = restrictedFilterTypes ? restrictedFilterTypes : defaultFilterTypes;
	        var optionsHtml = actualFilterTypes.map(function (filterType) {
	            var localeFilterName = _this.translate(filterType);
	            return "<option value=\"" + filterType + "\">" + localeFilterName + "</option>";
	        });
	        var readOnly = optionsHtml.length == 1 ? 'disabled' : '';
	        return optionsHtml.length <= 0 ?
	            '' :
	            "<div>\n                <select class=\"ag-filter-select\" id=\"filterType\" " + readOnly + ">\n                    " + optionsHtml.join('') + "\n                </select>\n            </div>";
	    };
	    ComparableBaseFilter.prototype.initialiseFilterBodyUi = function () {
	        this.setFilterType(this.filter);
	    };
	    ComparableBaseFilter.prototype.onFilterTypeChanged = function () {
	        this.filter = this.eTypeSelector.value;
	        this.refreshFilterBodyUi();
	        this.onFilterChanged();
	    };
	    ComparableBaseFilter.prototype.isFilterActive = function () {
	        var rawFilterValues = this.filterValues();
	        if (this.filter === BaseFilter.IN_RANGE) {
	            var filterValueArray = rawFilterValues;
	            return filterValueArray[0] != null && filterValueArray[1] != null;
	        }
	        else {
	            return rawFilterValues != null;
	        }
	    };
	    ComparableBaseFilter.prototype.setFilterType = function (filterType) {
	        this.filter = filterType;
	        this.eTypeSelector.value = filterType;
	    };
	    __decorate([
	        componentAnnotations_1.QuerySelector('#filterType'),
	        __metadata("design:type", HTMLSelectElement)
	    ], ComparableBaseFilter.prototype, "eTypeSelector", void 0);
	    return ComparableBaseFilter;
	}(BaseFilter));
	exports.ComparableBaseFilter = ComparableBaseFilter;
	/**
	 * Comparable filter with scalar underlying values (ie numbers and dates. Strings are not scalar so have to extend
	 * ComparableBaseFilter)
	 */
	var ScalarBaseFilter = (function (_super) {
	    __extends(ScalarBaseFilter, _super);
	    function ScalarBaseFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ScalarBaseFilter.prototype.nullComparator = function (type) {
	        var _this = this;
	        return function (filterValue, gridValue) {
	            if (gridValue == null) {
	                var nullValue = _this.translateNull(type);
	                if (_this.filter === BaseFilter.EQUALS) {
	                    return nullValue ? 0 : 1;
	                }
	                if (_this.filter === BaseFilter.GREATER_THAN) {
	                    return nullValue ? 1 : -1;
	                }
	                if (_this.filter === BaseFilter.GREATER_THAN_OR_EQUAL) {
	                    return nullValue ? 1 : -1;
	                }
	                if (_this.filter === BaseFilter.LESS_THAN_OR_EQUAL) {
	                    return nullValue ? -1 : 1;
	                }
	                if (_this.filter === BaseFilter.LESS_THAN) {
	                    return nullValue ? -1 : 1;
	                }
	                if (_this.filter === BaseFilter.NOT_EQUAL) {
	                    return nullValue ? 1 : 0;
	                }
	            }
	            var actualComparator = _this.comparator();
	            return actualComparator(filterValue, gridValue);
	        };
	    };
	    ScalarBaseFilter.prototype.getDefaultType = function () {
	        return BaseFilter.EQUALS;
	    };
	    ScalarBaseFilter.prototype.translateNull = function (type) {
	        var reducedType = type.indexOf('greater') > -1 ? 'greaterThan' :
	            type.indexOf('lessThan') > -1 ? 'lessThan' :
	                'equals';
	        if (this.filterParams.nullComparator && this.filterParams.nullComparator[reducedType]) {
	            return this.filterParams.nullComparator[reducedType];
	        }
	        ;
	        return ScalarBaseFilter.DEFAULT_NULL_COMPARATOR[reducedType];
	    };
	    ScalarBaseFilter.prototype.doesFilterPass = function (params) {
	        var value = this.filterParams.valueGetter(params.node);
	        var comparator = this.nullComparator(this.filter);
	        var rawFilterValues = this.filterValues();
	        var from = Array.isArray(rawFilterValues) ? rawFilterValues[0] : rawFilterValues;
	        if (from == null)
	            return true;
	        var compareResult = comparator(from, value);
	        if (this.filter === BaseFilter.EQUALS) {
	            return compareResult === 0;
	        }
	        if (this.filter === BaseFilter.GREATER_THAN) {
	            return compareResult > 0;
	        }
	        if (this.filter === BaseFilter.GREATER_THAN_OR_EQUAL) {
	            return compareResult >= 0;
	        }
	        if (this.filter === BaseFilter.LESS_THAN_OR_EQUAL) {
	            return compareResult <= 0;
	        }
	        if (this.filter === BaseFilter.LESS_THAN) {
	            return compareResult < 0;
	        }
	        if (this.filter === BaseFilter.NOT_EQUAL) {
	            return compareResult != 0;
	        }
	        //From now on the type is a range and rawFilterValues must be an array!
	        var compareToResult = comparator(rawFilterValues[1], value);
	        if (this.filter === BaseFilter.IN_RANGE) {
	            if (!this.filterParams.inRangeInclusive) {
	                return compareResult > 0 && compareToResult < 0;
	            }
	            else {
	                return compareResult >= 0 && compareToResult <= 0;
	            }
	        }
	        throw new Error('Unexpected type of date filter!: ' + this.filter);
	    };
	    ScalarBaseFilter.DEFAULT_NULL_COMPARATOR = {
	        equals: false,
	        lessThan: false,
	        greaterThan: false
	    };
	    return ScalarBaseFilter;
	}(ComparableBaseFilter));
	exports.ScalarBaseFilter = ScalarBaseFilter;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var componentAnnotations_1 = __webpack_require__(48);
	var baseFilter_1 = __webpack_require__(54);
	var NumberFilter = (function (_super) {
	    __extends(NumberFilter, _super);
	    function NumberFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    NumberFilter.prototype.modelFromFloatingFilter = function (from) {
	        return {
	            type: this.filter,
	            filter: Number(from),
	            filterTo: this.filterNumberTo,
	            filterType: 'number'
	        };
	    };
	    NumberFilter.prototype.getApplicableFilterTypes = function () {
	        return [baseFilter_1.BaseFilter.EQUALS, baseFilter_1.BaseFilter.NOT_EQUAL, baseFilter_1.BaseFilter.LESS_THAN, baseFilter_1.BaseFilter.LESS_THAN_OR_EQUAL,
	            baseFilter_1.BaseFilter.GREATER_THAN, baseFilter_1.BaseFilter.GREATER_THAN_OR_EQUAL, baseFilter_1.BaseFilter.IN_RANGE];
	    };
	    NumberFilter.prototype.bodyTemplate = function () {
	        var translate = this.translate.bind(this);
	        return "<div class=\"ag-filter-body\">\n            <div>\n                <input class=\"ag-filter-filter\" id=\"filterText\" type=\"text\" placeholder=\"" + translate('filterOoo') + "\"/>\n            </div>\n             <div class=\"ag-filter-number-to\" id=\"filterNumberToPanel\">\n                <input class=\"ag-filter-filter\" id=\"filterToText\" type=\"text\" placeholder=\"" + translate('filterOoo') + "\"/>\n            </div>\n        </div>";
	    };
	    NumberFilter.prototype.initialiseFilterBodyUi = function () {
	        this.filterNumber = null;
	        this.eFilterTextField = this.getHtmlElement().querySelector("#filterText");
	        var debounceMs = this.filterParams.debounceMs != null ? this.filterParams.debounceMs : 500;
	        var toDebounce = utils_1.Utils.debounce(this.onTextFieldsChanged.bind(this), debounceMs);
	        this.addDestroyableEventListener(this.eFilterTextField, "input", toDebounce);
	        this.addDestroyableEventListener(this.eFilterToTextField, "input", toDebounce);
	    };
	    NumberFilter.prototype.afterGuiAttached = function () {
	        this.eFilterTextField.focus();
	    };
	    NumberFilter.prototype.comparator = function () {
	        return function (left, right) {
	            if (left === right)
	                return 0;
	            if (left < right)
	                return 1;
	            if (left > right)
	                return -1;
	        };
	    };
	    NumberFilter.prototype.onTextFieldsChanged = function () {
	        var newFilter = this.stringToFloat(this.eFilterTextField.value);
	        var newFilterTo = this.stringToFloat(this.eFilterToTextField.value);
	        if (this.filterNumber !== newFilter || this.filterNumberTo !== newFilterTo) {
	            this.filterNumber = newFilter;
	            this.filterNumberTo = newFilterTo;
	            this.onFilterChanged();
	        }
	    };
	    NumberFilter.prototype.filterValues = function () {
	        return this.filter !== baseFilter_1.BaseFilter.IN_RANGE ?
	            this.asNumber(this.filterNumber) :
	            [this.asNumber(this.filterNumber), this.asNumber(this.filterNumberTo)];
	    };
	    NumberFilter.prototype.asNumber = function (value) {
	        return utils_1.Utils.isNumeric(value) ? value : null;
	    };
	    NumberFilter.prototype.stringToFloat = function (value) {
	        var filterText = utils_1.Utils.makeNull(value);
	        if (filterText && filterText.trim() === '') {
	            filterText = null;
	        }
	        var newFilter;
	        if (filterText !== null && filterText !== undefined) {
	            newFilter = parseFloat(filterText);
	        }
	        else {
	            newFilter = null;
	        }
	        return newFilter;
	    };
	    NumberFilter.prototype.setFilter = function (filter) {
	        filter = utils_1.Utils.makeNull(filter);
	        if (filter !== null && !(typeof filter === 'number')) {
	            filter = parseFloat(filter);
	        }
	        this.filterNumber = filter;
	        this.eFilterTextField.value = filter;
	    };
	    NumberFilter.prototype.setFilterTo = function (filter) {
	        filter = utils_1.Utils.makeNull(filter);
	        if (filter !== null && !(typeof filter === 'number')) {
	            filter = parseFloat(filter);
	        }
	        this.filterNumberTo = filter;
	        this.eFilterToTextField.value = filter;
	    };
	    NumberFilter.prototype.getFilter = function () {
	        return this.filterNumber;
	    };
	    NumberFilter.prototype.serialize = function () {
	        return {
	            type: this.filter ? this.filter : this.defaultFilter,
	            filter: this.filterNumber,
	            filterTo: this.filterNumberTo,
	            filterType: 'number'
	        };
	    };
	    NumberFilter.prototype.parse = function (model) {
	        this.setFilterType(model.type);
	        this.setFilter(model.filter);
	        this.setFilterTo(model.filterTo);
	    };
	    NumberFilter.prototype.refreshFilterBodyUi = function () {
	        var visible = this.filter === NumberFilter.IN_RANGE;
	        utils_1.Utils.setVisible(this.eNumberToPanel, visible);
	    };
	    NumberFilter.prototype.resetState = function () {
	        this.setFilterType(baseFilter_1.BaseFilter.EQUALS);
	        this.setFilter(null);
	        this.setFilterTo(null);
	    };
	    NumberFilter.prototype.setType = function (filterType) {
	        this.setFilterType(filterType);
	    };
	    NumberFilter.LESS_THAN = 'lessThan'; //3;
	    __decorate([
	        componentAnnotations_1.QuerySelector('#filterNumberToPanel'),
	        __metadata("design:type", HTMLElement)
	    ], NumberFilter.prototype, "eNumberToPanel", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('#filterToText'),
	        __metadata("design:type", HTMLInputElement)
	    ], NumberFilter.prototype, "eFilterToTextField", void 0);
	    return NumberFilter;
	}(baseFilter_1.ScalarBaseFilter));
	exports.NumberFilter = NumberFilter;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(35);
	var componentAnnotations_1 = __webpack_require__(48);
	var utils_1 = __webpack_require__(8);
	var baseFilter_1 = __webpack_require__(54);
	var context_1 = __webpack_require__(7);
	var componentRecipes_1 = __webpack_require__(57);
	var DateFilter = (function (_super) {
	    __extends(DateFilter, _super);
	    function DateFilter() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    DateFilter.prototype.modelFromFloatingFilter = function (from) {
	        return {
	            dateFrom: from,
	            dateTo: this.getDateTo(),
	            type: this.filter,
	            filterType: 'date'
	        };
	    };
	    DateFilter.prototype.getApplicableFilterTypes = function () {
	        return [baseFilter_1.BaseFilter.EQUALS, baseFilter_1.BaseFilter.GREATER_THAN, baseFilter_1.BaseFilter.LESS_THAN, baseFilter_1.BaseFilter.NOT_EQUAL, baseFilter_1.BaseFilter.IN_RANGE];
	    };
	    DateFilter.prototype.bodyTemplate = function () {
	        return "<div class=\"ag-filter-body\">\n                    <div class=\"ag-filter-date-from\" id=\"filterDateFromPanel\">\n                    </div>\n                    <div class=\"ag-filter-date-to\" id=\"filterDateToPanel\">\n                    </div>\n                </div>";
	    };
	    DateFilter.prototype.initialiseFilterBodyUi = function () {
	        var dateComponentParams = {
	            onDateChanged: this.onDateChanged.bind(this)
	        };
	        this.dateToComponent = this.componentRecipes.newDateComponent(dateComponentParams);
	        this.dateFromComponent = this.componentRecipes.newDateComponent(dateComponentParams);
	        var dateFromElement = utils_1._.ensureElement(this.dateFromComponent.getGui());
	        this.eDateFromPanel.appendChild(dateFromElement);
	        var dateToElement = utils_1._.ensureElement(this.dateToComponent.getGui());
	        this.eDateToPanel.appendChild(dateToElement);
	        if (this.dateFromComponent.afterGuiAttached) {
	            this.dateFromComponent.afterGuiAttached({
	                eComponent: dateFromElement
	            });
	        }
	        if (this.dateToComponent.afterGuiAttached) {
	            this.dateToComponent.afterGuiAttached({
	                eComponent: dateToElement
	            });
	        }
	    };
	    DateFilter.prototype.onDateChanged = function () {
	        this.dateFrom = DateFilter.removeTimezone(this.dateFromComponent.getDate());
	        this.dateTo = DateFilter.removeTimezone(this.dateToComponent.getDate());
	        this.onFilterChanged();
	    };
	    DateFilter.prototype.refreshFilterBodyUi = function () {
	        var visible = this.filter === baseFilter_1.BaseFilter.IN_RANGE;
	        utils_1.Utils.setVisible(this.eDateToPanel, visible);
	    };
	    DateFilter.prototype.comparator = function () {
	        return this.filterParams.comparator ? this.filterParams.comparator : this.defaultComparator.bind(this);
	    };
	    DateFilter.prototype.defaultComparator = function (filterDate, cellValue) {
	        //The default comparator assumes that the cellValue is a date
	        var cellAsDate = cellValue;
	        if (cellAsDate < filterDate) {
	            return -1;
	        }
	        if (cellAsDate > filterDate) {
	            return 1;
	        }
	        return cellValue != null ? 0 : -1;
	    };
	    DateFilter.prototype.serialize = function () {
	        return {
	            dateTo: utils_1.Utils.serializeDateToYyyyMmDd(this.dateToComponent.getDate(), "-"),
	            dateFrom: utils_1.Utils.serializeDateToYyyyMmDd(this.dateFromComponent.getDate(), "-"),
	            type: this.filter ? this.filter : this.defaultFilter,
	            filterType: 'date'
	        };
	    };
	    DateFilter.prototype.filterValues = function () {
	        return this.filter !== baseFilter_1.BaseFilter.IN_RANGE ?
	            this.dateFromComponent.getDate() :
	            [this.dateFromComponent.getDate(), this.dateToComponent.getDate()];
	    };
	    // not used by ag-Grid, but exposed as part of the filter API for the client if they want it
	    DateFilter.prototype.getDateFrom = function () {
	        return utils_1.Utils.serializeDateToYyyyMmDd(this.dateFromComponent.getDate(), "-");
	    };
	    // not used by ag-Grid, but exposed as part of the filter API for the client if they want it
	    DateFilter.prototype.getDateTo = function () {
	        return utils_1.Utils.serializeDateToYyyyMmDd(this.dateToComponent.getDate(), "-");
	    };
	    // not used by ag-Grid, but exposed as part of the filter API for the client if they want it
	    DateFilter.prototype.getFilterType = function () {
	        return this.filter;
	    };
	    DateFilter.prototype.setDateFrom = function (date) {
	        this.dateFrom = utils_1.Utils.parseYyyyMmDdToDate(date, "-");
	        this.dateFromComponent.setDate(this.dateFrom);
	    };
	    DateFilter.prototype.setDateTo = function (date) {
	        this.dateTo = utils_1.Utils.parseYyyyMmDdToDate(date, "-");
	        this.dateToComponent.setDate(this.dateTo);
	    };
	    DateFilter.prototype.resetState = function () {
	        this.setDateFrom(null);
	        this.setDateTo(null);
	        this.setFilterType("equals");
	    };
	    DateFilter.prototype.parse = function (model) {
	        this.setDateFrom(model.dateFrom);
	        this.setDateTo(model.dateTo);
	        this.setFilterType(model.type);
	    };
	    DateFilter.prototype.setType = function (filterType) {
	        this.setFilterType(filterType);
	    };
	    DateFilter.removeTimezone = function (from) {
	        if (!from)
	            return null;
	        return new Date(from.getFullYear(), from.getMonth(), from.getDate());
	    };
	    __decorate([
	        context_1.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes_1.ComponentRecipes)
	    ], DateFilter.prototype, "componentRecipes", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('#filterDateFromPanel'),
	        __metadata("design:type", HTMLElement)
	    ], DateFilter.prototype, "eDateFromPanel", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('#filterDateToPanel'),
	        __metadata("design:type", HTMLElement)
	    ], DateFilter.prototype, "eDateToPanel", void 0);
	    return DateFilter;
	}(baseFilter_1.ScalarBaseFilter));
	exports.DateFilter = DateFilter;
	var DefaultDateComponent = (function (_super) {
	    __extends(DefaultDateComponent, _super);
	    function DefaultDateComponent() {
	        return _super.call(this, "<input class=\"ag-filter-filter\" type=\"text\" placeholder=\"yyyy-mm-dd\">") || this;
	    }
	    DefaultDateComponent.prototype.init = function (params) {
	        this.eDateInput = this.getGui();
	        if (utils_1.Utils.isBrowserChrome()) {
	            this.eDateInput.type = 'date';
	        }
	        this.listener = params.onDateChanged;
	        this.addGuiEventListener('input', this.listener);
	    };
	    DefaultDateComponent.prototype.getDate = function () {
	        return utils_1.Utils.parseYyyyMmDdToDate(this.eDateInput.value, "-");
	    };
	    DefaultDateComponent.prototype.setDate = function (date) {
	        this.eDateInput.value = utils_1.Utils.serializeDateToYyyyMmDd(date, "-");
	    };
	    return DefaultDateComponent;
	}(component_1.Component));
	exports.DefaultDateComponent = DefaultDateComponent;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var filterManager_1 = __webpack_require__(51);
	var componentResolver_1 = __webpack_require__(58);
	var ComponentType;
	(function (ComponentType) {
	    ComponentType[ComponentType["AG_GRID"] = 0] = "AG_GRID";
	    ComponentType[ComponentType["FRAMEWORK"] = 1] = "FRAMEWORK";
	})(ComponentType || (ComponentType = {}));
	var ComponentRecipes = (function () {
	    function ComponentRecipes() {
	    }
	    ComponentRecipes.prototype.newDateComponent = function (params) {
	        return this.componentResolver.createAgGridComponent(this.gridOptions, params, "dateComponent");
	    };
	    ComponentRecipes.prototype.newHeaderComponent = function (params) {
	        return this.componentResolver.createAgGridComponent(params.column.getColDef(), params, "headerComponent");
	    };
	    ComponentRecipes.prototype.newHeaderGroupComponent = function (params) {
	        return this.componentResolver.createAgGridComponent(params.columnGroup.getColGroupDef(), params, "headerGroupComponent");
	    };
	    ComponentRecipes.prototype.newFloatingFilterComponent = function (type, colDef, params) {
	        //type if populated must be one of ['set','number','text','date']
	        var floatingFilterName = type + "FloatingFilterComponent";
	        return this.componentResolver.createAgGridComponent(colDef, params, "floatingFilterComponent", floatingFilterName, false);
	    };
	    ComponentRecipes.prototype.newFloatingFilterWrapperComponent = function (column, params) {
	        var _this = this;
	        var colDef = column.getColDef();
	        if (colDef.suppressFilter) {
	            return this.newEmptyFloatingFilterWrapperComponent(column);
	        }
	        var floatingFilterType;
	        if (typeof colDef.filter === 'string') {
	            floatingFilterType = colDef.filter;
	        }
	        else if (!colDef.filter) {
	            floatingFilterType = this.gridOptionsWrapper.isEnterprise() ? 'set' : 'text';
	        }
	        else {
	            floatingFilterType = 'custom';
	        }
	        var floatingFilter = this.newFloatingFilterComponent(floatingFilterType, colDef, params);
	        var floatingFilterWrapperComponentParams = {
	            column: column,
	            floatingFilterComp: floatingFilter,
	            suppressFilterButton: this.componentResolver.mergeParams(colDef, 'floatingFilterComponent', params).suppressFilterButton
	        };
	        if (!floatingFilter) {
	            var filterComponent = this.getFilterComponentPrototype(colDef);
	            if (filterComponent && !filterComponent.component.prototype.getModelAsString) {
	                return this.newEmptyFloatingFilterWrapperComponent(column);
	            }
	            var rawModelFn_1 = params.currentParentModel;
	            params.currentParentModel = function () {
	                var parent = _this.filterManager.getFilterComponent(column);
	                return parent.getModelAsString(rawModelFn_1());
	            };
	            floatingFilterWrapperComponentParams.floatingFilterComp = this.newFloatingFilterComponent('readModelAsString', colDef, params);
	        }
	        return this.componentResolver.createAgGridComponent(colDef, floatingFilterWrapperComponentParams, "floatingFilterWrapperComponent");
	    };
	    ComponentRecipes.prototype.newFullWidthGroupRowInnerCellRenderer = function (params) {
	        return this.componentResolver.createAgGridComponent(this.gridOptions, params, "groupRowInnerRenderer", "groupRowInnerRenderer", false);
	    };
	    ComponentRecipes.prototype.newCellRenderer = function (target, params) {
	        return this.componentResolver.createAgGridComponent(target, params, "cellRenderer", "cellRenderer", false);
	    };
	    ComponentRecipes.prototype.newInnerCellRenderer = function (target, params) {
	        return this.componentResolver.createAgGridComponent(target, params, "innerRenderer");
	    };
	    ComponentRecipes.prototype.newFullRowGroupRenderer = function (params) {
	        return this.componentResolver.createAgGridComponent(this.gridOptionsWrapper, params, "fullWidthCellRenderer");
	    };
	    ComponentRecipes.prototype.getFilterComponentPrototype = function (colDef) {
	        return this.componentResolver.getComponentToUse(colDef, "filterComponent");
	    };
	    ComponentRecipes.prototype.newEmptyFloatingFilterWrapperComponent = function (column) {
	        var floatingFilterWrapperComponentParams = {
	            column: column,
	            floatingFilterComp: null
	        };
	        return this.componentResolver.createAgGridComponent(column.getColDef(), floatingFilterWrapperComponentParams, "floatingFilterWrapperComponent", "emptyFloatingFilterWrapperComponent");
	    };
	    __decorate([
	        context_1.Autowired("componentResolver"),
	        __metadata("design:type", componentResolver_1.ComponentResolver)
	    ], ComponentRecipes.prototype, "componentResolver", void 0);
	    __decorate([
	        context_1.Autowired("gridOptions"),
	        __metadata("design:type", Object)
	    ], ComponentRecipes.prototype, "gridOptions", void 0);
	    __decorate([
	        context_1.Autowired("gridOptionsWrapper"),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ComponentRecipes.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], ComponentRecipes.prototype, "filterManager", void 0);
	    ComponentRecipes = __decorate([
	        context_1.Bean('componentRecipes')
	    ], ComponentRecipes);
	    return ComponentRecipes;
	}());
	exports.ComponentRecipes = ComponentRecipes;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var utils_1 = __webpack_require__(8);
	var namedComponentResolver_1 = __webpack_require__(59);
	var agComponentUtils_1 = __webpack_require__(84);
	var componentMetadataProvider_1 = __webpack_require__(85);
	var ComponentType;
	(function (ComponentType) {
	    ComponentType[ComponentType["AG_GRID"] = 0] = "AG_GRID";
	    ComponentType[ComponentType["FRAMEWORK"] = 1] = "FRAMEWORK";
	})(ComponentType = exports.ComponentType || (exports.ComponentType = {}));
	var ComponentSource;
	(function (ComponentSource) {
	    ComponentSource[ComponentSource["DEFAULT"] = 0] = "DEFAULT";
	    ComponentSource[ComponentSource["REGISTERED_BY_NAME"] = 1] = "REGISTERED_BY_NAME";
	    ComponentSource[ComponentSource["HARDCODED"] = 2] = "HARDCODED";
	})(ComponentSource = exports.ComponentSource || (exports.ComponentSource = {}));
	var ComponentResolver = (function () {
	    function ComponentResolver() {
	    }
	    /**
	     * This method returns the underlying representation of the component to be created. ie for Javascript the
	     * underlying function where we should be calling new into. In case of the frameworks, the framework class
	     * object that represents the component to be created.
	     *
	     * This method is handy for different reasons, for example if you want to check if a component has a particular
	     * method implemented without having to create the component, just by inspecting the source component
	     *
	     * It takes
	     *  @param holder: This is the context for which this component needs to be created, it can be gridOptions
	     *      (global) or columnDef mostly.
	     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
	     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
	     *  @param componentNameOpt: The actual name of the component to instantiate, this is usually the same as propertyName, but in
	     *      some cases is not, like floatingFilter, if it is the same is not necessary to specify
	     *  @param mandatory: Handy method to tell if this should return a component ALWAYS. if that is the case, but there is no
	     *      component found, it throws an error, by default all components are MANDATORY
	     */
	    ComponentResolver.prototype.getComponentToUse = function (holder, propertyName, componentNameOpt) {
	        var componentName = componentNameOpt == null ? propertyName : componentNameOpt;
	        /**
	         * There are five things that can happen when resolving a component.
	         *  a) HardcodedFwComponent: That holder[propertyName]Framework has associated a Framework native component
	         *  b) HardcodedJsComponent: That holder[propertyName] has associate a JS component
	         *  c) hardcodedJsFunction: That holder[propertyName] has associate a JS function
	         *  d) hardcodedNameComponent: That holder[propertyName] has associate a string that represents a component to load
	         *  e) That none of the three previous are specified, then we need to use the DefaultRegisteredComponent
	         */
	        var hardcodedNameComponent = null;
	        var HardcodedJsComponent = null;
	        var hardcodedJsFunction = null;
	        var HardcodedFwComponent = null;
	        if (holder != null) {
	            var componentPropertyValue = holder[propertyName];
	            if (componentPropertyValue != null) {
	                if (typeof componentPropertyValue === 'string') {
	                    hardcodedNameComponent = componentPropertyValue;
	                }
	                else if (this.agComponentUtils.doesImplementIComponent(componentPropertyValue)) {
	                    HardcodedJsComponent = componentPropertyValue;
	                }
	                else {
	                    hardcodedJsFunction = componentPropertyValue;
	                }
	            }
	            HardcodedFwComponent = holder[propertyName + "Framework"];
	        }
	        /**
	         * Since we allow many types of flavors for specifying the components, let's make sure this is not an illegal
	         * combination
	         */
	        if ((HardcodedJsComponent && HardcodedFwComponent) ||
	            (hardcodedNameComponent && HardcodedFwComponent) ||
	            (hardcodedJsFunction && HardcodedFwComponent)) {
	            throw Error("You are trying to specify: " + propertyName + " twice as a component.");
	        }
	        if (HardcodedFwComponent && !this.frameworkComponentWrapper) {
	            throw Error("You are specifying a framework component but you are not using a framework version of ag-grid for : " + propertyName);
	        }
	        /**
	         * At this stage we are guaranteed to either have,
	         * DEPRECATED
	         * - A unique HardcodedFwComponent
	         * - A unique HardcodedJsComponent
	         * - A unique hardcodedJsFunction
	         * BY NAME- FAVOURED APPROACH
	         * - A unique hardcodedNameComponent
	         * - None of the previous, hence we revert to: RegisteredComponent
	         */
	        if (HardcodedFwComponent) {
	            // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);
	            // console.warn(`${HardcodedFwComponent}`);
	            return {
	                type: ComponentType.FRAMEWORK,
	                component: HardcodedFwComponent,
	                source: ComponentSource.HARDCODED
	            };
	        }
	        if (HardcodedJsComponent) {
	            // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);
	            // console.warn(`${HardcodedJsComponent}`);
	            return {
	                type: ComponentType.AG_GRID,
	                component: HardcodedJsComponent,
	                source: ComponentSource.HARDCODED
	            };
	        }
	        if (hardcodedJsFunction) {
	            // console.warn(`ag-grid: Since version 12.1.0 specifying a function directly is deprecated, you should register the component by name`);
	            // console.warn(`${hardcodedJsFunction}`);
	            return this.agComponentUtils.adaptFunction(propertyName, hardcodedJsFunction, ComponentType.AG_GRID, ComponentSource.HARDCODED);
	        }
	        //^^^^^ABOVE DEPRECATED
	        var componentNameToUse;
	        if (hardcodedNameComponent) {
	            componentNameToUse = hardcodedNameComponent;
	        }
	        else {
	            componentNameToUse = componentName;
	        }
	        return this.namedComponentResolver.resolve(propertyName, componentNameToUse);
	    };
	    /**
	     * Useful to check what would be the resultant params for a given object
	     *  @param holder: This is the context for which this component needs to be created, it can be gridOptions
	     *      (global) or columnDef mostly.
	     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
	     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
	     *  @param agGridParams: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
	     *      specified by the user in the configuration
	     * @returns {any} It merges the user agGridParams with the actual params specified by the user.
	     */
	    ComponentResolver.prototype.mergeParams = function (holder, propertyName, agGridParams) {
	        var customParams = holder ? holder[propertyName + "Params"] : null;
	        var finalParams = {};
	        utils_1._.mergeDeep(finalParams, agGridParams);
	        utils_1._.mergeDeep(finalParams, customParams);
	        if (!finalParams.api) {
	            finalParams.api = this.gridOptions.api;
	        }
	        return finalParams;
	    };
	    /**
	     * This method creates a component given everything needed to guess what sort of component needs to be instantiated
	     * It takes
	     *  @param holder: This is the context for which this component needs to be created, it can be gridOptions
	     *      (global) or columnDef mostly.
	     *  @param agGridParams: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
	     *      specified by the user in the configuration
	     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
	     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
	     *  @param componentNameOpt: The actual name of the component to instantiate, this is usually the same as propertyName, but in
	     *      some cases is not, like floatingFilter, if it is the same is not necessary to specify
	     *  @param mandatory: Handy method to tell if this should return a component ALWAYS. if that is the case, but there is no
	     *      component found, it throws an error, by default all components are MANDATORY
	     */
	    ComponentResolver.prototype.createAgGridComponent = function (holderOpt, agGridParams, propertyName, componentNameOpt, mandatory) {
	        if (mandatory === void 0) { mandatory = true; }
	        var holder = holderOpt == null ? this.gridOptions : holderOpt;
	        var componentName = componentNameOpt == null ? propertyName : componentNameOpt;
	        //Create the component instance
	        var component = this.newAgGridComponent(holder, propertyName, componentName, mandatory);
	        if (!component)
	            return null;
	        //Wire the component and call the init mehtod with the correct params
	        var finalParams = this.mergeParams(holder, propertyName, agGridParams);
	        this.context.wireBean(component);
	        component.init(finalParams);
	        return component;
	    };
	    ComponentResolver.prototype.newAgGridComponent = function (holder, propertyName, componentName, mandatory) {
	        if (mandatory === void 0) { mandatory = true; }
	        var componentToUse = this.getComponentToUse(holder, propertyName, componentName);
	        if (!componentToUse || !componentToUse.component) {
	            if (mandatory) {
	                console.error("Error creating component " + propertyName + "=>" + componentName);
	            }
	            return null;
	        }
	        if (componentToUse.type === ComponentType.AG_GRID) {
	            return new componentToUse.component();
	        }
	        //Using framework component
	        var FrameworkComponentRaw = componentToUse.component;
	        var thisComponentConfig = this.componentMetadataProvider.retrieve(propertyName);
	        return this.frameworkComponentWrapper.wrap(FrameworkComponentRaw, thisComponentConfig.mandatoryMethodList, thisComponentConfig.optionalMethodList);
	    };
	    __decorate([
	        context_1.Autowired("gridOptions"),
	        __metadata("design:type", Object)
	    ], ComponentResolver.prototype, "gridOptions", void 0);
	    __decorate([
	        context_1.Autowired("gridOptionsWrapper"),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ComponentResolver.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired("context"),
	        __metadata("design:type", context_1.Context)
	    ], ComponentResolver.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired("namedComponentResolver"),
	        __metadata("design:type", namedComponentResolver_1.NamedComponentResolver)
	    ], ComponentResolver.prototype, "namedComponentResolver", void 0);
	    __decorate([
	        context_1.Autowired("agComponentUtils"),
	        __metadata("design:type", agComponentUtils_1.AgComponentUtils)
	    ], ComponentResolver.prototype, "agComponentUtils", void 0);
	    __decorate([
	        context_1.Autowired("componentMetadataProvider"),
	        __metadata("design:type", componentMetadataProvider_1.ComponentMetadataProvider)
	    ], ComponentResolver.prototype, "componentMetadataProvider", void 0);
	    __decorate([
	        context_1.Optional("frameworkComponentWrapper"),
	        __metadata("design:type", Object)
	    ], ComponentResolver.prototype, "frameworkComponentWrapper", void 0);
	    ComponentResolver = __decorate([
	        context_1.Bean('componentResolver')
	    ], ComponentResolver);
	    return ComponentResolver;
	}());
	exports.ComponentResolver = ComponentResolver;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var componentResolver_1 = __webpack_require__(58);
	var context_1 = __webpack_require__(7);
	var componentProvider_1 = __webpack_require__(60);
	var agComponentUtils_1 = __webpack_require__(84);
	var NamedComponentResolver = (function () {
	    function NamedComponentResolver() {
	    }
	    NamedComponentResolver.prototype.resolve = function (propertyName, componentNameOpt) {
	        var componentName = componentNameOpt != null ? componentNameOpt : propertyName;
	        var registeredComponent = this.componentProvider.retrieve(componentName);
	        if (registeredComponent == null)
	            return null;
	        //If it is a FW it has to be registered as a component
	        if (registeredComponent.type == componentResolver_1.ComponentType.FRAMEWORK) {
	            return {
	                component: registeredComponent.component,
	                type: componentResolver_1.ComponentType.FRAMEWORK,
	                source: componentResolver_1.ComponentSource.REGISTERED_BY_NAME
	            };
	        }
	        //If it is JS it may be a function or a component
	        if (this.agComponentUtils.doesImplementIComponent(registeredComponent.component)) {
	            return {
	                component: registeredComponent.component,
	                type: componentResolver_1.ComponentType.AG_GRID,
	                source: (registeredComponent.source == componentProvider_1.RegisteredComponentSource.REGISTERED) ? componentResolver_1.ComponentSource.REGISTERED_BY_NAME : componentResolver_1.ComponentSource.DEFAULT
	            };
	        }
	        // This is a function
	        return this.agComponentUtils.adaptFunction(propertyName, registeredComponent.component, registeredComponent.type, (registeredComponent.source == componentProvider_1.RegisteredComponentSource.REGISTERED) ? componentResolver_1.ComponentSource.REGISTERED_BY_NAME : componentResolver_1.ComponentSource.DEFAULT);
	    };
	    __decorate([
	        context_1.Autowired("componentProvider"),
	        __metadata("design:type", componentProvider_1.ComponentProvider)
	    ], NamedComponentResolver.prototype, "componentProvider", void 0);
	    __decorate([
	        context_1.Autowired("agComponentUtils"),
	        __metadata("design:type", agComponentUtils_1.AgComponentUtils)
	    ], NamedComponentResolver.prototype, "agComponentUtils", void 0);
	    NamedComponentResolver = __decorate([
	        context_1.Bean("namedComponentResolver")
	    ], NamedComponentResolver);
	    return NamedComponentResolver;
	}());
	exports.NamedComponentResolver = NamedComponentResolver;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var dateFilter_1 = __webpack_require__(56);
	var headerComp_1 = __webpack_require__(61);
	var headerGroupComp_1 = __webpack_require__(64);
	var floatingFilter_1 = __webpack_require__(65);
	var floatingFilterWrapper_1 = __webpack_require__(66);
	var componentResolver_1 = __webpack_require__(58);
	var groupCellRenderer_1 = __webpack_require__(80);
	var animateShowChangeCellRenderer_1 = __webpack_require__(79);
	var animateSlideCellRenderer_1 = __webpack_require__(78);
	var rowComp_1 = __webpack_require__(47);
	var RegisteredComponentSource;
	(function (RegisteredComponentSource) {
	    RegisteredComponentSource[RegisteredComponentSource["DEFAULT"] = 0] = "DEFAULT";
	    RegisteredComponentSource[RegisteredComponentSource["REGISTERED"] = 1] = "REGISTERED";
	})(RegisteredComponentSource = exports.RegisteredComponentSource || (exports.RegisteredComponentSource = {}));
	var ComponentProvider = (function () {
	    function ComponentProvider() {
	        this.jsComponents = {};
	        this.frameworkComponents = {};
	    }
	    ComponentProvider.prototype.postConstruct = function () {
	        this.agGridDefaults = {
	            //THE FOLLOWING COMPONENTS HAVE NO DEFAULTS, THEY NEED TO BE SPECIFIED AS AN SPECIFIC FLAVOUR
	            //THERE ARE NO DEFAULTS THAT FIT ALL PURPOSES
	            //THEY ARE ADDED HERE TO AVOID THE NOT FOUND WARNING.
	            filterComponent: null,
	            customFloatingFilterComponent: null,
	            //date
	            dateComponent: dateFilter_1.DefaultDateComponent,
	            //header
	            headerComponent: headerComp_1.HeaderComp,
	            headerGroupComponent: headerGroupComp_1.HeaderGroupComp,
	            //floating filters
	            setFloatingFilterComponent: floatingFilter_1.SetFloatingFilterComp,
	            textFloatingFilterComponent: floatingFilter_1.TextFloatingFilterComp,
	            numberFloatingFilterComponent: floatingFilter_1.NumberFloatingFilterComp,
	            dateFloatingFilterComponent: floatingFilter_1.DateFloatingFilterComp,
	            readModelAsStringFloatingFilterComponent: floatingFilter_1.ReadModelAsStringFloatingFilterComp,
	            floatingFilterWrapperComponent: floatingFilterWrapper_1.FloatingFilterWrapperComp,
	            emptyFloatingFilterWrapperComponent: floatingFilterWrapper_1.EmptyFloatingFilterWrapperComp,
	            //renderers
	            cellRenderer: null,
	            fullWidthCellRenderer: null,
	            innerRenderer: null,
	            groupRowInnerRenderer: null,
	            animateShowChange: animateShowChangeCellRenderer_1.AnimateShowChangeCellRenderer,
	            animateSlide: animateSlideCellRenderer_1.AnimateSlideCellRenderer,
	            group: groupCellRenderer_1.GroupCellRenderer,
	            groupRowRenderer: groupCellRenderer_1.GroupCellRenderer,
	            loadingCellRenderer: rowComp_1.LoadingCellRenderer,
	            pinnedRowCellRenderer: null
	        };
	    };
	    ComponentProvider.prototype.registerComponent = function (name, component) {
	        console.warn("ag-grid: registering components is a lab feature, is not intended to be used or supported yet.");
	        if (this.frameworkComponents[name]) {
	            console.error("Trying to register a component that you have already registered for frameworks: " + name);
	            return;
	        }
	        this.jsComponents[name] = component;
	    };
	    /**
	     * B the business interface (ie IHeader)
	     * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
	     */
	    ComponentProvider.prototype.registerFwComponent = function (name, component) {
	        console.warn("ag-grid: registering components is a lab feature, is not intended to be used or supported yet.");
	        if (this.jsComponents[name]) {
	            console.error("Trying to register a component that you have already registered for plain javascript: " + name);
	            return;
	        }
	        this.frameworkComponents[name] = component;
	    };
	    /**
	     * B the business interface (ie IHeader)
	     * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
	     */
	    ComponentProvider.prototype.retrieve = function (name) {
	        if (this.frameworkComponents[name]) {
	            return {
	                type: componentResolver_1.ComponentType.FRAMEWORK,
	                component: this.frameworkComponents[name],
	                source: RegisteredComponentSource.REGISTERED
	            };
	        }
	        if (this.jsComponents[name]) {
	            return {
	                type: componentResolver_1.ComponentType.AG_GRID,
	                component: this.jsComponents[name],
	                source: RegisteredComponentSource.REGISTERED
	            };
	        }
	        if (this.agGridDefaults[name]) {
	            return {
	                type: componentResolver_1.ComponentType.AG_GRID,
	                component: this.agGridDefaults[name],
	                source: RegisteredComponentSource.DEFAULT
	            };
	        }
	        if (Object.keys(this.agGridDefaults).indexOf(name) < 0) {
	            console.warn("ag-grid: Looking for component [" + name + "] but it wasn't found.");
	        }
	        return null;
	    };
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ComponentProvider.prototype, "postConstruct", null);
	    ComponentProvider = __decorate([
	        context_1.Bean('componentProvider')
	    ], ComponentProvider);
	    return ComponentProvider;
	}());
	exports.ComponentProvider = ComponentProvider;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(35);
	var column_1 = __webpack_require__(17);
	var utils_1 = __webpack_require__(8);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var sortController_1 = __webpack_require__(62);
	var touchListener_1 = __webpack_require__(63);
	var eventService_1 = __webpack_require__(5);
	var componentAnnotations_1 = __webpack_require__(48);
	var events_1 = __webpack_require__(11);
	var HeaderComp = (function (_super) {
	    __extends(HeaderComp, _super);
	    function HeaderComp() {
	        return _super.call(this, HeaderComp.TEMPLATE) || this;
	    }
	    HeaderComp.prototype.init = function (params) {
	        this.params = params;
	        this.setupTap();
	        this.setupIcons(params.column);
	        this.setupMenu();
	        this.setupSort();
	        this.setupFilterIcon();
	        this.setupText(params.displayName);
	    };
	    HeaderComp.prototype.setupText = function (displayName) {
	        this.eText.innerHTML = displayName;
	    };
	    HeaderComp.prototype.setupIcons = function (column) {
	        this.addInIcon('sortAscending', this.eSortAsc, column);
	        this.addInIcon('sortDescending', this.eSortDesc, column);
	        this.addInIcon('sortUnSort', this.eSortNone, column);
	        this.addInIcon('menu', this.eMenu, column);
	        this.addInIcon('filter', this.eFilter, column);
	    };
	    HeaderComp.prototype.addInIcon = function (iconName, eParent, column) {
	        var eIcon = utils_1.Utils.createIconNoSpan(iconName, this.gridOptionsWrapper, column);
	        eParent.appendChild(eIcon);
	    };
	    HeaderComp.prototype.setupTap = function () {
	        var _this = this;
	        if (this.gridOptionsWrapper.isSuppressTouch()) {
	            return;
	        }
	        var touchListener = new touchListener_1.TouchListener(this.getHtmlElement());
	        if (this.params.enableMenu) {
	            var longTapListener = function (event) {
	                _this.gridOptionsWrapper.getApi().showColumnMenuAfterMouseClick(_this.params.column, event.touchStart);
	            };
	            this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_LONG_TAP, longTapListener);
	        }
	        if (this.params.enableSorting) {
	            var tapListener = function () {
	                _this.sortController.progressSort(_this.params.column, false);
	            };
	            this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_TAP, tapListener);
	        }
	        this.addDestroyFunc(function () { return touchListener.destroy(); });
	    };
	    HeaderComp.prototype.setupMenu = function () {
	        var _this = this;
	        // if no menu provided in template, do nothing
	        if (!this.eMenu) {
	            return;
	        }
	        if (!this.params.enableMenu) {
	            utils_1.Utils.removeFromParent(this.eMenu);
	            return;
	        }
	        this.eMenu.addEventListener('click', function () { return _this.showMenu(_this.eMenu); });
	        if (!this.gridOptionsWrapper.isSuppressMenuHide()) {
	            this.eMenu.style.opacity = '0';
	            this.addGuiEventListener('mouseover', function () {
	                _this.eMenu.style.opacity = '1';
	            });
	            this.addGuiEventListener('mouseout', function () {
	                _this.eMenu.style.opacity = '0';
	            });
	        }
	        var style = this.eMenu.style;
	        style['transition'] = 'opacity 0.2s, border 0.2s';
	        style['-webkit-transition'] = 'opacity 0.2s, border 0.2s';
	    };
	    HeaderComp.prototype.showMenu = function (eventSource) {
	        this.menuFactory.showMenuAfterButtonClick(this.params.column, eventSource);
	    };
	    HeaderComp.prototype.removeSortIcons = function () {
	        utils_1.Utils.removeFromParent(this.eSortAsc);
	        utils_1.Utils.removeFromParent(this.eSortDesc);
	        utils_1.Utils.removeFromParent(this.eSortNone);
	        utils_1.Utils.removeFromParent(this.eSortOrder);
	    };
	    HeaderComp.prototype.setupSort = function () {
	        var _this = this;
	        var enableSorting = this.params.enableSorting;
	        if (!enableSorting) {
	            this.removeSortIcons();
	            return;
	        }
	        // add the event on the header, so when clicked, we do sorting
	        if (this.eLabel) {
	            this.addDestroyableEventListener(this.eLabel, 'click', function (event) {
	                _this.params.progressSort(event.shiftKey);
	            });
	        }
	        this.addDestroyableEventListener(this.params.column, column_1.Column.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
	        this.onSortChanged();
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SORT_CHANGED, this.setMultiSortOrder.bind(this));
	        this.setMultiSortOrder();
	    };
	    HeaderComp.prototype.onSortChanged = function () {
	        utils_1.Utils.addOrRemoveCssClass(this.getHtmlElement(), 'ag-header-cell-sorted-asc', this.params.column.isSortAscending());
	        utils_1.Utils.addOrRemoveCssClass(this.getHtmlElement(), 'ag-header-cell-sorted-desc', this.params.column.isSortDescending());
	        utils_1.Utils.addOrRemoveCssClass(this.getHtmlElement(), 'ag-header-cell-sorted-none', this.params.column.isSortNone());
	        if (this.eSortAsc) {
	            utils_1.Utils.addOrRemoveCssClass(this.eSortAsc, 'ag-hidden', !this.params.column.isSortAscending());
	        }
	        if (this.eSortDesc) {
	            utils_1.Utils.addOrRemoveCssClass(this.eSortDesc, 'ag-hidden', !this.params.column.isSortDescending());
	        }
	        if (this.eSortNone) {
	            var alwaysHideNoSort = !this.params.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();
	            utils_1.Utils.addOrRemoveCssClass(this.eSortNone, 'ag-hidden', alwaysHideNoSort || !this.params.column.isSortNone());
	        }
	    };
	    // we listen here for global sort events, NOT column sort events, as we want to do this
	    // when sorting has been set on all column (if we listened just for our col (where we
	    // set the asc / desc icons) then it's possible other cols are yet to get their sorting state.
	    HeaderComp.prototype.setMultiSortOrder = function () {
	        if (!this.eSortOrder) {
	            return;
	        }
	        var col = this.params.column;
	        var allColumnsWithSorting = this.sortController.getColumnsWithSortingOrdered();
	        var indexThisCol = allColumnsWithSorting.indexOf(col);
	        var moreThanOneColSorting = allColumnsWithSorting.length > 1;
	        var showIndex = col.isSorting() && moreThanOneColSorting;
	        utils_1.Utils.setVisible(this.eSortOrder, showIndex);
	        if (indexThisCol >= 0) {
	            this.eSortOrder.innerHTML = (indexThisCol + 1).toString();
	        }
	        else {
	            this.eSortOrder.innerHTML = '';
	        }
	    };
	    HeaderComp.prototype.setupFilterIcon = function () {
	        if (!this.eFilter) {
	            return;
	        }
	        this.addDestroyableEventListener(this.params.column, column_1.Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
	        this.onFilterChanged();
	    };
	    HeaderComp.prototype.onFilterChanged = function () {
	        var filterPresent = this.params.column.isFilterActive();
	        utils_1.Utils.addOrRemoveCssClass(this.eFilter, 'ag-hidden', !filterPresent);
	    };
	    HeaderComp.TEMPLATE = '<div class="ag-cell-label-container" role="presentation">' +
	        '  <span ref="eMenu" class="ag-header-icon ag-header-cell-menu-button" aria-hidden="true"></span>' +
	        '  <div ref="eLabel" class="ag-header-cell-label" role="presentation">' +
	        '    <span ref="eText" class="ag-header-cell-text" role="columnheader"></span>' +
	        '    <span ref="eFilter" class="ag-header-icon ag-filter-icon" aria-hidden="true"></span>' +
	        '    <span ref="eSortOrder" class="ag-header-icon ag-sort-order" aria-hidden="true"></span>' +
	        '    <span ref="eSortAsc" class="ag-header-icon ag-sort-ascending-icon" aria-hidden="true"></span>' +
	        '    <span ref="eSortDesc" class="ag-header-icon ag-sort-descending-icon" aria-hidden="true"></span>' +
	        '    <span ref="eSortNone" class="ag-header-icon ag-sort-none-icon" aria-hidden="true"></span>' +
	        '  </div>' +
	        '</div>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('sortController'),
	        __metadata("design:type", sortController_1.SortController)
	    ], HeaderComp.prototype, "sortController", void 0);
	    __decorate([
	        context_1.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], HeaderComp.prototype, "menuFactory", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], HeaderComp.prototype, "eventService", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eFilter'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eFilter", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eSortAsc'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eSortAsc", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eSortDesc'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eSortDesc", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eSortNone'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eSortNone", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eSortOrder'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eSortOrder", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eMenu'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eMenu", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eLabel'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eLabel", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eText'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderComp.prototype, "eText", void 0);
	    return HeaderComp;
	}(component_1.Component));
	exports.HeaderComp = HeaderComp;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var column_1 = __webpack_require__(17);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var columnController_1 = __webpack_require__(15);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var context_2 = __webpack_require__(7);
	var utils_1 = __webpack_require__(8);
	var gridApi_1 = __webpack_require__(12);
	var SortController = (function () {
	    function SortController() {
	    }
	    SortController_1 = SortController;
	    SortController.prototype.progressSort = function (column, multiSort) {
	        var nextDirection = this.getNextSortDirection(column);
	        this.setSortForColumn(column, nextDirection, multiSort);
	    };
	    SortController.prototype.setSortForColumn = function (column, sort, multiSort) {
	        // auto correct - if sort not legal value, then set it to 'no sort' (which is null)
	        if (sort !== column_1.Column.SORT_ASC && sort !== column_1.Column.SORT_DESC) {
	            sort = null;
	        }
	        // update sort on current col
	        column.setSort(sort);
	        // sortedAt used for knowing order of cols when multi-col sort
	        if (column.getSort()) {
	            var sortedAt = Number(new Date().valueOf());
	            column.setSortedAt(sortedAt);
	        }
	        else {
	            column.setSortedAt(null);
	        }
	        var doingMultiSort = multiSort && !this.gridOptionsWrapper.isSuppressMultiSort();
	        // clear sort on all columns except this one, and update the icons
	        if (!doingMultiSort) {
	            this.clearSortBarThisColumn(column);
	        }
	        this.dispatchSortChangedEvents();
	    };
	    // gets called by API, so if data changes, use can call this, which will end up
	    // working out the sort order again of the rows.
	    SortController.prototype.onSortChanged = function () {
	        this.dispatchSortChangedEvents();
	    };
	    SortController.prototype.dispatchSortChangedEvents = function () {
	        var event = {
	            type: events_1.Events.EVENT_SORT_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    SortController.prototype.clearSortBarThisColumn = function (columnToSkip) {
	        this.columnController.getPrimaryAndSecondaryAndAutoColumns().forEach(function (columnToClear) {
	            // Do not clear if either holding shift, or if column in question was clicked
	            if (!(columnToClear === columnToSkip)) {
	                columnToClear.setSort(null);
	            }
	        });
	    };
	    SortController.prototype.getNextSortDirection = function (column) {
	        var sortingOrder;
	        if (column.getColDef().sortingOrder) {
	            sortingOrder = column.getColDef().sortingOrder;
	        }
	        else if (this.gridOptionsWrapper.getSortingOrder()) {
	            sortingOrder = this.gridOptionsWrapper.getSortingOrder();
	        }
	        else {
	            sortingOrder = SortController_1.DEFAULT_SORTING_ORDER;
	        }
	        if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {
	            console.warn('ag-grid: sortingOrder must be an array with at least one element, currently it\'s ' + sortingOrder);
	            return;
	        }
	        var currentIndex = sortingOrder.indexOf(column.getSort());
	        var notInArray = currentIndex < 0;
	        var lastItemInArray = currentIndex == sortingOrder.length - 1;
	        var result;
	        if (notInArray || lastItemInArray) {
	            result = sortingOrder[0];
	        }
	        else {
	            result = sortingOrder[currentIndex + 1];
	        }
	        // verify the sort type exists, as the user could provide the sortOrder, need to make sure it's valid
	        if (SortController_1.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {
	            console.warn('ag-grid: invalid sort type ' + result);
	            return null;
	        }
	        return result;
	    };
	    // used by the public api, for saving the sort model
	    SortController.prototype.getSortModel = function () {
	        var columnsWithSorting = this.getColumnsWithSortingOrdered();
	        return utils_1.Utils.map(columnsWithSorting, function (column) {
	            return {
	                colId: column.getColId(),
	                sort: column.getSort()
	            };
	        });
	    };
	    SortController.prototype.setSortModel = function (sortModel) {
	        var _this = this;
	        if (!this.gridOptionsWrapper.isEnableSorting()) {
	            console.warn('ag-grid: You are setting the sort model on a grid that does not have sorting enabled');
	            return;
	        }
	        // first up, clear any previous sort
	        var sortModelProvided = sortModel && sortModel.length > 0;
	        var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
	        allColumnsIncludingAuto.forEach(function (column) {
	            var sortForCol = null;
	            var sortedAt = -1;
	            if (sortModelProvided && !column.getColDef().suppressSorting) {
	                for (var j = 0; j < sortModel.length; j++) {
	                    var sortModelEntry = sortModel[j];
	                    if (typeof sortModelEntry.colId === 'string'
	                        && typeof column.getColId() === 'string'
	                        && _this.compareColIds(sortModelEntry, column)) {
	                        sortForCol = sortModelEntry.sort;
	                        sortedAt = j;
	                    }
	                }
	            }
	            if (sortForCol) {
	                column.setSort(sortForCol);
	                column.setSortedAt(sortedAt);
	            }
	            else {
	                column.setSort(null);
	                column.setSortedAt(null);
	            }
	        });
	        this.dispatchSortChangedEvents();
	    };
	    SortController.prototype.compareColIds = function (sortModelEntry, column) {
	        return sortModelEntry.colId === column.getColId();
	    };
	    SortController.prototype.getColumnsWithSortingOrdered = function () {
	        // pull out all the columns that have sorting set
	        var allColumnsIncludingAuto = this.columnController.getPrimaryAndSecondaryAndAutoColumns();
	        var columnsWithSorting = utils_1.Utils.filter(allColumnsIncludingAuto, function (column) { return !!column.getSort(); });
	        // put the columns in order of which one got sorted first
	        columnsWithSorting.sort(function (a, b) { return a.sortedAt - b.sortedAt; });
	        return columnsWithSorting;
	    };
	    // used by row controller, when doing the sorting
	    SortController.prototype.getSortForRowController = function () {
	        var columnsWithSorting = this.getColumnsWithSortingOrdered();
	        return utils_1.Utils.map(columnsWithSorting, function (column) {
	            var ascending = column.getSort() === column_1.Column.SORT_ASC;
	            return {
	                inverter: ascending ? 1 : -1,
	                column: column
	            };
	        });
	    };
	    SortController.DEFAULT_SORTING_ORDER = [column_1.Column.SORT_ASC, column_1.Column.SORT_DESC, null];
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], SortController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], SortController.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], SortController.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], SortController.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], SortController.prototype, "gridApi", void 0);
	    SortController = SortController_1 = __decorate([
	        context_2.Bean('sortController')
	    ], SortController);
	    return SortController;
	    var SortController_1;
	}());
	exports.SortController = SortController;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var eventService_1 = __webpack_require__(5);
	var utils_1 = __webpack_require__(8);
	var TouchListener = (function () {
	    function TouchListener(eElement) {
	        var _this = this;
	        this.destroyFuncs = [];
	        this.touching = false;
	        this.eventService = new eventService_1.EventService();
	        this.eElement = eElement;
	        var startListener = this.onTouchStart.bind(this);
	        var moveListener = this.onTouchMove.bind(this);
	        var endListener = this.onTouchEnd.bind(this);
	        this.eElement.addEventListener('touchstart', startListener, { passive: true });
	        this.eElement.addEventListener('touchmove', moveListener, { passive: true });
	        this.eElement.addEventListener('touchend', endListener, { passive: true });
	        this.destroyFuncs.push(function () {
	            _this.eElement.addEventListener('touchstart', startListener, { passive: true });
	            _this.eElement.addEventListener('touchmove', moveListener, { passive: true });
	            _this.eElement.addEventListener('touchend', endListener, { passive: true });
	        });
	    }
	    TouchListener.prototype.getActiveTouch = function (touchList) {
	        for (var i = 0; i < touchList.length; i++) {
	            var matches = touchList[i].identifier === this.touchStart.identifier;
	            if (matches) {
	                return touchList[i];
	            }
	        }
	        return null;
	    };
	    TouchListener.prototype.addEventListener = function (eventType, listener) {
	        this.eventService.addEventListener(eventType, listener);
	    };
	    TouchListener.prototype.removeEventListener = function (eventType, listener) {
	        this.eventService.removeEventListener(eventType, listener);
	    };
	    TouchListener.prototype.onTouchStart = function (touchEvent) {
	        var _this = this;
	        // only looking at one touch point at any time
	        if (this.touching) {
	            return;
	        }
	        this.touchStart = touchEvent.touches[0];
	        this.touching = true;
	        this.moved = false;
	        var touchStartCopy = this.touchStart;
	        setTimeout(function () {
	            var touchesMatch = _this.touchStart === touchStartCopy;
	            if (_this.touching && touchesMatch && !_this.moved) {
	                _this.moved = true;
	                var event_1 = {
	                    type: TouchListener.EVENT_LONG_TAP,
	                    touchStart: _this.touchStart
	                };
	                _this.eventService.dispatchEvent(event_1);
	            }
	        }, 500);
	    };
	    TouchListener.prototype.onTouchMove = function (touchEvent) {
	        if (!this.touching) {
	            return;
	        }
	        var touch = this.getActiveTouch(touchEvent.touches);
	        if (!touch) {
	            return;
	        }
	        var eventIsFarAway = !utils_1.Utils.areEventsNear(touch, this.touchStart, 4);
	        if (eventIsFarAway) {
	            this.moved = true;
	        }
	    };
	    TouchListener.prototype.onTouchEnd = function (touchEvent) {
	        if (!this.touching) {
	            return;
	        }
	        if (!this.moved) {
	            var event_2 = {
	                type: TouchListener.EVENT_TAP,
	                touchStart: this.touchStart
	            };
	            this.eventService.dispatchEvent(event_2);
	        }
	        this.touching = false;
	    };
	    TouchListener.prototype.destroy = function () {
	        this.destroyFuncs.forEach(function (func) { return func(); });
	    };
	    // private mostRecentTouch: Touch;
	    TouchListener.EVENT_TAP = 'tap';
	    TouchListener.EVENT_LONG_TAP = 'longTap';
	    return TouchListener;
	}());
	exports.TouchListener = TouchListener;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(35);
	var utils_1 = __webpack_require__(8);
	var columnController_1 = __webpack_require__(15);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var context_1 = __webpack_require__(7);
	var touchListener_1 = __webpack_require__(63);
	var componentAnnotations_1 = __webpack_require__(48);
	var originalColumnGroup_1 = __webpack_require__(19);
	var HeaderGroupComp = (function (_super) {
	    __extends(HeaderGroupComp, _super);
	    function HeaderGroupComp() {
	        return _super.call(this, HeaderGroupComp.TEMPLATE) || this;
	    }
	    HeaderGroupComp.prototype.init = function (params) {
	        this.params = params;
	        this.setupLabel();
	        this.addGroupExpandIcon();
	        this.setupExpandIcons();
	    };
	    HeaderGroupComp.prototype.setupExpandIcons = function () {
	        this.addInIcon('columnGroupOpened', 'agOpened');
	        this.addInIcon('columnGroupClosed', 'agClosed');
	        this.addTouchAndClickListeners(this.eCloseIcon);
	        this.addTouchAndClickListeners(this.eOpenIcon);
	        this.updateIconVisibility();
	        var originalColumnGroup = this.params.columnGroup.getOriginalColumnGroup();
	        this.addDestroyableEventListener(originalColumnGroup, originalColumnGroup_1.OriginalColumnGroup.EVENT_EXPANDED_CHANGED, this.updateIconVisibility.bind(this));
	        this.addDestroyableEventListener(originalColumnGroup, originalColumnGroup_1.OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED, this.updateIconVisibility.bind(this));
	    };
	    HeaderGroupComp.prototype.addTouchAndClickListeners = function (eElement) {
	        var _this = this;
	        var expandAction = function () {
	            var newExpandedValue = !_this.params.columnGroup.isExpanded();
	            _this.columnController.setColumnGroupOpened(_this.params.columnGroup.getOriginalColumnGroup(), newExpandedValue);
	        };
	        var touchListener = new touchListener_1.TouchListener(this.eCloseIcon);
	        this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_TAP, expandAction);
	        this.addDestroyFunc(function () { return touchListener.destroy(); });
	        this.addDestroyableEventListener(eElement, 'click', expandAction);
	    };
	    HeaderGroupComp.prototype.updateIconVisibility = function () {
	        var columnGroup = this.params.columnGroup;
	        if (columnGroup.isExpandable()) {
	            var expanded = this.params.columnGroup.isExpanded();
	            utils_1.Utils.setVisible(this.eOpenIcon, !expanded);
	            utils_1.Utils.setVisible(this.eCloseIcon, expanded);
	        }
	        else {
	            utils_1.Utils.setVisible(this.eOpenIcon, false);
	            utils_1.Utils.setVisible(this.eCloseIcon, false);
	        }
	    };
	    HeaderGroupComp.prototype.addInIcon = function (iconName, refName) {
	        var eIcon = utils_1.Utils.createIconNoSpan(iconName, this.gridOptionsWrapper, null);
	        this.getRefElement(refName).appendChild(eIcon);
	    };
	    HeaderGroupComp.prototype.addGroupExpandIcon = function () {
	        if (!this.params.columnGroup.isExpandable()) {
	            utils_1.Utils.setVisible(this.eOpenIcon, false);
	            utils_1.Utils.setVisible(this.eCloseIcon, false);
	            return;
	        }
	    };
	    HeaderGroupComp.prototype.setupLabel = function () {
	        // no renderer, default text render
	        if (this.params.displayName && this.params.displayName !== '') {
	            if (utils_1.Utils.isBrowserSafari()) {
	                this.getHtmlElement().style.display = 'table-cell';
	            }
	            var eInnerText = this.getRefElement('agLabel');
	            eInnerText.innerHTML = this.params.displayName;
	        }
	    };
	    HeaderGroupComp.TEMPLATE = "<div class=\"ag-header-group-cell-label\">" +
	        "<span ref=\"agLabel\" class=\"ag-header-group-text\"></span>" +
	        "<span ref=\"agOpened\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-expanded\"></span>" +
	        "<span ref=\"agClosed\" class=\"ag-header-icon ag-header-expand-icon ag-header-expand-icon-collapsed\"></span>" +
	        "</div>";
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], HeaderGroupComp.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderGroupComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('agOpened'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderGroupComp.prototype, "eOpenIcon", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('agClosed'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderGroupComp.prototype, "eCloseIcon", void 0);
	    return HeaderGroupComp;
	}(component_1.Component));
	exports.HeaderGroupComp = HeaderGroupComp;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var dateFilter_1 = __webpack_require__(56);
	var componentAnnotations_1 = __webpack_require__(48);
	var utils_1 = __webpack_require__(8);
	var componentRecipes_1 = __webpack_require__(57);
	var component_1 = __webpack_require__(35);
	var constants_1 = __webpack_require__(9);
	var InputTextFloatingFilterComp = (function (_super) {
	    __extends(InputTextFloatingFilterComp, _super);
	    function InputTextFloatingFilterComp() {
	        var _this = _super.call(this, "<div><input  ref=\"eColumnFloatingFilter\" class=\"ag-floating-filter-input\"></div>") || this;
	        _this.lastKnownModel = null;
	        return _this;
	    }
	    InputTextFloatingFilterComp.prototype.init = function (params) {
	        this.onFloatingFilterChanged = params.onFloatingFilterChanged;
	        this.currentParentModel = params.currentParentModel;
	        var debounceMs = params.debounceMs != null ? params.debounceMs : 500;
	        var toDebounce = utils_1._.debounce(this.syncUpWithParentFilter.bind(this), debounceMs);
	        this.addDestroyableEventListener(this.eColumnFloatingFilter, 'input', toDebounce);
	        this.addDestroyableEventListener(this.eColumnFloatingFilter, 'keypress', toDebounce);
	        this.addDestroyableEventListener(this.eColumnFloatingFilter, 'keydown', toDebounce);
	        var columnDef = params.column.getDefinition();
	        if (columnDef.filterParams && columnDef.filterParams.filterOptions && columnDef.filterParams.filterOptions.length === 1 && columnDef.filterParams.filterOptions[0] === 'inRange') {
	            this.eColumnFloatingFilter.readOnly = true;
	        }
	    };
	    InputTextFloatingFilterComp.prototype.onParentModelChanged = function (parentModel) {
	        if (this.equalModels(this.lastKnownModel, parentModel))
	            return;
	        this.lastKnownModel = parentModel;
	        var incomingTextValue = this.asFloatingFilterText(parentModel);
	        if (incomingTextValue === this.eColumnFloatingFilter.value)
	            return;
	        this.eColumnFloatingFilter.value = incomingTextValue;
	    };
	    InputTextFloatingFilterComp.prototype.syncUpWithParentFilter = function (e) {
	        var model = this.asParentModel();
	        if (this.equalModels(this.lastKnownModel, model))
	            return;
	        var modelUpdated = null;
	        if (utils_1._.isKeyPressed(e, constants_1.Constants.KEY_ENTER)) {
	            modelUpdated = this.onFloatingFilterChanged({
	                model: model,
	                apply: true
	            });
	        }
	        else {
	            modelUpdated = this.onFloatingFilterChanged({
	                model: model,
	                apply: false
	            });
	        }
	        if (modelUpdated) {
	            this.lastKnownModel = model;
	        }
	    };
	    InputTextFloatingFilterComp.prototype.equalModels = function (left, right) {
	        if (utils_1._.referenceCompare(left, right))
	            return true;
	        if (!left || !right)
	            return false;
	        if (Array.isArray(left) || Array.isArray(right))
	            return false;
	        return (utils_1._.referenceCompare(left.type, right.type) &&
	            utils_1._.referenceCompare(left.filter, right.filter) &&
	            utils_1._.referenceCompare(left.filterTo, right.filterTo) &&
	            utils_1._.referenceCompare(left.filterType, right.filterType));
	    };
	    __decorate([
	        componentAnnotations_1.RefSelector('eColumnFloatingFilter'),
	        __metadata("design:type", HTMLInputElement)
	    ], InputTextFloatingFilterComp.prototype, "eColumnFloatingFilter", void 0);
	    return InputTextFloatingFilterComp;
	}(component_1.Component));
	exports.InputTextFloatingFilterComp = InputTextFloatingFilterComp;
	var TextFloatingFilterComp = (function (_super) {
	    __extends(TextFloatingFilterComp, _super);
	    function TextFloatingFilterComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    TextFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
	        if (!parentModel)
	            return '';
	        return parentModel.filter;
	    };
	    TextFloatingFilterComp.prototype.asParentModel = function () {
	        var currentParentModel = this.currentParentModel();
	        return {
	            type: currentParentModel.type,
	            filter: this.eColumnFloatingFilter.value,
	            filterType: 'text'
	        };
	    };
	    return TextFloatingFilterComp;
	}(InputTextFloatingFilterComp));
	exports.TextFloatingFilterComp = TextFloatingFilterComp;
	var DateFloatingFilterComp = (function (_super) {
	    __extends(DateFloatingFilterComp, _super);
	    function DateFloatingFilterComp() {
	        var _this = _super !== null && _super.apply(this, arguments) || this;
	        _this.lastKnownModel = null;
	        return _this;
	    }
	    DateFloatingFilterComp.prototype.init = function (params) {
	        this.onFloatingFilterChanged = params.onFloatingFilterChanged;
	        this.currentParentModel = params.currentParentModel;
	        var debounceMs = params.debounceMs != null ? params.debounceMs : 500;
	        var toDebounce = utils_1._.debounce(this.onDateChanged.bind(this), debounceMs);
	        var dateComponentParams = {
	            onDateChanged: toDebounce
	        };
	        this.dateComponent = this.componentRecipes.newDateComponent(dateComponentParams);
	        var body = utils_1._.loadTemplate("<div></div>");
	        body.appendChild(utils_1._.ensureElement(this.dateComponent.getGui()));
	        this.setHtmlElement(body);
	    };
	    DateFloatingFilterComp.prototype.onDateChanged = function () {
	        var parentModel = this.currentParentModel();
	        var model = this.asParentModel();
	        if (this.equalModels(parentModel, model))
	            return;
	        this.onFloatingFilterChanged({
	            model: model,
	            apply: true
	        });
	        this.lastKnownModel = model;
	    };
	    DateFloatingFilterComp.prototype.equalModels = function (left, right) {
	        if (utils_1._.referenceCompare(left, right))
	            return true;
	        if (!left || !right)
	            return false;
	        if (Array.isArray(left) || Array.isArray(right))
	            return false;
	        return (utils_1._.referenceCompare(left.type, right.type) &&
	            utils_1._.referenceCompare(left.dateFrom, right.dateFrom) &&
	            utils_1._.referenceCompare(left.dateTo, right.dateTo) &&
	            utils_1._.referenceCompare(left.filterType, right.filterType));
	    };
	    DateFloatingFilterComp.prototype.asParentModel = function () {
	        var currentParentModel = this.currentParentModel();
	        var filterValueDate = this.dateComponent.getDate();
	        var filterValueText = utils_1._.serializeDateToYyyyMmDd(dateFilter_1.DateFilter.removeTimezone(filterValueDate), "-");
	        return {
	            type: currentParentModel.type,
	            dateFrom: filterValueText,
	            dateTo: currentParentModel ? currentParentModel.dateTo : null,
	            filterType: 'date'
	        };
	    };
	    DateFloatingFilterComp.prototype.onParentModelChanged = function (parentModel) {
	        this.lastKnownModel = parentModel;
	        if (!parentModel || !parentModel.dateFrom) {
	            this.dateComponent.setDate(null);
	            return;
	        }
	        this.dateComponent.setDate(utils_1._.parseYyyyMmDdToDate(parentModel.dateFrom, '-'));
	    };
	    __decorate([
	        context_1.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes_1.ComponentRecipes)
	    ], DateFloatingFilterComp.prototype, "componentRecipes", void 0);
	    return DateFloatingFilterComp;
	}(component_1.Component));
	exports.DateFloatingFilterComp = DateFloatingFilterComp;
	var NumberFloatingFilterComp = (function (_super) {
	    __extends(NumberFloatingFilterComp, _super);
	    function NumberFloatingFilterComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    NumberFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
	        var rawParentModel = this.currentParentModel();
	        if (parentModel == null && rawParentModel == null)
	            return '';
	        if (parentModel == null && rawParentModel != null && rawParentModel.type !== 'inRange') {
	            this.eColumnFloatingFilter.readOnly = false;
	            return '';
	        }
	        if (rawParentModel != null && rawParentModel.type === 'inRange') {
	            this.eColumnFloatingFilter.readOnly = true;
	            var number_1 = this.asNumber(rawParentModel.filter);
	            var numberTo = this.asNumber(rawParentModel.filterTo);
	            return (number_1 ? number_1 + '' : '') +
	                '-' +
	                (numberTo ? numberTo + '' : '');
	        }
	        var number = this.asNumber(parentModel.filter);
	        this.eColumnFloatingFilter.readOnly = false;
	        return number != null ? number + '' : '';
	    };
	    NumberFloatingFilterComp.prototype.asParentModel = function () {
	        var currentParentModel = this.currentParentModel();
	        var filterValueNumber = this.asNumber(this.eColumnFloatingFilter.value);
	        var filterValueText = this.eColumnFloatingFilter.value;
	        var modelFilterValue = null;
	        if (filterValueNumber == null && filterValueText === '') {
	            modelFilterValue = null;
	        }
	        else if (filterValueNumber == null) {
	            modelFilterValue = currentParentModel.filter;
	        }
	        else {
	            modelFilterValue = filterValueNumber;
	        }
	        return {
	            type: currentParentModel.type,
	            filter: modelFilterValue,
	            filterTo: !currentParentModel ? null : currentParentModel.filterTo,
	            filterType: 'number'
	        };
	    };
	    NumberFloatingFilterComp.prototype.asNumber = function (value) {
	        if (value == null)
	            return null;
	        if (value === '')
	            return null;
	        var asNumber = Number(value);
	        var invalidNumber = !utils_1._.isNumeric(asNumber);
	        return invalidNumber ? null : asNumber;
	    };
	    return NumberFloatingFilterComp;
	}(InputTextFloatingFilterComp));
	exports.NumberFloatingFilterComp = NumberFloatingFilterComp;
	var SetFloatingFilterComp = (function (_super) {
	    __extends(SetFloatingFilterComp, _super);
	    function SetFloatingFilterComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    SetFloatingFilterComp.prototype.init = function (params) {
	        _super.prototype.init.call(this, params);
	        this.eColumnFloatingFilter.readOnly = true;
	    };
	    SetFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
	        if (!parentModel || parentModel.length === 0)
	            return '';
	        var arrayToDisplay = parentModel.length > 10 ? parentModel.slice(0, 10).concat(['...']) : parentModel;
	        return "(" + parentModel.length + ") " + arrayToDisplay.join(",");
	    };
	    SetFloatingFilterComp.prototype.asParentModel = function () {
	        if (this.eColumnFloatingFilter.value == null || this.eColumnFloatingFilter.value === '')
	            return null;
	        return this.eColumnFloatingFilter.value.split(",");
	    };
	    return SetFloatingFilterComp;
	}(InputTextFloatingFilterComp));
	exports.SetFloatingFilterComp = SetFloatingFilterComp;
	var ReadModelAsStringFloatingFilterComp = (function (_super) {
	    __extends(ReadModelAsStringFloatingFilterComp, _super);
	    function ReadModelAsStringFloatingFilterComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ReadModelAsStringFloatingFilterComp.prototype.init = function (params) {
	        _super.prototype.init.call(this, params);
	        this.eColumnFloatingFilter.readOnly = true;
	    };
	    ReadModelAsStringFloatingFilterComp.prototype.onParentModelChanged = function (parentModel) {
	        this.eColumnFloatingFilter.value = this.asFloatingFilterText(this.currentParentModel());
	    };
	    ReadModelAsStringFloatingFilterComp.prototype.asFloatingFilterText = function (parentModel) {
	        return parentModel;
	    };
	    ReadModelAsStringFloatingFilterComp.prototype.asParentModel = function () {
	        return null;
	    };
	    return ReadModelAsStringFloatingFilterComp;
	}(InputTextFloatingFilterComp));
	exports.ReadModelAsStringFloatingFilterComp = ReadModelAsStringFloatingFilterComp;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var column_1 = __webpack_require__(17);
	var utils_1 = __webpack_require__(8);
	var setLeftFeature_1 = __webpack_require__(67);
	var component_1 = __webpack_require__(35);
	var componentAnnotations_1 = __webpack_require__(48);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var beans_1 = __webpack_require__(68);
	var BaseFilterWrapperComp = (function (_super) {
	    __extends(BaseFilterWrapperComp, _super);
	    function BaseFilterWrapperComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    BaseFilterWrapperComp.prototype.init = function (params) {
	        this.column = params.column;
	        var base = utils_1._.loadTemplate("<div class=\"ag-header-cell\" aria-hidden=\"true\"><div class=\"ag-floating-filter-body\" aria-hidden=\"true\"></div></div>");
	        this.enrichBody(base);
	        this.setHtmlElement(base);
	        this.setupWidth();
	        var setLeftFeature = new setLeftFeature_1.SetLeftFeature(this.column, this.getHtmlElement(), this.beans);
	        setLeftFeature.init();
	        this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
	    };
	    BaseFilterWrapperComp.prototype.setupWidth = function () {
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
	        this.onColumnWidthChanged();
	    };
	    BaseFilterWrapperComp.prototype.onColumnWidthChanged = function () {
	        this.getHtmlElement().style.width = this.column.getActualWidth() + 'px';
	    };
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], BaseFilterWrapperComp.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('beans'),
	        __metadata("design:type", beans_1.Beans)
	    ], BaseFilterWrapperComp.prototype, "beans", void 0);
	    return BaseFilterWrapperComp;
	}(component_1.Component));
	exports.BaseFilterWrapperComp = BaseFilterWrapperComp;
	var FloatingFilterWrapperComp = (function (_super) {
	    __extends(FloatingFilterWrapperComp, _super);
	    function FloatingFilterWrapperComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    FloatingFilterWrapperComp.prototype.init = function (params) {
	        this.floatingFilterComp = params.floatingFilterComp;
	        this.suppressFilterButton = params.suppressFilterButton;
	        _super.prototype.init.call(this, params);
	        if (!this.suppressFilterButton) {
	            this.addDestroyableEventListener(this.eButtonShowMainFilter, 'click', this.showParentFilter.bind(this));
	        }
	    };
	    FloatingFilterWrapperComp.prototype.enrichBody = function (body) {
	        var floatingFilterBody = body.querySelector('.ag-floating-filter-body');
	        var floatingFilterComp = utils_1._.ensureElement(this.floatingFilterComp.getGui());
	        if (this.suppressFilterButton) {
	            floatingFilterBody.appendChild(floatingFilterComp);
	            utils_1._.removeCssClass(floatingFilterBody, 'ag-floating-filter-body');
	            utils_1._.addCssClass(floatingFilterBody, 'ag-floating-filter-full-body');
	        }
	        else {
	            // let icon:HTMLElement = _.createIconNoSpan('filter', this.gridOptionsWrapper, this.column, svgFactory.createFilterSvg12);
	            floatingFilterBody.appendChild(floatingFilterComp);
	            body.appendChild(utils_1._.loadTemplate("<div class=\"ag-floating-filter-button\" aria-hidden=\"true\">\n                    <button ref=\"eButtonShowMainFilter\">...</button>            \n            </div>"));
	            // body.querySelector('button').appendChild(icon);
	        }
	        if (this.floatingFilterComp.afterGuiAttached) {
	            this.floatingFilterComp.afterGuiAttached({
	                eComponent: floatingFilterComp
	            });
	        }
	    };
	    FloatingFilterWrapperComp.prototype.onParentModelChanged = function (parentModel) {
	        this.floatingFilterComp.onParentModelChanged(parentModel);
	    };
	    FloatingFilterWrapperComp.prototype.showParentFilter = function () {
	        this.menuFactory.showMenuAfterButtonClick(this.column, this.eButtonShowMainFilter, 'filterMenuTab', ['filterMenuTab']);
	    };
	    __decorate([
	        componentAnnotations_1.RefSelector('eButtonShowMainFilter'),
	        __metadata("design:type", HTMLInputElement)
	    ], FloatingFilterWrapperComp.prototype, "eButtonShowMainFilter", void 0);
	    __decorate([
	        context_1.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], FloatingFilterWrapperComp.prototype, "menuFactory", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], FloatingFilterWrapperComp.prototype, "gridOptionsWrapper", void 0);
	    return FloatingFilterWrapperComp;
	}(BaseFilterWrapperComp));
	exports.FloatingFilterWrapperComp = FloatingFilterWrapperComp;
	var EmptyFloatingFilterWrapperComp = (function (_super) {
	    __extends(EmptyFloatingFilterWrapperComp, _super);
	    function EmptyFloatingFilterWrapperComp() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    EmptyFloatingFilterWrapperComp.prototype.enrichBody = function (body) {
	    };
	    EmptyFloatingFilterWrapperComp.prototype.onParentModelChanged = function (parentModel) {
	    };
	    return EmptyFloatingFilterWrapperComp;
	}(BaseFilterWrapperComp));
	exports.EmptyFloatingFilterWrapperComp = EmptyFloatingFilterWrapperComp;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var column_1 = __webpack_require__(17);
	var beanStub_1 = __webpack_require__(36);
	var SetLeftFeature = (function (_super) {
	    __extends(SetLeftFeature, _super);
	    function SetLeftFeature(columnOrGroup, eCell, beans, colsSpanning) {
	        var _this = _super.call(this) || this;
	        _this.columnOrGroup = columnOrGroup;
	        _this.eCell = eCell;
	        _this.colsSpanning = colsSpanning;
	        _this.beans = beans;
	        return _this;
	    }
	    SetLeftFeature.prototype.setColsSpanning = function (colsSpanning) {
	        this.colsSpanning = colsSpanning;
	        this.onLeftChanged();
	    };
	    SetLeftFeature.prototype.getColumnOrGroup = function () {
	        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {
	            return this.colsSpanning[this.colsSpanning.length - 1];
	        }
	        else {
	            return this.columnOrGroup;
	        }
	    };
	    SetLeftFeature.prototype.init = function () {
	        this.addDestroyableEventListener(this.columnOrGroup, column_1.Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));
	        this.setLeftFirstTime();
	    };
	    SetLeftFeature.prototype.setLeftFirstTime = function () {
	        var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();
	        var oldLeftExists = utils_1.Utils.exists(this.columnOrGroup.getOldLeft());
	        var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;
	        if (animateColumnMove) {
	            this.animateInLeft();
	        }
	        else {
	            this.onLeftChanged();
	        }
	    };
	    SetLeftFeature.prototype.animateInLeft = function () {
	        var _this = this;
	        var left = this.getColumnOrGroup().getLeft();
	        var oldLeft = this.getColumnOrGroup().getOldLeft();
	        this.setLeft(oldLeft);
	        // we must keep track of the left we want to set to, as this would otherwise lead to a race
	        // condition, if the user changed the left value many times in one VM turn, then we want to make
	        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left
	        // position. eg if user changes column position twice, then setLeft() below executes twice in next
	        // VM turn, but only one (the correct one) should get applied.
	        this.actualLeft = left;
	        this.beans.columnAnimationService.executeNextVMTurn(function () {
	            // test this left value is the latest one to be applied, and if not, do nothing
	            if (_this.actualLeft === left) {
	                _this.setLeft(left);
	            }
	        });
	    };
	    SetLeftFeature.prototype.onLeftChanged = function () {
	        this.actualLeft = this.getColumnOrGroup().getLeft();
	        this.setLeft(this.actualLeft);
	    };
	    SetLeftFeature.prototype.setLeft = function (value) {
	        // if the value is null, then that means the column is no longer
	        // displayed. there is logic in the rendering to fade these columns
	        // out, so we don't try and change their left positions.
	        if (utils_1.Utils.exists(value)) {
	            this.eCell.style.left = value + 'px';
	        }
	    };
	    return SetLeftFeature;
	}(beanStub_1.BeanStub));
	exports.SetLeftFeature = SetLeftFeature;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var columnController_1 = __webpack_require__(15);
	var gridApi_1 = __webpack_require__(12);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var expressionService_1 = __webpack_require__(20);
	var rowRenderer_1 = __webpack_require__(23);
	var templateService_1 = __webpack_require__(49);
	var valueService_1 = __webpack_require__(31);
	var eventService_1 = __webpack_require__(5);
	var columnAnimationService_1 = __webpack_require__(69);
	var focusedCellController_1 = __webpack_require__(38);
	var cellEditorFactory_1 = __webpack_require__(70);
	var cellRendererFactory_1 = __webpack_require__(77);
	var popupService_1 = __webpack_require__(52);
	var cellRendererService_1 = __webpack_require__(81);
	var valueFormatterService_1 = __webpack_require__(73);
	var stylingService_1 = __webpack_require__(82);
	var columnHoverService_1 = __webpack_require__(83);
	var gridPanel_1 = __webpack_require__(24);
	var paginationProxy_1 = __webpack_require__(41);
	var animationFrameService_1 = __webpack_require__(45);
	var componentResolver_1 = __webpack_require__(58);
	var Beans = (function () {
	    function Beans() {
	    }
	    Beans.prototype.postConstruct = function () {
	        this.forPrint = this.gridOptionsWrapper.isForPrint();
	    };
	    __decorate([
	        context_1.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy_1.PaginationProxy)
	    ], Beans.prototype, "paginationProxy", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], Beans.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], Beans.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], Beans.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], Beans.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], Beans.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], Beans.prototype, "expressionService", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], Beans.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_1.Autowired('$compile'),
	        __metadata("design:type", Object)
	    ], Beans.prototype, "$compile", void 0);
	    __decorate([
	        context_1.Autowired('templateService'),
	        __metadata("design:type", templateService_1.TemplateService)
	    ], Beans.prototype, "templateService", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], Beans.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], Beans.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], Beans.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('columnAnimationService'),
	        __metadata("design:type", columnAnimationService_1.ColumnAnimationService)
	    ], Beans.prototype, "columnAnimationService", void 0);
	    __decorate([
	        context_1.Optional('rangeController'),
	        __metadata("design:type", Object)
	    ], Beans.prototype, "rangeController", void 0);
	    __decorate([
	        context_1.Autowired('focusedCellController'),
	        __metadata("design:type", focusedCellController_1.FocusedCellController)
	    ], Beans.prototype, "focusedCellController", void 0);
	    __decorate([
	        context_1.Optional('contextMenuFactory'),
	        __metadata("design:type", Object)
	    ], Beans.prototype, "contextMenuFactory", void 0);
	    __decorate([
	        context_1.Autowired('cellEditorFactory'),
	        __metadata("design:type", cellEditorFactory_1.CellEditorFactory)
	    ], Beans.prototype, "cellEditorFactory", void 0);
	    __decorate([
	        context_1.Autowired('cellRendererFactory'),
	        __metadata("design:type", cellRendererFactory_1.CellRendererFactory)
	    ], Beans.prototype, "cellRendererFactory", void 0);
	    __decorate([
	        context_1.Autowired('popupService'),
	        __metadata("design:type", popupService_1.PopupService)
	    ], Beans.prototype, "popupService", void 0);
	    __decorate([
	        context_1.Autowired('cellRendererService'),
	        __metadata("design:type", cellRendererService_1.CellRendererService)
	    ], Beans.prototype, "cellRendererService", void 0);
	    __decorate([
	        context_1.Autowired('valueFormatterService'),
	        __metadata("design:type", valueFormatterService_1.ValueFormatterService)
	    ], Beans.prototype, "valueFormatterService", void 0);
	    __decorate([
	        context_1.Autowired('stylingService'),
	        __metadata("design:type", stylingService_1.StylingService)
	    ], Beans.prototype, "stylingService", void 0);
	    __decorate([
	        context_1.Autowired('columnHoverService'),
	        __metadata("design:type", columnHoverService_1.ColumnHoverService)
	    ], Beans.prototype, "columnHoverService", void 0);
	    __decorate([
	        context_1.Autowired('enterprise'),
	        __metadata("design:type", Boolean)
	    ], Beans.prototype, "enterprise", void 0);
	    __decorate([
	        context_1.Autowired('componentResolver'),
	        __metadata("design:type", componentResolver_1.ComponentResolver)
	    ], Beans.prototype, "componentResolver", void 0);
	    __decorate([
	        context_1.Autowired('animationFrameService'),
	        __metadata("design:type", animationFrameService_1.AnimationFrameService)
	    ], Beans.prototype, "taskQueue", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], Beans.prototype, "postConstruct", null);
	    Beans = __decorate([
	        context_1.Bean('beans')
	    ], Beans);
	    return Beans;
	}());
	exports.Beans = Beans;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var gridPanel_1 = __webpack_require__(24);
	var utils_1 = __webpack_require__(8);
	var ColumnAnimationService = (function () {
	    function ColumnAnimationService() {
	        this.executeNextFuncs = [];
	        this.executeLaterFuncs = [];
	        this.active = false;
	        this.animationThreadCount = 0;
	    }
	    ColumnAnimationService.prototype.isActive = function () {
	        return this.active;
	    };
	    ColumnAnimationService.prototype.start = function () {
	        if (this.active) {
	            return;
	        }
	        if (this.gridOptionsWrapper.isSuppressColumnMoveAnimation()) {
	            return;
	        }
	        // if doing RTL, we don't animate open / close as due to how the pixels are inverted,
	        // the animation moves all the row the the right rather than to the left (ie it's the static
	        // columns that actually get their coordinates updated)
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            return;
	        }
	        this.ensureAnimationCssClassPresent();
	        this.active = true;
	    };
	    ColumnAnimationService.prototype.finish = function () {
	        if (!this.active) {
	            return;
	        }
	        this.flush();
	        this.active = false;
	    };
	    ColumnAnimationService.prototype.executeNextVMTurn = function (func) {
	        if (this.active) {
	            this.executeNextFuncs.push(func);
	        }
	        else {
	            func();
	        }
	    };
	    ColumnAnimationService.prototype.executeLaterVMTurn = function (func) {
	        if (this.active) {
	            this.executeLaterFuncs.push(func);
	        }
	        else {
	            func();
	        }
	    };
	    ColumnAnimationService.prototype.ensureAnimationCssClassPresent = function () {
	        var _this = this;
	        // up the count, so we can tell if someone else has updated the count
	        // by the time the 'wait' func executes
	        this.animationThreadCount++;
	        var animationThreadCountCopy = this.animationThreadCount;
	        utils_1.Utils.addCssClass(this.gridPanel.getRoot(), 'ag-column-moving');
	        this.executeLaterFuncs.push(function () {
	            // only remove the class if this thread was the last one to update it
	            if (_this.animationThreadCount === animationThreadCountCopy) {
	                utils_1.Utils.removeCssClass(_this.gridPanel.getRoot(), 'ag-column-moving');
	            }
	        });
	    };
	    ColumnAnimationService.prototype.flush = function () {
	        var nowFuncs = this.executeNextFuncs;
	        this.executeNextFuncs = [];
	        var waitFuncs = this.executeLaterFuncs;
	        this.executeLaterFuncs = [];
	        if (nowFuncs.length === 0 && waitFuncs.length === 0) {
	            return;
	        }
	        setTimeout(function () { return nowFuncs.forEach(function (func) { return func(); }); }, 0);
	        setTimeout(function () { return waitFuncs.forEach(function (func) { return func(); }); }, 300);
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ColumnAnimationService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], ColumnAnimationService.prototype, "gridPanel", void 0);
	    ColumnAnimationService = __decorate([
	        context_1.Bean('columnAnimationService')
	    ], ColumnAnimationService);
	    return ColumnAnimationService;
	}());
	exports.ColumnAnimationService = ColumnAnimationService;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var utils_1 = __webpack_require__(8);
	var textCellEditor_1 = __webpack_require__(71);
	var selectCellEditor_1 = __webpack_require__(72);
	var popupEditorWrapper_1 = __webpack_require__(42);
	var popupTextCellEditor_1 = __webpack_require__(74);
	var popupSelectCellEditor_1 = __webpack_require__(75);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var largeTextCellEditor_1 = __webpack_require__(76);
	var CellEditorFactory = (function () {
	    function CellEditorFactory() {
	        this.cellEditorMap = {};
	    }
	    CellEditorFactory_1 = CellEditorFactory;
	    CellEditorFactory.prototype.init = function () {
	        this.cellEditorMap[CellEditorFactory_1.TEXT] = textCellEditor_1.TextCellEditor;
	        this.cellEditorMap[CellEditorFactory_1.SELECT] = selectCellEditor_1.SelectCellEditor;
	        this.cellEditorMap[CellEditorFactory_1.POPUP_TEXT] = popupTextCellEditor_1.PopupTextCellEditor;
	        this.cellEditorMap[CellEditorFactory_1.POPUP_SELECT] = popupSelectCellEditor_1.PopupSelectCellEditor;
	        this.cellEditorMap[CellEditorFactory_1.LARGE_TEXT] = largeTextCellEditor_1.LargeTextCellEditor;
	    };
	    CellEditorFactory.prototype.addCellEditor = function (key, cellEditor) {
	        this.cellEditorMap[key] = cellEditor;
	    };
	    // private registerEditorsFromGridOptions(): void {
	    //     let userProvidedCellEditors = this.gridOptionsWrapper.getCellEditors();
	    //     _.iterateObject(userProvidedCellEditors, (key: string, cellEditor: {new(): ICellEditor})=> {
	    //         this.addCellEditor(key, cellEditor);
	    //     });
	    // }
	    CellEditorFactory.prototype.createCellEditor = function (key, params) {
	        var CellEditorClass;
	        if (utils_1.Utils.missing(key)) {
	            CellEditorClass = this.cellEditorMap[CellEditorFactory_1.TEXT];
	        }
	        else if (typeof key === 'string') {
	            CellEditorClass = this.cellEditorMap[key];
	            if (utils_1.Utils.missing(CellEditorClass)) {
	                console.warn('ag-Grid: unable to find cellEditor for key ' + key);
	                CellEditorClass = this.cellEditorMap[CellEditorFactory_1.TEXT];
	            }
	        }
	        else {
	            CellEditorClass = key;
	        }
	        var cellEditor = new CellEditorClass();
	        this.context.wireBean(cellEditor);
	        // we have to call init first, otherwise when using the frameworks, the wrapper
	        // classes won't be set up
	        if (cellEditor.init) {
	            cellEditor.init(params);
	        }
	        if (cellEditor.isPopup && cellEditor.isPopup()) {
	            if (this.gridOptionsWrapper.isFullRowEdit()) {
	                console.warn('ag-Grid: popup cellEditor does not work with fullRowEdit - you cannot use them both ' +
	                    '- either turn off fullRowEdit, or stop using popup editors.');
	            }
	            cellEditor = new popupEditorWrapper_1.PopupEditorWrapper(cellEditor);
	            this.context.wireBean(cellEditor);
	            cellEditor.init(params);
	        }
	        return cellEditor;
	    };
	    CellEditorFactory.TEXT = 'text';
	    CellEditorFactory.SELECT = 'select';
	    CellEditorFactory.POPUP_TEXT = 'popupText';
	    CellEditorFactory.POPUP_SELECT = 'popupSelect';
	    CellEditorFactory.LARGE_TEXT = 'largeText';
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], CellEditorFactory.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], CellEditorFactory.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], CellEditorFactory.prototype, "init", null);
	    CellEditorFactory = CellEditorFactory_1 = __decorate([
	        context_1.Bean('cellEditorFactory')
	    ], CellEditorFactory);
	    return CellEditorFactory;
	    var CellEditorFactory_1;
	}());
	exports.CellEditorFactory = CellEditorFactory;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var constants_1 = __webpack_require__(9);
	var component_1 = __webpack_require__(35);
	var utils_1 = __webpack_require__(8);
	var TextCellEditor = (function (_super) {
	    __extends(TextCellEditor, _super);
	    function TextCellEditor() {
	        return _super.call(this, TextCellEditor.TEMPLATE) || this;
	    }
	    TextCellEditor.prototype.init = function (params) {
	        this.params = params;
	        var eInput = this.getGui();
	        var startValue;
	        // cellStartedEdit is only false if we are doing fullRow editing
	        if (params.cellStartedEdit) {
	            this.focusAfterAttached = true;
	            var keyPressBackspaceOrDelete = params.keyPress === constants_1.Constants.KEY_BACKSPACE
	                || params.keyPress === constants_1.Constants.KEY_DELETE;
	            if (keyPressBackspaceOrDelete) {
	                startValue = '';
	            }
	            else if (params.charPress) {
	                startValue = params.charPress;
	            }
	            else {
	                startValue = this.getStartValue(params);
	                if (params.keyPress !== constants_1.Constants.KEY_F2) {
	                    this.highlightAllOnFocus = true;
	                }
	            }
	        }
	        else {
	            this.focusAfterAttached = false;
	            startValue = this.getStartValue(params);
	        }
	        if (utils_1.Utils.exists(startValue)) {
	            eInput.value = startValue;
	        }
	        this.addDestroyableEventListener(eInput, 'keydown', function (event) {
	            var isNavigationKey = event.keyCode === constants_1.Constants.KEY_LEFT
	                || event.keyCode === constants_1.Constants.KEY_RIGHT
	                || event.keyCode === constants_1.Constants.KEY_UP
	                || event.keyCode === constants_1.Constants.KEY_DOWN
	                || event.keyCode === constants_1.Constants.KEY_PAGE_DOWN
	                || event.keyCode === constants_1.Constants.KEY_PAGE_UP
	                || event.keyCode === constants_1.Constants.KEY_PAGE_HOME
	                || event.keyCode === constants_1.Constants.KEY_PAGE_END;
	            if (isNavigationKey) {
	                // this stops the grid from executing keyboard navigation
	                event.stopPropagation();
	                if (!(event.keyCode === constants_1.Constants.KEY_LEFT) && !(event.keyCode === constants_1.Constants.KEY_RIGHT)) {
	                    // this stops the browser from scrolling
	                    event.preventDefault();
	                }
	            }
	        });
	    };
	    TextCellEditor.prototype.afterGuiAttached = function () {
	        if (!this.focusAfterAttached) {
	            return;
	        }
	        var eInput = this.getGui();
	        eInput.focus();
	        if (this.highlightAllOnFocus) {
	            eInput.select();
	        }
	        else {
	            // when we started editing, we want the carot at the end, not the start.
	            // this comes into play in two scenarios: a) when user hits F2 and b)
	            // when user hits a printable character, then on IE (and only IE) the carot
	            // was placed after the first character, thus 'apply' would end up as 'pplea'
	            var length_1 = eInput.value ? eInput.value.length : 0;
	            if (length_1 > 0) {
	                eInput.setSelectionRange(length_1, length_1);
	            }
	        }
	    };
	    // gets called when tabbing trough cells and in full row edit mode
	    TextCellEditor.prototype.focusIn = function () {
	        var eInput = this.getGui();
	        eInput.focus();
	        eInput.select();
	    };
	    TextCellEditor.prototype.getValue = function () {
	        var eInput = this.getGui();
	        return this.params.parseValue(eInput.value);
	    };
	    TextCellEditor.prototype.getStartValue = function (params) {
	        var formatValue = params.useFormatter || params.column.getColDef().refData;
	        return formatValue ? params.formatValue(params.value) : params.value;
	    };
	    TextCellEditor.TEMPLATE = '<input class="ag-cell-edit-input" type="text"/>';
	    return TextCellEditor;
	}(component_1.Component));
	exports.TextCellEditor = TextCellEditor;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(35);
	var utils_1 = __webpack_require__(8);
	var constants_1 = __webpack_require__(9);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var valueFormatterService_1 = __webpack_require__(73);
	var SelectCellEditor = (function (_super) {
	    __extends(SelectCellEditor, _super);
	    function SelectCellEditor() {
	        var _this = _super.call(this, '<div class="ag-cell-edit-input"><select class="ag-cell-edit-input"/></div>') || this;
	        _this.eSelect = _this.getHtmlElement().querySelector('select');
	        return _this;
	    }
	    SelectCellEditor.prototype.init = function (params) {
	        var _this = this;
	        this.focusAfterAttached = params.cellStartedEdit;
	        if (utils_1.Utils.missing(params.values)) {
	            console.log('ag-Grid: no values found for select cellEditor');
	            return;
	        }
	        params.values.forEach(function (value) {
	            var option = document.createElement('option');
	            option.value = value;
	            var valueFormatted = _this.valueFormatterService.formatValue(params.column, null, null, value);
	            var valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;
	            option.text = valueFormattedExits ? valueFormatted : value;
	            if (params.value === value) {
	                option.selected = true;
	            }
	            _this.eSelect.appendChild(option);
	        });
	        // we don't want to add this if full row editing, otherwise selecting will stop the
	        // full row editing.
	        if (!this.gridOptionsWrapper.isFullRowEdit()) {
	            this.addDestroyableEventListener(this.eSelect, 'change', function () { return params.stopEditing(); });
	        }
	        this.addDestroyableEventListener(this.eSelect, 'keydown', function (event) {
	            var isNavigationKey = event.keyCode === constants_1.Constants.KEY_UP || event.keyCode === constants_1.Constants.KEY_DOWN;
	            if (isNavigationKey) {
	                event.stopPropagation();
	            }
	        });
	        this.addDestroyableEventListener(this.eSelect, 'mousedown', function (event) {
	            event.stopPropagation();
	        });
	    };
	    SelectCellEditor.prototype.afterGuiAttached = function () {
	        if (this.focusAfterAttached) {
	            this.eSelect.focus();
	        }
	    };
	    SelectCellEditor.prototype.focusIn = function () {
	        this.eSelect.focus();
	    };
	    SelectCellEditor.prototype.getValue = function () {
	        return this.eSelect.value;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], SelectCellEditor.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('valueFormatterService'),
	        __metadata("design:type", valueFormatterService_1.ValueFormatterService)
	    ], SelectCellEditor.prototype, "valueFormatterService", void 0);
	    return SelectCellEditor;
	}(component_1.Component));
	exports.SelectCellEditor = SelectCellEditor;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var expressionService_1 = __webpack_require__(20);
	var ValueFormatterService = (function () {
	    function ValueFormatterService() {
	    }
	    ValueFormatterService.prototype.formatValue = function (column, rowNode, $scope, value) {
	        var formatter;
	        var colDef = column.getColDef();
	        // if floating, give preference to the floating formatter
	        if (rowNode && rowNode.rowPinned) {
	            formatter = colDef.pinnedRowValueFormatter ? colDef.pinnedRowValueFormatter : colDef.valueFormatter;
	        }
	        else {
	            formatter = colDef.valueFormatter;
	        }
	        var result = null;
	        if (formatter) {
	            var params = {
	                value: value,
	                node: rowNode,
	                data: rowNode ? rowNode.data : null,
	                colDef: column.getColDef(),
	                column: column,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext()
	            };
	            // originally we put the angular 1 scope here, but we don't want the scope
	            // in the params interface, as other frameworks will see the interface, and
	            // angular 1 is not cool any more. so we hack the scope in here (we cannot
	            // include it above, as it's not in the interface, so would cause a compile error).
	            // in the future, when we stop supporting angular 1, we can take this out.
	            params.$scope = $scope;
	            result = this.expressionService.evaluate(formatter, params);
	        }
	        else if (colDef.refData) {
	            return colDef.refData[value];
	        }
	        return result;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ValueFormatterService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], ValueFormatterService.prototype, "expressionService", void 0);
	    ValueFormatterService = __decorate([
	        context_1.Bean('valueFormatterService')
	    ], ValueFormatterService);
	    return ValueFormatterService;
	}());
	exports.ValueFormatterService = ValueFormatterService;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var textCellEditor_1 = __webpack_require__(71);
	var PopupTextCellEditor = (function (_super) {
	    __extends(PopupTextCellEditor, _super);
	    function PopupTextCellEditor() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    PopupTextCellEditor.prototype.isPopup = function () {
	        return true;
	    };
	    return PopupTextCellEditor;
	}(textCellEditor_1.TextCellEditor));
	exports.PopupTextCellEditor = PopupTextCellEditor;


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var selectCellEditor_1 = __webpack_require__(72);
	var PopupSelectCellEditor = (function (_super) {
	    __extends(PopupSelectCellEditor, _super);
	    function PopupSelectCellEditor() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    PopupSelectCellEditor.prototype.isPopup = function () {
	        return true;
	    };
	    return PopupSelectCellEditor;
	}(selectCellEditor_1.SelectCellEditor));
	exports.PopupSelectCellEditor = PopupSelectCellEditor;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(35);
	var constants_1 = __webpack_require__(9);
	var utils_1 = __webpack_require__(8);
	var LargeTextCellEditor = (function (_super) {
	    __extends(LargeTextCellEditor, _super);
	    function LargeTextCellEditor() {
	        return _super.call(this, LargeTextCellEditor.TEMPLATE) || this;
	    }
	    LargeTextCellEditor.prototype.init = function (params) {
	        this.params = params;
	        this.focusAfterAttached = params.cellStartedEdit;
	        this.textarea = document.createElement("textarea");
	        this.textarea.maxLength = params.maxLength ? params.maxLength : "200";
	        this.textarea.cols = params.cols ? params.cols : "60";
	        this.textarea.rows = params.rows ? params.rows : "10";
	        if (utils_1.Utils.exists(params.value)) {
	            this.textarea.value = params.value.toString();
	        }
	        this.getHtmlElement().querySelector('.ag-large-textarea').appendChild(this.textarea);
	        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));
	    };
	    LargeTextCellEditor.prototype.onKeyDown = function (event) {
	        var key = event.which || event.keyCode;
	        if (key == constants_1.Constants.KEY_LEFT ||
	            key == constants_1.Constants.KEY_UP ||
	            key == constants_1.Constants.KEY_RIGHT ||
	            key == constants_1.Constants.KEY_DOWN ||
	            (event.shiftKey && key == constants_1.Constants.KEY_ENTER)) {
	            event.stopPropagation();
	        }
	    };
	    LargeTextCellEditor.prototype.afterGuiAttached = function () {
	        if (this.focusAfterAttached) {
	            this.textarea.focus();
	        }
	    };
	    LargeTextCellEditor.prototype.getValue = function () {
	        return this.textarea.value;
	    };
	    LargeTextCellEditor.prototype.isPopup = function () {
	        return true;
	    };
	    LargeTextCellEditor.TEMPLATE = 
	    // tab index is needed so we can focus, which is needed for keyboard events
	    '<div class="ag-large-text" tabindex="0">' +
	        '<div class="ag-large-textarea"></div>' +
	        '</div>';
	    return LargeTextCellEditor;
	}(component_1.Component));
	exports.LargeTextCellEditor = LargeTextCellEditor;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var utils_1 = __webpack_require__(8);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var eventService_1 = __webpack_require__(5);
	var expressionService_1 = __webpack_require__(20);
	var animateSlideCellRenderer_1 = __webpack_require__(78);
	var animateShowChangeCellRenderer_1 = __webpack_require__(79);
	var groupCellRenderer_1 = __webpack_require__(80);
	var CellRendererFactory = (function () {
	    function CellRendererFactory() {
	        this.cellRendererMap = {};
	    }
	    CellRendererFactory_1 = CellRendererFactory;
	    CellRendererFactory.prototype.init = function () {
	        this.cellRendererMap[CellRendererFactory_1.ANIMATE_SLIDE] = animateSlideCellRenderer_1.AnimateSlideCellRenderer;
	        this.cellRendererMap[CellRendererFactory_1.ANIMATE_SHOW_CHANGE] = animateShowChangeCellRenderer_1.AnimateShowChangeCellRenderer;
	        this.cellRendererMap[CellRendererFactory_1.GROUP] = groupCellRenderer_1.GroupCellRenderer;
	        // this.registerRenderersFromGridOptions();
	    };
	    // private registerRenderersFromGridOptions(): void {
	    //     let userProvidedCellRenderers = this.gridOptionsWrapper.getCellRenderers();
	    //     _.iterateObject(userProvidedCellRenderers, (key: string, cellRenderer: {new(): ICellRenderer} | ICellRendererFunc)=> {
	    //         this.addCellRenderer(key, cellRenderer);
	    //     });
	    // }
	    CellRendererFactory.prototype.addCellRenderer = function (key, cellRenderer) {
	        this.cellRendererMap[key] = cellRenderer;
	    };
	    CellRendererFactory.prototype.getCellRenderer = function (key) {
	        var result = this.cellRendererMap[key];
	        if (utils_1.Utils.missing(result)) {
	            console.warn('ag-Grid: unable to find cellRenderer for key ' + key);
	            return null;
	        }
	        return result;
	    };
	    CellRendererFactory.ANIMATE_SLIDE = 'animateSlide';
	    CellRendererFactory.ANIMATE_SHOW_CHANGE = 'animateShowChange';
	    CellRendererFactory.GROUP = 'group';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], CellRendererFactory.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], CellRendererFactory.prototype, "expressionService", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], CellRendererFactory.prototype, "eventService", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], CellRendererFactory.prototype, "init", null);
	    CellRendererFactory = CellRendererFactory_1 = __decorate([
	        context_1.Bean('cellRendererFactory')
	    ], CellRendererFactory);
	    return CellRendererFactory;
	    var CellRendererFactory_1;
	}());
	exports.CellRendererFactory = CellRendererFactory;


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var component_1 = __webpack_require__(35);
	var AnimateSlideCellRenderer = (function (_super) {
	    __extends(AnimateSlideCellRenderer, _super);
	    function AnimateSlideCellRenderer() {
	        var _this = _super.call(this, AnimateSlideCellRenderer.TEMPLATE) || this;
	        _this.refreshCount = 0;
	        _this.eCurrent = _this.queryForHtmlElement('.ag-value-slide-current');
	        return _this;
	    }
	    AnimateSlideCellRenderer.prototype.init = function (params) {
	        this.params = params;
	        this.refresh(params);
	    };
	    AnimateSlideCellRenderer.prototype.addSlideAnimation = function () {
	        var _this = this;
	        this.refreshCount++;
	        // below we keep checking this, and stop working on the animation
	        // if it no longer matches - this means another animation has started
	        // and this one is stale.
	        var refreshCountCopy = this.refreshCount;
	        // if old animation, remove it
	        if (this.ePrevious) {
	            this.getHtmlElement().removeChild(this.ePrevious);
	        }
	        this.ePrevious = utils_1.Utils.loadTemplate('<span class="ag-value-slide-previous ag-value-slide-out"></span>');
	        this.ePrevious.innerHTML = this.eCurrent.innerHTML;
	        this.getHtmlElement().insertBefore(this.ePrevious, this.eCurrent);
	        // having timeout of 0 allows use to skip to the next css turn,
	        // so we know the previous css classes have been applied. so the
	        // complex set of setTimeout below creates the animation
	        setTimeout(function () {
	            if (refreshCountCopy !== _this.refreshCount) {
	                return;
	            }
	            utils_1.Utils.addCssClass(_this.ePrevious, 'ag-value-slide-out-end');
	        }, 50);
	        setTimeout(function () {
	            if (refreshCountCopy !== _this.refreshCount) {
	                return;
	            }
	            _this.getHtmlElement().removeChild(_this.ePrevious);
	            _this.ePrevious = null;
	        }, 3000);
	    };
	    AnimateSlideCellRenderer.prototype.refresh = function (params) {
	        var value = params.value;
	        if (utils_1.Utils.missing(value)) {
	            value = '';
	        }
	        if (value === this.lastValue) {
	            return;
	        }
	        this.addSlideAnimation();
	        this.lastValue = value;
	        if (utils_1.Utils.exists(params.valueFormatted)) {
	            this.eCurrent.innerHTML = params.valueFormatted;
	        }
	        else if (utils_1.Utils.exists(params.value)) {
	            this.eCurrent.innerHTML = value;
	        }
	        else {
	            this.eCurrent.innerHTML = '';
	        }
	        return true;
	    };
	    AnimateSlideCellRenderer.TEMPLATE = '<span>' +
	        '<span class="ag-value-slide-current"></span>' +
	        '</span>';
	    return AnimateSlideCellRenderer;
	}(component_1.Component));
	exports.AnimateSlideCellRenderer = AnimateSlideCellRenderer;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var component_1 = __webpack_require__(35);
	var ARROW_UP = '&#65514;';
	var ARROW_DOWN = '&#65516;';
	var AnimateShowChangeCellRenderer = (function (_super) {
	    __extends(AnimateShowChangeCellRenderer, _super);
	    function AnimateShowChangeCellRenderer() {
	        var _this = _super.call(this, AnimateShowChangeCellRenderer.TEMPLATE) || this;
	        _this.refreshCount = 0;
	        return _this;
	    }
	    AnimateShowChangeCellRenderer.prototype.init = function (params) {
	        // this.params = params;
	        this.eValue = this.queryForHtmlElement('.ag-value-change-value');
	        this.eDelta = this.queryForHtmlElement('.ag-value-change-delta');
	        this.refresh(params);
	    };
	    AnimateShowChangeCellRenderer.prototype.showDelta = function (params, delta) {
	        var absDelta = Math.abs(delta);
	        var valueFormatted = params.formatValue(absDelta);
	        var valueToUse = utils_1.Utils.exists(valueFormatted) ? valueFormatted : absDelta;
	        var deltaUp = (delta >= 0);
	        if (deltaUp) {
	            this.eDelta.innerHTML = ARROW_UP + valueToUse;
	        }
	        else {
	            // because negative, use ABS to remove sign
	            this.eDelta.innerHTML = ARROW_DOWN + valueToUse;
	        }
	        // class makes it green (in ag-fresh)
	        utils_1.Utils.addOrRemoveCssClass(this.eDelta, 'ag-value-change-delta-up', deltaUp);
	        // class makes it red (in ag-fresh)
	        utils_1.Utils.addOrRemoveCssClass(this.eDelta, 'ag-value-change-delta-down', !deltaUp);
	    };
	    AnimateShowChangeCellRenderer.prototype.setTimerToRemoveDelta = function () {
	        var _this = this;
	        // the refreshCount makes sure that if the value updates again while
	        // the below timer is waiting, then the below timer will realise it
	        // is not the most recent and will not try to remove the delta value.
	        this.refreshCount++;
	        var refreshCountCopy = this.refreshCount;
	        setTimeout(function () {
	            if (refreshCountCopy === _this.refreshCount) {
	                _this.hideDeltaValue();
	            }
	        }, 2000);
	    };
	    AnimateShowChangeCellRenderer.prototype.hideDeltaValue = function () {
	        utils_1.Utils.removeCssClass(this.eValue, 'ag-value-change-value-highlight');
	        this.eDelta.innerHTML = '';
	    };
	    AnimateShowChangeCellRenderer.prototype.refresh = function (params) {
	        var value = params.value;
	        if (value === this.lastValue) {
	            return;
	        }
	        if (utils_1.Utils.exists(params.valueFormatted)) {
	            this.eValue.innerHTML = params.valueFormatted;
	        }
	        else if (utils_1.Utils.exists(params.value)) {
	            this.eValue.innerHTML = value;
	        }
	        else {
	            this.eValue.innerHTML = '';
	        }
	        if (typeof value === 'number' && typeof this.lastValue === 'number') {
	            var delta = value - this.lastValue;
	            this.showDelta(params, delta);
	        }
	        // highlight the current value, but only if it's not new, otherwise it
	        // would get highlighted first time the value is shown
	        if (this.lastValue) {
	            utils_1.Utils.addCssClass(this.eValue, 'ag-value-change-value-highlight');
	        }
	        this.setTimerToRemoveDelta();
	        this.lastValue = value;
	        return true;
	    };
	    AnimateShowChangeCellRenderer.TEMPLATE = '<span>' +
	        '<span class="ag-value-change-delta"></span>' +
	        '<span class="ag-value-change-value"></span>' +
	        '</span>';
	    return AnimateShowChangeCellRenderer;
	}(component_1.Component));
	exports.AnimateShowChangeCellRenderer = AnimateShowChangeCellRenderer;


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var expressionService_1 = __webpack_require__(20);
	var eventService_1 = __webpack_require__(5);
	var constants_1 = __webpack_require__(9);
	var utils_1 = __webpack_require__(8);
	var context_1 = __webpack_require__(7);
	var component_1 = __webpack_require__(35);
	var rowNode_1 = __webpack_require__(30);
	var cellRendererService_1 = __webpack_require__(81);
	var valueFormatterService_1 = __webpack_require__(73);
	var checkboxSelectionComponent_1 = __webpack_require__(37);
	var columnController_1 = __webpack_require__(15);
	var column_1 = __webpack_require__(17);
	var componentAnnotations_1 = __webpack_require__(48);
	var GroupCellRenderer = (function (_super) {
	    __extends(GroupCellRenderer, _super);
	    function GroupCellRenderer() {
	        return _super.call(this, GroupCellRenderer.TEMPLATE) || this;
	    }
	    GroupCellRenderer.prototype.init = function (params) {
	        this.params = params;
	        var embeddedRowMismatch = this.isEmbeddedRowMismatch();
	        // This allows for empty strings to appear as groups since
	        // it will only return for null or undefined.
	        var cellIsEmpty = params.value == null;
	        this.cellIsBlank = embeddedRowMismatch || cellIsEmpty;
	        if (this.cellIsBlank) {
	            return;
	        }
	        this.setupDragOpenParents();
	        this.addExpandAndContract();
	        this.addCheckboxIfNeeded();
	        this.addValueElement();
	        this.addPadding();
	    };
	    // if we are doing embedded full width rows, we only show the renderer when
	    // in the body, or if pinning in the pinned section, or if pinning and RTL,
	    // in the right section. otherwise we would have the cell repeated in each section.
	    GroupCellRenderer.prototype.isEmbeddedRowMismatch = function () {
	        if (this.gridOptionsWrapper.isEmbedFullWidthRows()) {
	            var pinnedLeftCell = this.params.pinned === column_1.Column.PINNED_LEFT;
	            var pinnedRightCell = this.params.pinned === column_1.Column.PINNED_RIGHT;
	            var bodyCell = !pinnedLeftCell && !pinnedRightCell;
	            if (this.gridOptionsWrapper.isEnableRtl()) {
	                if (this.columnController.isPinningLeft()) {
	                    return !pinnedRightCell;
	                }
	                else {
	                    return !bodyCell;
	                }
	            }
	            else {
	                if (this.columnController.isPinningLeft()) {
	                    return !pinnedLeftCell;
	                }
	                else {
	                    return !bodyCell;
	                }
	            }
	        }
	        else {
	            return false;
	        }
	    };
	    GroupCellRenderer.prototype.setPadding = function () {
	        if (this.gridOptionsWrapper.isGroupHideOpenParents()) {
	            return;
	        }
	        var params = this.params;
	        var rowNode = params.node;
	        var paddingPx;
	        // never any padding on top level nodes
	        if (rowNode.uiLevel <= 0) {
	            paddingPx = 0;
	        }
	        else {
	            var paddingFactor = (params.padding >= 0) ? params.padding : this.gridOptionsWrapper.getGroupPaddingSize();
	            paddingPx = rowNode.uiLevel * paddingFactor;
	            var reducedLeafNode = this.columnController.isPivotMode() && params.node.leafGroup;
	            if (rowNode.footer) {
	                paddingPx += this.gridOptionsWrapper.getFooterPaddingAddition();
	            }
	            else if (!rowNode.isExpandable() || reducedLeafNode) {
	                paddingPx += this.gridOptionsWrapper.getLeafNodePaddingAddition();
	            }
	        }
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // if doing rtl, padding is on the right
	            this.getHtmlElement().style.paddingRight = paddingPx + 'px';
	        }
	        else {
	            // otherwise it is on the left
	            this.getHtmlElement().style.paddingLeft = paddingPx + 'px';
	        }
	    };
	    GroupCellRenderer.prototype.addPadding = function () {
	        // only do this if an indent - as this overwrites the padding that
	        // the theme set, which will make things look 'not aligned' for the
	        // first group level.
	        var node = this.params.node;
	        var suppressPadding = this.params.suppressPadding;
	        if (!suppressPadding) {
	            this.addDestroyableEventListener(node, rowNode_1.RowNode.EVENT_UI_LEVEL_CHANGED, this.setPadding.bind(this));
	            this.setPadding();
	        }
	    };
	    GroupCellRenderer.prototype.addValueElement = function () {
	        var params = this.params;
	        var rowNode = this.displayedGroup;
	        if (rowNode.footer) {
	            this.createFooterCell();
	        }
	        else if (rowNode.group ||
	            utils_1.Utils.get(params.colDef, 'cellRendererParams.innerRenderer', null) ||
	            utils_1.Utils.get(params.colDef, 'cellRendererParams.innerRendererFramework', null)) {
	            this.createGroupCell();
	            if (rowNode.group) {
	                this.addChildCount();
	            }
	        }
	        else {
	            this.createLeafCell();
	        }
	    };
	    GroupCellRenderer.prototype.createFooterCell = function () {
	        var footerValue;
	        var footerValueGetter = this.params.footerValueGetter;
	        if (footerValueGetter) {
	            // params is same as we were given, except we set the value as the item to display
	            var paramsClone = utils_1.Utils.cloneObject(this.params);
	            paramsClone.value = this.params.value;
	            if (typeof footerValueGetter === 'function') {
	                footerValue = footerValueGetter(paramsClone);
	            }
	            else if (typeof footerValueGetter === 'string') {
	                footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);
	            }
	            else {
	                console.warn('ag-Grid: footerValueGetter should be either a function or a string (expression)');
	            }
	        }
	        else {
	            footerValue = 'Total ' + this.params.value;
	        }
	        this.eValue.innerHTML = footerValue;
	    };
	    GroupCellRenderer.prototype.createGroupCell = function () {
	        var params = this.params;
	        var rowGroupColumn = this.displayedGroup.rowGroupColumn;
	        // we try and use the cellRenderer of the column used for the grouping if we can
	        var columnToUse = rowGroupColumn ? rowGroupColumn : params.column;
	        var groupName = this.params.value;
	        var valueFormatted = this.valueFormatterService.formatValue(columnToUse, params.node, params.scope, groupName);
	        params.valueFormatted = valueFormatted;
	        if (params.fullWidth == true) {
	            this.cellRendererService.useFullWidthGroupRowInnerCellRenderer(this.eValue, params);
	        }
	        else {
	            this.cellRendererService.useInnerCellRenderer(this.params.colDef.cellRendererParams, columnToUse.getColDef(), this.eValue, params);
	        }
	    };
	    GroupCellRenderer.prototype.addChildCount = function () {
	        // only include the child count if it's included, eg if user doing custom aggregation,
	        // then this could be left out, or set to -1, ie no child count
	        if (this.params.suppressCount) {
	            return;
	        }
	        this.addDestroyableEventListener(this.displayedGroup, rowNode_1.RowNode.EVENT_ALL_CHILDREN_COUNT_CELL_CHANGED, this.updateChildCount.bind(this));
	        // filtering changes the child count, so need to cater for it
	        this.updateChildCount();
	    };
	    GroupCellRenderer.prototype.updateChildCount = function () {
	        var allChildrenCount = this.displayedGroup.allChildrenCount;
	        this.eChildCount.innerHTML = allChildrenCount >= 0 ? "(" + allChildrenCount + ")" : "";
	    };
	    GroupCellRenderer.prototype.createLeafCell = function () {
	        if (utils_1.Utils.exists(this.params.value)) {
	            this.eValue.innerHTML = this.params.value;
	        }
	    };
	    GroupCellRenderer.prototype.isUserWantsSelected = function () {
	        var paramsCheckbox = this.params.checkbox;
	        if (typeof paramsCheckbox === 'function') {
	            return paramsCheckbox(this.params);
	        }
	        else {
	            return paramsCheckbox === true;
	        }
	    };
	    GroupCellRenderer.prototype.addCheckboxIfNeeded = function () {
	        var rowNode = this.params.node;
	        var checkboxNeeded = this.isUserWantsSelected()
	            && !rowNode.footer
	            && !rowNode.rowPinned
	            && !rowNode.flower;
	        if (checkboxNeeded) {
	            var cbSelectionComponent_1 = new checkboxSelectionComponent_1.CheckboxSelectionComponent();
	            this.context.wireBean(cbSelectionComponent_1);
	            cbSelectionComponent_1.init({ rowNode: rowNode, column: this.params.column });
	            this.eCheckbox.appendChild(cbSelectionComponent_1.getHtmlElement());
	            this.addDestroyFunc(function () { return cbSelectionComponent_1.destroy(); });
	        }
	    };
	    GroupCellRenderer.prototype.addExpandAndContract = function () {
	        var params = this.params;
	        var eGroupCell = params.eGridCell;
	        var eExpandedIcon = utils_1.Utils.createIconNoSpan('groupExpanded', this.gridOptionsWrapper, null);
	        var eContractedIcon = utils_1.Utils.createIconNoSpan('groupContracted', this.gridOptionsWrapper, null);
	        this.eExpanded.appendChild(eExpandedIcon);
	        this.eContracted.appendChild(eContractedIcon);
	        this.addDestroyableEventListener(this.eExpanded, 'click', this.onExpandClicked.bind(this));
	        this.addDestroyableEventListener(this.eContracted, 'click', this.onExpandClicked.bind(this));
	        // expand / contract as the user hits enter
	        this.addDestroyableEventListener(eGroupCell, 'keydown', this.onKeyDown.bind(this));
	        this.addDestroyableEventListener(params.node, rowNode_1.RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));
	        this.showExpandAndContractIcons();
	        // if editing groups, then double click is to start editing
	        if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable()) {
	            this.addDestroyableEventListener(eGroupCell, 'dblclick', this.onCellDblClicked.bind(this));
	        }
	    };
	    GroupCellRenderer.prototype.onKeyDown = function (event) {
	        if (utils_1.Utils.isKeyPressed(event, constants_1.Constants.KEY_ENTER)) {
	            var cellEditable = this.params.column.isCellEditable(this.params.node);
	            if (cellEditable) {
	                return;
	            }
	            event.preventDefault();
	            this.onExpandOrContract();
	        }
	    };
	    GroupCellRenderer.prototype.setupDragOpenParents = function () {
	        var column = this.params.column;
	        var rowNode = this.params.node;
	        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
	            this.draggedFromHideOpenParents = false;
	        }
	        else if (!rowNode.group) {
	            // if we are here, and we are not a group, then we must of been dragged down,
	            // as otherwise the cell would be blank, and if cell is blank, this method is never called.
	            this.draggedFromHideOpenParents = true;
	        }
	        else {
	            var rowGroupColumn = rowNode.rowGroupColumn;
	            // if the displayGroup column for this col matches the rowGroupColumn we grouped by for this node,
	            // then nothing was dragged down
	            this.draggedFromHideOpenParents = !column.isRowGroupDisplayed(rowGroupColumn.getId());
	        }
	        if (this.draggedFromHideOpenParents) {
	            var pointer = rowNode.parent;
	            while (true) {
	                if (utils_1.Utils.missing(pointer)) {
	                    break;
	                }
	                if (pointer.rowGroupColumn && column.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {
	                    this.displayedGroup = pointer;
	                    break;
	                }
	                pointer = pointer.parent;
	            }
	        }
	        // if we didn't find a displayed group, set it to the row node
	        if (utils_1.Utils.missing(this.displayedGroup)) {
	            this.displayedGroup = rowNode;
	        }
	    };
	    GroupCellRenderer.prototype.onExpandClicked = function () {
	        this.onExpandOrContract();
	    };
	    GroupCellRenderer.prototype.onCellDblClicked = function (event) {
	        // we want to avoid acting on double click events on the expand / contract icon,
	        // as that icons already has expand / collapse functionality on it. otherwise if
	        // the icon was double clicked, we would get 'click', 'click', 'dblclick' which
	        // is open->close->open, however double click should be open->close only.
	        var target = utils_1.Utils.getTarget(event);
	        var targetIsExpandIcon = target !== this.eExpanded && target !== this.eContracted;
	        if (!targetIsExpandIcon) {
	            this.onExpandOrContract();
	        }
	    };
	    GroupCellRenderer.prototype.onExpandOrContract = function () {
	        // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row
	        var rowNode = this.displayedGroup;
	        rowNode.setExpanded(!rowNode.expanded);
	        if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
	            this.params.api.redrawRows({ rowNodes: [rowNode] });
	        }
	    };
	    GroupCellRenderer.prototype.isExpandable = function () {
	        var rowNode = this.params.node;
	        var reducedLeafNode = this.columnController.isPivotMode() && rowNode.leafGroup;
	        return this.draggedFromHideOpenParents || (rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode);
	    };
	    GroupCellRenderer.prototype.showExpandAndContractIcons = function () {
	        var rowNode = this.params.node;
	        if (this.isExpandable()) {
	            // if expandable, show one based on expand state.
	            // if we were dragged down, means our parent is always expanded
	            var expanded = this.draggedFromHideOpenParents ? true : rowNode.expanded;
	            utils_1.Utils.setVisible(this.eContracted, !expanded);
	            utils_1.Utils.setVisible(this.eExpanded, expanded);
	        }
	        else {
	            // it not expandable, show neither
	            utils_1.Utils.setVisible(this.eExpanded, false);
	            utils_1.Utils.setVisible(this.eContracted, false);
	        }
	    };
	    GroupCellRenderer.prototype.refresh = function () {
	        return false;
	    };
	    GroupCellRenderer.TEMPLATE = '<span>' +
	        '<span class="ag-group-expanded" ref="eExpanded"></span>' +
	        '<span class="ag-group-contracted" ref="eContracted"></span>' +
	        '<span class="ag-group-checkbox" ref="eCheckbox"></span>' +
	        '<span class="ag-group-value" ref="eValue"></span>' +
	        '<span class="ag-group-child-count" ref="eChildCount"></span>' +
	        '</span>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], GroupCellRenderer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], GroupCellRenderer.prototype, "expressionService", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], GroupCellRenderer.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('cellRendererService'),
	        __metadata("design:type", cellRendererService_1.CellRendererService)
	    ], GroupCellRenderer.prototype, "cellRendererService", void 0);
	    __decorate([
	        context_1.Autowired('valueFormatterService'),
	        __metadata("design:type", valueFormatterService_1.ValueFormatterService)
	    ], GroupCellRenderer.prototype, "valueFormatterService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], GroupCellRenderer.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], GroupCellRenderer.prototype, "columnController", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eExpanded'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eExpanded", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eContracted'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eContracted", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eCheckbox'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eCheckbox", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eValue'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eValue", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eChildCount'),
	        __metadata("design:type", HTMLElement)
	    ], GroupCellRenderer.prototype, "eChildCount", void 0);
	    return GroupCellRenderer;
	}(component_1.Component));
	exports.GroupCellRenderer = GroupCellRenderer;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var componentRecipes_1 = __webpack_require__(57);
	var componentResolver_1 = __webpack_require__(58);
	var utils_1 = __webpack_require__(8);
	/** Class to use a cellRenderer. */
	var CellRendererService = (function () {
	    function CellRendererService() {
	    }
	    CellRendererService.prototype.useCellRenderer = function (target, eTarget, params) {
	        var cellRenderer = this.componentRecipes.newCellRenderer(target, params);
	        if (cellRenderer != null) {
	            this.bindToHtml(cellRenderer, eTarget);
	        }
	        else {
	            eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	        }
	        return cellRenderer;
	    };
	    CellRendererService.prototype.useFilterCellRenderer = function (target, eTarget, params) {
	        var cellRenderer = this.componentRecipes.newCellRenderer(target.filterParams, params);
	        if (cellRenderer != null) {
	            this.bindToHtml(cellRenderer, eTarget);
	        }
	        else {
	            eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	        }
	        return cellRenderer;
	    };
	    CellRendererService.prototype.useInnerCellRenderer = function (target, originalColumn, eTarget, params) {
	        var rendererToUse = null;
	        var componentToUse = this.componentResolver.getComponentToUse(target, "innerRenderer");
	        if (componentToUse && componentToUse.component != null && componentToUse.source != componentResolver_1.ComponentSource.DEFAULT) {
	            //THERE IS ONE INNER CELL RENDERER HARDCODED IN THE COLDEF FOR THIS GROUP COLUMN
	            rendererToUse = this.componentRecipes.newInnerCellRenderer(target, params);
	        }
	        else {
	            var otherRenderer = this.componentResolver.getComponentToUse(originalColumn, "cellRenderer");
	            if (otherRenderer && otherRenderer.source != componentResolver_1.ComponentSource.DEFAULT) {
	                //Only if the original column is using an specific renderer, it it is a using a DEFAULT one
	                //ignore it
	                //THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, WE REUSE ITS RENDERER
	                rendererToUse = this.componentRecipes.newCellRenderer(originalColumn, params);
	            }
	            else if (otherRenderer && otherRenderer.source == componentResolver_1.ComponentSource.DEFAULT && (utils_1._.get(originalColumn, 'cellRendererParams.innerRenderer', null))) {
	                //EDGE CASE - THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, THAT HAS AS RENDERER 'group'
	                //AND HAS A INNER CELL RENDERER
	                rendererToUse = this.componentRecipes.newInnerCellRenderer(originalColumn.cellRendererParams, params);
	            }
	            else {
	                //This forces the retrieval of the default plain cellRenderer that just renders the values.
	                rendererToUse = this.componentRecipes.newCellRenderer({}, params);
	            }
	        }
	        if (rendererToUse != null) {
	            this.bindToHtml(rendererToUse, eTarget);
	        }
	        else {
	            eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	        }
	        return rendererToUse;
	    };
	    CellRendererService.prototype.useFullWidthGroupRowInnerCellRenderer = function (eTarget, params) {
	        var cellRenderer = this.componentRecipes.newFullWidthGroupRowInnerCellRenderer(params);
	        if (cellRenderer != null) {
	            this.bindToHtml(cellRenderer, eTarget);
	        }
	        else {
	            eTarget.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;
	        }
	        return cellRenderer;
	    };
	    CellRendererService.prototype.bindToHtml = function (cellRenderer, eTarget) {
	        var gui = cellRenderer.getGui();
	        if (gui != null) {
	            if (typeof gui == 'object') {
	                eTarget.appendChild(gui);
	            }
	            else {
	                eTarget.innerHTML = gui;
	            }
	        }
	        return cellRenderer;
	    };
	    __decorate([
	        context_1.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes_1.ComponentRecipes)
	    ], CellRendererService.prototype, "componentRecipes", void 0);
	    __decorate([
	        context_1.Autowired('componentResolver'),
	        __metadata("design:type", componentResolver_1.ComponentResolver)
	    ], CellRendererService.prototype, "componentResolver", void 0);
	    CellRendererService = __decorate([
	        context_1.Bean('cellRendererService')
	    ], CellRendererService);
	    return CellRendererService;
	}());
	exports.CellRendererService = CellRendererService;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var expressionService_1 = __webpack_require__(20);
	var StylingService = (function () {
	    function StylingService() {
	    }
	    StylingService.prototype.processAllCellClasses = function (colDef, params, onApplicableClass, onNotApplicableClass) {
	        this.processCellClassRules(colDef, params, onApplicableClass, onNotApplicableClass);
	        this.processStaticCellClasses(colDef, params, onApplicableClass);
	    };
	    StylingService.prototype.processCellClassRules = function (colDef, params, onApplicableClass, onNotApplicableClass) {
	        var classRules = colDef.cellClassRules;
	        if (typeof classRules === 'object' && classRules !== null) {
	            var classNames = Object.keys(classRules);
	            for (var i = 0; i < classNames.length; i++) {
	                var className = classNames[i];
	                var rule = classRules[className];
	                var resultOfRule = void 0;
	                if (typeof rule === 'string') {
	                    resultOfRule = this.expressionService.evaluate(rule, params);
	                }
	                else if (typeof rule === 'function') {
	                    resultOfRule = rule(params);
	                }
	                if (resultOfRule) {
	                    onApplicableClass(className);
	                }
	                else if (onNotApplicableClass) {
	                    onNotApplicableClass(className);
	                }
	            }
	        }
	    };
	    StylingService.prototype.processStaticCellClasses = function (colDef, params, onApplicableClass) {
	        var cellClass = colDef.cellClass;
	        if (cellClass) {
	            var classOrClasses = void 0;
	            if (typeof colDef.cellClass === 'function') {
	                var cellClassFunc = colDef.cellClass;
	                classOrClasses = cellClassFunc(params);
	            }
	            else {
	                classOrClasses = colDef.cellClass;
	            }
	            if (typeof classOrClasses === 'string') {
	                onApplicableClass(classOrClasses);
	            }
	            else if (Array.isArray(classOrClasses)) {
	                classOrClasses.forEach(function (cssClassItem) {
	                    onApplicableClass(cssClassItem);
	                });
	            }
	        }
	    };
	    __decorate([
	        context_1.Autowired('expressionService'),
	        __metadata("design:type", expressionService_1.ExpressionService)
	    ], StylingService.prototype, "expressionService", void 0);
	    StylingService = __decorate([
	        context_1.Bean('stylingService')
	    ], StylingService);
	    return StylingService;
	}());
	exports.StylingService = StylingService;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var eventService_1 = __webpack_require__(5);
	var context_1 = __webpack_require__(7);
	var events_1 = __webpack_require__(11);
	var beanStub_1 = __webpack_require__(36);
	var columnController_1 = __webpack_require__(15);
	var gridApi_1 = __webpack_require__(12);
	var ColumnHoverService = (function (_super) {
	    __extends(ColumnHoverService, _super);
	    function ColumnHoverService() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ColumnHoverService.prototype.init = function () {
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_CELL_MOUSE_OVER, this.onCellMouseOver.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_CELL_MOUSE_OUT, this.onCellMouseOut.bind(this));
	    };
	    ColumnHoverService.prototype.onCellMouseOver = function (cellEvent) {
	        this.currentlySelectedColumn = cellEvent.column;
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_HOVER_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnHoverService.prototype.onCellMouseOut = function () {
	        this.currentlySelectedColumn = null;
	        var event = {
	            type: events_1.Events.EVENT_COLUMN_HOVER_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    ColumnHoverService.prototype.isHovered = function (column) {
	        return column == this.currentlySelectedColumn;
	    };
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], ColumnHoverService.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], ColumnHoverService.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], ColumnHoverService.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ColumnHoverService.prototype, "init", null);
	    ColumnHoverService = __decorate([
	        context_1.Bean('columnHoverService')
	    ], ColumnHoverService);
	    return ColumnHoverService;
	}(beanStub_1.BeanStub));
	exports.ColumnHoverService = ColumnHoverService;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var componentMetadataProvider_1 = __webpack_require__(85);
	var DefaultCellRenderer = (function () {
	    function DefaultCellRenderer() {
	    }
	    DefaultCellRenderer.prototype.init = function (params) {
	        this.params = params;
	    };
	    DefaultCellRenderer.prototype.refresh = function (params) {
	        this.params = params;
	        //We update params, but still wish to be called on getGui
	        return false;
	    };
	    DefaultCellRenderer.prototype.getGui = function () {
	        var valueToUse = this.params.valueFormatted != null ? this.params.valueFormatted : this.params.value;
	        if (valueToUse == null)
	            return '';
	        return '<span>' + valueToUse + '</span>';
	    };
	    return DefaultCellRenderer;
	}());
	exports.DefaultCellRenderer = DefaultCellRenderer;
	var AgComponentUtils = (function () {
	    function AgComponentUtils() {
	    }
	    AgComponentUtils.prototype.adaptFunction = function (propertyName, hardcodedJsFunction, type, source) {
	        if (hardcodedJsFunction == null)
	            return {
	                component: null,
	                type: type,
	                source: source
	            };
	        var metadata = this.componentMetadataProvider.retrieve(propertyName);
	        if (metadata && metadata.functionAdapter) {
	            return {
	                type: type,
	                component: metadata.functionAdapter(hardcodedJsFunction),
	                source: source
	            };
	        }
	        console.error("It seems like you are providing a function as a component: " + hardcodedJsFunction + ", but this component: [" + propertyName + "] doesnt accept functions");
	        return null;
	    };
	    AgComponentUtils.prototype.adaptCellRendererFunction = function (callback) {
	        var Adapter = (function () {
	            function Adapter() {
	            }
	            Adapter.prototype.refresh = function (params) {
	                return false;
	            };
	            Adapter.prototype.getGui = function () {
	                var callbackResult = callback(this.params);
	                if (callbackResult == null)
	                    return '';
	                if (typeof callbackResult != 'string')
	                    return callbackResult;
	                return callbackResult;
	            };
	            Adapter.prototype.init = function (params) {
	                this.params = params;
	            };
	            return Adapter;
	        }());
	        return Adapter;
	    };
	    AgComponentUtils.prototype.doesImplementIComponent = function (candidate) {
	        if (!candidate)
	            return false;
	        return candidate.prototype && 'getGui' in candidate.prototype;
	    };
	    __decorate([
	        context_1.Autowired("componentMetadataProvider"),
	        __metadata("design:type", componentMetadataProvider_1.ComponentMetadataProvider)
	    ], AgComponentUtils.prototype, "componentMetadataProvider", void 0);
	    AgComponentUtils = __decorate([
	        context_1.Bean("agComponentUtils")
	    ], AgComponentUtils);
	    return AgComponentUtils;
	}());
	exports.AgComponentUtils = AgComponentUtils;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var agComponentUtils_1 = __webpack_require__(84);
	var ComponentMetadataProvider = (function () {
	    function ComponentMetadataProvider() {
	    }
	    ComponentMetadataProvider.prototype.postConstruct = function () {
	        this.componentMetaData = {
	            dateComponent: {
	                mandatoryMethodList: ['getDate', 'setDate'],
	                optionalMethodList: []
	            },
	            headerComponent: {
	                mandatoryMethodList: [],
	                optionalMethodList: []
	            },
	            headerGroupComponent: {
	                mandatoryMethodList: [],
	                optionalMethodList: []
	            },
	            floatingFilterComponent: {
	                mandatoryMethodList: ['onParentModelChanged'],
	                optionalMethodList: ['afterGuiAttached']
	            },
	            floatingFilterWrapperComponent: {
	                mandatoryMethodList: [],
	                optionalMethodList: []
	            },
	            filterComponent: {
	                mandatoryMethodList: ['isFilterActive', 'doesFilterPass', 'getModel', 'setModel'],
	                optionalMethodList: ['afterGuiAttached', 'onNewRowsLoaded', 'getModelAsString', 'onFloatingFilterChanged']
	            },
	            cellRenderer: {
	                mandatoryMethodList: ['refresh'],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            innerRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            fullWidthCellRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            pinnedRowCellRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            },
	            groupRowInnerRenderer: {
	                mandatoryMethodList: [],
	                optionalMethodList: ['afterGuiAttached'],
	                functionAdapter: this.agComponentUtils.adaptCellRendererFunction.bind(this.agComponentUtils)
	            }
	        };
	    };
	    ComponentMetadataProvider.prototype.retrieve = function (name) {
	        return this.componentMetaData[name];
	    };
	    __decorate([
	        context_1.Autowired("agComponentUtils"),
	        __metadata("design:type", agComponentUtils_1.AgComponentUtils)
	    ], ComponentMetadataProvider.prototype, "agComponentUtils", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ComponentMetadataProvider.prototype, "postConstruct", null);
	    ComponentMetadataProvider = __decorate([
	        context_1.Bean("componentMetadataProvider")
	    ], ComponentMetadataProvider);
	    return ComponentMetadataProvider;
	}());
	exports.ComponentMetadataProvider = ComponentMetadataProvider;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(35);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var componentAnnotations_1 = __webpack_require__(48);
	var utils_1 = __webpack_require__(8);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var rowRenderer_1 = __webpack_require__(23);
	var paginationProxy_1 = __webpack_require__(41);
	var PaginationComp = (function (_super) {
	    __extends(PaginationComp, _super);
	    function PaginationComp() {
	        return _super.call(this) || this;
	    }
	    PaginationComp.prototype.postConstruct = function () {
	        this.setTemplate(this.getTemplate());
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_PAGINATION_CHANGED, this.onPaginationChanged.bind(this));
	        this.addDestroyableEventListener(this.btFirst, 'click', this.onBtFirst.bind(this));
	        this.addDestroyableEventListener(this.btLast, 'click', this.onBtLast.bind(this));
	        this.addDestroyableEventListener(this.btNext, 'click', this.onBtNext.bind(this));
	        this.addDestroyableEventListener(this.btPrevious, 'click', this.onBtPrevious.bind(this));
	        this.onPaginationChanged();
	    };
	    PaginationComp.prototype.onPaginationChanged = function () {
	        this.enableOrDisableButtons();
	        this.updateRowLabels();
	        this.setCurrentPageLabel();
	        this.setTotalLabels();
	    };
	    PaginationComp.prototype.setCurrentPageLabel = function () {
	        var currentPage = this.paginationProxy.getCurrentPage();
	        this.lbCurrent.innerHTML = this.formatNumber(currentPage + 1);
	    };
	    PaginationComp.prototype.formatNumber = function (value) {
	        var userFunc = this.gridOptionsWrapper.getPaginationNumberFormatterFunc();
	        if (userFunc) {
	            return userFunc({ value: value });
	        }
	        else {
	            return utils_1._.formatNumberCommas(value);
	        }
	    };
	    PaginationComp.prototype.getTemplate = function () {
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var strPage = localeTextFunc('page', 'Page');
	        var strTo = localeTextFunc('to', 'to');
	        var strOf = localeTextFunc('of', 'of');
	        var strFirst = localeTextFunc('first', 'First');
	        var strPrevious = localeTextFunc('previous', 'Previous');
	        var strNext = localeTextFunc('next', 'Next');
	        var strLast = localeTextFunc('last', 'Last');
	        return "<div class=\"ag-paging-panel ag-font-style\">\n                <span ref=\"eSummaryPanel\" class=\"ag-paging-row-summary-panel\">\n                    <span ref=\"lbFirstRowOnPage\"></span> " + strTo + " <span ref=\"lbLastRowOnPage\"></span> " + strOf + " <span ref=\"lbRecordCount\"></span>\n                </span>\n                <span class=\"ag-paging-page-summary-panel\">\n                    <button class=\"ag-paging-button\" ref=\"btFirst\">" + strFirst + "</button>\n                    <button class=\"ag-paging-button\" ref=\"btPrevious\">" + strPrevious + "</button>\n                    " + strPage + " <span ref=\"lbCurrent\"></span> " + strOf + " <span ref=\"lbTotal\"></span>\n                    <button class=\"ag-paging-button\" ref=\"btNext\">" + strNext + "</button>\n                    <button class=\"ag-paging-button\" ref=\"btLast\">" + strLast + "</button>\n                </span>\n            </div>";
	    };
	    PaginationComp.prototype.onBtNext = function () {
	        this.paginationProxy.goToNextPage();
	    };
	    PaginationComp.prototype.onBtPrevious = function () {
	        this.paginationProxy.goToPreviousPage();
	    };
	    PaginationComp.prototype.onBtFirst = function () {
	        this.paginationProxy.goToFirstPage();
	    };
	    PaginationComp.prototype.onBtLast = function () {
	        this.paginationProxy.goToLastPage();
	    };
	    PaginationComp.prototype.enableOrDisableButtons = function () {
	        var currentPage = this.paginationProxy.getCurrentPage();
	        var maxRowFound = this.paginationProxy.isLastPageFound();
	        var totalPages = this.paginationProxy.getTotalPages();
	        var disablePreviousAndFirst = currentPage === 0;
	        this.btPrevious.disabled = disablePreviousAndFirst;
	        this.btFirst.disabled = disablePreviousAndFirst;
	        var zeroPagesToDisplay = this.isZeroPagesToDisplay();
	        var onLastPage = maxRowFound && currentPage === (totalPages - 1);
	        var disableNext = onLastPage || zeroPagesToDisplay;
	        this.btNext.disabled = disableNext;
	        var disableLast = !maxRowFound || zeroPagesToDisplay || currentPage === (totalPages - 1);
	        this.btLast.disabled = disableLast;
	    };
	    PaginationComp.prototype.updateRowLabels = function () {
	        var currentPage = this.paginationProxy.getCurrentPage();
	        var pageSize = this.paginationProxy.getPageSize();
	        var maxRowFound = this.paginationProxy.isLastPageFound();
	        var rowCount = this.paginationProxy.isLastPageFound() ?
	            this.paginationProxy.getTotalRowCount() : null;
	        var startRow;
	        var endRow;
	        if (this.isZeroPagesToDisplay()) {
	            startRow = 0;
	            endRow = 0;
	        }
	        else {
	            startRow = (pageSize * currentPage) + 1;
	            endRow = startRow + pageSize - 1;
	            if (maxRowFound && endRow > rowCount) {
	                endRow = rowCount;
	            }
	        }
	        this.lbFirstRowOnPage.innerHTML = this.formatNumber(startRow);
	        this.lbLastRowOnPage.innerHTML = this.formatNumber(endRow);
	    };
	    PaginationComp.prototype.isZeroPagesToDisplay = function () {
	        var maxRowFound = this.paginationProxy.isLastPageFound();
	        var totalPages = this.paginationProxy.getTotalPages();
	        return maxRowFound && totalPages === 0;
	    };
	    PaginationComp.prototype.setTotalLabels = function () {
	        var lastPageFound = this.paginationProxy.isLastPageFound();
	        var totalPages = this.paginationProxy.getTotalPages();
	        var rowCount = this.paginationProxy.isLastPageFound() ?
	            this.paginationProxy.getTotalRowCount() : null;
	        if (lastPageFound) {
	            this.lbTotal.innerHTML = this.formatNumber(totalPages);
	            this.lbRecordCount.innerHTML = this.formatNumber(rowCount);
	        }
	        else {
	            var moreText = this.gridOptionsWrapper.getLocaleTextFunc()('more', 'more');
	            this.lbTotal.innerHTML = moreText;
	            this.lbRecordCount.innerHTML = moreText;
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], PaginationComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], PaginationComp.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('paginationProxy'),
	        __metadata("design:type", paginationProxy_1.PaginationProxy)
	    ], PaginationComp.prototype, "paginationProxy", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], PaginationComp.prototype, "rowRenderer", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('btFirst'),
	        __metadata("design:type", HTMLButtonElement)
	    ], PaginationComp.prototype, "btFirst", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('btPrevious'),
	        __metadata("design:type", HTMLButtonElement)
	    ], PaginationComp.prototype, "btPrevious", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('btNext'),
	        __metadata("design:type", HTMLButtonElement)
	    ], PaginationComp.prototype, "btNext", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('btLast'),
	        __metadata("design:type", HTMLButtonElement)
	    ], PaginationComp.prototype, "btLast", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('lbRecordCount'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbRecordCount", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('lbFirstRowOnPage'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbFirstRowOnPage", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('lbLastRowOnPage'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbLastRowOnPage", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eSummaryPanel'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "eSummaryPanel", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('lbCurrent'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbCurrent", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('lbTotal'),
	        __metadata("design:type", Object)
	    ], PaginationComp.prototype, "lbTotal", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], PaginationComp.prototype, "postConstruct", null);
	    return PaginationComp;
	}(component_1.Component));
	exports.PaginationComp = PaginationComp;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var constants_1 = __webpack_require__(9);
	var columnController_1 = __webpack_require__(15);
	var utils_1 = __webpack_require__(8);
	var gridRow_1 = __webpack_require__(34);
	var gridCell_1 = __webpack_require__(33);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var pinnedRowModel_1 = __webpack_require__(44);
	var CellNavigationService = (function () {
	    function CellNavigationService() {
	    }
	    CellNavigationService.prototype.getNextCellToFocus = function (key, lastCellToFocus) {
	        switch (key) {
	            case constants_1.Constants.KEY_UP: return this.getCellAbove(lastCellToFocus);
	            case constants_1.Constants.KEY_DOWN: return this.getCellBelow(lastCellToFocus);
	            case constants_1.Constants.KEY_RIGHT:
	                if (this.gridOptionsWrapper.isEnableRtl()) {
	                    return this.getCellToLeft(lastCellToFocus);
	                }
	                else {
	                    return this.getCellToRight(lastCellToFocus);
	                }
	            case constants_1.Constants.KEY_LEFT:
	                if (this.gridOptionsWrapper.isEnableRtl()) {
	                    return this.getCellToRight(lastCellToFocus);
	                }
	                else {
	                    return this.getCellToLeft(lastCellToFocus);
	                }
	            default: console.log('ag-Grid: unknown key for navigation ' + key);
	        }
	    };
	    CellNavigationService.prototype.getCellToLeft = function (lastCell) {
	        var colToLeft = this.columnController.getDisplayedColBefore(lastCell.column);
	        if (!colToLeft) {
	            return null;
	        }
	        else {
	            var gridCellDef = { rowIndex: lastCell.rowIndex, column: colToLeft, floating: lastCell.floating };
	            return new gridCell_1.GridCell(gridCellDef);
	        }
	    };
	    CellNavigationService.prototype.getCellToRight = function (lastCell) {
	        var colToRight = this.columnController.getDisplayedColAfter(lastCell.column);
	        // if already on right, do nothing
	        if (!colToRight) {
	            return null;
	        }
	        else {
	            var gridCellDef = { rowIndex: lastCell.rowIndex, column: colToRight, floating: lastCell.floating };
	            return new gridCell_1.GridCell(gridCellDef);
	        }
	    };
	    CellNavigationService.prototype.getRowBelow = function (lastRow) {
	        // if already on top row, do nothing
	        if (this.isLastRowInContainer(lastRow)) {
	            if (lastRow.isFloatingBottom()) {
	                return null;
	            }
	            else if (lastRow.isNotFloating()) {
	                if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_BOTTOM)) {
	                    return new gridRow_1.GridRow(0, constants_1.Constants.PINNED_BOTTOM);
	                }
	                else {
	                    return null;
	                }
	            }
	            else {
	                if (this.rowModel.isRowsToRender()) {
	                    return new gridRow_1.GridRow(0, null);
	                }
	                else if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_BOTTOM)) {
	                    return new gridRow_1.GridRow(0, constants_1.Constants.PINNED_BOTTOM);
	                }
	                else {
	                    return null;
	                }
	            }
	        }
	        else {
	            return new gridRow_1.GridRow(lastRow.rowIndex + 1, lastRow.floating);
	        }
	    };
	    CellNavigationService.prototype.getCellBelow = function (lastCell) {
	        var rowBelow = this.getRowBelow(lastCell.getGridRow());
	        if (rowBelow) {
	            var gridCellDef = { rowIndex: rowBelow.rowIndex, column: lastCell.column, floating: rowBelow.floating };
	            return new gridCell_1.GridCell(gridCellDef);
	        }
	        else {
	            return null;
	        }
	    };
	    CellNavigationService.prototype.isLastRowInContainer = function (gridRow) {
	        if (gridRow.isFloatingTop()) {
	            var lastTopIndex = this.pinnedRowModel.getPinnedTopRowData().length - 1;
	            return lastTopIndex <= gridRow.rowIndex;
	        }
	        else if (gridRow.isFloatingBottom()) {
	            var lastBottomIndex = this.pinnedRowModel.getPinnedBottomRowData().length - 1;
	            return lastBottomIndex <= gridRow.rowIndex;
	        }
	        else {
	            var lastBodyIndex = this.rowModel.getPageLastRow();
	            return lastBodyIndex <= gridRow.rowIndex;
	        }
	    };
	    CellNavigationService.prototype.getRowAbove = function (lastRow) {
	        // if already on top row, do nothing
	        if (lastRow.rowIndex === 0) {
	            if (lastRow.isFloatingTop()) {
	                return null;
	            }
	            else if (lastRow.isNotFloating()) {
	                if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_TOP)) {
	                    return this.getLastFloatingTopRow();
	                }
	                else {
	                    return null;
	                }
	            }
	            else {
	                // last floating bottom
	                if (this.rowModel.isRowsToRender()) {
	                    return this.getLastBodyCell();
	                }
	                else if (this.pinnedRowModel.isRowsToRender(constants_1.Constants.PINNED_TOP)) {
	                    return this.getLastFloatingTopRow();
	                }
	                else {
	                    return null;
	                }
	            }
	        }
	        else {
	            return new gridRow_1.GridRow(lastRow.rowIndex - 1, lastRow.floating);
	        }
	    };
	    CellNavigationService.prototype.getCellAbove = function (lastCell) {
	        var rowAbove = this.getRowAbove(lastCell.getGridRow());
	        if (rowAbove) {
	            var gridCellDef = { rowIndex: rowAbove.rowIndex, column: lastCell.column, floating: rowAbove.floating };
	            return new gridCell_1.GridCell(gridCellDef);
	        }
	        else {
	            return null;
	        }
	    };
	    CellNavigationService.prototype.getLastBodyCell = function () {
	        var lastBodyRow = this.rowModel.getPageLastRow();
	        return new gridRow_1.GridRow(lastBodyRow, null);
	    };
	    CellNavigationService.prototype.getLastFloatingTopRow = function () {
	        var lastFloatingRow = this.pinnedRowModel.getPinnedTopRowData().length - 1;
	        return new gridRow_1.GridRow(lastFloatingRow, constants_1.Constants.PINNED_TOP);
	    };
	    CellNavigationService.prototype.getNextTabbedCell = function (gridCell, backwards) {
	        if (backwards) {
	            return this.getNextTabbedCellBackwards(gridCell);
	        }
	        else {
	            return this.getNextTabbedCellForwards(gridCell);
	        }
	    };
	    CellNavigationService.prototype.getNextTabbedCellForwards = function (gridCell) {
	        var displayedColumns = this.columnController.getAllDisplayedColumns();
	        var newRowIndex = gridCell.rowIndex;
	        var newFloating = gridCell.floating;
	        // move along to the next cell
	        var newColumn = this.columnController.getDisplayedColAfter(gridCell.column);
	        // check if end of the row, and if so, go forward a row
	        if (!newColumn) {
	            newColumn = displayedColumns[0];
	            var rowBelow = this.getRowBelow(gridCell.getGridRow());
	            if (utils_1.Utils.missing(rowBelow)) {
	                return;
	            }
	            newRowIndex = rowBelow.rowIndex;
	            newFloating = rowBelow.floating;
	        }
	        var gridCellDef = { rowIndex: newRowIndex, column: newColumn, floating: newFloating };
	        return new gridCell_1.GridCell(gridCellDef);
	    };
	    CellNavigationService.prototype.getNextTabbedCellBackwards = function (gridCell) {
	        var displayedColumns = this.columnController.getAllDisplayedColumns();
	        var newRowIndex = gridCell.rowIndex;
	        var newFloating = gridCell.floating;
	        // move along to the next cell
	        var newColumn = this.columnController.getDisplayedColBefore(gridCell.column);
	        // check if end of the row, and if so, go forward a row
	        if (!newColumn) {
	            newColumn = displayedColumns[displayedColumns.length - 1];
	            var rowAbove = this.getRowAbove(gridCell.getGridRow());
	            if (utils_1.Utils.missing(rowAbove)) {
	                return;
	            }
	            newRowIndex = rowAbove.rowIndex;
	            newFloating = rowAbove.floating;
	        }
	        var gridCellDef = { rowIndex: newRowIndex, column: newColumn, floating: newFloating };
	        return new gridCell_1.GridCell(gridCellDef);
	    };
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], CellNavigationService.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], CellNavigationService.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('pinnedRowModel'),
	        __metadata("design:type", pinnedRowModel_1.PinnedRowModel)
	    ], CellNavigationService.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], CellNavigationService.prototype, "gridOptionsWrapper", void 0);
	    CellNavigationService = __decorate([
	        context_1.Bean('cellNavigationService')
	    ], CellNavigationService);
	    return CellNavigationService;
	}());
	exports.CellNavigationService = CellNavigationService;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var columnController_1 = __webpack_require__(15);
	var gridPanel_1 = __webpack_require__(24);
	var column_1 = __webpack_require__(17);
	var context_1 = __webpack_require__(7);
	var headerContainer_1 = __webpack_require__(89);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var scrollVisibleService_1 = __webpack_require__(39);
	var HeaderRenderer = (function () {
	    function HeaderRenderer() {
	    }
	    HeaderRenderer.prototype.init = function () {
	        var _this = this;
	        this.eHeaderViewport = this.gridPanel.getHeaderViewport();
	        this.eRoot = this.gridPanel.getRoot();
	        this.eHeaderOverlay = this.gridPanel.getHeaderOverlay();
	        this.centerContainer = new headerContainer_1.HeaderContainer(this.gridPanel.getHeaderContainer(), this.gridPanel.getHeaderViewport(), this.eRoot, null);
	        this.childContainers = [this.centerContainer];
	        if (!this.gridOptionsWrapper.isForPrint()) {
	            this.pinnedLeftContainer = new headerContainer_1.HeaderContainer(this.gridPanel.getPinnedLeftHeader(), null, this.eRoot, column_1.Column.PINNED_LEFT);
	            this.pinnedRightContainer = new headerContainer_1.HeaderContainer(this.gridPanel.getPinnedRightHeader(), null, this.eRoot, column_1.Column.PINNED_RIGHT);
	            this.childContainers.push(this.pinnedLeftContainer);
	            this.childContainers.push(this.pinnedRightContainer);
	        }
	        this.childContainers.forEach(function (container) { return _this.context.wireBean(container); });
	        // when grid columns change, it means the number of rows in the header has changed and it's all new columns
	        this.eventService.addEventListener(events_1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
	        // shotgun way to get labels to change, eg from sum(amount) to avg(amount)
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.refreshHeader.bind(this));
	        // for resized, the individual cells take care of this, so don't need to refresh everything
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_RESIZED, this.setPinnedColContainerWidth.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.setPinnedColContainerWidth.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
	        if (this.columnController.isReady()) {
	            this.refreshHeader();
	        }
	    };
	    HeaderRenderer.prototype.onScrollVisibilityChanged = function () {
	        this.setPinnedColContainerWidth();
	    };
	    HeaderRenderer.prototype.forEachHeaderElement = function (callback) {
	        this.childContainers.forEach(function (childContainer) { return childContainer.forEachHeaderElement(callback); });
	    };
	    HeaderRenderer.prototype.destroy = function () {
	        this.childContainers.forEach(function (container) { return container.destroy(); });
	    };
	    HeaderRenderer.prototype.onGridColumnsChanged = function () {
	        this.setHeight();
	    };
	    HeaderRenderer.prototype.refreshHeader = function () {
	        this.setHeight();
	        this.childContainers.forEach(function (container) { return container.refresh(); });
	        this.setPinnedColContainerWidth();
	    };
	    HeaderRenderer.prototype.setHeight = function () {
	        // if forPrint, overlay is missing
	        if (this.eHeaderOverlay) {
	            var rowHeight = this.gridOptionsWrapper.getHeaderHeight();
	            // we can probably get rid of this when we no longer need the overlay
	            var dept = this.columnController.getHeaderRowCount();
	            this.eHeaderOverlay.style.height = rowHeight + 'px';
	            this.eHeaderOverlay.style.top = ((dept - 1) * rowHeight) + 'px';
	        }
	    };
	    HeaderRenderer.prototype.setPinnedColContainerWidth = function () {
	        // pinned col doesn't exist when doing forPrint
	        if (this.gridOptionsWrapper.isForPrint()) {
	            return;
	        }
	        var pinnedLeftWidthWithScroll = this.scrollVisibleService.getPinnedLeftWithScrollWidth();
	        var pinnedRightWidthWithScroll = this.scrollVisibleService.getPinnedRightWithScrollWidth();
	        this.eHeaderViewport.style.marginLeft = pinnedLeftWidthWithScroll + 'px';
	        this.eHeaderViewport.style.marginRight = pinnedRightWidthWithScroll + 'px';
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderRenderer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], HeaderRenderer.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], HeaderRenderer.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], HeaderRenderer.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], HeaderRenderer.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('scrollVisibleService'),
	        __metadata("design:type", scrollVisibleService_1.ScrollVisibleService)
	    ], HeaderRenderer.prototype, "scrollVisibleService", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderRenderer.prototype, "init", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderRenderer.prototype, "destroy", null);
	    HeaderRenderer = __decorate([
	        context_1.Bean('headerRenderer')
	    ], HeaderRenderer);
	    return HeaderRenderer;
	}());
	exports.HeaderRenderer = HeaderRenderer;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var context_1 = __webpack_require__(7);
	var dragAndDropService_1 = __webpack_require__(90);
	var columnController_1 = __webpack_require__(15);
	var gridPanel_1 = __webpack_require__(24);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var headerRowComp_1 = __webpack_require__(92);
	var bodyDropTarget_1 = __webpack_require__(101);
	var column_1 = __webpack_require__(17);
	var scrollVisibleService_1 = __webpack_require__(39);
	var HeaderContainer = (function () {
	    function HeaderContainer(eContainer, eViewport, eRoot, pinned) {
	        this.headerRowComps = [];
	        this.eContainer = eContainer;
	        this.eRoot = eRoot;
	        this.pinned = pinned;
	        this.eViewport = eViewport;
	    }
	    HeaderContainer.prototype.forEachHeaderElement = function (callback) {
	        this.headerRowComps.forEach(function (headerRowComp) { return headerRowComp.forEachHeaderElement(callback); });
	    };
	    HeaderContainer.prototype.init = function () {
	        this.setupDragAndDrop();
	        // if value changes, then if not pivoting, we at least need to change the label eg from sum() to avg(),
	        // if pivoting, then the columns have changed
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnValueChanged.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
	        this.eventService.addEventListener(events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	    };
	    // if row group changes, that means we may need to add aggFunc's to the column headers,
	    // if the grid goes from no aggregation (ie no grouping) to grouping
	    HeaderContainer.prototype.onColumnRowGroupChanged = function () {
	        this.onGridColumnsChanged();
	    };
	    // if the agg func of a column changes, then we may need to update the agg func in columns header
	    HeaderContainer.prototype.onColumnValueChanged = function () {
	        this.onGridColumnsChanged();
	    };
	    HeaderContainer.prototype.onColumnResized = function () {
	        this.setWidthIfPinnedContainer();
	    };
	    HeaderContainer.prototype.onDisplayedColumnsChanged = function () {
	        this.setWidthIfPinnedContainer();
	    };
	    HeaderContainer.prototype.onScrollVisibilityChanged = function () {
	        this.setWidthIfPinnedContainer();
	    };
	    HeaderContainer.prototype.setWidthIfPinnedContainer = function () {
	        if (this.pinned === column_1.Column.PINNED_LEFT) {
	            var pinnedLeftWidthWithScroll = this.scrollVisibleService.getPinnedLeftWithScrollWidth();
	            this.eContainer.style.width = pinnedLeftWidthWithScroll + 'px';
	        }
	        else if (this.pinned === column_1.Column.PINNED_RIGHT) {
	            var pinnedRightWidthWithScroll = this.scrollVisibleService.getPinnedRightWithScrollWidth();
	            this.eContainer.style.width = pinnedRightWidthWithScroll + 'px';
	        }
	    };
	    HeaderContainer.prototype.destroy = function () {
	        this.removeHeaderRowComps();
	    };
	    // grid cols have changed - this also means the number of rows in the header can have
	    // changed. so we remove all the old rows and insert new ones for a complete refresh
	    HeaderContainer.prototype.onGridColumnsChanged = function () {
	        this.removeHeaderRowComps();
	        this.createHeaderRowComps();
	    };
	    // we expose this for gridOptions.api.refreshHeader() to call
	    HeaderContainer.prototype.refresh = function () {
	        this.onGridColumnsChanged();
	    };
	    HeaderContainer.prototype.setupDragAndDrop = function () {
	        var dropContainer = this.eViewport ? this.eViewport : this.eContainer;
	        var bodyDropTarget = new bodyDropTarget_1.BodyDropTarget(this.pinned, dropContainer);
	        this.context.wireBean(bodyDropTarget);
	    };
	    HeaderContainer.prototype.removeHeaderRowComps = function () {
	        this.headerRowComps.forEach(function (headerRowComp) {
	            headerRowComp.destroy();
	        });
	        this.headerRowComps.length = 0;
	        utils_1.Utils.removeAllChildren(this.eContainer);
	    };
	    HeaderContainer.prototype.createHeaderRowComps = function () {
	        // if we are displaying header groups, then we have many rows here.
	        // go through each row of the header, one by one.
	        var rowCount = this.columnController.getHeaderRowCount();
	        for (var dept = 0; dept < rowCount; dept++) {
	            var groupRow = dept !== (rowCount - 1);
	            var type = groupRow ? headerRowComp_1.HeaderRowType.COLUMN_GROUP : headerRowComp_1.HeaderRowType.COLUMN;
	            var headerRowComp = new headerRowComp_1.HeaderRowComp(dept, type, this.pinned, this.eRoot, this.dropTarget);
	            this.context.wireBean(headerRowComp);
	            this.headerRowComps.push(headerRowComp);
	            this.eContainer.appendChild(headerRowComp.getHtmlElement());
	        }
	        var includeFloatingFilterRow = this.gridOptionsWrapper.isFloatingFilter() && !this.columnController.isPivotMode();
	        if (includeFloatingFilterRow) {
	            var headerRowComp = new headerRowComp_1.HeaderRowComp(rowCount, headerRowComp_1.HeaderRowType.FLOATING_FILTER, this.pinned, this.eRoot, this.dropTarget);
	            this.context.wireBean(headerRowComp);
	            this.headerRowComps.push(headerRowComp);
	            this.eContainer.appendChild(headerRowComp.getHtmlElement());
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderContainer.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], HeaderContainer.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], HeaderContainer.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService_1.DragAndDropService)
	    ], HeaderContainer.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], HeaderContainer.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], HeaderContainer.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], HeaderContainer.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('scrollVisibleService'),
	        __metadata("design:type", scrollVisibleService_1.ScrollVisibleService)
	    ], HeaderContainer.prototype, "scrollVisibleService", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderContainer.prototype, "init", null);
	    return HeaderContainer;
	}());
	exports.HeaderContainer = HeaderContainer;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var logger_1 = __webpack_require__(6);
	var context_1 = __webpack_require__(7);
	var utils_1 = __webpack_require__(8);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var dragService_1 = __webpack_require__(26);
	var columnController_1 = __webpack_require__(15);
	var environment_1 = __webpack_require__(91);
	var DragSourceType;
	(function (DragSourceType) {
	    DragSourceType[DragSourceType["ToolPanel"] = 0] = "ToolPanel";
	    DragSourceType[DragSourceType["HeaderCell"] = 1] = "HeaderCell";
	})(DragSourceType = exports.DragSourceType || (exports.DragSourceType = {}));
	var VDirection;
	(function (VDirection) {
	    VDirection[VDirection["Up"] = 0] = "Up";
	    VDirection[VDirection["Down"] = 1] = "Down";
	})(VDirection = exports.VDirection || (exports.VDirection = {}));
	var HDirection;
	(function (HDirection) {
	    HDirection[HDirection["Left"] = 0] = "Left";
	    HDirection[HDirection["Right"] = 1] = "Right";
	})(HDirection = exports.HDirection || (exports.HDirection = {}));
	var DragAndDropService = (function () {
	    function DragAndDropService() {
	        this.dragSourceAndParamsList = [];
	        this.dropTargets = [];
	    }
	    DragAndDropService_1 = DragAndDropService;
	    DragAndDropService.prototype.init = function () {
	        this.ePinnedIcon = utils_1.Utils.createIcon('columnMovePin', this.gridOptionsWrapper, null);
	        this.ePlusIcon = utils_1.Utils.createIcon('columnMoveAdd', this.gridOptionsWrapper, null);
	        this.eHiddenIcon = utils_1.Utils.createIcon('columnMoveHide', this.gridOptionsWrapper, null);
	        this.eMoveIcon = utils_1.Utils.createIcon('columnMoveMove', this.gridOptionsWrapper, null);
	        this.eLeftIcon = utils_1.Utils.createIcon('columnMoveLeft', this.gridOptionsWrapper, null);
	        this.eRightIcon = utils_1.Utils.createIcon('columnMoveRight', this.gridOptionsWrapper, null);
	        this.eGroupIcon = utils_1.Utils.createIcon('columnMoveGroup', this.gridOptionsWrapper, null);
	        this.eAggregateIcon = utils_1.Utils.createIcon('columnMoveValue', this.gridOptionsWrapper, null);
	        this.ePivotIcon = utils_1.Utils.createIcon('columnMovePivot', this.gridOptionsWrapper, null);
	        this.eDropNotAllowedIcon = utils_1.Utils.createIcon('dropNotAllowed', this.gridOptionsWrapper, null);
	    };
	    DragAndDropService.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('OldToolPanelDragAndDropService');
	    };
	    DragAndDropService.prototype.addDragSource = function (dragSource, allowTouch) {
	        if (allowTouch === void 0) { allowTouch = false; }
	        var params = {
	            eElement: dragSource.eElement,
	            onDragStart: this.onDragStart.bind(this, dragSource),
	            onDragStop: this.onDragStop.bind(this),
	            onDragging: this.onDragging.bind(this)
	        };
	        this.dragSourceAndParamsList.push({ params: params, dragSource: dragSource });
	        this.dragService.addDragSource(params, allowTouch);
	    };
	    DragAndDropService.prototype.removeDragSource = function (dragSource) {
	        var sourceAndParams = utils_1.Utils.find(this.dragSourceAndParamsList, function (item) { return item.dragSource === dragSource; });
	        if (sourceAndParams) {
	            this.dragService.removeDragSource(sourceAndParams.params);
	            utils_1.Utils.removeFromArray(this.dragSourceAndParamsList, sourceAndParams);
	        }
	    };
	    DragAndDropService.prototype.destroy = function () {
	        var _this = this;
	        this.dragSourceAndParamsList.forEach(function (sourceAndParams) {
	            _this.dragService.removeDragSource(sourceAndParams.params);
	        });
	        this.dragSourceAndParamsList.length = 0;
	    };
	    DragAndDropService.prototype.nudge = function () {
	        if (this.dragging) {
	            this.onDragging(this.eventLastTime, true);
	        }
	    };
	    DragAndDropService.prototype.onDragStart = function (dragSource, mouseEvent) {
	        this.dragging = true;
	        this.dragSource = dragSource;
	        this.eventLastTime = mouseEvent;
	        this.dragItem = this.dragSource.dragItemCallback();
	        this.dragItem.columns.forEach(function (column) { return column.setMoving(true); });
	        this.lastDropTarget = this.dragSource.dragSourceDropTarget;
	        this.createGhost();
	    };
	    DragAndDropService.prototype.onDragStop = function (mouseEvent) {
	        this.eventLastTime = null;
	        this.dragging = false;
	        this.dragItem.columns.forEach(function (column) { return column.setMoving(false); });
	        if (this.lastDropTarget && this.lastDropTarget.onDragStop) {
	            var draggingEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, null, null, false);
	            this.lastDropTarget.onDragStop(draggingEvent);
	        }
	        this.lastDropTarget = null;
	        this.dragItem = null;
	        this.removeGhost();
	    };
	    DragAndDropService.prototype.onDragging = function (mouseEvent, fromNudge) {
	        var hDirection = this.workOutHDirection(mouseEvent);
	        var vDirection = this.workOutVDirection(mouseEvent);
	        this.eventLastTime = mouseEvent;
	        this.positionGhost(mouseEvent);
	        // check if mouseEvent intersects with any of the drop targets
	        var dropTarget = utils_1.Utils.find(this.dropTargets, this.isMouseOnDropTarget.bind(this, mouseEvent));
	        if (dropTarget !== this.lastDropTarget) {
	            this.leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);
	            this.enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
	            this.lastDropTarget = dropTarget;
	        }
	        else if (dropTarget) {
	            var draggingEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
	            dropTarget.onDragging(draggingEvent);
	        }
	    };
	    DragAndDropService.prototype.enterDragTargetIfExists = function (dropTarget, mouseEvent, hDirection, vDirection, fromNudge) {
	        if (!dropTarget) {
	            return;
	        }
	        var dragEnterEvent = this.createDropTargetEvent(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
	        dropTarget.onDragEnter(dragEnterEvent);
	        this.setGhostIcon(dropTarget.getIconName ? dropTarget.getIconName() : null);
	    };
	    DragAndDropService.prototype.leaveLastTargetIfExists = function (mouseEvent, hDirection, vDirection, fromNudge) {
	        if (!this.lastDropTarget) {
	            return;
	        }
	        var dragLeaveEvent = this.createDropTargetEvent(this.lastDropTarget, mouseEvent, hDirection, vDirection, fromNudge);
	        this.lastDropTarget.onDragLeave(dragLeaveEvent);
	        this.setGhostIcon(null);
	    };
	    DragAndDropService.prototype.getAllContainersFromDropTarget = function (dropTarget) {
	        var containers = [dropTarget.getContainer()];
	        var secondaryContainers = dropTarget.getSecondaryContainers ? dropTarget.getSecondaryContainers() : null;
	        if (secondaryContainers) {
	            containers = containers.concat(secondaryContainers);
	        }
	        return containers;
	    };
	    // checks if the mouse is on the drop target. it checks eContainer and eSecondaryContainers
	    DragAndDropService.prototype.isMouseOnDropTarget = function (mouseEvent, dropTarget) {
	        var allContainers = this.getAllContainersFromDropTarget(dropTarget);
	        var gotMatch = false;
	        allContainers.forEach(function (eContainer) {
	            if (!eContainer) {
	                return;
	            } // secondary can be missing
	            var rect = eContainer.getBoundingClientRect();
	            // if element is not visible, then width and height are zero
	            if (rect.width === 0 || rect.height === 0) {
	                return;
	            }
	            var horizontalFit = mouseEvent.clientX >= rect.left && mouseEvent.clientX <= rect.right;
	            var verticalFit = mouseEvent.clientY >= rect.top && mouseEvent.clientY <= rect.bottom;
	            //console.log(`rect.width = ${rect.width} || rect.height = ${rect.height} ## verticalFit = ${verticalFit}, horizontalFit = ${horizontalFit}, `);
	            if (horizontalFit && verticalFit) {
	                gotMatch = true;
	            }
	        });
	        return gotMatch;
	    };
	    DragAndDropService.prototype.addDropTarget = function (dropTarget) {
	        this.dropTargets.push(dropTarget);
	    };
	    DragAndDropService.prototype.workOutHDirection = function (event) {
	        if (this.eventLastTime.clientX > event.clientX) {
	            return HDirection.Left;
	        }
	        else if (this.eventLastTime.clientX < event.clientX) {
	            return HDirection.Right;
	        }
	        else {
	            return null;
	        }
	    };
	    DragAndDropService.prototype.workOutVDirection = function (event) {
	        if (this.eventLastTime.clientY > event.clientY) {
	            return VDirection.Up;
	        }
	        else if (this.eventLastTime.clientY < event.clientY) {
	            return VDirection.Down;
	        }
	        else {
	            return null;
	        }
	    };
	    DragAndDropService.prototype.createDropTargetEvent = function (dropTarget, event, hDirection, vDirection, fromNudge) {
	        // localise x and y to the target component
	        var rect = dropTarget.getContainer().getBoundingClientRect();
	        var x = event.clientX - rect.left;
	        var y = event.clientY - rect.top;
	        var dropTargetEvent = {
	            event: event,
	            x: x,
	            y: y,
	            vDirection: vDirection,
	            hDirection: hDirection,
	            dragSource: this.dragSource,
	            fromNudge: fromNudge,
	            dragItem: this.dragItem
	        };
	        return dropTargetEvent;
	    };
	    DragAndDropService.prototype.positionGhost = function (event) {
	        var ghostRect = this.eGhost.getBoundingClientRect();
	        var ghostHeight = ghostRect.height;
	        // for some reason, without the '-2', it still overlapped by 1 or 2 pixels, which
	        // then brought in scrollbars to the browser. no idea why, but putting in -2 here
	        // works around it which is good enough for me.
	        var browserWidth = utils_1.Utils.getBodyWidth() - 2;
	        var browserHeight = utils_1.Utils.getBodyHeight() - 2;
	        // put ghost vertically in middle of cursor
	        var top = event.pageY - (ghostHeight / 2);
	        // horizontally, place cursor just right of icon
	        var left = event.pageX - 30;
	        var usrDocument = this.gridOptionsWrapper.getDocument();
	        var windowScrollY = window.pageYOffset || usrDocument.documentElement.scrollTop;
	        var windowScrollX = window.pageXOffset || usrDocument.documentElement.scrollLeft;
	        // check ghost is not positioned outside of the browser
	        if (browserWidth > 0) {
	            if ((left + this.eGhost.clientWidth) > (browserWidth + windowScrollX)) {
	                left = browserWidth + windowScrollX - this.eGhost.clientWidth;
	            }
	        }
	        if (left < 0) {
	            left = 0;
	        }
	        if (browserHeight > 0) {
	            if ((top + this.eGhost.clientHeight) > (browserHeight + windowScrollY)) {
	                top = browserHeight + windowScrollY - this.eGhost.clientHeight;
	            }
	        }
	        if (top < 0) {
	            top = 0;
	        }
	        this.eGhost.style.left = left + 'px';
	        this.eGhost.style.top = top + 'px';
	    };
	    DragAndDropService.prototype.removeGhost = function () {
	        if (this.eGhost && this.eGhostParent) {
	            this.eGhostParent.removeChild(this.eGhost);
	        }
	        this.eGhost = null;
	    };
	    DragAndDropService.prototype.createGhost = function () {
	        this.eGhost = utils_1.Utils.loadTemplate(DragAndDropService_1.GHOST_TEMPLATE);
	        this.eGhost.classList.add(this.environment.getTheme());
	        this.eGhostIcon = this.eGhost.querySelector('.ag-dnd-ghost-icon');
	        this.setGhostIcon(null);
	        var eText = this.eGhost.querySelector('.ag-dnd-ghost-label');
	        eText.innerHTML = this.dragSource.dragItemName;
	        this.eGhost.style.height = '25px';
	        this.eGhost.style.top = '20px';
	        this.eGhost.style.left = '20px';
	        var usrDocument = this.gridOptionsWrapper.getDocument();
	        this.eGhostParent = usrDocument.querySelector('body');
	        if (!this.eGhostParent) {
	            console.warn('ag-Grid: could not find document body, it is needed for dragging columns');
	        }
	        else {
	            this.eGhostParent.appendChild(this.eGhost);
	        }
	    };
	    DragAndDropService.prototype.setGhostIcon = function (iconName, shake) {
	        if (shake === void 0) { shake = false; }
	        utils_1.Utils.removeAllChildren(this.eGhostIcon);
	        var eIcon;
	        switch (iconName) {
	            case DragAndDropService_1.ICON_ADD:
	                eIcon = this.ePlusIcon;
	                break;
	            case DragAndDropService_1.ICON_PINNED:
	                eIcon = this.ePinnedIcon;
	                break;
	            case DragAndDropService_1.ICON_MOVE:
	                eIcon = this.eMoveIcon;
	                break;
	            case DragAndDropService_1.ICON_LEFT:
	                eIcon = this.eLeftIcon;
	                break;
	            case DragAndDropService_1.ICON_RIGHT:
	                eIcon = this.eRightIcon;
	                break;
	            case DragAndDropService_1.ICON_GROUP:
	                eIcon = this.eGroupIcon;
	                break;
	            case DragAndDropService_1.ICON_AGGREGATE:
	                eIcon = this.eAggregateIcon;
	                break;
	            case DragAndDropService_1.ICON_PIVOT:
	                eIcon = this.ePivotIcon;
	                break;
	            case DragAndDropService_1.ICON_NOT_ALLOWED:
	                eIcon = this.eDropNotAllowedIcon;
	                break;
	            default:
	                eIcon = this.eHiddenIcon;
	                break;
	        }
	        this.eGhostIcon.appendChild(eIcon);
	        utils_1.Utils.addOrRemoveCssClass(this.eGhostIcon, 'ag-shake-left-to-right', shake);
	    };
	    DragAndDropService.ICON_PINNED = 'pinned';
	    DragAndDropService.ICON_ADD = 'add';
	    DragAndDropService.ICON_MOVE = 'move';
	    DragAndDropService.ICON_LEFT = 'left';
	    DragAndDropService.ICON_RIGHT = 'right';
	    DragAndDropService.ICON_GROUP = 'group';
	    DragAndDropService.ICON_AGGREGATE = 'aggregate';
	    DragAndDropService.ICON_PIVOT = 'pivot';
	    DragAndDropService.ICON_NOT_ALLOWED = 'notAllowed';
	    DragAndDropService.GHOST_TEMPLATE = '<div class="ag-dnd-ghost">' +
	        '  <span class="ag-dnd-ghost-icon ag-shake-left-to-right"></span>' +
	        '  <div class="ag-dnd-ghost-label">' +
	        '  </div>' +
	        '</div>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], DragAndDropService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('dragService'),
	        __metadata("design:type", dragService_1.DragService)
	    ], DragAndDropService.prototype, "dragService", void 0);
	    __decorate([
	        context_1.Autowired('environment'),
	        __metadata("design:type", environment_1.Environment)
	    ], DragAndDropService.prototype, "environment", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], DragAndDropService.prototype, "columnController", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], DragAndDropService.prototype, "init", null);
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], DragAndDropService.prototype, "setBeans", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], DragAndDropService.prototype, "destroy", null);
	    DragAndDropService = DragAndDropService_1 = __decorate([
	        context_1.Bean('dragAndDropService')
	    ], DragAndDropService);
	    return DragAndDropService;
	    var DragAndDropService_1;
	}());
	exports.DragAndDropService = DragAndDropService;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var themes = ['fresh', 'dark', 'blue', 'bootstrap', 'material', 'theme-material'];
	var themeCLass = new RegExp("ag-(" + themes.join('|') + ")");
	var Environment = (function () {
	    function Environment() {
	    }
	    Environment.prototype.getTheme = function () {
	        var themeMatch;
	        var element = this.eGridDiv;
	        while (element != document.documentElement && themeMatch == null) {
	            themeMatch = element.className.match(themeCLass);
	            element = element.parentElement;
	            if (element == null) {
	                break;
	            }
	        }
	        if (themeMatch) {
	            return themeMatch[0];
	        }
	        else {
	            return 'ag-fresh';
	        }
	    };
	    __decorate([
	        context_1.Autowired('eGridDiv'),
	        __metadata("design:type", HTMLElement)
	    ], Environment.prototype, "eGridDiv", void 0);
	    Environment = __decorate([
	        context_1.Bean('environment')
	    ], Environment);
	    return Environment;
	}());
	exports.Environment = Environment;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(35);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var columnController_1 = __webpack_require__(15);
	var column_1 = __webpack_require__(17);
	var renderedHeaderCell_1 = __webpack_require__(93);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var utils_1 = __webpack_require__(8);
	var headerWrapperComp_1 = __webpack_require__(97);
	var headerGroupWrapperComp_1 = __webpack_require__(100);
	var filterManager_1 = __webpack_require__(51);
	var componentRecipes_1 = __webpack_require__(57);
	var HeaderRowType;
	(function (HeaderRowType) {
	    HeaderRowType[HeaderRowType["COLUMN_GROUP"] = 0] = "COLUMN_GROUP";
	    HeaderRowType[HeaderRowType["COLUMN"] = 1] = "COLUMN";
	    HeaderRowType[HeaderRowType["FLOATING_FILTER"] = 2] = "FLOATING_FILTER";
	})(HeaderRowType = exports.HeaderRowType || (exports.HeaderRowType = {}));
	var HeaderRowComp = (function (_super) {
	    __extends(HeaderRowComp, _super);
	    function HeaderRowComp(dept, type, pinned, eRoot, dropTarget) {
	        var _this = _super.call(this, "<div class=\"ag-header-row\" role=\"presentation\"/>") || this;
	        _this.headerComps = {};
	        _this.dept = dept;
	        _this.type = type;
	        _this.pinned = pinned;
	        _this.eRoot = eRoot;
	        _this.dropTarget = dropTarget;
	        return _this;
	    }
	    HeaderRowComp.prototype.forEachHeaderElement = function (callback) {
	        var _this = this;
	        Object.keys(this.headerComps).forEach(function (key) {
	            var headerElement = _this.headerComps[key];
	            callback(headerElement);
	        });
	    };
	    HeaderRowComp.prototype.destroy = function () {
	        var idsOfAllChildren = Object.keys(this.headerComps);
	        this.removeAndDestroyChildComponents(idsOfAllChildren);
	        _super.prototype.destroy.call(this);
	    };
	    HeaderRowComp.prototype.removeAndDestroyChildComponents = function (idsToDestroy) {
	        var _this = this;
	        idsToDestroy.forEach(function (id) {
	            var child = _this.headerComps[id];
	            _this.getHtmlElement().removeChild(utils_1.Utils.assertHtmlElement(child.getGui()));
	            if (child.destroy) {
	                child.destroy();
	            }
	            delete _this.headerComps[id];
	        });
	    };
	    HeaderRowComp.prototype.onRowHeightChanged = function () {
	        var headerRowCount = this.columnController.getHeaderRowCount();
	        var sizes = [];
	        var numberOfFloating = 0;
	        var groupHeight;
	        var headerHeight;
	        if (!this.columnController.isPivotMode()) {
	            if (this.gridOptionsWrapper.isFloatingFilter()) {
	                headerRowCount++;
	            }
	            numberOfFloating = (this.gridOptionsWrapper.isFloatingFilter()) ? 1 : 0;
	            groupHeight = this.gridOptionsWrapper.getGroupHeaderHeight();
	            headerHeight = this.gridOptionsWrapper.getHeaderHeight();
	        }
	        else {
	            numberOfFloating = 0;
	            groupHeight = this.gridOptionsWrapper.getPivotGroupHeaderHeight();
	            headerHeight = this.gridOptionsWrapper.getPivotHeaderHeight();
	        }
	        var numberOfNonGroups = 1 + numberOfFloating;
	        var numberOfGroups = headerRowCount - numberOfNonGroups;
	        for (var i = 0; i < numberOfGroups; i++)
	            sizes.push(groupHeight);
	        sizes.push(headerHeight);
	        for (var i = 0; i < numberOfFloating; i++)
	            sizes.push(this.gridOptionsWrapper.getFloatingFiltersHeight());
	        var rowHeight = 0;
	        for (var i = 0; i < this.dept; i++)
	            rowHeight += sizes[i];
	        this.getHtmlElement().style.top = rowHeight + 'px';
	        this.getHtmlElement().style.height = sizes[this.dept] + 'px';
	    };
	    //noinspection JSUnusedLocalSymbols
	    HeaderRowComp.prototype.init = function () {
	        this.onRowHeightChanged();
	        this.onVirtualColumnsChanged();
	        this.setWidth();
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_PIVOT_GROUP_HEADER_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, gridOptionsWrapper_1.GridOptionsWrapper.PROP_FLOATING_FILTERS_HEIGHT, this.onRowHeightChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_VIRTUAL_COLUMNS_CHANGED, this.onVirtualColumnsChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));
	    };
	    HeaderRowComp.prototype.onColumnResized = function () {
	        this.setWidth();
	    };
	    HeaderRowComp.prototype.setWidth = function () {
	        var mainRowWidth = this.columnController.getContainerWidth(this.pinned) + 'px';
	        this.getHtmlElement().style.width = mainRowWidth;
	    };
	    HeaderRowComp.prototype.onGridColumnsChanged = function () {
	        this.removeAndDestroyAllChildComponents();
	    };
	    HeaderRowComp.prototype.removeAndDestroyAllChildComponents = function () {
	        var idsOfAllChildren = Object.keys(this.headerComps);
	        this.removeAndDestroyChildComponents(idsOfAllChildren);
	    };
	    HeaderRowComp.prototype.onDisplayedColumnsChanged = function () {
	        this.onVirtualColumnsChanged();
	        this.setWidth();
	    };
	    HeaderRowComp.prototype.onVirtualColumnsChanged = function () {
	        var _this = this;
	        var currentChildIds = Object.keys(this.headerComps);
	        var itemsAtDepth = this.columnController.getVirtualHeaderGroupRow(this.pinned, this.type == HeaderRowType.FLOATING_FILTER ?
	            this.dept - 1 :
	            this.dept);
	        var ensureDomOrder = this.gridOptionsWrapper.isEnsureDomOrder();
	        var eBefore;
	        itemsAtDepth.forEach(function (child) {
	            // skip groups that have no displayed children. this can happen when the group is broken,
	            // and this section happens to have nothing to display for the open / closed state.
	            // (a broken group is one that is split, ie columns in the group have a non-group column
	            // in between them)
	            if (child.isEmptyGroup()) {
	                return;
	            }
	            var idOfChild = child.getUniqueId();
	            var eParentContainer = _this.getHtmlElement();
	            // if we already have this cell rendered, do nothing
	            var colAlreadyInDom = currentChildIds.indexOf(idOfChild) >= 0;
	            var headerComp;
	            var eHeaderCompGui;
	            if (colAlreadyInDom) {
	                utils_1.Utils.removeFromArray(currentChildIds, idOfChild);
	                headerComp = _this.headerComps[idOfChild];
	                eHeaderCompGui = utils_1.Utils.assertHtmlElement(headerComp.getGui());
	                if (ensureDomOrder) {
	                    utils_1.Utils.ensureDomOrder(eParentContainer, eHeaderCompGui, eBefore);
	                }
	            }
	            else {
	                headerComp = _this.createHeaderComp(child);
	                _this.headerComps[idOfChild] = headerComp;
	                eHeaderCompGui = utils_1.Utils.assertHtmlElement(headerComp.getGui());
	                if (ensureDomOrder) {
	                    utils_1.Utils.insertWithDomOrder(eParentContainer, eHeaderCompGui, eBefore);
	                }
	                else {
	                    eParentContainer.appendChild(eHeaderCompGui);
	                }
	            }
	            eBefore = eHeaderCompGui;
	        });
	        // at this point, anything left in currentChildIds is an element that is no longer in the viewport
	        this.removeAndDestroyChildComponents(currentChildIds);
	    };
	    // check if user is using the deprecated
	    HeaderRowComp.prototype.isUsingOldHeaderRenderer = function (column) {
	        var colDef = column.getColDef();
	        return utils_1.Utils.anyExists([
	            // header template
	            this.gridOptionsWrapper.getHeaderCellTemplateFunc(),
	            this.gridOptionsWrapper.getHeaderCellTemplate(),
	            colDef.headerCellTemplate,
	            // header cellRenderer
	            colDef.headerCellRenderer,
	            this.gridOptionsWrapper.getHeaderCellRenderer()
	        ]);
	    };
	    HeaderRowComp.prototype.createHeaderComp = function (columnGroupChild) {
	        var result;
	        switch (this.type) {
	            case HeaderRowType.COLUMN:
	                if (this.isUsingOldHeaderRenderer(columnGroupChild)) {
	                    result = new renderedHeaderCell_1.RenderedHeaderCell(columnGroupChild, this.eRoot, this.dropTarget, this.pinned);
	                }
	                else {
	                    result = new headerWrapperComp_1.HeaderWrapperComp(columnGroupChild, this.eRoot, this.dropTarget, this.pinned);
	                }
	                break;
	            case HeaderRowType.COLUMN_GROUP:
	                result = new headerGroupWrapperComp_1.HeaderGroupWrapperComp(columnGroupChild, this.eRoot, this.dropTarget, this.pinned);
	                break;
	            case HeaderRowType.FLOATING_FILTER:
	                var column = columnGroupChild;
	                result = this.createFloatingFilterWrapper(column);
	                break;
	        }
	        this.context.wireBean(result);
	        return result;
	    };
	    HeaderRowComp.prototype.createFloatingFilterWrapper = function (column) {
	        var _this = this;
	        var floatingFilterParams = this.createFloatingFilterParams(column);
	        var floatingFilterWrapper = this.componentRecipes.newFloatingFilterWrapperComponent(column, floatingFilterParams);
	        this.addDestroyableEventListener(column, column_1.Column.EVENT_FILTER_CHANGED, function () {
	            var filterComponent = _this.filterManager.getFilterComponent(column);
	            floatingFilterWrapper.onParentModelChanged(filterComponent.getModel());
	        });
	        var cachedFilter = this.filterManager.cachedFilter(column);
	        if (cachedFilter) {
	            var filterComponent = this.filterManager.getFilterComponent(column);
	            floatingFilterWrapper.onParentModelChanged(filterComponent.getModel());
	        }
	        return floatingFilterWrapper;
	    };
	    HeaderRowComp.prototype.createFloatingFilterParams = function (column) {
	        var _this = this;
	        // We always get the freshest reference to the baseFilter because the filters get sometimes created
	        // and destroyed between calls
	        //
	        // let filterComponent:BaseFilter<any, any, any> = <any>this.filterManager.getFilterComponent(column);
	        //
	        var baseParams = {
	            column: column,
	            currentParentModel: function () {
	                var filterComponent = _this.filterManager.getFilterComponent(column);
	                return (filterComponent.getNullableModel) ?
	                    filterComponent.getNullableModel() :
	                    filterComponent.getModel();
	            },
	            onFloatingFilterChanged: function (change) {
	                var filterComponent = _this.filterManager.getFilterComponent(column);
	                if (filterComponent.onFloatingFilterChanged) {
	                    //If going through this branch of code the user MUST
	                    //be passing an object of type change that contains
	                    //a model propery inside and some other stuff
	                    return filterComponent.onFloatingFilterChanged(change);
	                }
	                else {
	                    //If going through this branch of code the user MUST
	                    //be passing the plain model and delegating to ag-Grid
	                    //the responsibility to set the parent model and refresh
	                    //the filters
	                    filterComponent.setModel(change);
	                    _this.filterManager.onFilterChanged();
	                    return true;
	                }
	            },
	            //This one might be overriden from the colDef
	            suppressFilterButton: false
	        };
	        return baseParams;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderRowComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], HeaderRowComp.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], HeaderRowComp.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], HeaderRowComp.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], HeaderRowComp.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes_1.ComponentRecipes)
	    ], HeaderRowComp.prototype, "componentRecipes", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderRowComp.prototype, "init", null);
	    return HeaderRowComp;
	}(component_1.Component));
	exports.HeaderRowComp = HeaderRowComp;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var column_1 = __webpack_require__(17);
	var filterManager_1 = __webpack_require__(51);
	var columnController_1 = __webpack_require__(15);
	var headerTemplateLoader_1 = __webpack_require__(94);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var horizontalDragService_1 = __webpack_require__(95);
	var gridCore_1 = __webpack_require__(50);
	var context_1 = __webpack_require__(7);
	var cssClassApplier_1 = __webpack_require__(96);
	var dragAndDropService_1 = __webpack_require__(90);
	var sortController_1 = __webpack_require__(62);
	var setLeftFeature_1 = __webpack_require__(67);
	var touchListener_1 = __webpack_require__(63);
	var component_1 = __webpack_require__(35);
	var beans_1 = __webpack_require__(68);
	var RenderedHeaderCell = (function (_super) {
	    __extends(RenderedHeaderCell, _super);
	    function RenderedHeaderCell(column, eRoot, dragSourceDropTarget, pinned) {
	        var _this = _super.call(this) || this;
	        _this.column = column;
	        _this.eRoot = eRoot;
	        _this.dragSourceDropTarget = dragSourceDropTarget;
	        _this.pinned = pinned;
	        return _this;
	    }
	    RenderedHeaderCell.prototype.getColumn = function () {
	        return this.column;
	    };
	    RenderedHeaderCell.prototype.init = function () {
	        var eGui = this.headerTemplateLoader.createHeaderElement(this.column);
	        this.setHtmlElementNoHydrate(eGui);
	        this.createScope();
	        this.addAttributes();
	        cssClassApplier_1.CssClassApplier.addHeaderClassesFromColDef(this.column.getColDef(), eGui, this.gridOptionsWrapper, this.column, null);
	        utils_1.Utils.addCssClass(eGui, 'ag-header-cell');
	        // label div
	        var eHeaderCellLabel = eGui.querySelector('#agHeaderCellLabel');
	        this.displayName = this.columnController.getDisplayNameForColumn(this.column, 'header', true);
	        this.setupMovingCss();
	        this.setupTooltip();
	        this.setupResize();
	        this.setupTap();
	        this.setupMove(eHeaderCellLabel);
	        this.setupMenu();
	        this.setupSort(eHeaderCellLabel);
	        this.setupFilterIcon();
	        this.setupText();
	        this.setupWidth();
	        var setLeftFeature = new setLeftFeature_1.SetLeftFeature(this.column, eGui, this.beans);
	        setLeftFeature.init();
	        this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
	    };
	    RenderedHeaderCell.prototype.setupTooltip = function () {
	        var colDef = this.column.getColDef();
	        // add tooltip if exists
	        if (colDef.headerTooltip) {
	            this.getHtmlElement().title = colDef.headerTooltip;
	        }
	    };
	    RenderedHeaderCell.prototype.setupText = function () {
	        var colDef = this.column.getColDef();
	        // render the cell, use a renderer if one is provided
	        var headerCellRenderer;
	        if (colDef.headerCellRenderer) {
	            headerCellRenderer = colDef.headerCellRenderer;
	        }
	        else if (this.gridOptionsWrapper.getHeaderCellRenderer()) {
	            headerCellRenderer = this.gridOptionsWrapper.getHeaderCellRenderer();
	        }
	        var eText = this.queryForHtmlElement('#agText');
	        if (eText) {
	            if (headerCellRenderer) {
	                this.useRenderer(this.displayName, headerCellRenderer, eText);
	            }
	            else {
	                // no renderer, default text render
	                eText.innerHTML = this.displayName;
	                // i don't remember why this is here, take it out???
	                utils_1.Utils.addCssClass(eText, 'ag-header-cell-text');
	            }
	        }
	    };
	    RenderedHeaderCell.prototype.setupFilterIcon = function () {
	        this.eFilterIcon = this.queryForHtmlElement('#agFilter');
	        if (!this.eFilterIcon) {
	            return;
	        }
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
	        this.onFilterChanged();
	    };
	    RenderedHeaderCell.prototype.onFilterChanged = function () {
	        var filterPresent = this.column.isFilterActive();
	        utils_1.Utils.addOrRemoveCssClass(this.getHtmlElement(), 'ag-header-cell-filtered', filterPresent);
	        utils_1.Utils.addOrRemoveCssClass(this.eFilterIcon, 'ag-hidden', !filterPresent);
	    };
	    RenderedHeaderCell.prototype.setupWidth = function () {
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
	        this.onColumnWidthChanged();
	    };
	    RenderedHeaderCell.prototype.onColumnWidthChanged = function () {
	        this.getHtmlElement().style.width = this.column.getActualWidth() + 'px';
	    };
	    RenderedHeaderCell.prototype.createScope = function () {
	        var _this = this;
	        if (this.gridOptionsWrapper.isAngularCompileHeaders()) {
	            this.childScope = this.$scope.$new();
	            this.childScope.colDef = this.column.getColDef();
	            this.childScope.colDefWrapper = this.column;
	            this.childScope.context = this.gridOptionsWrapper.getContext();
	            this.addDestroyFunc(function () {
	                _this.childScope.$destroy();
	            });
	        }
	    };
	    RenderedHeaderCell.prototype.addAttributes = function () {
	        this.getHtmlElement().setAttribute("colId", this.column.getColId());
	    };
	    RenderedHeaderCell.prototype.setupMenu = function () {
	        var _this = this;
	        var eMenu = this.queryForHtmlElement('#agMenu');
	        // if no menu provided in template, do nothing
	        if (!eMenu) {
	            return;
	        }
	        var skipMenu = !this.menuFactory.isMenuEnabled(this.column) || this.column.getColDef().suppressMenu;
	        if (skipMenu) {
	            utils_1.Utils.removeFromParent(eMenu);
	            return;
	        }
	        eMenu.addEventListener('click', function () { return _this.showMenu(eMenu); });
	        if (!this.gridOptionsWrapper.isSuppressMenuHide()) {
	            eMenu.style.opacity = '0';
	            this.addGuiEventListener('mouseover', function () {
	                eMenu.style.opacity = '1';
	            });
	            this.addGuiEventListener('mouseout', function () {
	                eMenu.style.opacity = '0';
	            });
	        }
	        var style = eMenu.style;
	        style['transition'] = 'opacity 0.2s, border 0.2s';
	        style['-webkit-transition'] = 'opacity 0.2s, border 0.2s';
	    };
	    RenderedHeaderCell.prototype.showMenu = function (eventSource) {
	        this.menuFactory.showMenuAfterButtonClick(this.column, eventSource);
	    };
	    RenderedHeaderCell.prototype.setupMovingCss = function () {
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_MOVING_CHANGED, this.onColumnMovingChanged.bind(this));
	        this.onColumnMovingChanged();
	    };
	    RenderedHeaderCell.prototype.onColumnMovingChanged = function () {
	        // this function adds or removes the moving css, based on if the col is moving.
	        // this is what makes the header go dark when it is been moved (gives impression to
	        // user that the column was picked up).
	        if (this.column.isMoving()) {
	            utils_1.Utils.addCssClass(this.getHtmlElement(), 'ag-header-cell-moving');
	        }
	        else {
	            utils_1.Utils.removeCssClass(this.getHtmlElement(), 'ag-header-cell-moving');
	        }
	    };
	    RenderedHeaderCell.prototype.setupMove = function (eHeaderCellLabel) {
	        var _this = this;
	        var suppressMove = this.gridOptionsWrapper.isSuppressMovableColumns()
	            || this.column.getColDef().suppressMovable
	            || this.gridOptionsWrapper.isForPrint();
	        if (suppressMove) {
	            return;
	        }
	        if (eHeaderCellLabel) {
	            var dragSource_1 = {
	                type: dragAndDropService_1.DragSourceType.HeaderCell,
	                eElement: eHeaderCellLabel,
	                dragItemCallback: function () { return _this.createDragItem(); },
	                dragItemName: this.displayName,
	                dragSourceDropTarget: this.dragSourceDropTarget
	            };
	            this.dragAndDropService.addDragSource(dragSource_1, true);
	            this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource_1); });
	        }
	    };
	    RenderedHeaderCell.prototype.createDragItem = function () {
	        var visibleState = {};
	        visibleState[this.column.getId()] = this.column.isVisible();
	        return {
	            columns: [this.column],
	            visibleState: visibleState
	        };
	    };
	    RenderedHeaderCell.prototype.setupTap = function () {
	        var _this = this;
	        if (this.gridOptionsWrapper.isSuppressTouch()) {
	            return;
	        }
	        var touchListener = new touchListener_1.TouchListener(this.getHtmlElement());
	        var tapListener = function (event) {
	            _this.sortController.progressSort(_this.column, false);
	        };
	        var longTapListener = function (event) {
	            _this.gridOptionsWrapper.getApi().showColumnMenuAfterMouseClick(_this.column, event.touchStart);
	        };
	        this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_TAP, tapListener);
	        this.addDestroyableEventListener(touchListener, touchListener_1.TouchListener.EVENT_LONG_TAP, longTapListener);
	        this.addDestroyFunc(function () { return touchListener.destroy(); });
	    };
	    RenderedHeaderCell.prototype.setupResize = function () {
	        var _this = this;
	        var colDef = this.column.getColDef();
	        var eResize = this.queryForHtmlElement('#agResizeBar');
	        // if no eResize in template, do nothing
	        if (!eResize) {
	            return;
	        }
	        var weWantResize = this.gridOptionsWrapper.isEnableColResize() && !colDef.suppressResize;
	        if (!weWantResize) {
	            utils_1.Utils.removeFromParent(eResize);
	            return;
	        }
	        this.horizontalDragService.addDragHandling({
	            eDraggableElement: eResize,
	            eBody: this.eRoot,
	            cursor: 'col-resize',
	            startAfterPixels: 0,
	            onDragStart: this.onDragStart.bind(this),
	            onDragging: this.onDragging.bind(this)
	        });
	        var weWantAutoSize = !this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;
	        if (weWantAutoSize) {
	            this.addDestroyableEventListener(eResize, 'dblclick', function () {
	                _this.columnController.autoSizeColumn(_this.column);
	            });
	        }
	    };
	    RenderedHeaderCell.prototype.useRenderer = function (headerNameValue, headerCellRenderer, eText) {
	        // renderer provided, use it
	        var cellRendererParams = {
	            colDef: this.column.getColDef(),
	            $scope: this.childScope,
	            context: this.gridOptionsWrapper.getContext(),
	            value: headerNameValue,
	            api: this.gridOptionsWrapper.getApi(),
	            eHeaderCell: this.getGui()
	        };
	        var cellRendererResult = headerCellRenderer(cellRendererParams);
	        var childToAppend;
	        if (utils_1.Utils.isNodeOrElement(cellRendererResult)) {
	            // a dom node or element was returned, so add child
	            childToAppend = cellRendererResult;
	        }
	        else {
	            // otherwise assume it was html, so just insert
	            var eTextSpan = document.createElement("span");
	            eTextSpan.innerHTML = cellRendererResult;
	            childToAppend = eTextSpan;
	        }
	        // angular compile header if option is turned on
	        if (this.gridOptionsWrapper.isAngularCompileHeaders()) {
	            var childToAppendCompiled = this.$compile(childToAppend)(this.childScope)[0];
	            eText.appendChild(childToAppendCompiled);
	        }
	        else {
	            eText.appendChild(childToAppend);
	        }
	    };
	    RenderedHeaderCell.prototype.setupSort = function (eHeaderCellLabel) {
	        var _this = this;
	        var enableSorting = this.gridOptionsWrapper.isEnableSorting() && !this.column.getColDef().suppressSorting;
	        var element = this.getHtmlElement();
	        if (!enableSorting) {
	            utils_1.Utils.removeFromParent(element.querySelector('#agSortAsc'));
	            utils_1.Utils.removeFromParent(element.querySelector('#agSortDesc'));
	            utils_1.Utils.removeFromParent(element.querySelector('#agNoSort'));
	            return;
	        }
	        // add sortable class for styling
	        utils_1.Utils.addCssClass(element, 'ag-header-cell-sortable');
	        // add the event on the header, so when clicked, we do sorting
	        if (eHeaderCellLabel) {
	            eHeaderCellLabel.addEventListener("click", function (event) {
	                _this.sortController.progressSort(_this.column, event.shiftKey);
	            });
	        }
	        // add listener for sort changing, and update the icons accordingly
	        this.eSortAsc = this.queryForHtmlElement('#agSortAsc');
	        this.eSortDesc = this.queryForHtmlElement('#agSortDesc');
	        this.eSortNone = this.queryForHtmlElement('#agNoSort');
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
	        this.onSortChanged();
	    };
	    RenderedHeaderCell.prototype.onSortChanged = function () {
	        utils_1.Utils.addOrRemoveCssClass(this.getHtmlElement(), 'ag-header-cell-sorted-asc', this.column.isSortAscending());
	        utils_1.Utils.addOrRemoveCssClass(this.getHtmlElement(), 'ag-header-cell-sorted-desc', this.column.isSortDescending());
	        utils_1.Utils.addOrRemoveCssClass(this.getHtmlElement(), 'ag-header-cell-sorted-none', this.column.isSortNone());
	        if (this.eSortAsc) {
	            utils_1.Utils.addOrRemoveCssClass(this.eSortAsc, 'ag-hidden', !this.column.isSortAscending());
	        }
	        if (this.eSortDesc) {
	            utils_1.Utils.addOrRemoveCssClass(this.eSortDesc, 'ag-hidden', !this.column.isSortDescending());
	        }
	        if (this.eSortNone) {
	            var alwaysHideNoSort = !this.column.getColDef().unSortIcon && !this.gridOptionsWrapper.isUnSortIcon();
	            utils_1.Utils.addOrRemoveCssClass(this.eSortNone, 'ag-hidden', alwaysHideNoSort || !this.column.isSortNone());
	        }
	    };
	    RenderedHeaderCell.prototype.onDragStart = function () {
	        this.startWidth = this.column.getActualWidth();
	    };
	    // optionally inverts the drag, depending on pinned and RTL
	    // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?
	    RenderedHeaderCell.prototype.normaliseDragChange = function (dragChange) {
	        var result = dragChange;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // for RTL, dragging left makes the col bigger, except when pinning left
	            if (this.pinned !== column_1.Column.PINNED_LEFT) {
	                result *= -1;
	            }
	        }
	        else {
	            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
	            if (this.pinned === column_1.Column.PINNED_RIGHT) {
	                result *= -1;
	            }
	        }
	        return result;
	    };
	    RenderedHeaderCell.prototype.onDragging = function (dragChange, finished) {
	        var dragChangeNormalised = this.normaliseDragChange(dragChange);
	        var newWidth = this.startWidth + dragChangeNormalised;
	        this.columnController.setColumnWidth(this.column, newWidth, finished);
	    };
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], RenderedHeaderCell.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], RenderedHeaderCell.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], RenderedHeaderCell.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('$compile'),
	        __metadata("design:type", Object)
	    ], RenderedHeaderCell.prototype, "$compile", void 0);
	    __decorate([
	        context_1.Autowired('gridCore'),
	        __metadata("design:type", gridCore_1.GridCore)
	    ], RenderedHeaderCell.prototype, "gridCore", void 0);
	    __decorate([
	        context_1.Autowired('headerTemplateLoader'),
	        __metadata("design:type", headerTemplateLoader_1.HeaderTemplateLoader)
	    ], RenderedHeaderCell.prototype, "headerTemplateLoader", void 0);
	    __decorate([
	        context_1.Autowired('horizontalDragService'),
	        __metadata("design:type", horizontalDragService_1.HorizontalDragService)
	    ], RenderedHeaderCell.prototype, "horizontalDragService", void 0);
	    __decorate([
	        context_1.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], RenderedHeaderCell.prototype, "menuFactory", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], RenderedHeaderCell.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService_1.DragAndDropService)
	    ], RenderedHeaderCell.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context_1.Autowired('sortController'),
	        __metadata("design:type", sortController_1.SortController)
	    ], RenderedHeaderCell.prototype, "sortController", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], RenderedHeaderCell.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('beans'),
	        __metadata("design:type", beans_1.Beans)
	    ], RenderedHeaderCell.prototype, "beans", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RenderedHeaderCell.prototype, "init", null);
	    return RenderedHeaderCell;
	}(component_1.Component));
	exports.RenderedHeaderCell = RenderedHeaderCell;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var context_1 = __webpack_require__(7);
	var HeaderTemplateLoader = (function () {
	    function HeaderTemplateLoader() {
	    }
	    HeaderTemplateLoader_1 = HeaderTemplateLoader;
	    HeaderTemplateLoader.prototype.createHeaderElement = function (column) {
	        var params = {
	            column: column,
	            colDef: column.getColDef,
	            context: this.gridOptionsWrapper.getContext(),
	            api: this.gridOptionsWrapper.getApi()
	        };
	        // option 1 - see if user provided a template in colDef
	        var userProvidedTemplate = column.getColDef().headerCellTemplate;
	        if (typeof userProvidedTemplate === 'function') {
	            var colDefFunc = userProvidedTemplate;
	            userProvidedTemplate = colDefFunc(params);
	        }
	        // option 2 - check the gridOptions for cellTemplate
	        if (!userProvidedTemplate && this.gridOptionsWrapper.getHeaderCellTemplate()) {
	            userProvidedTemplate = this.gridOptionsWrapper.getHeaderCellTemplate();
	        }
	        // option 3 - check the gridOptions for templateFunction
	        if (!userProvidedTemplate && this.gridOptionsWrapper.getHeaderCellTemplateFunc()) {
	            var gridOptionsFunc = this.gridOptionsWrapper.getHeaderCellTemplateFunc();
	            userProvidedTemplate = gridOptionsFunc(params);
	        }
	        // finally, if still no template, use the default
	        if (!userProvidedTemplate) {
	            userProvidedTemplate = this.createDefaultHeaderElement(column);
	        }
	        // template can be a string or a dom element, if string we need to convert to a dom element
	        var result;
	        if (typeof userProvidedTemplate === 'string') {
	            result = utils_1.Utils.loadTemplate(userProvidedTemplate);
	        }
	        else if (utils_1.Utils.isNodeOrElement(userProvidedTemplate)) {
	            result = userProvidedTemplate;
	        }
	        else {
	            console.error('ag-Grid: header template must be a string or an HTML element');
	        }
	        return result;
	    };
	    HeaderTemplateLoader.prototype.createDefaultHeaderElement = function (column) {
	        var eTemplate = utils_1.Utils.loadTemplate(HeaderTemplateLoader_1.HEADER_CELL_TEMPLATE);
	        this.addInIcon(eTemplate, 'sortAscending', '#agSortAsc', column);
	        this.addInIcon(eTemplate, 'sortDescending', '#agSortDesc', column);
	        this.addInIcon(eTemplate, 'sortUnSort', '#agNoSort', column);
	        this.addInIcon(eTemplate, 'menu', '#agMenu', column);
	        this.addInIcon(eTemplate, 'filter', '#agFilter', column);
	        return eTemplate;
	    };
	    HeaderTemplateLoader.prototype.addInIcon = function (eTemplate, iconName, cssSelector, column) {
	        var eIcon = utils_1.Utils.createIconNoSpan(iconName, this.gridOptionsWrapper, column);
	        eTemplate.querySelector(cssSelector).appendChild(eIcon);
	    };
	    HeaderTemplateLoader.HEADER_CELL_TEMPLATE = '<div class="ag-header-cell">' +
	        '  <div id="agResizeBar" class="ag-header-cell-resize"></div>' +
	        '  <span id="agMenu" class="ag-header-icon ag-header-cell-menu-button"></span>' +
	        '  <div id="agHeaderCellLabel" class="ag-header-cell-label">' +
	        '    <span id="agSortAsc" class="ag-header-icon ag-sort-ascending-icon"></span>' +
	        '    <span id="agSortDesc" class="ag-header-icon ag-sort-descending-icon"></span>' +
	        '    <span id="agNoSort" class="ag-header-icon ag-sort-none-icon"></span>' +
	        '    <span id="agFilter" class="ag-header-icon ag-filter-icon"></span>' +
	        '    <span id="agText" class="ag-header-cell-text"></span>' +
	        '  </div>' +
	        '</div>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderTemplateLoader.prototype, "gridOptionsWrapper", void 0);
	    HeaderTemplateLoader = HeaderTemplateLoader_1 = __decorate([
	        context_1.Bean('headerTemplateLoader')
	    ], HeaderTemplateLoader);
	    return HeaderTemplateLoader;
	    var HeaderTemplateLoader_1;
	}());
	exports.HeaderTemplateLoader = HeaderTemplateLoader;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var context_1 = __webpack_require__(7);
	var HorizontalDragService = (function () {
	    function HorizontalDragService() {
	    }
	    HorizontalDragService.prototype.addDragHandling = function (params) {
	        var _this = this;
	        params.eDraggableElement.addEventListener('mousedown', function (startEvent) {
	            var myDocument = _this.gridOptionsWrapper.getDocument();
	            var eBody = myDocument.querySelector('body');
	            new DragInstance(params, startEvent, eBody);
	        });
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HorizontalDragService.prototype, "gridOptionsWrapper", void 0);
	    HorizontalDragService = __decorate([
	        context_1.Bean('horizontalDragService')
	    ], HorizontalDragService);
	    return HorizontalDragService;
	}());
	exports.HorizontalDragService = HorizontalDragService;
	var DragInstance = (function () {
	    function DragInstance(params, startEvent, eBody) {
	        this.mouseMove = this.onMouseMove.bind(this);
	        this.mouseUp = this.onMouseUp.bind(this);
	        this.mouseLeave = this.onMouseLeave.bind(this);
	        this.lastDelta = 0;
	        this.params = params;
	        this.eDragParent = eBody;
	        this.dragStartX = startEvent.clientX;
	        this.startEvent = startEvent;
	        this.eDragParent.addEventListener('mousemove', this.mouseMove);
	        this.eDragParent.addEventListener('mouseup', this.mouseUp);
	        this.eDragParent.addEventListener('mouseleave', this.mouseLeave);
	        this.draggingStarted = false;
	        var startAfterPixelsExist = typeof params.startAfterPixels === 'number' && params.startAfterPixels > 0;
	        if (!startAfterPixelsExist) {
	            this.startDragging();
	        }
	    }
	    DragInstance.prototype.startDragging = function () {
	        this.draggingStarted = true;
	        this.oldBodyCursor = this.params.eBody.style.cursor;
	        this.oldParentCursor = this.eDragParent.style.cursor;
	        this.oldMsUserSelect = this.eDragParent.style.msUserSelect;
	        this.oldWebkitUserSelect = this.eDragParent.style.webkitUserSelect;
	        // change the body cursor, so when drag moves out of the drag bar, the cursor is still 'resize' (or 'move'
	        this.params.eBody.style.cursor = this.params.cursor;
	        // same for outside the grid, we want to keep the resize (or move) cursor
	        this.eDragParent.style.cursor = this.params.cursor;
	        // we don't want text selection outside the grid (otherwise it looks weird as text highlights when we move)
	        this.eDragParent.style.msUserSelect = 'none';
	        this.eDragParent.style.webkitUserSelect = 'none';
	        this.params.onDragStart(this.startEvent);
	    };
	    DragInstance.prototype.onMouseMove = function (moveEvent) {
	        var newX = moveEvent.clientX;
	        this.lastDelta = newX - this.dragStartX;
	        if (!this.draggingStarted) {
	            var dragExceededStartAfterPixels = Math.abs(this.lastDelta) >= this.params.startAfterPixels;
	            if (dragExceededStartAfterPixels) {
	                this.startDragging();
	            }
	        }
	        if (this.draggingStarted) {
	            this.params.onDragging(this.lastDelta, false);
	        }
	    };
	    DragInstance.prototype.onMouseUp = function () {
	        this.stopDragging();
	    };
	    DragInstance.prototype.onMouseLeave = function () {
	        this.stopDragging();
	    };
	    DragInstance.prototype.stopDragging = function () {
	        // reset cursor back to original cursor, if they were changed in the first place
	        if (this.draggingStarted) {
	            this.params.eBody.style.cursor = this.oldBodyCursor;
	            this.eDragParent.style.cursor = this.oldParentCursor;
	            this.eDragParent.style.msUserSelect = this.oldMsUserSelect;
	            this.eDragParent.style.webkitUserSelect = this.oldWebkitUserSelect;
	            this.params.onDragging(this.lastDelta, true);
	        }
	        // always remove the listeners, as these are always added
	        this.eDragParent.removeEventListener('mousemove', this.mouseMove);
	        this.eDragParent.removeEventListener('mouseup', this.mouseUp);
	        this.eDragParent.removeEventListener('mouseleave', this.mouseLeave);
	    };
	    return DragInstance;
	}());


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var CssClassApplier = (function () {
	    function CssClassApplier() {
	    }
	    CssClassApplier.addHeaderClassesFromColDef = function (abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
	        if (utils_1.Utils.missing(abstractColDef)) {
	            return;
	        }
	        this.addColumnClassesFromCollDef(abstractColDef.headerClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
	    };
	    CssClassApplier.addToolPanelClassesFromColDef = function (abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
	        if (utils_1.Utils.missing(abstractColDef)) {
	            return;
	        }
	        this.addColumnClassesFromCollDef(abstractColDef.toolPanelClass, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup);
	    };
	    CssClassApplier.addColumnClassesFromCollDef = function (classesOrFunc, abstractColDef, eHeaderCell, gridOptionsWrapper, column, columnGroup) {
	        if (utils_1.Utils.missing(classesOrFunc)) {
	            return;
	        }
	        var classToUse;
	        if (typeof classesOrFunc === 'function') {
	            var params = {
	                // bad naming, as colDef here can be a group or a column,
	                // however most people won't appreciate the difference,
	                // so keeping it as colDef to avoid confusion.
	                colDef: abstractColDef,
	                column: column,
	                columnGroup: columnGroup,
	                context: gridOptionsWrapper.getContext(),
	                api: gridOptionsWrapper.getApi()
	            };
	            var headerClassFunc = classesOrFunc;
	            classToUse = headerClassFunc(params);
	        }
	        else {
	            classToUse = classesOrFunc;
	        }
	        if (typeof classToUse === 'string') {
	            utils_1.Utils.addCssClass(eHeaderCell, classToUse);
	        }
	        else if (Array.isArray(classToUse)) {
	            classToUse.forEach(function (cssClassItem) {
	                utils_1.Utils.addCssClass(eHeaderCell, cssClassItem);
	            });
	        }
	    };
	    return CssClassApplier;
	}());
	exports.CssClassApplier = CssClassApplier;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(35);
	var context_1 = __webpack_require__(7);
	var column_1 = __webpack_require__(17);
	var utils_1 = __webpack_require__(8);
	var dragAndDropService_1 = __webpack_require__(90);
	var columnController_1 = __webpack_require__(15);
	var horizontalDragService_1 = __webpack_require__(95);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var cssClassApplier_1 = __webpack_require__(96);
	var setLeftFeature_1 = __webpack_require__(67);
	var gridApi_1 = __webpack_require__(12);
	var sortController_1 = __webpack_require__(62);
	var eventService_1 = __webpack_require__(5);
	var componentRecipes_1 = __webpack_require__(57);
	var agCheckbox_1 = __webpack_require__(98);
	var componentAnnotations_1 = __webpack_require__(48);
	var selectAllFeature_1 = __webpack_require__(99);
	var events_1 = __webpack_require__(11);
	var columnHoverService_1 = __webpack_require__(83);
	var beans_1 = __webpack_require__(68);
	var HeaderWrapperComp = (function (_super) {
	    __extends(HeaderWrapperComp, _super);
	    function HeaderWrapperComp(column, eRoot, dragSourceDropTarget, pinned) {
	        var _this = _super.call(this, HeaderWrapperComp.TEMPLATE) || this;
	        _this.column = column;
	        _this.eRoot = eRoot;
	        _this.dragSourceDropTarget = dragSourceDropTarget;
	        _this.pinned = pinned;
	        return _this;
	    }
	    HeaderWrapperComp.prototype.getColumn = function () {
	        return this.column;
	    };
	    HeaderWrapperComp.prototype.init = function () {
	        this.instantiate(this.context);
	        var displayName = this.columnController.getDisplayNameForColumn(this.column, 'header', true);
	        var enableSorting = this.gridOptionsWrapper.isEnableSorting() && !this.column.getColDef().suppressSorting;
	        var enableMenu = this.menuFactory.isMenuEnabled(this.column) && !this.column.getColDef().suppressMenu;
	        var headerComp = this.appendHeaderComp(displayName, enableSorting, enableMenu);
	        this.setupWidth();
	        this.setupMovingCss();
	        this.setupTooltip();
	        this.setupResize();
	        this.setupMenuClass();
	        this.setupMove(utils_1.Utils.ensureElement(headerComp.getGui()), displayName);
	        this.setupSortableClass(enableSorting);
	        this.addColumnHoverListener();
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_FILTER_ACTIVE_CHANGED, this.onFilterChanged.bind(this));
	        this.onFilterChanged();
	        this.addFeature(this.context, new selectAllFeature_1.SelectAllFeature(this.cbSelectAll, this.column));
	        var setLeftFeature = new setLeftFeature_1.SetLeftFeature(this.column, this.getHtmlElement(), this.beans);
	        setLeftFeature.init();
	        this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
	        this.addAttributes();
	        cssClassApplier_1.CssClassApplier.addHeaderClassesFromColDef(this.column.getColDef(), this.getHtmlElement(), this.gridOptionsWrapper, this.column, null);
	    };
	    HeaderWrapperComp.prototype.addColumnHoverListener = function () {
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_COLUMN_HOVER_CHANGED, this.onColumnHover.bind(this));
	        this.onColumnHover();
	    };
	    HeaderWrapperComp.prototype.onColumnHover = function () {
	        var isHovered = this.columnHoverService.isHovered(this.column);
	        utils_1.Utils.addOrRemoveCssClass(this.getHtmlElement(), 'ag-column-hover', isHovered);
	    };
	    HeaderWrapperComp.prototype.setupSortableClass = function (enableSorting) {
	        if (enableSorting) {
	            var element = this.getHtmlElement();
	            utils_1.Utils.addCssClass(element, 'ag-header-cell-sortable');
	        }
	    };
	    HeaderWrapperComp.prototype.onFilterChanged = function () {
	        var filterPresent = this.column.isFilterActive();
	        utils_1.Utils.addOrRemoveCssClass(this.getHtmlElement(), 'ag-header-cell-filtered', filterPresent);
	    };
	    HeaderWrapperComp.prototype.appendHeaderComp = function (displayName, enableSorting, enableMenu) {
	        var _this = this;
	        var params = {
	            column: this.column,
	            displayName: displayName,
	            enableSorting: enableSorting,
	            enableMenu: enableMenu,
	            showColumnMenu: function (source) {
	                _this.gridApi.showColumnMenuAfterButtonClick(_this.column, source);
	            },
	            progressSort: function (multiSort) {
	                _this.sortController.progressSort(_this.column, !!multiSort);
	            },
	            setSort: function (sort, multiSort) {
	                _this.sortController.setSortForColumn(_this.column, sort, !!multiSort);
	            },
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            context: this.gridOptionsWrapper.getContext()
	        };
	        var headerComp = this.componentRecipes.newHeaderComponent(params);
	        this.appendChild(headerComp);
	        return headerComp;
	    };
	    HeaderWrapperComp.prototype.onColumnMovingChanged = function () {
	        // this function adds or removes the moving css, based on if the col is moving.
	        // this is what makes the header go dark when it is been moved (gives impression to
	        // user that the column was picked up).
	        if (this.column.isMoving()) {
	            utils_1.Utils.addCssClass(this.getHtmlElement(), 'ag-header-cell-moving');
	        }
	        else {
	            utils_1.Utils.removeCssClass(this.getHtmlElement(), 'ag-header-cell-moving');
	        }
	    };
	    HeaderWrapperComp.prototype.setupMove = function (eHeaderCellLabel, displayName) {
	        var _this = this;
	        var suppressMove = this.gridOptionsWrapper.isSuppressMovableColumns()
	            || this.column.getColDef().suppressMovable
	            || this.gridOptionsWrapper.isForPrint();
	        if (suppressMove) {
	            return;
	        }
	        if (eHeaderCellLabel) {
	            var dragSource_1 = {
	                type: dragAndDropService_1.DragSourceType.HeaderCell,
	                eElement: eHeaderCellLabel,
	                dragItemCallback: function () { return _this.createDragItem(); },
	                dragItemName: displayName,
	                dragSourceDropTarget: this.dragSourceDropTarget
	            };
	            this.dragAndDropService.addDragSource(dragSource_1, true);
	            this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource_1); });
	        }
	    };
	    HeaderWrapperComp.prototype.createDragItem = function () {
	        var visibleState = {};
	        visibleState[this.column.getId()] = this.column.isVisible();
	        return {
	            columns: [this.column],
	            visibleState: visibleState
	        };
	    };
	    HeaderWrapperComp.prototype.setupResize = function () {
	        var _this = this;
	        var colDef = this.column.getColDef();
	        // if no eResize in template, do nothing
	        if (!this.eResize) {
	            return;
	        }
	        if (!this.column.isResizable()) {
	            utils_1.Utils.removeFromParent(this.eResize);
	            return;
	        }
	        this.horizontalDragService.addDragHandling({
	            eDraggableElement: this.eResize,
	            eBody: this.eRoot,
	            cursor: 'col-resize',
	            startAfterPixels: 0,
	            onDragStart: this.onDragStart.bind(this),
	            onDragging: this.onDragging.bind(this)
	        });
	        var weWantAutoSize = !this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;
	        if (weWantAutoSize) {
	            this.addDestroyableEventListener(this.eResize, 'dblclick', function () {
	                _this.columnController.autoSizeColumn(_this.column);
	            });
	        }
	    };
	    HeaderWrapperComp.prototype.onDragging = function (dragChange, finished) {
	        var dragChangeNormalised = this.normaliseDragChange(dragChange);
	        var newWidth = this.startWidth + dragChangeNormalised;
	        this.columnController.setColumnWidth(this.column, newWidth, finished);
	    };
	    HeaderWrapperComp.prototype.onDragStart = function () {
	        this.startWidth = this.column.getActualWidth();
	    };
	    HeaderWrapperComp.prototype.setupTooltip = function () {
	        var colDef = this.column.getColDef();
	        // add tooltip if exists
	        if (colDef.headerTooltip) {
	            this.getHtmlElement().title = colDef.headerTooltip;
	        }
	    };
	    HeaderWrapperComp.prototype.setupMovingCss = function () {
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_MOVING_CHANGED, this.onColumnMovingChanged.bind(this));
	        this.onColumnMovingChanged();
	    };
	    HeaderWrapperComp.prototype.addAttributes = function () {
	        this.getHtmlElement().setAttribute("col-id", this.column.getColId());
	    };
	    HeaderWrapperComp.prototype.setupWidth = function () {
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_WIDTH_CHANGED, this.onColumnWidthChanged.bind(this));
	        this.onColumnWidthChanged();
	    };
	    HeaderWrapperComp.prototype.setupMenuClass = function () {
	        this.addDestroyableEventListener(this.column, column_1.Column.EVENT_MENU_VISIBLE_CHANGED, this.onMenuVisible.bind(this));
	        this.onColumnWidthChanged();
	    };
	    HeaderWrapperComp.prototype.onMenuVisible = function () {
	        this.addOrRemoveCssClass('ag-column-menu-visible', this.column.isMenuVisible());
	    };
	    HeaderWrapperComp.prototype.onColumnWidthChanged = function () {
	        this.getHtmlElement().style.width = this.column.getActualWidth() + 'px';
	    };
	    // optionally inverts the drag, depending on pinned and RTL
	    // note - this method is duplicated in RenderedHeaderGroupCell - should refactor out?
	    HeaderWrapperComp.prototype.normaliseDragChange = function (dragChange) {
	        var result = dragChange;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // for RTL, dragging left makes the col bigger, except when pinning left
	            if (this.pinned !== column_1.Column.PINNED_LEFT) {
	                result *= -1;
	            }
	        }
	        else {
	            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
	            if (this.pinned === column_1.Column.PINNED_RIGHT) {
	                result *= -1;
	            }
	        }
	        return result;
	    };
	    HeaderWrapperComp.TEMPLATE = '<div class="ag-header-cell" role="presentation" >' +
	        '<div ref="eResize" class="ag-header-cell-resize" role="presentation"></div>' +
	        '<ag-checkbox ref="cbSelectAll" class="ag-header-select-all" role="presentation"></ag-checkbox>' +
	        // <inner component goes here>
	        '</div>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderWrapperComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService_1.DragAndDropService)
	    ], HeaderWrapperComp.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], HeaderWrapperComp.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('horizontalDragService'),
	        __metadata("design:type", horizontalDragService_1.HorizontalDragService)
	    ], HeaderWrapperComp.prototype, "horizontalDragService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], HeaderWrapperComp.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('menuFactory'),
	        __metadata("design:type", Object)
	    ], HeaderWrapperComp.prototype, "menuFactory", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], HeaderWrapperComp.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], HeaderWrapperComp.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('sortController'),
	        __metadata("design:type", sortController_1.SortController)
	    ], HeaderWrapperComp.prototype, "sortController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], HeaderWrapperComp.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes_1.ComponentRecipes)
	    ], HeaderWrapperComp.prototype, "componentRecipes", void 0);
	    __decorate([
	        context_1.Autowired('columnHoverService'),
	        __metadata("design:type", columnHoverService_1.ColumnHoverService)
	    ], HeaderWrapperComp.prototype, "columnHoverService", void 0);
	    __decorate([
	        context_1.Autowired('beans'),
	        __metadata("design:type", beans_1.Beans)
	    ], HeaderWrapperComp.prototype, "beans", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('eResize'),
	        __metadata("design:type", HTMLElement)
	    ], HeaderWrapperComp.prototype, "eResize", void 0);
	    __decorate([
	        componentAnnotations_1.RefSelector('cbSelectAll'),
	        __metadata("design:type", agCheckbox_1.AgCheckbox)
	    ], HeaderWrapperComp.prototype, "cbSelectAll", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderWrapperComp.prototype, "init", null);
	    return HeaderWrapperComp;
	}(component_1.Component));
	exports.HeaderWrapperComp = HeaderWrapperComp;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(35);
	var componentAnnotations_1 = __webpack_require__(48);
	var utils_1 = __webpack_require__(8);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var AgCheckbox = (function (_super) {
	    __extends(AgCheckbox, _super);
	    function AgCheckbox() {
	        var _this = _super.call(this) || this;
	        _this.selected = false;
	        _this.readOnly = false;
	        _this.passive = false;
	        return _this;
	    }
	    AgCheckbox.prototype.postConstruct = function () {
	        this.setTemplate(AgCheckbox.TEMPLATE);
	        this.loadIcons();
	        this.updateIcons();
	    };
	    AgCheckbox.prototype.attributesSet = function () {
	        _super.prototype.attributesSet.call(this);
	        var label = this.getAttribute('label');
	        if (label) {
	            this.eLabel.innerText = label;
	        }
	    };
	    AgCheckbox.prototype.loadIcons = function () {
	        utils_1.Utils.removeAllChildren(this.eChecked);
	        utils_1.Utils.removeAllChildren(this.eUnchecked);
	        utils_1.Utils.removeAllChildren(this.eIndeterminate);
	        if (this.readOnly) {
	            this.eChecked.appendChild(utils_1.Utils.createIconNoSpan('checkboxCheckedReadOnly', this.gridOptionsWrapper, null));
	            this.eUnchecked.appendChild(utils_1.Utils.createIconNoSpan('checkboxUncheckedReadOnly', this.gridOptionsWrapper, null));
	            this.eIndeterminate.appendChild(utils_1.Utils.createIconNoSpan('checkboxIndeterminateReadOnly', this.gridOptionsWrapper, null));
	        }
	        else {
	            this.eChecked.appendChild(utils_1.Utils.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, null));
	            this.eUnchecked.appendChild(utils_1.Utils.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, null));
	            this.eIndeterminate.appendChild(utils_1.Utils.createIconNoSpan('checkboxIndeterminate', this.gridOptionsWrapper, null));
	        }
	    };
	    AgCheckbox.prototype.onClick = function () {
	        if (!this.readOnly) {
	            this.toggle();
	        }
	    };
	    AgCheckbox.prototype.getNextValue = function () {
	        if (this.selected === undefined) {
	            return true;
	        }
	        else {
	            return !this.selected;
	        }
	    };
	    AgCheckbox.prototype.setPassive = function (passive) {
	        this.passive = passive;
	    };
	    AgCheckbox.prototype.setReadOnly = function (readOnly) {
	        this.readOnly = readOnly;
	        this.loadIcons();
	    };
	    AgCheckbox.prototype.isReadOnly = function () {
	        return this.readOnly;
	    };
	    AgCheckbox.prototype.isSelected = function () {
	        return this.selected;
	    };
	    AgCheckbox.prototype.toggle = function () {
	        var nextValue = this.getNextValue();
	        if (this.passive) {
	            var event_1 = {
	                type: AgCheckbox.EVENT_CHANGED,
	                selected: nextValue
	            };
	            this.dispatchEvent(event_1);
	        }
	        else {
	            this.setSelected(nextValue);
	        }
	    };
	    AgCheckbox.prototype.setSelected = function (selected) {
	        if (this.selected === selected) {
	            return;
	        }
	        if (selected === true) {
	            this.selected = true;
	        }
	        else if (selected === false) {
	            this.selected = false;
	        }
	        else {
	            this.selected = undefined;
	        }
	        this.updateIcons();
	        var event = {
	            type: AgCheckbox.EVENT_CHANGED,
	            selected: this.selected
	        };
	        this.dispatchEvent(event);
	    };
	    AgCheckbox.prototype.updateIcons = function () {
	        utils_1.Utils.setVisible(this.eChecked, this.selected === true);
	        utils_1.Utils.setVisible(this.eUnchecked, this.selected === false);
	        utils_1.Utils.setVisible(this.eIndeterminate, this.selected === undefined);
	    };
	    AgCheckbox.EVENT_CHANGED = 'change';
	    AgCheckbox.TEMPLATE = '<span class="ag-checkbox" role="presentation">' +
	        '  <span class="ag-checkbox-checked" role="presentation"></span>' +
	        '  <span class="ag-checkbox-unchecked" role="presentation"></span>' +
	        '  <span class="ag-checkbox-indeterminate" role="presentation"></span>' +
	        '  <span class="ag-checkbox-label" role="presentation"></span>' +
	        '</span>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], AgCheckbox.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('.ag-checkbox-checked'),
	        __metadata("design:type", HTMLElement)
	    ], AgCheckbox.prototype, "eChecked", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('.ag-checkbox-unchecked'),
	        __metadata("design:type", HTMLElement)
	    ], AgCheckbox.prototype, "eUnchecked", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('.ag-checkbox-indeterminate'),
	        __metadata("design:type", HTMLElement)
	    ], AgCheckbox.prototype, "eIndeterminate", void 0);
	    __decorate([
	        componentAnnotations_1.QuerySelector('.ag-checkbox-label'),
	        __metadata("design:type", HTMLElement)
	    ], AgCheckbox.prototype, "eLabel", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], AgCheckbox.prototype, "postConstruct", null);
	    __decorate([
	        componentAnnotations_1.Listener('click'),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], AgCheckbox.prototype, "onClick", null);
	    return AgCheckbox;
	}(component_1.Component));
	exports.AgCheckbox = AgCheckbox;


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var agCheckbox_1 = __webpack_require__(98);
	var beanStub_1 = __webpack_require__(36);
	var context_1 = __webpack_require__(7);
	var columnController_1 = __webpack_require__(15);
	var gridApi_1 = __webpack_require__(12);
	var events_1 = __webpack_require__(11);
	var eventService_1 = __webpack_require__(5);
	var constants_1 = __webpack_require__(9);
	var selectionController_1 = __webpack_require__(27);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var SelectAllFeature = (function (_super) {
	    __extends(SelectAllFeature, _super);
	    function SelectAllFeature(cbSelectAll, column) {
	        var _this = _super.call(this) || this;
	        _this.cbSelectAllVisible = false;
	        _this.processingEventFromCheckbox = false;
	        _this.cbSelectAll = cbSelectAll;
	        _this.column = column;
	        var colDef = column.getColDef();
	        _this.filteredOnly = colDef ? !!colDef.headerCheckboxSelectionFilteredOnly : false;
	        return _this;
	    }
	    SelectAllFeature.prototype.postConstruct = function () {
	        this.showOrHideSelectAll();
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.showOrHideSelectAll.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SELECTION_CHANGED, this.onSelectionChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_MODEL_UPDATED, this.onModelChanged.bind(this));
	        this.addDestroyableEventListener(this.cbSelectAll, agCheckbox_1.AgCheckbox.EVENT_CHANGED, this.onCbSelectAll.bind(this));
	    };
	    SelectAllFeature.prototype.showOrHideSelectAll = function () {
	        this.cbSelectAllVisible = this.isCheckboxSelection();
	        this.cbSelectAll.setVisible(this.cbSelectAllVisible);
	        if (this.cbSelectAllVisible) {
	            // in case user is trying this feature with the wrong model type
	            this.checkRightRowModelType();
	            // make sure checkbox is showing the right state
	            this.updateStateOfCheckbox();
	        }
	    };
	    SelectAllFeature.prototype.onModelChanged = function () {
	        if (!this.cbSelectAllVisible) {
	            return;
	        }
	        this.updateStateOfCheckbox();
	    };
	    SelectAllFeature.prototype.onSelectionChanged = function () {
	        if (!this.cbSelectAllVisible) {
	            return;
	        }
	        this.updateStateOfCheckbox();
	    };
	    SelectAllFeature.prototype.getNextCheckboxState = function (selectionCount) {
	        if (selectionCount.selected === 0 && selectionCount.notSelected === 0) {
	            // if no rows, always have it unselected
	            return false;
	        }
	        else if (selectionCount.selected > 0 && selectionCount.notSelected > 0) {
	            // if mix of selected and unselected, this is the tri-state
	            return null;
	        }
	        else if (selectionCount.selected > 0) {
	            // only selected
	            return true;
	        }
	        else {
	            // nothing selected
	            return false;
	        }
	    };
	    SelectAllFeature.prototype.updateStateOfCheckbox = function () {
	        if (this.processingEventFromCheckbox) {
	            return;
	        }
	        this.processingEventFromCheckbox = true;
	        var selectionCount = this.getSelectionCount();
	        var allSelected = this.getNextCheckboxState(selectionCount);
	        this.cbSelectAll.setSelected(allSelected);
	        this.processingEventFromCheckbox = false;
	    };
	    SelectAllFeature.prototype.getSelectionCount = function () {
	        var selectedCount = 0;
	        var notSelectedCount = 0;
	        var callback = function (node) {
	            if (node.isSelected()) {
	                selectedCount++;
	            }
	            else {
	                notSelectedCount++;
	            }
	        };
	        if (this.filteredOnly) {
	            this.gridApi.forEachNodeAfterFilter(callback);
	        }
	        else {
	            this.gridApi.forEachNode(callback);
	        }
	        return {
	            notSelected: notSelectedCount,
	            selected: selectedCount
	        };
	    };
	    SelectAllFeature.prototype.checkRightRowModelType = function () {
	        var rowModelType = this.rowModel.getType();
	        var rowModelMatches = rowModelType === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY;
	        if (!rowModelMatches) {
	            console.log("ag-Grid: selectAllCheckbox is only available if using normal row model, you are using " + rowModelType);
	        }
	    };
	    SelectAllFeature.prototype.onCbSelectAll = function () {
	        if (this.processingEventFromCheckbox) {
	            return;
	        }
	        if (!this.cbSelectAllVisible) {
	            return;
	        }
	        var value = this.cbSelectAll.isSelected();
	        if (value) {
	            this.selectionController.selectAllRowNodes(this.filteredOnly);
	        }
	        else {
	            this.selectionController.deselectAllRowNodes(this.filteredOnly);
	        }
	    };
	    SelectAllFeature.prototype.isCheckboxSelection = function () {
	        var result = this.column.getColDef().headerCheckboxSelection;
	        if (typeof result === 'function') {
	            var func = result;
	            result = func({
	                column: this.column,
	                colDef: this.column.getColDef(),
	                columnApi: this.columnApi,
	                api: this.gridApi
	            });
	        }
	        if (result) {
	            if (this.gridOptionsWrapper.isRowModelEnterprise()) {
	                console.warn('headerCheckboxSelection is not supported for Enterprise Row Model');
	                return false;
	            }
	            if (this.gridOptionsWrapper.isRowModelInfinite()) {
	                console.warn('headerCheckboxSelection is not supported for Infinite Row Model');
	                return false;
	            }
	            if (this.gridOptionsWrapper.isRowModelViewport()) {
	                console.warn('headerCheckboxSelection is not supported for Viewport Row Model');
	                return false;
	            }
	            // otherwise the row model is compatible, so return true
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], SelectAllFeature.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], SelectAllFeature.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], SelectAllFeature.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], SelectAllFeature.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], SelectAllFeature.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], SelectAllFeature.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], SelectAllFeature.prototype, "postConstruct", null);
	    return SelectAllFeature;
	}(beanStub_1.BeanStub));
	exports.SelectAllFeature = SelectAllFeature;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var component_1 = __webpack_require__(35);
	var column_1 = __webpack_require__(17);
	var utils_1 = __webpack_require__(8);
	var columnGroup_1 = __webpack_require__(16);
	var columnController_1 = __webpack_require__(15);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var horizontalDragService_1 = __webpack_require__(95);
	var context_1 = __webpack_require__(7);
	var cssClassApplier_1 = __webpack_require__(96);
	var dragAndDropService_1 = __webpack_require__(90);
	var setLeftFeature_1 = __webpack_require__(67);
	var gridApi_1 = __webpack_require__(12);
	var componentRecipes_1 = __webpack_require__(57);
	var beans_1 = __webpack_require__(68);
	var HeaderGroupWrapperComp = (function (_super) {
	    __extends(HeaderGroupWrapperComp, _super);
	    function HeaderGroupWrapperComp(columnGroup, eRoot, dragSourceDropTarget, pinned) {
	        var _this = _super.call(this, HeaderGroupWrapperComp.TEMPLATE) || this;
	        // the children can change, we keep destroy functions related to listening to the children here
	        _this.childColumnsDestroyFuncs = [];
	        _this.columnGroup = columnGroup;
	        _this.eRoot = eRoot;
	        _this.dragSourceDropTarget = dragSourceDropTarget;
	        _this.pinned = pinned;
	        return _this;
	    }
	    HeaderGroupWrapperComp.prototype.postConstruct = function () {
	        cssClassApplier_1.CssClassApplier.addHeaderClassesFromColDef(this.columnGroup.getColGroupDef(), this.getHtmlElement(), this.gridOptionsWrapper, null, this.columnGroup);
	        var displayName = this.columnController.getDisplayNameForColumnGroup(this.columnGroup, 'header');
	        var headerComponent = this.appendHeaderGroupComp(displayName);
	        this.setupResize();
	        this.addClasses();
	        this.setupMove(utils_1.Utils.ensureElement(headerComponent.getGui()), displayName);
	        this.setupWidth();
	        this.addAttributes();
	        var setLeftFeature = new setLeftFeature_1.SetLeftFeature(this.columnGroup, this.getHtmlElement(), this.beans);
	        setLeftFeature.init();
	        this.addDestroyFunc(setLeftFeature.destroy.bind(setLeftFeature));
	    };
	    HeaderGroupWrapperComp.prototype.addAttributes = function () {
	        this.getHtmlElement().setAttribute("col-id", this.columnGroup.getUniqueId());
	    };
	    HeaderGroupWrapperComp.prototype.appendHeaderGroupComp = function (displayName) {
	        var _this = this;
	        var params = {
	            displayName: displayName,
	            columnGroup: this.columnGroup,
	            setExpanded: function (expanded) {
	                _this.columnController.setColumnGroupOpened(_this.columnGroup.getOriginalColumnGroup(), expanded);
	            },
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            context: this.gridOptionsWrapper.getContext()
	        };
	        var headerComp = this.componentRecipes.newHeaderGroupComponent(params);
	        this.appendChild(headerComp);
	        return headerComp;
	    };
	    HeaderGroupWrapperComp.prototype.addClasses = function () {
	        // having different classes below allows the style to not have a bottom border
	        // on the group header, if no group is specified
	        // columnGroup.getColGroupDef
	        if (this.columnGroup.isPadding()) {
	            this.addCssClass('ag-header-group-cell-no-group');
	        }
	        else {
	            this.addCssClass('ag-header-group-cell-with-group');
	        }
	    };
	    HeaderGroupWrapperComp.prototype.setupMove = function (eHeaderGroup, displayName) {
	        var _this = this;
	        if (!eHeaderGroup) {
	            return;
	        }
	        if (this.isSuppressMoving()) {
	            return;
	        }
	        if (eHeaderGroup) {
	            var dragSource_1 = {
	                type: dragAndDropService_1.DragSourceType.HeaderCell,
	                eElement: eHeaderGroup,
	                dragItemName: displayName,
	                // we add in the original group leaf columns, so we move both visible and non-visible items
	                dragItemCallback: this.getDragItemForGroup.bind(this),
	                dragSourceDropTarget: this.dragSourceDropTarget
	            };
	            this.dragAndDropService.addDragSource(dragSource_1, true);
	            this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource_1); });
	        }
	    };
	    // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,
	    // and in the order they are currently in the screen.
	    HeaderGroupWrapperComp.prototype.getDragItemForGroup = function () {
	        var allColumnsOriginalOrder = this.columnGroup.getOriginalColumnGroup().getLeafColumns();
	        // capture visible state, used when reentering grid to dictate which columns should be visible
	        var visibleState = {};
	        allColumnsOriginalOrder.forEach(function (column) { return visibleState[column.getId()] = column.isVisible(); });
	        var allColumnsCurrentOrder = [];
	        this.columnController.getAllDisplayedColumns().forEach(function (column) {
	            if (allColumnsOriginalOrder.indexOf(column) >= 0) {
	                allColumnsCurrentOrder.push(column);
	                utils_1.Utils.removeFromArray(allColumnsOriginalOrder, column);
	            }
	        });
	        // we are left with non-visible columns, stick these in at the end
	        allColumnsOriginalOrder.forEach(function (column) { return allColumnsCurrentOrder.push(column); });
	        // create and return dragItem
	        return {
	            columns: allColumnsCurrentOrder,
	            visibleState: visibleState
	        };
	    };
	    HeaderGroupWrapperComp.prototype.isSuppressMoving = function () {
	        // if any child is fixed, then don't allow moving
	        var childSuppressesMoving = false;
	        this.columnGroup.getLeafColumns().forEach(function (column) {
	            if (column.getColDef().suppressMovable) {
	                childSuppressesMoving = true;
	            }
	        });
	        var result = childSuppressesMoving
	            || this.gridOptionsWrapper.isSuppressMovableColumns()
	            || this.gridOptionsWrapper.isForPrint();
	        return result;
	    };
	    HeaderGroupWrapperComp.prototype.setupWidth = function () {
	        // we need to listen to changes in child columns, as they impact our width
	        this.addListenersToChildrenColumns();
	        // the children belonging to this group can change, so we need to add and remove listeners as they change
	        this.addDestroyableEventListener(this.columnGroup, columnGroup_1.ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));
	        this.onWidthChanged();
	        // the child listeners are not tied to this components lifecycle, as children can get added and removed
	        // to the group - hence they are on a different lifecycle. so we must make sure the existing children
	        // listeners are removed when we finally get destroyed
	        this.addDestroyFunc(this.destroyListenersOnChildrenColumns.bind(this));
	    };
	    HeaderGroupWrapperComp.prototype.onDisplayedChildrenChanged = function () {
	        this.addListenersToChildrenColumns();
	        this.onWidthChanged();
	    };
	    HeaderGroupWrapperComp.prototype.addListenersToChildrenColumns = function () {
	        var _this = this;
	        // first destroy any old listeners
	        this.destroyListenersOnChildrenColumns();
	        // now add new listeners to the new set of children
	        var widthChangedListener = this.onWidthChanged.bind(this);
	        this.columnGroup.getLeafColumns().forEach(function (column) {
	            column.addEventListener(column_1.Column.EVENT_WIDTH_CHANGED, widthChangedListener);
	            column.addEventListener(column_1.Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
	            _this.childColumnsDestroyFuncs.push(function () {
	                column.removeEventListener(column_1.Column.EVENT_WIDTH_CHANGED, widthChangedListener);
	                column.removeEventListener(column_1.Column.EVENT_VISIBLE_CHANGED, widthChangedListener);
	            });
	        });
	    };
	    HeaderGroupWrapperComp.prototype.destroyListenersOnChildrenColumns = function () {
	        this.childColumnsDestroyFuncs.forEach(function (func) { return func(); });
	        this.childColumnsDestroyFuncs = [];
	    };
	    HeaderGroupWrapperComp.prototype.onWidthChanged = function () {
	        this.getHtmlElement().style.width = this.columnGroup.getActualWidth() + 'px';
	    };
	    HeaderGroupWrapperComp.prototype.setupResize = function () {
	        var _this = this;
	        this.eHeaderCellResize = this.getRefElement('agResize');
	        if (!this.columnGroup.isResizable()) {
	            utils_1.Utils.removeFromParent(this.eHeaderCellResize);
	            return;
	        }
	        this.dragService.addDragHandling({
	            eDraggableElement: this.eHeaderCellResize,
	            eBody: this.eRoot,
	            cursor: 'col-resize',
	            startAfterPixels: 0,
	            onDragStart: this.onDragStart.bind(this),
	            onDragging: this.onDragging.bind(this)
	        });
	        if (!this.gridOptionsWrapper.isSuppressAutoSize()) {
	            this.eHeaderCellResize.addEventListener('dblclick', function (event) {
	                // get list of all the column keys we are responsible for
	                var keys = [];
	                _this.columnGroup.getDisplayedLeafColumns().forEach(function (column) {
	                    // not all cols in the group may be participating with auto-resize
	                    if (!column.getColDef().suppressAutoSize) {
	                        keys.push(column.getColId());
	                    }
	                });
	                if (keys.length > 0) {
	                    _this.columnController.autoSizeColumns(keys);
	                }
	            });
	        }
	    };
	    HeaderGroupWrapperComp.prototype.onDragStart = function () {
	        var _this = this;
	        this.groupWidthStart = this.columnGroup.getActualWidth();
	        this.childrenWidthStarts = [];
	        this.columnGroup.getDisplayedLeafColumns().forEach(function (column) {
	            _this.childrenWidthStarts.push(column.getActualWidth());
	        });
	    };
	    HeaderGroupWrapperComp.prototype.onDragging = function (dragChange, finished) {
	        var _this = this;
	        // this will be the width we have to distribute to the resizable columns
	        var widthForResizableCols;
	        // this is all the displayed cols in the group less those that we cannot resize
	        var resizableCols;
	        // a lot of variables defined for the first set of maths, but putting
	        // braces in, we localise the variables to this bit of the method
	        {
	            var dragChangeNormalised = this.normaliseDragChange(dragChange);
	            var totalGroupWidth = this.groupWidthStart + dragChangeNormalised;
	            var displayedColumns = this.columnGroup.getDisplayedLeafColumns();
	            resizableCols = utils_1.Utils.filter(displayedColumns, function (col) { return col.isResizable(); });
	            var nonResizableCols = utils_1.Utils.filter(displayedColumns, function (col) { return !col.isResizable(); });
	            var nonResizableColsWidth_1 = 0;
	            nonResizableCols.forEach(function (col) { return nonResizableColsWidth_1 += col.getActualWidth(); });
	            widthForResizableCols = totalGroupWidth - nonResizableColsWidth_1;
	            var minWidth_1 = 0;
	            resizableCols.forEach(function (col) { return minWidth_1 += col.getMinWidth(); });
	            if (widthForResizableCols < minWidth_1) {
	                widthForResizableCols = minWidth_1;
	            }
	        }
	        // distribute the new width to the child headers
	        var changeRatio = widthForResizableCols / this.groupWidthStart;
	        // keep track of pixels used, and last column gets the remaining,
	        // to cater for rounding errors, and min width adjustments
	        var pixelsToDistribute = widthForResizableCols;
	        resizableCols.forEach(function (column, index) {
	            var notLastCol = index !== (resizableCols.length - 1);
	            var newChildSize;
	            if (notLastCol) {
	                // if not the last col, calculate the column width as normal
	                var startChildSize = _this.childrenWidthStarts[index];
	                newChildSize = startChildSize * changeRatio;
	                if (newChildSize < column.getMinWidth()) {
	                    newChildSize = column.getMinWidth();
	                }
	                pixelsToDistribute -= newChildSize;
	            }
	            else {
	                // if last col, give it the remaining pixels
	                newChildSize = pixelsToDistribute;
	            }
	            _this.columnController.setColumnWidth(column, newChildSize, finished);
	        });
	    };
	    // optionally inverts the drag, depending on pinned and RTL
	    // note - this method is duplicated in RenderedHeaderCell - should refactor out?
	    HeaderGroupWrapperComp.prototype.normaliseDragChange = function (dragChange) {
	        var result = dragChange;
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            // for RTL, dragging left makes the col bigger, except when pinning left
	            if (this.pinned !== column_1.Column.PINNED_LEFT) {
	                result *= -1;
	            }
	        }
	        else {
	            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right
	            if (this.pinned === column_1.Column.PINNED_RIGHT) {
	                result *= -1;
	            }
	        }
	        return result;
	    };
	    HeaderGroupWrapperComp.TEMPLATE = '<div class="ag-header-group-cell">' +
	        '<div ref="agResize" class="ag-header-cell-resize"></div>' +
	        '</div>';
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], HeaderGroupWrapperComp.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], HeaderGroupWrapperComp.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('horizontalDragService'),
	        __metadata("design:type", horizontalDragService_1.HorizontalDragService)
	    ], HeaderGroupWrapperComp.prototype, "dragService", void 0);
	    __decorate([
	        context_1.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService_1.DragAndDropService)
	    ], HeaderGroupWrapperComp.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], HeaderGroupWrapperComp.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('componentRecipes'),
	        __metadata("design:type", componentRecipes_1.ComponentRecipes)
	    ], HeaderGroupWrapperComp.prototype, "componentRecipes", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], HeaderGroupWrapperComp.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], HeaderGroupWrapperComp.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('beans'),
	        __metadata("design:type", beans_1.Beans)
	    ], HeaderGroupWrapperComp.prototype, "beans", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], HeaderGroupWrapperComp.prototype, "postConstruct", null);
	    return HeaderGroupWrapperComp;
	}(component_1.Component));
	exports.HeaderGroupWrapperComp = HeaderGroupWrapperComp;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var dragAndDropService_1 = __webpack_require__(90);
	var context_1 = __webpack_require__(7);
	var moveColumnController_1 = __webpack_require__(102);
	var column_1 = __webpack_require__(17);
	var gridPanel_1 = __webpack_require__(24);
	var bodyDropPivotTarget_1 = __webpack_require__(103);
	var columnController_1 = __webpack_require__(15);
	var BodyDropTarget = (function () {
	    function BodyDropTarget(pinned, eContainer) {
	        this.pinned = pinned;
	        this.eContainer = eContainer;
	    }
	    BodyDropTarget.prototype.getSecondaryContainers = function () {
	        return this.eSecondaryContainers;
	    };
	    BodyDropTarget.prototype.getContainer = function () {
	        return this.eContainer;
	    };
	    BodyDropTarget.prototype.init = function () {
	        this.moveColumnController = new moveColumnController_1.MoveColumnController(this.pinned, this.eContainer);
	        this.context.wireBean(this.moveColumnController);
	        this.bodyDropPivotTarget = new bodyDropPivotTarget_1.BodyDropPivotTarget(this.pinned);
	        this.context.wireBean(this.bodyDropPivotTarget);
	        switch (this.pinned) {
	            case column_1.Column.PINNED_LEFT:
	                this.eSecondaryContainers = this.gridPanel.getDropTargetLeftContainers();
	                break;
	            case column_1.Column.PINNED_RIGHT:
	                this.eSecondaryContainers = this.gridPanel.getDropTargetPinnedRightContainers();
	                break;
	            default:
	                this.eSecondaryContainers = this.gridPanel.getDropTargetBodyContainers();
	                break;
	        }
	        this.dragAndDropService.addDropTarget(this);
	    };
	    BodyDropTarget.prototype.getIconName = function () {
	        return this.currentDropListener.getIconName();
	    };
	    // we want to use the bodyPivotTarget if the user is dragging columns in from the toolPanel
	    // and we are in pivot mode, as it has to logic to set pivot/value/group on the columns when
	    // dropped into the grid's body.
	    BodyDropTarget.prototype.isUseBodyDropPivotTarget = function (draggingEvent) {
	        // if not in pivot mode, then we never use the pivot drop target
	        if (!this.columnController.isPivotMode()) {
	            return false;
	        }
	        // otherwise we use the drop target if the column came from the toolPanel (ie not reordering)
	        return draggingEvent.dragSource.type === dragAndDropService_1.DragSourceType.ToolPanel;
	    };
	    BodyDropTarget.prototype.onDragEnter = function (draggingEvent) {
	        // we pick the drop listener depending on whether we are in pivot mode are not. if we are
	        // in pivot mode, then dropping cols changes the row group, pivot, value stats. otherwise
	        // we change visibility state and position.
	        // if (this.columnController.isPivotMode()) {
	        var useBodyDropPivotTarget = this.isUseBodyDropPivotTarget(draggingEvent);
	        if (useBodyDropPivotTarget) {
	            this.currentDropListener = this.bodyDropPivotTarget;
	        }
	        else {
	            this.currentDropListener = this.moveColumnController;
	        }
	        this.currentDropListener.onDragEnter(draggingEvent);
	    };
	    BodyDropTarget.prototype.onDragLeave = function (params) {
	        this.currentDropListener.onDragLeave(params);
	    };
	    BodyDropTarget.prototype.onDragging = function (params) {
	        this.currentDropListener.onDragging(params);
	    };
	    BodyDropTarget.prototype.onDragStop = function (params) {
	        this.currentDropListener.onDragStop(params);
	    };
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], BodyDropTarget.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], BodyDropTarget.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService_1.DragAndDropService)
	    ], BodyDropTarget.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], BodyDropTarget.prototype, "columnController", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], BodyDropTarget.prototype, "init", null);
	    return BodyDropTarget;
	}());
	exports.BodyDropTarget = BodyDropTarget;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var logger_1 = __webpack_require__(6);
	var columnController_1 = __webpack_require__(15);
	var column_1 = __webpack_require__(17);
	var utils_1 = __webpack_require__(8);
	var dragAndDropService_1 = __webpack_require__(90);
	var gridPanel_1 = __webpack_require__(24);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var MoveColumnController = (function () {
	    function MoveColumnController(pinned, eContainer) {
	        this.needToMoveLeft = false;
	        this.needToMoveRight = false;
	        this.pinned = pinned;
	        this.eContainer = eContainer;
	        this.centerContainer = !utils_1.Utils.exists(pinned);
	    }
	    MoveColumnController.prototype.init = function () {
	        this.logger = this.loggerFactory.create('MoveColumnController');
	    };
	    MoveColumnController.prototype.getIconName = function () {
	        return this.pinned ? dragAndDropService_1.DragAndDropService.ICON_PINNED : dragAndDropService_1.DragAndDropService.ICON_MOVE;
	    };
	    MoveColumnController.prototype.onDragEnter = function (draggingEvent) {
	        // we do dummy drag, so make sure column appears in the right location when first placed
	        var columns = draggingEvent.dragItem.columns;
	        var dragCameFromToolPanel = draggingEvent.dragSource.type === dragAndDropService_1.DragSourceType.ToolPanel;
	        if (dragCameFromToolPanel) {
	            // the if statement doesn't work if drag leaves grid, then enters again
	            this.columnController.setColumnsVisible(columns, true);
	        }
	        else {
	            // restore previous state of visible columns upon re-entering
	            var visibleState_1 = draggingEvent.dragItem.visibleState;
	            var visibleColumns = columns.filter(function (column) { return visibleState_1[column.getId()]; });
	            this.columnController.setColumnsVisible(visibleColumns, true);
	        }
	        this.columnController.setColumnsPinned(columns, this.pinned);
	        this.onDragging(draggingEvent, true);
	    };
	    MoveColumnController.prototype.onDragLeave = function (draggingEvent) {
	        var hideColumnOnExit = !this.gridOptionsWrapper.isSuppressDragLeaveHidesColumns() && !draggingEvent.fromNudge;
	        if (hideColumnOnExit) {
	            var dragItem = draggingEvent.dragSource.dragItemCallback();
	            var columns = dragItem.columns;
	            this.columnController.setColumnsVisible(columns, false);
	        }
	        this.ensureIntervalCleared();
	    };
	    MoveColumnController.prototype.onDragStop = function () {
	        this.ensureIntervalCleared();
	    };
	    MoveColumnController.prototype.normaliseX = function (x) {
	        // flip the coordinate if doing RTL
	        var flipHorizontallyForRtl = this.gridOptionsWrapper.isEnableRtl();
	        if (flipHorizontallyForRtl) {
	            var clientWidth = this.eContainer.clientWidth;
	            x = clientWidth - x;
	        }
	        // adjust for scroll only if centre container (the pinned containers dont scroll)
	        var adjustForScroll = this.centerContainer;
	        if (adjustForScroll) {
	            x += this.gridPanel.getBodyViewportScrollLeft();
	        }
	        return x;
	    };
	    MoveColumnController.prototype.checkCenterForScrolling = function (xAdjustedForScroll) {
	        if (this.centerContainer) {
	            // scroll if the mouse has gone outside the grid (or just outside the scrollable part if pinning)
	            // putting in 50 buffer, so even if user gets to edge of grid, a scroll will happen
	            var firstVisiblePixel = this.gridPanel.getBodyViewportScrollLeft();
	            var lastVisiblePixel = firstVisiblePixel + this.gridPanel.getCenterWidth();
	            if (this.gridOptionsWrapper.isEnableRtl()) {
	                this.needToMoveRight = xAdjustedForScroll < (firstVisiblePixel + 50);
	                this.needToMoveLeft = xAdjustedForScroll > (lastVisiblePixel - 50);
	            }
	            else {
	                this.needToMoveLeft = xAdjustedForScroll < (firstVisiblePixel + 50);
	                this.needToMoveRight = xAdjustedForScroll > (lastVisiblePixel - 50);
	            }
	            if (this.needToMoveLeft || this.needToMoveRight) {
	                this.ensureIntervalStarted();
	            }
	            else {
	                this.ensureIntervalCleared();
	            }
	        }
	    };
	    MoveColumnController.prototype.onDragging = function (draggingEvent, fromEnter) {
	        if (fromEnter === void 0) { fromEnter = false; }
	        this.lastDraggingEvent = draggingEvent;
	        // if moving up or down (ie not left or right) then do nothing
	        if (utils_1.Utils.missing(draggingEvent.hDirection)) {
	            return;
	        }
	        var xNormalised = this.normaliseX(draggingEvent.x);
	        // if the user is dragging into the panel, ie coming from the side panel into the main grid,
	        // we don't want to scroll the grid this time, it would appear like the table is jumping
	        // each time a column is dragged in.
	        if (!fromEnter) {
	            this.checkCenterForScrolling(xNormalised);
	        }
	        var hDirectionNormalised = this.normaliseDirection(draggingEvent.hDirection);
	        var dragSourceType = draggingEvent.dragSource.type;
	        var columnsToMove = draggingEvent.dragSource.dragItemCallback().columns;
	        this.attemptMoveColumns(dragSourceType, columnsToMove, hDirectionNormalised, xNormalised, fromEnter);
	    };
	    MoveColumnController.prototype.normaliseDirection = function (hDirection) {
	        if (this.gridOptionsWrapper.isEnableRtl()) {
	            switch (hDirection) {
	                case dragAndDropService_1.HDirection.Left: return dragAndDropService_1.HDirection.Right;
	                case dragAndDropService_1.HDirection.Right: return dragAndDropService_1.HDirection.Left;
	                default: console.error("ag-Grid: Unknown direction " + hDirection);
	            }
	        }
	        else {
	            return hDirection;
	        }
	    };
	    // returns the index of the first column in the list ONLY if the cols are all beside
	    // each other. if the cols are not beside each other, then returns null
	    MoveColumnController.prototype.calculateOldIndex = function (movingCols) {
	        var gridCols = this.columnController.getAllGridColumns();
	        var indexes = [];
	        movingCols.forEach(function (col) { return indexes.push(gridCols.indexOf(col)); });
	        utils_1.Utils.sortNumberArray(indexes);
	        var firstIndex = indexes[0];
	        var lastIndex = indexes[indexes.length - 1];
	        var spread = lastIndex - firstIndex;
	        var gapsExist = spread !== indexes.length - 1;
	        return gapsExist ? null : firstIndex;
	    };
	    MoveColumnController.prototype.attemptMoveColumns = function (dragSourceType, allMovingColumns, hDirection, xAdjusted, fromEnter) {
	        var draggingLeft = hDirection === dragAndDropService_1.HDirection.Left;
	        var draggingRight = hDirection === dragAndDropService_1.HDirection.Right;
	        var validMoves = this.calculateValidMoves(allMovingColumns, draggingRight, xAdjusted);
	        // if cols are not adjacent, then this returns null. when moving, we constrain the direction of the move
	        // (ie left or right) to the mouse direction. however
	        var oldIndex = this.calculateOldIndex(allMovingColumns);
	        // fromEnter = false;
	        for (var i = 0; i < validMoves.length; i++) {
	            var newIndex = validMoves[i];
	            // the two check below stop an error when the user grabs a group my a middle column, then
	            // it is possible the mouse pointer is to the right of a column while been dragged left.
	            // so we need to make sure that the mouse pointer is actually left of the left most column
	            // if moving left, and right of the right most column if moving right
	            // we check 'fromEnter' below so we move the column to the new spot if the mouse is coming from
	            // outside the grid, eg if the column is moving from side panel, mouse is moving left, then we should
	            // place the column to the RHS even if the mouse is moving left and the column is already on
	            // the LHS. otherwise we stick to the rule described above.
	            var constrainDirection = oldIndex !== null && !fromEnter;
	            // don't consider 'fromEnter' when dragging header cells, otherwise group can jump to opposite direction of drag
	            if (dragSourceType == dragAndDropService_1.DragSourceType.HeaderCell) {
	                constrainDirection = oldIndex !== null;
	            }
	            if (constrainDirection) {
	                // only allow left drag if this column is moving left
	                if (draggingLeft && newIndex >= oldIndex) {
	                    continue;
	                }
	                // only allow right drag if this column is moving right
	                if (draggingRight && newIndex <= oldIndex) {
	                    continue;
	                }
	            }
	            if (!this.columnController.doesMovePassRules(allMovingColumns, newIndex)) {
	                continue;
	            }
	            this.columnController.moveColumns(allMovingColumns, newIndex);
	            // important to return here, so once we do the first valid move, we don't try do any more
	            return;
	        }
	    };
	    MoveColumnController.prototype.calculateValidMoves = function (movingCols, draggingRight, x) {
	        // this is the list of cols on the screen, so it's these we use when comparing the x mouse position
	        var allDisplayedCols = this.columnController.getDisplayedColumns(this.pinned);
	        // but this list is the list of all cols, when we move a col it's the index within this list that gets used,
	        // so the result we return has to be and index location for this list
	        var allGridCols = this.columnController.getAllGridColumns();
	        var colIsMovingFunc = function (col) { return movingCols.indexOf(col) >= 0; };
	        var colIsNotMovingFunc = function (col) { return movingCols.indexOf(col) < 0; };
	        var movingDisplayedCols = allDisplayedCols.filter(colIsMovingFunc);
	        var otherDisplayedCols = allDisplayedCols.filter(colIsNotMovingFunc);
	        var otherGridCols = allGridCols.filter(colIsNotMovingFunc);
	        // work out how many DISPLAYED columns fit before the 'x' position. this gives us the displayIndex.
	        // for example, if cols are a,b,c,d and we find a,b fit before 'x', then we want to place the moving
	        // col between b and c (so that it is under the mouse position).
	        var displayIndex = 0;
	        var availableWidth = x;
	        // if we are dragging right, then the columns will be to the left of the mouse, so we also want to
	        // include the width of the moving columns
	        if (draggingRight) {
	            var widthOfMovingDisplayedCols_1 = 0;
	            movingDisplayedCols.forEach(function (col) { return widthOfMovingDisplayedCols_1 += col.getActualWidth(); });
	            availableWidth -= widthOfMovingDisplayedCols_1;
	        }
	        // now count how many of the displayed columns will fit to the left
	        for (var i = 0; i < otherDisplayedCols.length; i++) {
	            var col = otherDisplayedCols[i];
	            availableWidth -= col.getActualWidth();
	            if (availableWidth < 0) {
	                break;
	            }
	            displayIndex++;
	        }
	        // trial and error, if going right, we adjust by one, i didn't manage to quantify why, but it works
	        if (draggingRight) {
	            displayIndex++;
	        }
	        // the display index is with respect to all the showing columns, however when we move, it's with
	        // respect to all grid columns, so we need to translate from display index to grid index
	        var gridColIndex;
	        if (displayIndex > 0) {
	            var leftColumn = otherDisplayedCols[displayIndex - 1];
	            gridColIndex = otherGridCols.indexOf(leftColumn) + 1;
	        }
	        else {
	            gridColIndex = 0;
	        }
	        var validMoves = [gridColIndex];
	        // add in all adjacent empty columns as other valid moves. this allows us to try putting the new
	        // column in any place of a hidden column, to try different combinations so that we don't break
	        // married children. in other words, maybe the new index breaks a group, but only because some
	        // columns are hidden, maybe we can reshuffle the hidden columns to find a place that works.
	        var nextCol = allGridCols[gridColIndex];
	        while (utils_1.Utils.exists(nextCol) && this.isColumnHidden(allDisplayedCols, nextCol)) {
	            gridColIndex++;
	            validMoves.push(gridColIndex);
	            nextCol = allGridCols[gridColIndex];
	        }
	        return validMoves;
	    };
	    // isHidden takes into account visible=false and group=closed, ie it is not displayed
	    MoveColumnController.prototype.isColumnHidden = function (displayedColumns, col) {
	        return displayedColumns.indexOf(col) < 0;
	    };
	    MoveColumnController.prototype.ensureIntervalStarted = function () {
	        if (!this.movingIntervalId) {
	            this.intervalCount = 0;
	            this.failedMoveAttempts = 0;
	            this.movingIntervalId = setInterval(this.moveInterval.bind(this), 100);
	            if (this.needToMoveLeft) {
	                this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_LEFT, true);
	            }
	            else {
	                this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_RIGHT, true);
	            }
	        }
	    };
	    MoveColumnController.prototype.ensureIntervalCleared = function () {
	        if (this.moveInterval) {
	            clearInterval(this.movingIntervalId);
	            this.movingIntervalId = null;
	            this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_MOVE);
	        }
	    };
	    MoveColumnController.prototype.moveInterval = function () {
	        var pixelsToMove;
	        this.intervalCount++;
	        pixelsToMove = 10 + (this.intervalCount * 5);
	        if (pixelsToMove > 100) {
	            pixelsToMove = 100;
	        }
	        var pixelsMoved;
	        if (this.needToMoveLeft) {
	            pixelsMoved = this.gridPanel.scrollHorizontally(-pixelsToMove);
	        }
	        else if (this.needToMoveRight) {
	            pixelsMoved = this.gridPanel.scrollHorizontally(pixelsToMove);
	        }
	        if (pixelsMoved !== 0) {
	            this.onDragging(this.lastDraggingEvent);
	            this.failedMoveAttempts = 0;
	        }
	        else {
	            this.failedMoveAttempts++;
	            this.dragAndDropService.setGhostIcon(dragAndDropService_1.DragAndDropService.ICON_PINNED);
	            if (this.failedMoveAttempts > 7) {
	                var columns = this.lastDraggingEvent.dragItem.columns;
	                var pinType = this.needToMoveLeft ? column_1.Column.PINNED_LEFT : column_1.Column.PINNED_RIGHT;
	                this.columnController.setColumnsPinned(columns, pinType);
	                this.dragAndDropService.nudge();
	            }
	        }
	    };
	    __decorate([
	        context_1.Autowired('loggerFactory'),
	        __metadata("design:type", logger_1.LoggerFactory)
	    ], MoveColumnController.prototype, "loggerFactory", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], MoveColumnController.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('gridPanel'),
	        __metadata("design:type", gridPanel_1.GridPanel)
	    ], MoveColumnController.prototype, "gridPanel", void 0);
	    __decorate([
	        context_1.Autowired('dragAndDropService'),
	        __metadata("design:type", dragAndDropService_1.DragAndDropService)
	    ], MoveColumnController.prototype, "dragAndDropService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], MoveColumnController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], MoveColumnController.prototype, "init", null);
	    return MoveColumnController;
	}());
	exports.MoveColumnController = MoveColumnController;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var dragAndDropService_1 = __webpack_require__(90);
	var columnController_1 = __webpack_require__(15);
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var BodyDropPivotTarget = (function () {
	    function BodyDropPivotTarget(pinned) {
	        this.columnsToAggregate = [];
	        this.columnsToGroup = [];
	        this.columnsToPivot = [];
	        this.pinned = pinned;
	    }
	    /** Callback for when drag enters */
	    BodyDropPivotTarget.prototype.onDragEnter = function (draggingEvent) {
	        var _this = this;
	        this.clearColumnsList();
	        // in pivot mode, we don't accept any drops if functions are read only
	        if (this.gridOptionsWrapper.isFunctionsReadOnly()) {
	            return;
	        }
	        var dragColumns = draggingEvent.dragItem.columns;
	        dragColumns.forEach(function (column) {
	            // we don't allow adding secondary columns
	            if (!column.isPrimary()) {
	                return;
	            }
	            if (column.isAnyFunctionActive()) {
	                return;
	            }
	            if (column.isAllowValue()) {
	                _this.columnsToAggregate.push(column);
	            }
	            else if (column.isAllowRowGroup()) {
	                _this.columnsToGroup.push(column);
	            }
	            else if (column.isAllowRowGroup()) {
	                _this.columnsToPivot.push(column);
	            }
	        });
	    };
	    BodyDropPivotTarget.prototype.getIconName = function () {
	        var totalColumns = this.columnsToAggregate.length + this.columnsToGroup.length + this.columnsToPivot.length;
	        if (totalColumns > 0) {
	            return this.pinned ? dragAndDropService_1.DragAndDropService.ICON_PINNED : dragAndDropService_1.DragAndDropService.ICON_MOVE;
	        }
	        else {
	            return null;
	        }
	    };
	    /** Callback for when drag leaves */
	    BodyDropPivotTarget.prototype.onDragLeave = function (draggingEvent) {
	        // if we are taking columns out of the center, then we remove them from the report
	        this.clearColumnsList();
	    };
	    BodyDropPivotTarget.prototype.clearColumnsList = function () {
	        this.columnsToAggregate.length = 0;
	        this.columnsToGroup.length = 0;
	        this.columnsToPivot.length = 0;
	    };
	    /** Callback for when dragging */
	    BodyDropPivotTarget.prototype.onDragging = function (draggingEvent) {
	    };
	    /** Callback for when drag stops */
	    BodyDropPivotTarget.prototype.onDragStop = function (draggingEvent) {
	        if (this.columnsToAggregate.length > 0) {
	            this.columnController.addValueColumns(this.columnsToAggregate);
	        }
	        if (this.columnsToGroup.length > 0) {
	            this.columnController.addRowGroupColumns(this.columnsToGroup);
	        }
	        if (this.columnsToPivot.length > 0) {
	            this.columnController.addPivotColumns(this.columnsToPivot);
	        }
	    };
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], BodyDropPivotTarget.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], BodyDropPivotTarget.prototype, "gridOptionsWrapper", void 0);
	    return BodyDropPivotTarget;
	}());
	exports.BodyDropPivotTarget = BodyDropPivotTarget;


/***/ }),
/* 104 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// class returns unique instance id's for columns.
	// eg, the following calls (in this order) will result in:
	//
	// getInstanceIdForKey('country') => 0
	// getInstanceIdForKey('country') => 1
	// getInstanceIdForKey('country') => 2
	// getInstanceIdForKey('country') => 3
	// getInstanceIdForKey('age') => 0
	// getInstanceIdForKey('age') => 1
	// getInstanceIdForKey('country') => 4
	var GroupInstanceIdCreator = (function () {
	    function GroupInstanceIdCreator() {
	        // this map contains keys to numbers, so we remember what the last call was
	        this.existingIds = {};
	    }
	    GroupInstanceIdCreator.prototype.getInstanceIdForKey = function (key) {
	        var lastResult = this.existingIds[key];
	        var result;
	        if (typeof lastResult !== 'number') {
	            // first time this key
	            result = 0;
	        }
	        else {
	            result = lastResult + 1;
	        }
	        this.existingIds[key] = result;
	        return result;
	    };
	    return GroupInstanceIdCreator;
	}());
	exports.GroupInstanceIdCreator = GroupInstanceIdCreator;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var column_1 = __webpack_require__(17);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var utils_1 = __webpack_require__(8);
	var columnController_1 = __webpack_require__(15);
	var AutoGroupColService = (function () {
	    function AutoGroupColService() {
	    }
	    AutoGroupColService_1 = AutoGroupColService;
	    AutoGroupColService.prototype.createAutoGroupColumns = function (rowGroupColumns) {
	        var _this = this;
	        var groupAutoColumns = [];
	        // if doing groupMultiAutoColumn, then we call the method multiple times, once
	        // for each column we are grouping by
	        if (this.gridOptionsWrapper.isGroupMultiAutoColumn()) {
	            rowGroupColumns.forEach(function (rowGroupCol, index) {
	                groupAutoColumns.push(_this.createOneAutoGroupColumn(rowGroupCol, index));
	            });
	        }
	        else {
	            groupAutoColumns.push(this.createOneAutoGroupColumn(null));
	        }
	        return groupAutoColumns;
	    };
	    // rowGroupCol and index are missing if groupMultiAutoColumn=false
	    AutoGroupColService.prototype.createOneAutoGroupColumn = function (rowGroupCol, index) {
	        // if one provided by user, use it, otherwise create one
	        var defaultAutoColDef = this.generateDefaultColDef(rowGroupCol, index);
	        var userAutoColDef = this.gridOptionsWrapper.getAutoGroupColumnDef();
	        // if doing multi, set the field
	        var colId;
	        if (rowGroupCol) {
	            colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_ID + "-" + rowGroupCol.getId();
	        }
	        else {
	            colId = AutoGroupColService_1.GROUP_AUTO_COLUMN_BUNDLE_ID;
	        }
	        utils_1._.mergeDeep(defaultAutoColDef, userAutoColDef);
	        defaultAutoColDef.colId = colId;
	        //If the user is not telling us his preference with regards wether the filtering
	        //should be suppressed, we suppress it if there are no leaf nodes
	        if (userAutoColDef == null || userAutoColDef.suppressFilter == null) {
	            var produceLeafNodeValues = defaultAutoColDef.field != null || defaultAutoColDef.valueGetter != null;
	            defaultAutoColDef.suppressFilter = !produceLeafNodeValues;
	        }
	        // if showing many cols, we don't want to show more than one with a checkbox for selection
	        if (index > 0) {
	            defaultAutoColDef.headerCheckboxSelection = false;
	        }
	        var newCol = new column_1.Column(defaultAutoColDef, colId, true);
	        this.context.wireBean(newCol);
	        return newCol;
	    };
	    AutoGroupColService.prototype.generateDefaultColDef = function (rowGroupCol, index) {
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var defaultAutoColDef = {
	            headerName: localeTextFunc('group', 'Group'),
	            cellRenderer: 'group'
	        };
	        // we never allow moving the group column
	        defaultAutoColDef.suppressMovable = true;
	        if (rowGroupCol) {
	            var rowGroupColDef = rowGroupCol.getColDef();
	            utils_1._.assign(defaultAutoColDef, {
	                // cellRendererParams.groupKey: colDefToCopy.field;
	                headerName: this.columnController.getDisplayNameForColumn(rowGroupCol, 'header'),
	                headerValueGetter: rowGroupColDef.headerValueGetter
	            });
	            if (rowGroupColDef.cellRenderer) {
	                utils_1._.assign(defaultAutoColDef, {
	                    cellRendererParams: {
	                        innerRenderer: rowGroupColDef.cellRenderer,
	                        innerRendererParams: rowGroupColDef.cellRendererParams
	                    }
	                });
	            }
	            defaultAutoColDef.showRowGroup = rowGroupCol.getColId();
	        }
	        else {
	            defaultAutoColDef.showRowGroup = true;
	        }
	        return defaultAutoColDef;
	    };
	    AutoGroupColService.GROUP_AUTO_COLUMN_ID = 'ag-Grid-AutoColumn';
	    AutoGroupColService.GROUP_AUTO_COLUMN_BUNDLE_ID = AutoGroupColService_1.GROUP_AUTO_COLUMN_ID;
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], AutoGroupColService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], AutoGroupColService.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], AutoGroupColService.prototype, "columnController", void 0);
	    AutoGroupColService = AutoGroupColService_1 = __decorate([
	        context_1.Bean('autoGroupColService')
	    ], AutoGroupColService);
	    return AutoGroupColService;
	    var AutoGroupColService_1;
	}());
	exports.AutoGroupColService = AutoGroupColService;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var Downloader = (function () {
	    function Downloader() {
	    }
	    Downloader.prototype.download = function (fileName, content, mimeType) {
	        // for Excel, we need \ufeff at the start
	        // http://stackoverflow.com/questions/17879198/adding-utf-8-bom-to-string-blob
	        var blobObject = new Blob(["\ufeff", content], {
	            type: mimeType
	        });
	        // Internet Explorer
	        if (window.navigator.msSaveOrOpenBlob) {
	            window.navigator.msSaveOrOpenBlob(blobObject, fileName);
	        }
	        else {
	            // Chrome
	            var downloadLink = document.createElement("a");
	            downloadLink.href = window.URL.createObjectURL(blobObject);
	            downloadLink.download = fileName;
	            document.body.appendChild(downloadLink);
	            downloadLink.click();
	            document.body.removeChild(downloadLink);
	        }
	    };
	    Downloader = __decorate([
	        context_1.Bean('downloader')
	    ], Downloader);
	    return Downloader;
	}());
	exports.Downloader = Downloader;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var constants_1 = __webpack_require__(9);
	var utils_1 = __webpack_require__(8);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var ImmutableService = (function () {
	    function ImmutableService() {
	    }
	    ImmutableService.prototype.postConstruct = function () {
	        if (this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY) {
	            this.inMemoryRowModel = this.rowModel;
	        }
	    };
	    // converts the setRowData() command to a transaction
	    ImmutableService.prototype.createTransactionForRowData = function (data) {
	        if (utils_1._.missing(this.inMemoryRowModel)) {
	            console.error('ag-Grid: ImmutableService only works with InMemoryRowModel');
	            return;
	        }
	        var getRowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
	        if (utils_1._.missing(getRowNodeIdFunc)) {
	            console.error('ag-Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!');
	            return;
	        }
	        // convert the data into a transaction object by working out adds, removes and updates
	        var transaction = {
	            remove: [],
	            update: [],
	            add: []
	        };
	        var existingNodesMap = this.inMemoryRowModel.getCopyOfNodesMap();
	        if (utils_1._.exists(data)) {
	            // split all the new data in the following:
	            // if new, push to 'add'
	            // if update, push to 'update'
	            // if not changed, do not include in the transaction
	            data.forEach(function (dataItem) {
	                var id = getRowNodeIdFunc(dataItem);
	                var existingNode = existingNodesMap[id];
	                if (existingNode) {
	                    var dataHasChanged = existingNode.data !== dataItem;
	                    if (dataHasChanged) {
	                        transaction.update.push(dataItem);
	                    }
	                    // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta
	                    // remove from list, so we know the item is not to be removed
	                    existingNodesMap[id] = undefined;
	                }
	                else {
	                    transaction.add.push(dataItem);
	                }
	            });
	        }
	        // at this point, all rows that are left, should be removed
	        utils_1._.iterateObject(existingNodesMap, function (id, rowNode) {
	            if (rowNode) {
	                transaction.remove.push(rowNode.data);
	            }
	        });
	        return transaction;
	    };
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], ImmutableService.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ImmutableService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ImmutableService.prototype, "postConstruct", null);
	    ImmutableService = __decorate([
	        context_1.Bean('immutableService')
	    ], ImmutableService);
	    return ImmutableService;
	}());
	exports.ImmutableService = ImmutableService;


/***/ }),
/* 108 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DefaultColumnTypes = {
	    "numericColumn": {
	        "headerClass": "ag-numeric-header",
	        "cellClass": "ag-numeric-cell"
	    }
	};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	// class returns a unique id to use for the column. it checks the existing columns, and if the requested
	// id is already taken, it will start appending numbers until it gets a unique id.
	// eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}
	// if no field or id provided in the col, it will try the ids of natural numbers
	var utils_1 = __webpack_require__(8);
	var ColumnKeyCreator = (function () {
	    function ColumnKeyCreator() {
	        this.existingKeys = [];
	    }
	    ColumnKeyCreator.prototype.getUniqueKey = function (colId, colField) {
	        // in case user passed in number for colId, convert to string
	        colId = utils_1.Utils.toStringOrNull(colId);
	        var count = 0;
	        while (true) {
	            var idToTry = void 0;
	            if (colId) {
	                idToTry = colId;
	                if (count !== 0) {
	                    idToTry += '_' + count;
	                }
	            }
	            else if (colField) {
	                idToTry = colField;
	                if (count !== 0) {
	                    idToTry += '_' + count;
	                }
	            }
	            else {
	                idToTry = '' + count;
	            }
	            if (this.existingKeys.indexOf(idToTry) < 0) {
	                this.existingKeys.push(idToTry);
	                return idToTry;
	            }
	            count++;
	        }
	    };
	    return ColumnKeyCreator;
	}());
	exports.ColumnKeyCreator = ColumnKeyCreator;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var grid_1 = __webpack_require__(111);
	function initialiseAgGridWithAngular1(angular) {
	    var angularModule = angular.module("agGrid", []);
	    angularModule.directive("agGrid", function () {
	        return {
	            restrict: "A",
	            controller: ['$element', '$scope', '$compile', '$attrs', AngularDirectiveController],
	            scope: true
	        };
	    });
	}
	exports.initialiseAgGridWithAngular1 = initialiseAgGridWithAngular1;
	function AngularDirectiveController($element, $scope, $compile, $attrs) {
	    var gridOptions;
	    var quickFilterOnScope;
	    var keyOfGridInScope = $attrs.agGrid;
	    quickFilterOnScope = keyOfGridInScope + '.quickFilterText';
	    gridOptions = $scope.$eval(keyOfGridInScope);
	    if (!gridOptions) {
	        console.warn("WARNING - grid options for ag-Grid not found. Please ensure the attribute ag-grid points to a valid object on the scope");
	        return;
	    }
	    var eGridDiv = $element[0];
	    var gridParams = {
	        $scope: $scope,
	        $compile: $compile,
	        quickFilterOnScope: quickFilterOnScope
	    };
	    var grid = new grid_1.Grid(eGridDiv, gridOptions, gridParams);
	    $scope.$on("$destroy", function () {
	        grid.destroy();
	    });
	}


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var selectionController_1 = __webpack_require__(27);
	var columnController_1 = __webpack_require__(15);
	var rowRenderer_1 = __webpack_require__(23);
	var headerRenderer_1 = __webpack_require__(88);
	var filterManager_1 = __webpack_require__(51);
	var valueService_1 = __webpack_require__(31);
	var eventService_1 = __webpack_require__(5);
	var gridPanel_1 = __webpack_require__(24);
	var gridApi_1 = __webpack_require__(12);
	var headerTemplateLoader_1 = __webpack_require__(94);
	var balancedColumnTreeBuilder_1 = __webpack_require__(3);
	var displayedGroupCreator_1 = __webpack_require__(21);
	var expressionService_1 = __webpack_require__(20);
	var templateService_1 = __webpack_require__(49);
	var popupService_1 = __webpack_require__(52);
	var logger_1 = __webpack_require__(6);
	var columnUtils_1 = __webpack_require__(18);
	var autoWidthCalculator_1 = __webpack_require__(22);
	var horizontalDragService_1 = __webpack_require__(95);
	var context_1 = __webpack_require__(7);
	var csvCreator_1 = __webpack_require__(13);
	var gridCore_1 = __webpack_require__(50);
	var standardMenu_1 = __webpack_require__(112);
	var dragAndDropService_1 = __webpack_require__(90);
	var dragService_1 = __webpack_require__(26);
	var sortController_1 = __webpack_require__(62);
	var focusedCellController_1 = __webpack_require__(38);
	var mouseEventService_1 = __webpack_require__(28);
	var cellNavigationService_1 = __webpack_require__(87);
	var utils_1 = __webpack_require__(8);
	var filterStage_1 = __webpack_require__(113);
	var sortStage_1 = __webpack_require__(115);
	var flattenStage_1 = __webpack_require__(117);
	var cellEditorFactory_1 = __webpack_require__(70);
	var events_1 = __webpack_require__(11);
	var infiniteRowModel_1 = __webpack_require__(118);
	var inMemoryRowModel_1 = __webpack_require__(124);
	var cellRendererFactory_1 = __webpack_require__(77);
	var cellRendererService_1 = __webpack_require__(81);
	var valueFormatterService_1 = __webpack_require__(73);
	var agCheckbox_1 = __webpack_require__(98);
	var baseFrameworkFactory_1 = __webpack_require__(127);
	var scrollVisibleService_1 = __webpack_require__(39);
	var downloader_1 = __webpack_require__(106);
	var xmlFactory_1 = __webpack_require__(128);
	var gridSerializer_1 = __webpack_require__(14);
	var stylingService_1 = __webpack_require__(82);
	var columnHoverService_1 = __webpack_require__(83);
	var columnAnimationService_1 = __webpack_require__(69);
	var sortService_1 = __webpack_require__(116);
	var filterService_1 = __webpack_require__(114);
	var rowNodeFactory_1 = __webpack_require__(129);
	var autoGroupColService_1 = __webpack_require__(105);
	var paginationProxy_1 = __webpack_require__(41);
	var immutableService_1 = __webpack_require__(107);
	var constants_1 = __webpack_require__(9);
	var valueCache_1 = __webpack_require__(32);
	var changeDetectionService_1 = __webpack_require__(130);
	var alignedGridsService_1 = __webpack_require__(43);
	var pinnedRowModel_1 = __webpack_require__(44);
	var componentResolver_1 = __webpack_require__(58);
	var componentRecipes_1 = __webpack_require__(57);
	var componentProvider_1 = __webpack_require__(60);
	var agComponentUtils_1 = __webpack_require__(84);
	var componentMetadataProvider_1 = __webpack_require__(85);
	var namedComponentResolver_1 = __webpack_require__(59);
	var beans_1 = __webpack_require__(68);
	var environment_1 = __webpack_require__(91);
	var animationFrameService_1 = __webpack_require__(45);
	var Grid = (function () {
	    function Grid(eGridDiv, gridOptions, params) {
	        if (!eGridDiv) {
	            console.error('ag-Grid: no div element provided to the grid');
	        }
	        if (!gridOptions) {
	            console.error('ag-Grid: no gridOptions provided to the grid');
	        }
	        var rowModelClass = this.getRowModelClass(gridOptions);
	        var enterprise = utils_1.Utils.exists(Grid.enterpriseBeans);
	        var frameworkFactory = params ? params.frameworkFactory : null;
	        if (utils_1.Utils.missing(frameworkFactory)) {
	            frameworkFactory = new baseFrameworkFactory_1.BaseFrameworkFactory();
	        }
	        var overrideBeans = [];
	        if (Grid.enterpriseBeans) {
	            overrideBeans = overrideBeans.concat(Grid.enterpriseBeans);
	        }
	        if (Grid.frameworkBeans) {
	            overrideBeans = overrideBeans.concat(Grid.frameworkBeans);
	        }
	        var seed = {
	            enterprise: enterprise,
	            gridOptions: gridOptions,
	            eGridDiv: eGridDiv,
	            $scope: params ? params.$scope : null,
	            $compile: params ? params.$compile : null,
	            quickFilterOnScope: params ? params.quickFilterOnScope : null,
	            globalEventListener: params ? params.globalEventListener : null,
	            frameworkFactory: frameworkFactory
	        };
	        if (params && params.seedBeanInstances) {
	            utils_1.Utils.assign(seed, params.seedBeanInstances);
	        }
	        var contextParams = {
	            overrideBeans: overrideBeans,
	            seed: seed,
	            //Careful with the order of the beans here, there are dependencies between them that need to be kept
	            beans: [rowModelClass, paginationProxy_1.PaginationAutoPageSizeService, gridApi_1.GridApi, componentProvider_1.ComponentProvider, agComponentUtils_1.AgComponentUtils, componentMetadataProvider_1.ComponentMetadataProvider,
	                componentProvider_1.ComponentProvider, componentResolver_1.ComponentResolver, componentRecipes_1.ComponentRecipes, namedComponentResolver_1.NamedComponentResolver,
	                cellRendererFactory_1.CellRendererFactory, horizontalDragService_1.HorizontalDragService, headerTemplateLoader_1.HeaderTemplateLoader, pinnedRowModel_1.PinnedRowModel, dragService_1.DragService,
	                displayedGroupCreator_1.DisplayedGroupCreator, eventService_1.EventService, gridOptionsWrapper_1.GridOptionsWrapper, selectionController_1.SelectionController,
	                filterManager_1.FilterManager, columnController_1.ColumnController, paginationProxy_1.PaginationProxy, rowRenderer_1.RowRenderer, headerRenderer_1.HeaderRenderer, expressionService_1.ExpressionService,
	                balancedColumnTreeBuilder_1.BalancedColumnTreeBuilder, csvCreator_1.CsvCreator, downloader_1.Downloader, xmlFactory_1.XmlFactory, gridSerializer_1.GridSerializer, templateService_1.TemplateService,
	                gridPanel_1.GridPanel, popupService_1.PopupService, valueCache_1.ValueCache, valueService_1.ValueService, alignedGridsService_1.AlignedGridsService,
	                logger_1.LoggerFactory, columnUtils_1.ColumnUtils, autoWidthCalculator_1.AutoWidthCalculator, popupService_1.PopupService, gridCore_1.GridCore, standardMenu_1.StandardMenuFactory,
	                dragAndDropService_1.DragAndDropService, sortController_1.SortController, columnController_1.ColumnApi, focusedCellController_1.FocusedCellController, mouseEventService_1.MouseEventService,
	                cellNavigationService_1.CellNavigationService, filterStage_1.FilterStage, sortStage_1.SortStage, flattenStage_1.FlattenStage, filterService_1.FilterService, rowNodeFactory_1.RowNodeFactory,
	                cellEditorFactory_1.CellEditorFactory, cellRendererService_1.CellRendererService, valueFormatterService_1.ValueFormatterService, stylingService_1.StylingService, scrollVisibleService_1.ScrollVisibleService,
	                columnHoverService_1.ColumnHoverService, columnAnimationService_1.ColumnAnimationService, sortService_1.SortService, autoGroupColService_1.AutoGroupColService, immutableService_1.ImmutableService,
	                changeDetectionService_1.ChangeDetectionService, environment_1.Environment, beans_1.Beans, animationFrameService_1.AnimationFrameService],
	            components: [
	                { componentName: 'AgCheckbox', theClass: agCheckbox_1.AgCheckbox }
	            ],
	            debug: !!gridOptions.debug
	        };
	        var isLoggingFunc = function () { return contextParams.debug; };
	        this.context = new context_1.Context(contextParams, new logger_1.Logger('Context', isLoggingFunc));
	        // we do this at the end, after the boot sequence is complete
	        this.registerComponents(gridOptions);
	        this.setColumnsAndData();
	        this.dispatchGridReadyEvent(gridOptions);
	        if (gridOptions.debug) {
	            console.log('ag-Grid -> initialised successfully, enterprise = ' + enterprise);
	        }
	    }
	    Grid.setEnterpriseBeans = function (enterpriseBeans, rowModelClasses) {
	        this.enterpriseBeans = enterpriseBeans;
	        // the enterprise can inject additional row models. this is how it injects the viewportRowModel
	        utils_1.Utils.iterateObject(rowModelClasses, function (key, value) { return Grid.RowModelClasses[key] = value; });
	    };
	    Grid.setFrameworkBeans = function (frameworkBeans) {
	        this.frameworkBeans = frameworkBeans;
	    };
	    Grid.prototype.registerComponents = function (gridOptions) {
	        var componentProvider = this.context.getBean('componentProvider');
	        if (gridOptions.components != null) {
	            Object.keys(gridOptions.components).forEach(function (it) {
	                componentProvider.registerComponent(it, gridOptions.components[it]);
	            });
	        }
	        if (gridOptions.frameworkComponents != null) {
	            Object.keys(gridOptions.frameworkComponents).forEach(function (it) {
	                componentProvider.registerFwComponent(it, gridOptions.frameworkComponents[it]);
	            });
	        }
	    };
	    Grid.prototype.setColumnsAndData = function () {
	        var gridOptionsWrapper = this.context.getBean('gridOptionsWrapper');
	        var columnController = this.context.getBean('columnController');
	        var rowModel = this.context.getBean('rowModel');
	        var columnDefs = gridOptionsWrapper.getColumnDefs();
	        var rowData = gridOptionsWrapper.getRowData();
	        var nothingToSet = utils_1.Utils.missing(columnDefs) && utils_1.Utils.missing(rowData);
	        if (nothingToSet) {
	            return;
	        }
	        var valueService = this.context.getBean('valueService');
	        if (utils_1.Utils.exists(columnDefs)) {
	            columnController.setColumnDefs(columnDefs);
	        }
	        if (utils_1.Utils.exists(rowData) && rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY) {
	            var inMemoryRowModel = rowModel;
	            inMemoryRowModel.setRowData(rowData);
	        }
	    };
	    Grid.prototype.dispatchGridReadyEvent = function (gridOptions) {
	        var eventService = this.context.getBean('eventService');
	        var readyEvent = {
	            type: events_1.Events.EVENT_GRID_READY,
	            api: gridOptions.api,
	            columnApi: gridOptions.columnApi
	        };
	        eventService.dispatchEvent(readyEvent);
	    };
	    Grid.prototype.getRowModelClass = function (gridOptions) {
	        var rowModelType = gridOptions.rowModelType;
	        if (utils_1.Utils.exists(rowModelType)) {
	            var rowModelClass = Grid.RowModelClasses[rowModelType];
	            if (utils_1.Utils.exists(rowModelClass)) {
	                return rowModelClass;
	            }
	            else {
	                if (rowModelType === 'normal') {
	                    console.warn("ag-Grid: normal rowModel deprecated. Should now be called inMemory rowModel instead.");
	                    return inMemoryRowModel_1.InMemoryRowModel;
	                }
	                console.error('ag-Grid: could not find matching row model for rowModelType ' + rowModelType);
	                if (rowModelType === 'viewport') {
	                    console.error('ag-Grid: rowModelType viewport is only available in ag-Grid Enterprise');
	                }
	                if (rowModelType === 'enterprise') {
	                    console.error('ag-Grid: rowModelType viewport is only available in ag-Grid Enterprise');
	                }
	            }
	        }
	        return inMemoryRowModel_1.InMemoryRowModel;
	    };
	    ;
	    Grid.prototype.destroy = function () {
	        this.context.destroy();
	    };
	    // the default is InMemoryRowModel, which is also used for pagination.
	    // the enterprise adds viewport to this list.
	    Grid.RowModelClasses = {
	        infinite: infiniteRowModel_1.InfiniteRowModel,
	        inMemory: inMemoryRowModel_1.InMemoryRowModel
	    };
	    return Grid;
	}());
	exports.Grid = Grid;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var filterManager_1 = __webpack_require__(51);
	var utils_1 = __webpack_require__(8);
	var popupService_1 = __webpack_require__(52);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var eventService_1 = __webpack_require__(5);
	var StandardMenuFactory = (function () {
	    function StandardMenuFactory() {
	    }
	    StandardMenuFactory.prototype.showMenuAfterMouseEvent = function (column, mouseEvent) {
	        var _this = this;
	        this.showPopup(column, function (eMenu) {
	            _this.popupService.positionPopupUnderMouseEvent({
	                column: column,
	                type: 'columnMenu',
	                mouseEvent: mouseEvent,
	                ePopup: eMenu
	            });
	        });
	    };
	    StandardMenuFactory.prototype.showMenuAfterButtonClick = function (column, eventSource) {
	        var _this = this;
	        this.showPopup(column, function (eMenu) {
	            _this.popupService.positionPopupUnderComponent({ type: 'columnMenu', eventSource: eventSource,
	                ePopup: eMenu, keepWithinBounds: true, column: column });
	        });
	    };
	    StandardMenuFactory.prototype.showPopup = function (column, positionCallback) {
	        var _this = this;
	        var filterWrapper = this.filterManager.getOrCreateFilterWrapper(column);
	        var eMenu = document.createElement('div');
	        utils_1.Utils.addCssClass(eMenu, 'ag-menu');
	        eMenu.appendChild(filterWrapper.gui);
	        var hidePopup;
	        var bodyScrollListener = function (event) {
	            // if h scroll, popup is no longer over the column
	            if (event.direction === 'horizontal') {
	                hidePopup();
	            }
	        };
	        this.eventService.addEventListener('bodyScroll', bodyScrollListener);
	        var closedCallback = function () {
	            _this.eventService.removeEventListener('bodyScroll', bodyScrollListener);
	            column.setMenuVisible(false);
	        };
	        // need to show filter before positioning, as only after filter
	        // is visible can we find out what the width of it is
	        hidePopup = this.popupService.addAsModalPopup(eMenu, true, closedCallback);
	        positionCallback(eMenu);
	        if (filterWrapper.filter.afterGuiAttached) {
	            var params = {
	                hidePopup: hidePopup,
	                eComponent: filterWrapper.gui
	            };
	            filterWrapper.filter.afterGuiAttached(params);
	        }
	        column.setMenuVisible(true);
	    };
	    StandardMenuFactory.prototype.isMenuEnabled = function (column) {
	        // for standard, we show menu if filter is enabled, and he menu is not suppressed
	        return this.gridOptionsWrapper.isEnableFilter() && column.isFilterAllowed();
	    };
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], StandardMenuFactory.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], StandardMenuFactory.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('popupService'),
	        __metadata("design:type", popupService_1.PopupService)
	    ], StandardMenuFactory.prototype, "popupService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], StandardMenuFactory.prototype, "gridOptionsWrapper", void 0);
	    StandardMenuFactory = __decorate([
	        context_1.Bean('menuFactory')
	    ], StandardMenuFactory);
	    return StandardMenuFactory;
	}());
	exports.StandardMenuFactory = StandardMenuFactory;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var filterService_1 = __webpack_require__(114);
	var FilterStage = (function () {
	    function FilterStage() {
	    }
	    FilterStage.prototype.execute = function (params) {
	        var rowNode = params.rowNode;
	        if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
	            this.filterService.filter(rowNode, false);
	        }
	        else {
	            this.filterService.filterAccordingToColumnState(rowNode);
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], FilterStage.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('filterService'),
	        __metadata("design:type", filterService_1.FilterService)
	    ], FilterStage.prototype, "filterService", void 0);
	    FilterStage = __decorate([
	        context_1.Bean('filterStage')
	    ], FilterStage);
	    return FilterStage;
	}());
	exports.FilterStage = FilterStage;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var filterManager_1 = __webpack_require__(51);
	var FilterService = (function () {
	    function FilterService() {
	    }
	    FilterService.prototype.filterAccordingToColumnState = function (rowNode) {
	        var filterActive = this.filterManager.isAnyFilterPresent();
	        this.filter(rowNode, filterActive);
	    };
	    FilterService.prototype.filter = function (rowNode, filterActive) {
	        var _this = this;
	        // recursively get all children that are groups to also filter
	        rowNode.childrenAfterGroup.forEach(function (child) {
	            if (child.group) {
	                _this.filter(child, filterActive);
	            }
	        });
	        // result of filter for this node
	        var filterResult;
	        if (filterActive) {
	            filterResult = [];
	            rowNode.childrenAfterGroup.forEach(function (childNode) {
	                if (childNode.group) {
	                    // a group is included in the result if it has any children of it's own.
	                    // by this stage, the child groups are already filtered
	                    if (childNode.childrenAfterFilter.length > 0) {
	                        filterResult.push(childNode);
	                    }
	                }
	                else {
	                    // a leaf level node is included if it passes the filter
	                    if (_this.filterManager.doesRowPassFilter(childNode)) {
	                        filterResult.push(childNode);
	                    }
	                }
	            });
	        }
	        else {
	            // if not filtering, the result is the original list
	            filterResult = rowNode.childrenAfterGroup;
	        }
	        rowNode.childrenAfterFilter = filterResult;
	        this.setAllChildrenCount(rowNode);
	    };
	    FilterService.prototype.setAllChildrenCount = function (rowNode) {
	        var allChildrenCount = 0;
	        rowNode.childrenAfterFilter.forEach(function (child) {
	            if (child.group) {
	                allChildrenCount += child.allChildrenCount;
	            }
	            else {
	                allChildrenCount++;
	            }
	        });
	        rowNode.setAllChildrenCount(allChildrenCount);
	    };
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], FilterService.prototype, "filterManager", void 0);
	    FilterService = __decorate([
	        context_1.Bean("filterService")
	    ], FilterService);
	    return FilterService;
	}());
	exports.FilterService = FilterService;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var sortService_1 = __webpack_require__(116);
	var SortStage = (function () {
	    function SortStage() {
	    }
	    SortStage.prototype.execute = function (params) {
	        // if the sorting is already done by the server, then we should not do it here
	        if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	            this.sortService.sort(params.rowNode, null);
	        }
	        else {
	            this.sortService.sortAccordingToColumnsState(params.rowNode);
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], SortStage.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('sortService'),
	        __metadata("design:type", sortService_1.SortService)
	    ], SortStage.prototype, "sortService", void 0);
	    SortStage = __decorate([
	        context_1.Bean('sortStage')
	    ], SortStage);
	    return SortStage;
	}());
	exports.SortStage = SortStage;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var sortController_1 = __webpack_require__(62);
	var utils_1 = __webpack_require__(8);
	var valueService_1 = __webpack_require__(31);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var columnController_1 = __webpack_require__(15);
	var SortService = (function () {
	    function SortService() {
	    }
	    SortService.prototype.sortAccordingToColumnsState = function (rowNode) {
	        var sortOptions = this.sortController.getSortForRowController();
	        this.sort(rowNode, sortOptions);
	    };
	    SortService.prototype.sort = function (rowNode, sortOptions) {
	        var _this = this;
	        rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);
	        // we clear out the 'pull down open parents' first, as the values mix up the sorting
	        this.pullDownDataForHideOpenParents(rowNode, true);
	        var sortActive = utils_1._.exists(sortOptions) && sortOptions.length > 0;
	        if (sortActive) {
	            // RE https://ag-grid.atlassian.net/browse/AG-444
	            //Javascript sort is non deterministic when all the array items are equals
	            //ie Comparator always returns 0, so if you want to ensure the array keeps its
	            //order, then you need to add an additional sorting condition manually, in this
	            //case we are going to inspect the original array position
	            var sortedRowNodes = rowNode.childrenAfterSort.map(function (it, pos) {
	                return { currentPos: pos, rowNode: it };
	            });
	            sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));
	            rowNode.childrenAfterSort = sortedRowNodes.map(function (sorted) { return sorted.rowNode; });
	        }
	        this.updateChildIndexes(rowNode);
	        this.pullDownDataForHideOpenParents(rowNode, false);
	        // sort any groups recursively
	        rowNode.childrenAfterFilter.forEach(function (child) {
	            if (child.group) {
	                _this.sort(child, sortOptions);
	            }
	        });
	    };
	    SortService.prototype.compareRowNodes = function (sortOptions, sortedNodeA, sortedNodeB) {
	        var nodeA = sortedNodeA.rowNode;
	        var nodeB = sortedNodeB.rowNode;
	        // Iterate columns, return the first that doesn't match
	        for (var i = 0, len = sortOptions.length; i < len; i++) {
	            var sortOption = sortOptions[i];
	            // let compared = compare(nodeA, nodeB, sortOption.column, sortOption.inverter === -1);
	            var isInverted = sortOption.inverter === -1;
	            var valueA = this.getValue(nodeA, sortOption.column);
	            var valueB = this.getValue(nodeB, sortOption.column);
	            var comparatorResult = void 0;
	            if (sortOption.column.getColDef().comparator) {
	                //if comparator provided, use it
	                comparatorResult = sortOption.column.getColDef().comparator(valueA, valueB, nodeA, nodeB, isInverted);
	            }
	            else {
	                //otherwise do our own comparison
	                comparatorResult = utils_1._.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());
	            }
	            if (comparatorResult !== 0) {
	                return comparatorResult * sortOption.inverter;
	            }
	        }
	        // All matched, we make is so that the original sort order is kept:
	        return sortedNodeA.currentPos - sortedNodeB.currentPos;
	    };
	    SortService.prototype.getValue = function (nodeA, column) {
	        return this.valueService.getValue(column, nodeA);
	    };
	    SortService.prototype.updateChildIndexes = function (rowNode) {
	        if (utils_1._.missing(rowNode.childrenAfterSort)) {
	            return;
	        }
	        rowNode.childrenAfterSort.forEach(function (child, index) {
	            var firstChild = index === 0;
	            var lastChild = index === rowNode.childrenAfterSort.length - 1;
	            child.setFirstChild(firstChild);
	            child.setLastChild(lastChild);
	            child.setChildIndex(index);
	        });
	    };
	    SortService.prototype.pullDownDataForHideOpenParents = function (rowNode, clearOperation) {
	        var _this = this;
	        if (utils_1._.missing(rowNode.childrenAfterSort)) {
	            return;
	        }
	        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {
	            return;
	        }
	        rowNode.childrenAfterSort.forEach(function (childRowNode) {
	            var groupDisplayCols = _this.columnController.getGroupDisplayColumns();
	            groupDisplayCols.forEach(function (groupDisplayCol) {
	                var showRowGroup = groupDisplayCol.getColDef().showRowGroup;
	                if (typeof showRowGroup !== 'string') {
	                    console.error('ag-Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup');
	                    return;
	                }
	                var displayingGroupKey = showRowGroup;
	                var rowGroupColumn = _this.columnController.getPrimaryColumn(displayingGroupKey);
	                var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;
	                if (thisRowNodeMatches) {
	                    return;
	                }
	                if (clearOperation) {
	                    // if doing a clear operation, we clear down the value for every possible group column
	                    childRowNode.setGroupValue(groupDisplayCol.getId(), null);
	                }
	                else {
	                    // if doing a set operation, we set only where the pull down is to occur
	                    var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);
	                    if (parentToStealFrom) {
	                        childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);
	                    }
	                }
	            });
	        });
	    };
	    __decorate([
	        context_1.Autowired('sortController'),
	        __metadata("design:type", sortController_1.SortController)
	    ], SortService.prototype, "sortController", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], SortService.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], SortService.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], SortService.prototype, "gridOptionsWrapper", void 0);
	    SortService = __decorate([
	        context_1.Bean('sortService')
	    ], SortService);
	    return SortService;
	}());
	exports.SortService = SortService;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var rowNode_1 = __webpack_require__(30);
	var utils_1 = __webpack_require__(8);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var selectionController_1 = __webpack_require__(27);
	var eventService_1 = __webpack_require__(5);
	var columnController_1 = __webpack_require__(15);
	var FlattenStage = (function () {
	    function FlattenStage() {
	    }
	    FlattenStage.prototype.execute = function (params) {
	        var rootNode = params.rowNode;
	        // even if not doing grouping, we do the mapping, as the client might
	        // of passed in data that already has a grouping in it somewhere
	        var result = [];
	        // putting value into a wrapper so it's passed by reference
	        var nextRowTop = { value: 0 };
	        var skipLeafNodes = this.columnController.isPivotMode();
	        // if we are reducing, and not grouping, then we want to show the root node, as that
	        // is where the pivot values are
	        var showRootNode = skipLeafNodes && rootNode.leafGroup;
	        var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;
	        // set all row tops to null, then set row tops on all visible rows. if we don't
	        // do this, then the algorithm below only sets row tops, old row tops from old rows
	        // will still lie around
	        this.resetRowTops(rootNode);
	        this.recursivelyAddToRowsToDisplay(topList, result, nextRowTop, skipLeafNodes, 0);
	        return result;
	    };
	    FlattenStage.prototype.resetRowTops = function (rowNode) {
	        rowNode.clearRowTop();
	        if (rowNode.group) {
	            if (rowNode.childrenAfterGroup) {
	                for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {
	                    this.resetRowTops(rowNode.childrenAfterGroup[i]);
	                }
	            }
	            if (rowNode.sibling) {
	                rowNode.sibling.clearRowTop();
	            }
	        }
	    };
	    FlattenStage.prototype.recursivelyAddToRowsToDisplay = function (rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel) {
	        if (utils_1.Utils.missingOrEmpty(rowsToFlatten)) {
	            return;
	        }
	        var groupSuppressRow = this.gridOptionsWrapper.isGroupSuppressRow();
	        var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents();
	        var removeSingleChildrenGroups = this.gridOptionsWrapper.isGroupRemoveSingleChildren();
	        for (var i = 0; i < rowsToFlatten.length; i++) {
	            var rowNode = rowsToFlatten[i];
	            // check all these cases, for working out if this row should be included in the final mapped list
	            var isGroupSuppressedNode = groupSuppressRow && rowNode.group;
	            var isSkippedLeafNode = skipLeafNodes && !rowNode.group;
	            var isHiddenOpenParent = hideOpenParents && rowNode.expanded;
	            var isRemovedSingleChildrenGroup = removeSingleChildrenGroups && rowNode.group && rowNode.childrenAfterGroup.length === 1;
	            var thisRowShouldBeRendered = !isSkippedLeafNode && !isGroupSuppressedNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup;
	            if (thisRowShouldBeRendered) {
	                this.addRowNodeToRowsToDisplay(rowNode, result, nextRowTop, uiLevel);
	            }
	            // if we are pivoting, we never map below the leaf group
	            if (skipLeafNodes && rowNode.leafGroup) {
	                continue;
	            }
	            if (rowNode.group) {
	                // we traverse the group if it is expended, however we always traverse if the parent node
	                // was removed (as the group will never be opened if it is not displayed, we show the children instead)
	                if (rowNode.expanded || isRemovedSingleChildrenGroup) {
	                    // if the parent was excluded, then ui level is that of the parent
	                    var uiLevelForChildren = isRemovedSingleChildrenGroup ? uiLevel : uiLevel + 1;
	                    this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort, result, nextRowTop, skipLeafNodes, uiLevelForChildren);
	                    // put a footer in if user is looking for it
	                    if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
	                        this.ensureFooterNodeExists(rowNode);
	                        this.addRowNodeToRowsToDisplay(rowNode.sibling, result, nextRowTop, uiLevel);
	                    }
	                }
	                else {
	                }
	            }
	            else if (rowNode.canFlower && rowNode.expanded) {
	                var flowerNode = this.createFlowerNode(rowNode);
	                this.addRowNodeToRowsToDisplay(flowerNode, result, nextRowTop, uiLevel);
	            }
	        }
	    };
	    // duplicated method, it's also in floatingRowModel
	    FlattenStage.prototype.addRowNodeToRowsToDisplay = function (rowNode, result, nextRowTop, uiLevel) {
	        result.push(rowNode);
	        if (utils_1.Utils.missing(rowNode.rowHeight)) {
	            var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);
	            rowNode.setRowHeight(rowHeight);
	        }
	        rowNode.setUiLevel(uiLevel);
	        rowNode.setRowTop(nextRowTop.value);
	        rowNode.setRowIndex(result.length - 1);
	        nextRowTop.value += rowNode.rowHeight;
	    };
	    FlattenStage.prototype.ensureFooterNodeExists = function (groupNode) {
	        // only create footer node once, otherwise we have daemons and
	        // the animate screws up with the daemons hanging around
	        if (utils_1.Utils.exists(groupNode.sibling)) {
	            return;
	        }
	        var footerNode = new rowNode_1.RowNode();
	        this.context.wireBean(footerNode);
	        Object.keys(groupNode).forEach(function (key) {
	            footerNode[key] = groupNode[key];
	        });
	        footerNode.footer = true;
	        footerNode.rowTop = null;
	        footerNode.oldRowTop = null;
	        if (utils_1.Utils.exists(footerNode.id)) {
	            footerNode.id = 'rowGroupFooter_' + footerNode.id;
	        }
	        // get both header and footer to reference each other as siblings. this is never undone,
	        // only overwritten. so if a group is expanded, then contracted, it will have a ghost
	        // sibling - but that's fine, as we can ignore this if the header is contracted.
	        footerNode.sibling = groupNode;
	        groupNode.sibling = footerNode;
	    };
	    FlattenStage.prototype.createFlowerNode = function (parentNode) {
	        if (utils_1.Utils.exists(parentNode.childFlower)) {
	            return parentNode.childFlower;
	        }
	        else {
	            var flowerNode = new rowNode_1.RowNode();
	            this.context.wireBean(flowerNode);
	            flowerNode.flower = true;
	            flowerNode.parent = parentNode;
	            if (utils_1.Utils.exists(parentNode.id)) {
	                flowerNode.id = 'flowerNode_' + parentNode.id;
	            }
	            flowerNode.data = parentNode.data;
	            flowerNode.level = parentNode.level + 1;
	            parentNode.childFlower = flowerNode;
	            return flowerNode;
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], FlattenStage.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], FlattenStage.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], FlattenStage.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], FlattenStage.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], FlattenStage.prototype, "columnController", void 0);
	    FlattenStage = __decorate([
	        context_1.Bean('flattenStage')
	    ], FlattenStage);
	    return FlattenStage;
	}());
	exports.FlattenStage = FlattenStage;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var context_1 = __webpack_require__(7);
	var eventService_1 = __webpack_require__(5);
	var selectionController_1 = __webpack_require__(27);
	var events_1 = __webpack_require__(11);
	var sortController_1 = __webpack_require__(62);
	var filterManager_1 = __webpack_require__(51);
	var constants_1 = __webpack_require__(9);
	var infiniteCache_1 = __webpack_require__(119);
	var beanStub_1 = __webpack_require__(36);
	var rowNodeCache_1 = __webpack_require__(122);
	var rowNodeBlockLoader_1 = __webpack_require__(123);
	var gridApi_1 = __webpack_require__(12);
	var columnController_1 = __webpack_require__(15);
	var InfiniteRowModel = (function (_super) {
	    __extends(InfiniteRowModel, _super);
	    function InfiniteRowModel() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    InfiniteRowModel.prototype.getRowBounds = function (index) {
	        return {
	            rowHeight: this.rowHeight,
	            rowTop: this.rowHeight * index
	        };
	    };
	    InfiniteRowModel.prototype.init = function () {
	        var _this = this;
	        if (!this.gridOptionsWrapper.isRowModelInfinite()) {
	            return;
	        }
	        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
	        this.addEventListeners();
	        this.setDatasource(this.gridOptionsWrapper.getDatasource());
	        this.addDestroyFunc(function () { return _this.destroyCache(); });
	    };
	    InfiniteRowModel.prototype.isLastRowFound = function () {
	        return this.infiniteCache ? this.infiniteCache.isMaxRowFound() : false;
	    };
	    InfiniteRowModel.prototype.addEventListeners = function () {
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
	    };
	    InfiniteRowModel.prototype.onFilterChanged = function () {
	        if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
	            this.reset();
	        }
	    };
	    InfiniteRowModel.prototype.onSortChanged = function () {
	        if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	            this.reset();
	        }
	    };
	    InfiniteRowModel.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	    };
	    InfiniteRowModel.prototype.getType = function () {
	        return constants_1.Constants.ROW_MODEL_TYPE_INFINITE;
	    };
	    InfiniteRowModel.prototype.setDatasource = function (datasource) {
	        this.datasource = datasource;
	        // only reset if we have a valid datasource to working with
	        if (datasource) {
	            this.checkForDeprecated();
	            this.reset();
	        }
	    };
	    InfiniteRowModel.prototype.checkForDeprecated = function () {
	        var ds = this.datasource;
	        // the number of concurrent loads we are allowed to the server
	        if (utils_1.Utils.exists(ds.maxConcurrentRequests)) {
	            console.error('ag-Grid: since version 5.1.x, maxConcurrentRequests is replaced with grid property maxConcurrentDatasourceRequests');
	        }
	        if (utils_1.Utils.exists(ds.maxPagesInCache)) {
	            console.error('ag-Grid: since version 5.1.x, maxPagesInCache is replaced with grid property maxPagesInPaginationCache');
	        }
	        if (utils_1.Utils.exists(ds.overflowSize)) {
	            console.error('ag-Grid: since version 5.1.x, overflowSize is replaced with grid property paginationOverflowSize');
	        }
	        if (utils_1.Utils.exists(ds.blockSize)) {
	            console.error('ag-Grid: since version 5.1.x, pageSize/blockSize is replaced with grid property infinitePageSize');
	        }
	    };
	    InfiniteRowModel.prototype.isEmpty = function () {
	        return utils_1.Utils.missing(this.infiniteCache);
	    };
	    InfiniteRowModel.prototype.isRowsToRender = function () {
	        return utils_1.Utils.exists(this.infiniteCache);
	    };
	    InfiniteRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
	        return this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange);
	    };
	    InfiniteRowModel.prototype.reset = function () {
	        // important to return here, as the user could be setting filter or sort before
	        // data-source is set
	        if (utils_1.Utils.missing(this.datasource)) {
	            return;
	        }
	        // if user is providing id's, then this means we can keep the selection between datsource hits,
	        // as the rows will keep their unique id's even if, for example, server side sorting or filtering
	        // is done.
	        var userGeneratingIds = utils_1.Utils.exists(this.gridOptionsWrapper.getRowNodeIdFunc());
	        if (!userGeneratingIds) {
	            this.selectionController.reset();
	        }
	        this.resetCache();
	        var event = this.createModelUpdatedEvent();
	        this.eventService.dispatchEvent(event);
	    };
	    InfiniteRowModel.prototype.createModelUpdatedEvent = function () {
	        return {
	            type: events_1.Events.EVENT_MODEL_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            // not sure if these should all be false - noticed if after implementing,
	            // maybe they should be true?
	            newPage: false,
	            newData: false,
	            keepRenderedRows: false,
	            animate: false
	        };
	    };
	    InfiniteRowModel.prototype.resetCache = function () {
	        // if not first time creating a cache, need to destroy the old one
	        this.destroyCache();
	        var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
	        // there is a bi-directional dependency between the loader and the cache,
	        // so we create loader here, and then pass dependencies in setDependencies() method later
	        this.rowNodeBlockLoader = new rowNodeBlockLoader_1.RowNodeBlockLoader(maxConcurrentRequests);
	        this.context.wireBean(this.rowNodeBlockLoader);
	        var cacheSettings = {
	            // the user provided datasource
	            datasource: this.datasource,
	            // sort and filter model
	            filterModel: this.filterManager.getFilterModel(),
	            sortModel: this.sortController.getSortModel(),
	            rowNodeBlockLoader: this.rowNodeBlockLoader,
	            // properties - this way we take a snapshot of them, so if user changes any, they will be
	            // used next time we create a new cache, which is generally after a filter or sort change,
	            // or a new datasource is set
	            maxConcurrentRequests: maxConcurrentRequests,
	            overflowSize: this.gridOptionsWrapper.getCacheOverflowSize(),
	            initialRowCount: this.gridOptionsWrapper.getInfiniteInitialRowCount(),
	            maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),
	            blockSize: this.gridOptionsWrapper.getCacheBlockSize(),
	            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),
	            // the cache could create this, however it is also used by the pages, so handy to create it
	            // here as the settings are also passed to the pages
	            lastAccessedSequence: new utils_1.NumberSequence()
	        };
	        // set defaults
	        if (!(cacheSettings.maxConcurrentRequests >= 1)) {
	            cacheSettings.maxConcurrentRequests = 2;
	        }
	        // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the
	        // server for one page at a time. so the default if not specified is 100.
	        if (!(cacheSettings.blockSize >= 1)) {
	            cacheSettings.blockSize = 100;
	        }
	        // if user doesn't give initial rows to display, we assume zero
	        if (!(cacheSettings.initialRowCount >= 1)) {
	            cacheSettings.initialRowCount = 0;
	        }
	        // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past
	        // the current page and request first row of next page
	        if (!(cacheSettings.overflowSize >= 1)) {
	            cacheSettings.overflowSize = 1;
	        }
	        this.infiniteCache = new infiniteCache_1.InfiniteCache(cacheSettings);
	        this.context.wireBean(this.infiniteCache);
	        this.infiniteCache.addEventListener(rowNodeCache_1.RowNodeCache.EVENT_CACHE_UPDATED, this.onCacheUpdated.bind(this));
	    };
	    InfiniteRowModel.prototype.destroyCache = function () {
	        if (this.infiniteCache) {
	            this.infiniteCache.destroy();
	            this.infiniteCache = null;
	        }
	        if (this.rowNodeBlockLoader) {
	            this.rowNodeBlockLoader.destroy();
	            this.rowNodeBlockLoader = null;
	        }
	    };
	    InfiniteRowModel.prototype.onCacheUpdated = function () {
	        var event = this.createModelUpdatedEvent();
	        this.eventService.dispatchEvent(event);
	    };
	    InfiniteRowModel.prototype.getRow = function (rowIndex) {
	        return this.infiniteCache ? this.infiniteCache.getRow(rowIndex) : null;
	    };
	    InfiniteRowModel.prototype.forEachNode = function (callback) {
	        if (this.infiniteCache) {
	            this.infiniteCache.forEachNodeDeep(callback, new utils_1.NumberSequence());
	        }
	    };
	    InfiniteRowModel.prototype.getCurrentPageHeight = function () {
	        return this.getRowCount() * this.rowHeight;
	    };
	    InfiniteRowModel.prototype.getRowIndexAtPixel = function (pixel) {
	        if (this.rowHeight !== 0) {
	            var rowIndexForPixel = Math.floor(pixel / this.rowHeight);
	            if (rowIndexForPixel > this.getPageLastRow()) {
	                return this.getPageLastRow();
	            }
	            else {
	                return rowIndexForPixel;
	            }
	        }
	        else {
	            return 0;
	        }
	    };
	    InfiniteRowModel.prototype.getPageFirstRow = function () {
	        return 0;
	    };
	    InfiniteRowModel.prototype.getPageLastRow = function () {
	        return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() - 1 : 0;
	    };
	    InfiniteRowModel.prototype.getRowCount = function () {
	        return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() : 0;
	    };
	    InfiniteRowModel.prototype.updateRowData = function (transaction) {
	        if (utils_1.Utils.exists(transaction.remove) || utils_1.Utils.exists(transaction.update)) {
	            console.warn('ag-Grid: updateRowData for InfiniteRowModel does not support remove or update, only add');
	            return;
	        }
	        if (utils_1.Utils.missing(transaction.addIndex)) {
	            console.warn('ag-Grid: updateRowData for InfiniteRowModel requires add and addIndex to be set');
	            return;
	        }
	        if (this.infiniteCache) {
	            this.infiniteCache.insertItemsAtIndex(transaction.addIndex, transaction.add);
	        }
	    };
	    InfiniteRowModel.prototype.isRowPresent = function (rowNode) {
	        return false;
	    };
	    InfiniteRowModel.prototype.refreshCache = function () {
	        if (this.infiniteCache) {
	            this.infiniteCache.refreshCache();
	        }
	    };
	    InfiniteRowModel.prototype.purgeCache = function () {
	        if (this.infiniteCache) {
	            this.infiniteCache.purgeCache();
	        }
	    };
	    InfiniteRowModel.prototype.getVirtualRowCount = function () {
	        if (this.infiniteCache) {
	            return this.infiniteCache.getVirtualRowCount();
	        }
	        else {
	            return null;
	        }
	    };
	    InfiniteRowModel.prototype.isMaxRowFound = function () {
	        if (this.infiniteCache) {
	            return this.infiniteCache.isMaxRowFound();
	        }
	    };
	    InfiniteRowModel.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {
	        if (this.infiniteCache) {
	            this.infiniteCache.setVirtualRowCount(rowCount, maxRowFound);
	        }
	    };
	    InfiniteRowModel.prototype.getBlockState = function () {
	        if (this.rowNodeBlockLoader) {
	            return this.rowNodeBlockLoader.getBlockState();
	        }
	        else {
	            return null;
	        }
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], InfiniteRowModel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], InfiniteRowModel.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('sortController'),
	        __metadata("design:type", sortController_1.SortController)
	    ], InfiniteRowModel.prototype, "sortController", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], InfiniteRowModel.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], InfiniteRowModel.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], InfiniteRowModel.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], InfiniteRowModel.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], InfiniteRowModel.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InfiniteRowModel.prototype, "init", null);
	    __decorate([
	        context_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InfiniteRowModel.prototype, "destroy", null);
	    InfiniteRowModel = __decorate([
	        context_1.Bean('rowModel')
	    ], InfiniteRowModel);
	    return InfiniteRowModel;
	}(beanStub_1.BeanStub));
	exports.InfiniteRowModel = InfiniteRowModel;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var logger_1 = __webpack_require__(6);
	var infiniteBlock_1 = __webpack_require__(120);
	var rowNodeCache_1 = __webpack_require__(122);
	var gridApi_1 = __webpack_require__(12);
	var columnController_1 = __webpack_require__(15);
	var InfiniteCache = (function (_super) {
	    __extends(InfiniteCache, _super);
	    function InfiniteCache(params) {
	        return _super.call(this, params) || this;
	    }
	    InfiniteCache.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('InfiniteCache');
	    };
	    InfiniteCache.prototype.init = function () {
	        _super.prototype.init.call(this);
	        // start load of data, as the virtualRowCount will remain at 0 otherwise,
	        // so we need this to kick things off, otherwise grid would never call getRow()
	        this.getRow(0);
	    };
	    InfiniteCache.prototype.moveItemsDown = function (page, moveFromIndex, moveCount) {
	        var startRow = page.getStartRow();
	        var endRow = page.getEndRow();
	        var indexOfLastRowToMove = moveFromIndex + moveCount;
	        // all rows need to be moved down below the insertion index
	        for (var currentRowIndex = endRow - 1; currentRowIndex >= startRow; currentRowIndex--) {
	            // don't move rows at or before the insertion index
	            if (currentRowIndex < indexOfLastRowToMove) {
	                continue;
	            }
	            var indexOfNodeWeWant = currentRowIndex - moveCount;
	            var nodeForThisIndex = this.getRow(indexOfNodeWeWant, true);
	            if (nodeForThisIndex) {
	                page.setRowNode(currentRowIndex, nodeForThisIndex);
	            }
	            else {
	                page.setBlankRowNode(currentRowIndex);
	                page.setDirty();
	            }
	        }
	    };
	    InfiniteCache.prototype.insertItems = function (block, indexToInsert, items) {
	        var pageStartRow = block.getStartRow();
	        var pageEndRow = block.getEndRow();
	        var newRowNodes = [];
	        // next stage is insert the rows into this page, if applicable
	        for (var index = 0; index < items.length; index++) {
	            var rowIndex = indexToInsert + index;
	            var currentRowInThisPage = rowIndex >= pageStartRow && rowIndex < pageEndRow;
	            if (currentRowInThisPage) {
	                var dataItem = items[index];
	                var newRowNode = block.setNewData(rowIndex, dataItem);
	                newRowNodes.push(newRowNode);
	            }
	        }
	        return newRowNodes;
	    };
	    InfiniteCache.prototype.insertItemsAtIndex = function (indexToInsert, items) {
	        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order
	        var _this = this;
	        var newNodes = [];
	        this.forEachBlockInReverseOrder(function (block) {
	            var pageEndRow = block.getEndRow();
	            // if the insertion is after this page, then this page is not impacted
	            if (pageEndRow <= indexToInsert) {
	                return;
	            }
	            _this.moveItemsDown(block, indexToInsert, items.length);
	            var newNodesThisPage = _this.insertItems(block, indexToInsert, items);
	            newNodesThisPage.forEach(function (rowNode) { return newNodes.push(rowNode); });
	        });
	        if (this.isMaxRowFound()) {
	            this.hack_setVirtualRowCount(this.getVirtualRowCount() + items.length);
	        }
	        this.onCacheUpdated();
	        var event = {
	            type: events_1.Events.EVENT_ROW_DATA_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,
	    // it will want new pages in the cache as it asks for rows. only when we are inserting /
	    // removing rows via the api is dontCreatePage set, where we move rows between the pages.
	    InfiniteCache.prototype.getRow = function (rowIndex, dontCreatePage) {
	        if (dontCreatePage === void 0) { dontCreatePage = false; }
	        var blockId = Math.floor(rowIndex / this.cacheParams.blockSize);
	        var block = this.getBlock(blockId);
	        if (!block) {
	            if (dontCreatePage) {
	                return null;
	            }
	            else {
	                block = this.createBlock(blockId);
	            }
	        }
	        return block.getRow(rowIndex);
	    };
	    InfiniteCache.prototype.createBlock = function (blockNumber) {
	        var newBlock = new infiniteBlock_1.InfiniteBlock(blockNumber, this.cacheParams);
	        this.context.wireBean(newBlock);
	        this.postCreateBlock(newBlock);
	        return newBlock;
	    };
	    // we have this on infinite row model only, not enterprise row model,
	    // because for enterprise, it would leave the children in inconsistent
	    // state - eg if a node had children, but after the refresh it had data
	    // for a different row, then the children would be with the wrong row node.
	    InfiniteCache.prototype.refreshCache = function () {
	        this.forEachBlockInOrder(function (block) { return block.setDirty(); });
	        this.checkBlockToLoad();
	    };
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], InfiniteCache.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], InfiniteCache.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], InfiniteCache.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], InfiniteCache.prototype, "gridApi", void 0);
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], InfiniteCache.prototype, "setBeans", null);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InfiniteCache.prototype, "init", null);
	    return InfiniteCache;
	}(rowNodeCache_1.RowNodeCache));
	exports.InfiniteCache = InfiniteCache;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var context_1 = __webpack_require__(7);
	var rowNodeBlock_1 = __webpack_require__(121);
	var rowRenderer_1 = __webpack_require__(23);
	var InfiniteBlock = (function (_super) {
	    __extends(InfiniteBlock, _super);
	    function InfiniteBlock(pageNumber, params) {
	        var _this = _super.call(this, pageNumber, params) || this;
	        _this.cacheParams = params;
	        return _this;
	    }
	    InfiniteBlock.prototype.createBlankRowNode = function (rowIndex) {
	        var rowNode = _super.prototype.createBlankRowNode.call(this, rowIndex);
	        rowNode.uiLevel = 0;
	        this.setIndexAndTopOnRowNode(rowNode, rowIndex);
	        return rowNode;
	    };
	    InfiniteBlock.prototype.setDataAndId = function (rowNode, data, index) {
	        if (utils_1.Utils.exists(data)) {
	            // this means if the user is not providing id's we just use the
	            // index for the row. this will allow selection to work (that is based
	            // on index) as long user is not inserting or deleting rows,
	            // or wanting to keep selection between server side sorting or filtering
	            rowNode.setDataAndId(data, index.toString());
	        }
	        else {
	            rowNode.setDataAndId(undefined, undefined);
	        }
	    };
	    InfiniteBlock.prototype.setRowNode = function (rowIndex, rowNode) {
	        _super.prototype.setRowNode.call(this, rowIndex, rowNode);
	        this.setIndexAndTopOnRowNode(rowNode, rowIndex);
	    };
	    InfiniteBlock.prototype.init = function () {
	        _super.prototype.init.call(this, {
	            context: this.context,
	            rowRenderer: this.rowRenderer
	        });
	    };
	    InfiniteBlock.prototype.getNodeIdPrefix = function () {
	        return null;
	    };
	    InfiniteBlock.prototype.getRow = function (displayIndex) {
	        return this.getRowUsingLocalIndex(displayIndex);
	    };
	    InfiniteBlock.prototype.setIndexAndTopOnRowNode = function (rowNode, rowIndex) {
	        rowNode.setRowIndex(rowIndex);
	        rowNode.rowTop = this.cacheParams.rowHeight * rowIndex;
	    };
	    InfiniteBlock.prototype.loadFromDatasource = function () {
	        var _this = this;
	        // PROBLEM . . . . when the user sets sort via colDef.sort, then this code
	        // is executing before the sort is set up, so server is not getting the sort
	        // model. need to change with regards order - so the server side request is
	        // AFTER thus it gets the right sort model.
	        var params = {
	            startRow: this.getStartRow(),
	            endRow: this.getEndRow(),
	            successCallback: this.pageLoaded.bind(this, this.getVersion()),
	            failCallback: this.pageLoadFailed.bind(this),
	            sortModel: this.cacheParams.sortModel,
	            filterModel: this.cacheParams.filterModel,
	            context: this.gridOptionsWrapper.getContext()
	        };
	        if (utils_1.Utils.missing(this.cacheParams.datasource.getRows)) {
	            console.warn("ag-Grid: datasource is missing getRows method");
	            return;
	        }
	        // check if old version of datasource used
	        var getRowsParams = utils_1.Utils.getFunctionParameters(this.cacheParams.datasource.getRows);
	        if (getRowsParams.length > 1) {
	            console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.');
	            console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.');
	        }
	        // put in timeout, to force result to be async
	        setTimeout(function () {
	            _this.cacheParams.datasource.getRows(params);
	        }, 0);
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], InfiniteBlock.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], InfiniteBlock.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], InfiniteBlock.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InfiniteBlock.prototype, "init", null);
	    return InfiniteBlock;
	}(rowNodeBlock_1.RowNodeBlock));
	exports.InfiniteBlock = InfiniteBlock;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var rowNode_1 = __webpack_require__(30);
	var beanStub_1 = __webpack_require__(36);
	var RowNodeBlock = (function (_super) {
	    __extends(RowNodeBlock, _super);
	    function RowNodeBlock(blockNumber, rowNodeCacheParams) {
	        var _this = _super.call(this) || this;
	        _this.version = 0;
	        _this.state = RowNodeBlock.STATE_DIRTY;
	        _this.rowNodeCacheParams = rowNodeCacheParams;
	        _this.blockNumber = blockNumber;
	        // we don't need to calculate these now, as the inputs don't change,
	        // however it makes the code easier to read if we work them out up front
	        _this.startRow = blockNumber * rowNodeCacheParams.blockSize;
	        _this.endRow = _this.startRow + rowNodeCacheParams.blockSize;
	        return _this;
	    }
	    RowNodeBlock.prototype.isAnyNodeOpen = function (rowCount) {
	        var result = false;
	        this.forEachNodeCallback(function (rowNode) {
	            if (rowNode.expanded) {
	                result = true;
	            }
	        }, rowCount);
	        return result;
	    };
	    RowNodeBlock.prototype.forEachNodeCallback = function (callback, rowCount) {
	        for (var rowIndex = this.startRow; rowIndex < this.endRow; rowIndex++) {
	            // we check against rowCount as this page may be the last one, and if it is, then
	            // the last rows are not part of the set
	            if (rowIndex < rowCount) {
	                var rowNode = this.getRowUsingLocalIndex(rowIndex);
	                callback(rowNode, rowIndex);
	            }
	        }
	    };
	    RowNodeBlock.prototype.forEachNode = function (callback, sequence, rowCount, deep) {
	        this.forEachNodeCallback(function (rowNode) {
	            callback(rowNode, sequence.next());
	            // this will only every happen for enterprise row model, as infinite
	            // row model doesn't have groups
	            if (deep && rowNode.childrenCache) {
	                rowNode.childrenCache.forEachNodeDeep(callback, sequence);
	            }
	        }, rowCount);
	    };
	    RowNodeBlock.prototype.forEachNodeDeep = function (callback, sequence, rowCount) {
	        this.forEachNode(callback, sequence, rowCount, true);
	    };
	    RowNodeBlock.prototype.forEachNodeShallow = function (callback, sequence, rowCount) {
	        this.forEachNode(callback, sequence, rowCount, false);
	    };
	    RowNodeBlock.prototype.getVersion = function () {
	        return this.version;
	    };
	    RowNodeBlock.prototype.getLastAccessed = function () {
	        return this.lastAccessed;
	    };
	    RowNodeBlock.prototype.getRowUsingLocalIndex = function (rowIndex) {
	        this.lastAccessed = this.rowNodeCacheParams.lastAccessedSequence.next();
	        var localIndex = rowIndex - this.startRow;
	        return this.rowNodes[localIndex];
	    };
	    RowNodeBlock.prototype.init = function (beans) {
	        this.beans = beans;
	        this.createRowNodes();
	    };
	    RowNodeBlock.prototype.getStartRow = function () {
	        return this.startRow;
	    };
	    RowNodeBlock.prototype.getEndRow = function () {
	        return this.endRow;
	    };
	    RowNodeBlock.prototype.getBlockNumber = function () {
	        return this.blockNumber;
	    };
	    RowNodeBlock.prototype.setDirty = function () {
	        // in case any current loads in progress, this will have their results ignored
	        this.version++;
	        this.state = RowNodeBlock.STATE_DIRTY;
	    };
	    RowNodeBlock.prototype.setDirtyAndPurge = function () {
	        this.setDirty();
	        this.rowNodes.forEach(function (rowNode) {
	            rowNode.setData(null);
	        });
	    };
	    RowNodeBlock.prototype.getState = function () {
	        return this.state;
	    };
	    RowNodeBlock.prototype.setRowNode = function (rowIndex, rowNode) {
	        var localIndex = rowIndex - this.startRow;
	        this.rowNodes[localIndex] = rowNode;
	    };
	    RowNodeBlock.prototype.setBlankRowNode = function (rowIndex) {
	        var localIndex = rowIndex - this.startRow;
	        var newRowNode = this.createBlankRowNode(rowIndex);
	        this.rowNodes[localIndex] = newRowNode;
	        return newRowNode;
	    };
	    RowNodeBlock.prototype.setNewData = function (rowIndex, dataItem) {
	        var newRowNode = this.setBlankRowNode(rowIndex);
	        this.setDataAndId(newRowNode, dataItem, this.startRow + rowIndex);
	        return newRowNode;
	    };
	    RowNodeBlock.prototype.createBlankRowNode = function (rowIndex) {
	        var rowNode = new rowNode_1.RowNode();
	        this.beans.context.wireBean(rowNode);
	        rowNode.setRowHeight(this.rowNodeCacheParams.rowHeight);
	        return rowNode;
	    };
	    // creates empty row nodes, data is missing as not loaded yet
	    RowNodeBlock.prototype.createRowNodes = function () {
	        this.rowNodes = [];
	        for (var i = 0; i < this.rowNodeCacheParams.blockSize; i++) {
	            var rowIndex = this.startRow + i;
	            var rowNode = this.createBlankRowNode(rowIndex);
	            this.rowNodes.push(rowNode);
	        }
	    };
	    RowNodeBlock.prototype.load = function () {
	        this.state = RowNodeBlock.STATE_LOADING;
	        this.loadFromDatasource();
	    };
	    RowNodeBlock.prototype.pageLoadFailed = function () {
	        this.state = RowNodeBlock.STATE_FAILED;
	        var event = {
	            type: RowNodeBlock.EVENT_LOAD_COMPLETE,
	            success: false,
	            page: this,
	            lastRow: null
	        };
	        this.dispatchEvent(event);
	    };
	    RowNodeBlock.prototype.populateWithRowData = function (rows) {
	        var _this = this;
	        var rowNodesToRefresh = [];
	        this.rowNodes.forEach(function (rowNode, index) {
	            var data = rows[index];
	            if (rowNode.stub) {
	                rowNodesToRefresh.push(rowNode);
	            }
	            _this.setDataAndId(rowNode, data, _this.startRow + index);
	        });
	        if (rowNodesToRefresh.length > 0) {
	            this.beans.rowRenderer.redrawRows(rowNodesToRefresh);
	        }
	    };
	    RowNodeBlock.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.rowNodes.forEach(function (rowNode) {
	            if (rowNode.childrenCache) {
	                rowNode.childrenCache.destroy();
	                rowNode.childrenCache = null;
	            }
	        });
	    };
	    RowNodeBlock.prototype.pageLoaded = function (version, rows, lastRow) {
	        // we need to check the version, in case there was an old request
	        // from the server that was sent before we refreshed the cache,
	        // if the load was done as a result of a cache refresh
	        if (version === this.version) {
	            this.state = RowNodeBlock.STATE_LOADED;
	            this.populateWithRowData(rows);
	        }
	        lastRow = utils_1.Utils.cleanNumber(lastRow);
	        // check here if lastrow should be set
	        var event = {
	            type: RowNodeBlock.EVENT_LOAD_COMPLETE,
	            success: true,
	            page: this,
	            lastRow: lastRow
	        };
	        this.dispatchEvent(event);
	    };
	    RowNodeBlock.EVENT_LOAD_COMPLETE = 'loadComplete';
	    RowNodeBlock.STATE_DIRTY = 'dirty';
	    RowNodeBlock.STATE_LOADING = 'loading';
	    RowNodeBlock.STATE_LOADED = 'loaded';
	    RowNodeBlock.STATE_FAILED = 'failed';
	    return RowNodeBlock;
	}(beanStub_1.BeanStub));
	exports.RowNodeBlock = RowNodeBlock;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var beanStub_1 = __webpack_require__(36);
	var rowNodeBlock_1 = __webpack_require__(121);
	var RowNodeCache = (function (_super) {
	    __extends(RowNodeCache, _super);
	    function RowNodeCache(cacheParams) {
	        var _this = _super.call(this) || this;
	        _this.maxRowFound = false;
	        _this.blocks = {};
	        _this.blockCount = 0;
	        _this.virtualRowCount = cacheParams.initialRowCount;
	        _this.cacheParams = cacheParams;
	        return _this;
	    }
	    RowNodeCache.prototype.destroy = function () {
	        var _this = this;
	        _super.prototype.destroy.call(this);
	        this.forEachBlockInOrder(function (block) { return _this.destroyBlock(block); });
	    };
	    RowNodeCache.prototype.init = function () {
	        var _this = this;
	        this.active = true;
	        this.addDestroyFunc(function () { return _this.active = false; });
	    };
	    RowNodeCache.prototype.isActive = function () {
	        return this.active;
	    };
	    RowNodeCache.prototype.getVirtualRowCount = function () {
	        return this.virtualRowCount;
	    };
	    RowNodeCache.prototype.hack_setVirtualRowCount = function (virtualRowCount) {
	        this.virtualRowCount = virtualRowCount;
	    };
	    RowNodeCache.prototype.isMaxRowFound = function () {
	        return this.maxRowFound;
	    };
	    // listener on EVENT_LOAD_COMPLETE
	    RowNodeCache.prototype.onPageLoaded = function (event) {
	        // if we are not active, then we ignore all events, otherwise we could end up getting the
	        // grid to refresh even though we are no longer the active cache
	        if (!this.isActive()) {
	            return;
	        }
	        this.logger.log("onPageLoaded: page = " + event.page.getBlockNumber() + ", lastRow = " + event.lastRow);
	        this.cacheParams.rowNodeBlockLoader.loadComplete();
	        this.checkBlockToLoad();
	        if (event.success) {
	            this.checkVirtualRowCount(event.page, event.lastRow);
	        }
	    };
	    RowNodeCache.prototype.purgeBlocksIfNeeded = function (blockToExclude) {
	        var _this = this;
	        // no purge if user didn't give maxBlocksInCache
	        if (utils_1.Utils.missing(this.cacheParams.maxBlocksInCache)) {
	            return;
	        }
	        // no purge if block count is less than max allowed
	        if (this.blockCount <= this.cacheParams.maxBlocksInCache) {
	            return;
	        }
	        // put all candidate blocks into a list for sorting
	        var blocksForPurging = [];
	        this.forEachBlockInOrder(function (block) {
	            // we exclude checking for the page just created, as this has yet to be accessed and hence
	            // the lastAccessed stamp will not be updated for the first time yet
	            if (block === blockToExclude) {
	                return;
	            }
	            blocksForPurging.push(block);
	        });
	        // todo: need to verify that this sorts items in the right order
	        blocksForPurging.sort(function (a, b) { return b.getLastAccessed() - a.getLastAccessed(); });
	        // we remove (maxBlocksInCache - 1) as we already excluded the 'just created' page.
	        // in other words, after the splice operation below, we have taken out the blocks
	        // we want to keep, which means we are left with blocks that we can potentially purge
	        var blocksToKeep = this.cacheParams.maxBlocksInCache - 1;
	        blocksForPurging.splice(0, blocksToKeep);
	        // try and purge each block
	        blocksForPurging.forEach(function (block) {
	            // we never purge blocks if they are open, as purging them would mess up with
	            // our indexes, it would be very messy to restore the purged block to it's
	            // previous state if it had open children (and what if open children of open
	            // children, jeeeesus, just thinking about it freaks me out) so best is have a
	            // rule, if block is open, we never purge.
	            if (block.isAnyNodeOpen(_this.virtualRowCount)) {
	                return;
	            }
	            // at this point, block is not needed, and no open nodes, so burn baby burn
	            _this.removeBlockFromCache(block);
	        });
	    };
	    RowNodeCache.prototype.postCreateBlock = function (newBlock) {
	        newBlock.addEventListener(rowNodeBlock_1.RowNodeBlock.EVENT_LOAD_COMPLETE, this.onPageLoaded.bind(this));
	        this.setBlock(newBlock.getBlockNumber(), newBlock);
	        this.purgeBlocksIfNeeded(newBlock);
	        this.checkBlockToLoad();
	    };
	    RowNodeCache.prototype.removeBlockFromCache = function (pageToRemove) {
	        if (!pageToRemove) {
	            return;
	        }
	        this.destroyBlock(pageToRemove);
	        // we do not want to remove the 'loaded' event listener, as the
	        // concurrent loads count needs to be updated when the load is complete
	        // if the purged page is in loading state
	    };
	    // gets called after: 1) block loaded 2) block created 3) cache refresh
	    RowNodeCache.prototype.checkBlockToLoad = function () {
	        this.cacheParams.rowNodeBlockLoader.checkBlockToLoad();
	    };
	    RowNodeCache.prototype.checkVirtualRowCount = function (block, lastRow) {
	        // if client provided a last row, we always use it, as it could change between server calls
	        // if user deleted data and then called refresh on the grid.
	        if (typeof lastRow === 'number' && lastRow >= 0) {
	            this.virtualRowCount = lastRow;
	            this.maxRowFound = true;
	            this.onCacheUpdated();
	        }
	        else if (!this.maxRowFound) {
	            // otherwise, see if we need to add some virtual rows
	            var lastRowIndex = (block.getBlockNumber() + 1) * this.cacheParams.blockSize;
	            var lastRowIndexPlusOverflow = lastRowIndex + this.cacheParams.overflowSize;
	            if (this.virtualRowCount < lastRowIndexPlusOverflow) {
	                this.virtualRowCount = lastRowIndexPlusOverflow;
	                this.onCacheUpdated();
	            }
	            else if (this.cacheParams.dynamicRowHeight) {
	                // the only other time is if dynamic row height, as loading rows
	                // will change the height of the block, given the height of the rows
	                // is only known after the row is loaded.
	                this.onCacheUpdated();
	            }
	        }
	    };
	    RowNodeCache.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {
	        this.virtualRowCount = rowCount;
	        // if undefined is passed, we do not set this value, if one of {true,false}
	        // is passed, we do set the value.
	        if (utils_1.Utils.exists(maxRowFound)) {
	            this.maxRowFound = maxRowFound;
	        }
	        // if we are still searching, then the row count must not end at the end
	        // of a particular page, otherwise the searching will not pop into the
	        // next page
	        if (!this.maxRowFound) {
	            if (this.virtualRowCount % this.cacheParams.blockSize === 0) {
	                this.virtualRowCount++;
	            }
	        }
	        this.onCacheUpdated();
	    };
	    RowNodeCache.prototype.forEachNodeDeep = function (callback, sequence) {
	        var _this = this;
	        this.forEachBlockInOrder(function (block) {
	            block.forEachNodeDeep(callback, sequence, _this.virtualRowCount);
	        });
	    };
	    RowNodeCache.prototype.forEachBlockInOrder = function (callback) {
	        var ids = this.getBlockIdsSorted();
	        this.forEachBlockId(ids, callback);
	    };
	    RowNodeCache.prototype.forEachBlockInReverseOrder = function (callback) {
	        var ids = this.getBlockIdsSorted().reverse();
	        this.forEachBlockId(ids, callback);
	    };
	    RowNodeCache.prototype.forEachBlockId = function (ids, callback) {
	        var _this = this;
	        ids.forEach(function (id) {
	            var block = _this.blocks[id];
	            callback(block, id);
	        });
	    };
	    RowNodeCache.prototype.getBlockIdsSorted = function () {
	        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order
	        var numberComparator = function (a, b) { return a - b; }; // default comparator for array is string comparison
	        var blockIds = Object.keys(this.blocks).map(function (idStr) { return parseInt(idStr); }).sort(numberComparator);
	        return blockIds;
	    };
	    RowNodeCache.prototype.getBlock = function (blockId) {
	        return this.blocks[blockId];
	    };
	    RowNodeCache.prototype.setBlock = function (id, block) {
	        this.blocks[id] = block;
	        this.blockCount++;
	        this.cacheParams.rowNodeBlockLoader.addBlock(block);
	    };
	    RowNodeCache.prototype.destroyBlock = function (block) {
	        delete this.blocks[block.getBlockNumber()];
	        block.destroy();
	        this.blockCount--;
	        this.cacheParams.rowNodeBlockLoader.removeBlock(block);
	    };
	    // gets called 1) row count changed 2) cache purged 3) items inserted
	    RowNodeCache.prototype.onCacheUpdated = function () {
	        if (this.isActive()) {
	            // this results in both row models (infinite and enterprise) firing ModelUpdated,
	            // however enterprise also updates the row indexes first
	            var event_1 = {
	                type: RowNodeCache.EVENT_CACHE_UPDATED
	            };
	            this.dispatchEvent(event_1);
	        }
	    };
	    RowNodeCache.prototype.purgeCache = function () {
	        var _this = this;
	        this.forEachBlockInOrder(function (block) { return _this.removeBlockFromCache(block); });
	        this.onCacheUpdated();
	    };
	    RowNodeCache.prototype.getRowNodesInRange = function (firstInRange, lastInRange) {
	        var _this = this;
	        var result = [];
	        var lastBlockId = -1;
	        var inActiveRange = false;
	        var numberSequence = new utils_1.NumberSequence();
	        // if only one node passed, we start the selection at the top
	        if (utils_1.Utils.missing(firstInRange)) {
	            inActiveRange = true;
	        }
	        var foundGapInSelection = false;
	        this.forEachBlockInOrder(function (block, id) {
	            if (foundGapInSelection)
	                return;
	            if (inActiveRange && (lastBlockId + 1 !== id)) {
	                foundGapInSelection = true;
	                return;
	            }
	            lastBlockId = id;
	            block.forEachNodeShallow(function (rowNode) {
	                var hitFirstOrLast = rowNode === firstInRange || rowNode === lastInRange;
	                if (inActiveRange || hitFirstOrLast) {
	                    result.push(rowNode);
	                }
	                if (hitFirstOrLast) {
	                    inActiveRange = !inActiveRange;
	                }
	            }, numberSequence, _this.virtualRowCount);
	        });
	        // inActiveRange will be still true if we never hit the second rowNode
	        var invalidRange = foundGapInSelection || inActiveRange;
	        return invalidRange ? [] : result;
	    };
	    RowNodeCache.EVENT_CACHE_UPDATED = 'cacheUpdated';
	    return RowNodeCache;
	}(beanStub_1.BeanStub));
	exports.RowNodeCache = RowNodeCache;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var rowNodeBlock_1 = __webpack_require__(121);
	var logger_1 = __webpack_require__(6);
	var context_1 = __webpack_require__(7);
	var utils_1 = __webpack_require__(8);
	var RowNodeBlockLoader = (function () {
	    function RowNodeBlockLoader(maxConcurrentRequests) {
	        this.activeBlockLoadsCount = 0;
	        this.blocks = [];
	        this.active = true;
	        this.maxConcurrentRequests = maxConcurrentRequests;
	    }
	    RowNodeBlockLoader.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('RowNodeBlockLoader');
	    };
	    RowNodeBlockLoader.prototype.addBlock = function (block) {
	        this.blocks.push(block);
	    };
	    RowNodeBlockLoader.prototype.removeBlock = function (block) {
	        utils_1._.removeFromArray(this.blocks, block);
	    };
	    RowNodeBlockLoader.prototype.destroy = function () {
	        this.active = false;
	    };
	    RowNodeBlockLoader.prototype.loadComplete = function () {
	        this.activeBlockLoadsCount--;
	    };
	    RowNodeBlockLoader.prototype.checkBlockToLoad = function () {
	        if (!this.active) {
	            return;
	        }
	        this.printCacheStatus();
	        if (this.activeBlockLoadsCount >= this.maxConcurrentRequests) {
	            this.logger.log("checkBlockToLoad: max loads exceeded");
	            return;
	        }
	        var blockToLoad = null;
	        this.blocks.forEach(function (block) {
	            if (block.getState() === rowNodeBlock_1.RowNodeBlock.STATE_DIRTY) {
	                blockToLoad = block;
	            }
	        });
	        if (blockToLoad) {
	            blockToLoad.load();
	            this.activeBlockLoadsCount++;
	            this.logger.log("checkBlockToLoad: loading page " + blockToLoad.getBlockNumber());
	            this.printCacheStatus();
	        }
	        else {
	            this.logger.log("checkBlockToLoad: no pages to load");
	        }
	    };
	    RowNodeBlockLoader.prototype.getBlockState = function () {
	        var result = {};
	        this.blocks.forEach(function (block) {
	            var nodeIdPrefix = block.getNodeIdPrefix();
	            var stateItem = {
	                blockNumber: block.getBlockNumber(),
	                startRow: block.getStartRow(),
	                endRow: block.getEndRow(),
	                pageStatus: block.getState()
	            };
	            if (utils_1._.exists(nodeIdPrefix)) {
	                result[nodeIdPrefix + block.getBlockNumber()] = stateItem;
	            }
	            else {
	                result[block.getBlockNumber()] = stateItem;
	            }
	        });
	        return result;
	    };
	    RowNodeBlockLoader.prototype.printCacheStatus = function () {
	        if (this.logger.isLogging()) {
	            this.logger.log("printCacheStatus: activePageLoadsCount = " + this.activeBlockLoadsCount + ","
	                + (" blocks = " + JSON.stringify(this.getBlockState())));
	        }
	    };
	    __decorate([
	        __param(0, context_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [logger_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], RowNodeBlockLoader.prototype, "setBeans", null);
	    return RowNodeBlockLoader;
	}());
	exports.RowNodeBlockLoader = RowNodeBlockLoader;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var constants_1 = __webpack_require__(9);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var columnController_1 = __webpack_require__(15);
	var filterManager_1 = __webpack_require__(51);
	var rowNode_1 = __webpack_require__(30);
	var eventService_1 = __webpack_require__(5);
	var events_1 = __webpack_require__(11);
	var context_1 = __webpack_require__(7);
	var selectionController_1 = __webpack_require__(27);
	var inMemoryNodeManager_1 = __webpack_require__(125);
	var changedPath_1 = __webpack_require__(126);
	var valueService_1 = __webpack_require__(31);
	var valueCache_1 = __webpack_require__(32);
	var gridApi_1 = __webpack_require__(12);
	var RecursionType;
	(function (RecursionType) {
	    RecursionType[RecursionType["Normal"] = 0] = "Normal";
	    RecursionType[RecursionType["AfterFilter"] = 1] = "AfterFilter";
	    RecursionType[RecursionType["AfterFilterAndSort"] = 2] = "AfterFilterAndSort";
	    RecursionType[RecursionType["PivotNodes"] = 3] = "PivotNodes";
	})(RecursionType || (RecursionType = {}));
	;
	var InMemoryRowModel = (function () {
	    function InMemoryRowModel() {
	    }
	    InMemoryRowModel.prototype.init = function () {
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.refreshModel.bind(this, { step: constants_1.Constants.STEP_EVERYTHING }));
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.refreshModel.bind(this, { step: constants_1.Constants.STEP_EVERYTHING }));
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: constants_1.Constants.STEP_PIVOT }));
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
	        this.eventService.addModalPriorityEventListener(events_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.refreshModel.bind(this, { step: constants_1.Constants.STEP_PIVOT }));
	        this.gridOptionsWrapper.addEventListener(gridOptionsWrapper_1.GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, this.refreshModel.bind(this, { step: constants_1.Constants.STEP_MAP, keepRenderedRows: true, animate: true }));
	        this.rootNode = new rowNode_1.RowNode();
	        this.nodeManager = new inMemoryNodeManager_1.InMemoryNodeManager(this.rootNode, this.gridOptionsWrapper, this.context, this.eventService, this.columnController);
	        this.context.wireBean(this.rootNode);
	    };
	    InMemoryRowModel.prototype.isLastRowFound = function () {
	        return true;
	    };
	    InMemoryRowModel.prototype.getRowCount = function () {
	        if (this.rowsToDisplay) {
	            return this.rowsToDisplay.length;
	        }
	        else {
	            return 0;
	        }
	    };
	    InMemoryRowModel.prototype.getRowBounds = function (index) {
	        if (utils_1.Utils.missing(this.rowsToDisplay)) {
	            return null;
	        }
	        var rowNode = this.rowsToDisplay[index];
	        if (rowNode) {
	            return {
	                rowTop: rowNode.rowTop,
	                rowHeight: rowNode.rowHeight
	            };
	        }
	        else {
	            return null;
	        }
	    };
	    InMemoryRowModel.prototype.onRowGroupOpened = function () {
	        var animate = this.gridOptionsWrapper.isAnimateRows();
	        this.refreshModel({ step: constants_1.Constants.STEP_MAP, keepRenderedRows: true, animate: animate });
	    };
	    InMemoryRowModel.prototype.onFilterChanged = function () {
	        var animate = this.gridOptionsWrapper.isAnimateRows();
	        this.refreshModel({ step: constants_1.Constants.STEP_FILTER, keepRenderedRows: true, animate: animate });
	    };
	    InMemoryRowModel.prototype.onSortChanged = function () {
	        // we only act on the sort event here if the user is doing in grid sorting.
	        // we ignore it if the sorting is happening on the server side.
	        if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	            return;
	        }
	        var animate = this.gridOptionsWrapper.isAnimateRows();
	        this.refreshModel({ step: constants_1.Constants.STEP_SORT, keepRenderedRows: true, animate: animate, keepEditingRows: true });
	    };
	    InMemoryRowModel.prototype.getType = function () {
	        return constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY;
	    };
	    InMemoryRowModel.prototype.onValueChanged = function () {
	        if (this.columnController.isPivotActive()) {
	            this.refreshModel({ step: constants_1.Constants.STEP_PIVOT });
	        }
	        else {
	            this.refreshModel({ step: constants_1.Constants.STEP_AGGREGATE });
	        }
	    };
	    InMemoryRowModel.prototype.createChangePath = function (transaction) {
	        if (!transaction) {
	            return null;
	        }
	        // for updates, if the row is updated at all, then we re-calc all the values
	        // in that row. we could compare each value to each old value, however if we
	        // did this, we would be calling the valueService twice, once on the old value
	        // and once on the new value. so it's less valueGetter calls if we just assume
	        // each column is different. that way the changedPath is used so that only
	        // the impacted parent rows are recalculated, parents who's children have
	        // not changed are not impacted.
	        var valueColumns = this.columnController.getValueColumns();
	        if (!valueColumns || valueColumns.length === 0) {
	            return null;
	        }
	        var changedPath = new changedPath_1.ChangedPath(false);
	        return changedPath;
	    };
	    InMemoryRowModel.prototype.refreshModel = function (params) {
	        // this goes through the pipeline of stages. what's in my head is similar
	        // to the diagram on this page:
	        // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html
	        // however we want to keep the results of each stage, hence we manually call
	        // each step rather than have them chain each other.
	        var _this = this;
	        // fallthrough in below switch is on purpose,
	        // eg if STEP_FILTER, then all steps below this
	        // step get done
	        // let start: number;
	        // console.log('======= start =======');
	        var changedPath = this.createChangePath(params.rowNodeTransaction);
	        switch (params.step) {
	            case constants_1.Constants.STEP_EVERYTHING:
	                // start = new Date().getTime();
	                this.doRowGrouping(params.groupState, params.rowNodeTransaction, changedPath);
	            // console.log('rowGrouping = ' + (new Date().getTime() - start));
	            case constants_1.Constants.STEP_FILTER:
	                // start = new Date().getTime();
	                this.doFilter();
	            // console.log('filter = ' + (new Date().getTime() - start));
	            case constants_1.Constants.STEP_PIVOT:
	                this.doPivot();
	            case constants_1.Constants.STEP_AGGREGATE:// depends on agg fields
	                // start = new Date().getTime();
	                this.doAggregate(changedPath);
	            // console.log('aggregation = ' + (new Date().getTime() - start));
	            case constants_1.Constants.STEP_SORT:
	                // start = new Date().getTime();
	                this.doSort();
	            // console.log('sort = ' + (new Date().getTime() - start));
	            case constants_1.Constants.STEP_MAP:
	                // start = new Date().getTime();
	                this.doRowsToDisplay();
	        }
	        var event = {
	            type: events_1.Events.EVENT_MODEL_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            animate: params.animate,
	            keepRenderedRows: params.keepRenderedRows,
	            newData: params.newData,
	            newPage: false
	        };
	        this.eventService.dispatchEvent(event);
	        if (this.$scope) {
	            setTimeout(function () {
	                _this.$scope.$apply();
	            }, 0);
	        }
	    };
	    InMemoryRowModel.prototype.isEmpty = function () {
	        var rowsMissing;
	        var rowsAlreadyGrouped = utils_1.Utils.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());
	        if (rowsAlreadyGrouped) {
	            rowsMissing = utils_1.Utils.missing(this.rootNode.childrenAfterGroup) || this.rootNode.childrenAfterGroup.length === 0;
	        }
	        else {
	            rowsMissing = utils_1.Utils.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;
	        }
	        var empty = utils_1.Utils.missing(this.rootNode) || rowsMissing || !this.columnController.isReady();
	        return empty;
	    };
	    InMemoryRowModel.prototype.isRowsToRender = function () {
	        return utils_1.Utils.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;
	    };
	    InMemoryRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
	        // if lastSelectedNode is missing, we start at the first row
	        var firstRowHit = !lastInRange;
	        var lastRowHit = false;
	        var lastRow;
	        var result = [];
	        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();
	        this.forEachNodeAfterFilterAndSort(function (rowNode) {
	            var lookingForLastRow = firstRowHit && !lastRowHit;
	            // check if we need to flip the select switch
	            if (!firstRowHit) {
	                if (rowNode === lastInRange || rowNode === firstInRange) {
	                    firstRowHit = true;
	                }
	            }
	            var skipThisGroupNode = rowNode.group && groupsSelectChildren;
	            if (!skipThisGroupNode) {
	                var inRange = firstRowHit && !lastRowHit;
	                var childOfLastRow = rowNode.isParentOfNode(lastRow);
	                if (inRange || childOfLastRow) {
	                    result.push(rowNode);
	                }
	            }
	            if (lookingForLastRow) {
	                if (rowNode === lastInRange || rowNode === firstInRange) {
	                    lastRowHit = true;
	                    if (rowNode === lastInRange) {
	                        lastRow = lastInRange;
	                    }
	                    else {
	                        lastRow = firstInRange;
	                    }
	                }
	            }
	        });
	        return result;
	    };
	    InMemoryRowModel.prototype.setDatasource = function (datasource) {
	        console.error('ag-Grid: should never call setDatasource on inMemoryRowController');
	    };
	    InMemoryRowModel.prototype.getTopLevelNodes = function () {
	        return this.rootNode ? this.rootNode.childrenAfterGroup : null;
	    };
	    InMemoryRowModel.prototype.getRootNode = function () {
	        return this.rootNode;
	    };
	    InMemoryRowModel.prototype.getRow = function (index) {
	        return this.rowsToDisplay[index];
	    };
	    InMemoryRowModel.prototype.isRowPresent = function (rowNode) {
	        return this.rowsToDisplay.indexOf(rowNode) >= 0;
	    };
	    InMemoryRowModel.prototype.getVirtualRowCount = function () {
	        console.warn('ag-Grid: rowModel.getVirtualRowCount() is not longer a function, use rowModel.getRowCount() instead');
	        return this.getPageLastRow();
	    };
	    InMemoryRowModel.prototype.getPageFirstRow = function () {
	        return 0;
	    };
	    InMemoryRowModel.prototype.getPageLastRow = function () {
	        if (this.rowsToDisplay) {
	            return this.rowsToDisplay.length - 1;
	        }
	        else {
	            return 0;
	        }
	    };
	    InMemoryRowModel.prototype.getRowIndexAtPixel = function (pixelToMatch) {
	        if (this.isEmpty()) {
	            return -1;
	        }
	        // do binary search of tree
	        // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/
	        var bottomPointer = 0;
	        var topPointer = this.rowsToDisplay.length - 1;
	        // quick check, if the pixel is out of bounds, then return last row
	        if (pixelToMatch <= 0) {
	            // if pixel is less than or equal zero, it's always the first row
	            return 0;
	        }
	        var lastNode = this.rowsToDisplay[this.rowsToDisplay.length - 1];
	        if (lastNode.rowTop <= pixelToMatch) {
	            return this.rowsToDisplay.length - 1;
	        }
	        while (true) {
	            var midPointer = Math.floor((bottomPointer + topPointer) / 2);
	            var currentRowNode = this.rowsToDisplay[midPointer];
	            if (this.isRowInPixel(currentRowNode, pixelToMatch)) {
	                return midPointer;
	            }
	            else if (currentRowNode.rowTop < pixelToMatch) {
	                bottomPointer = midPointer + 1;
	            }
	            else if (currentRowNode.rowTop > pixelToMatch) {
	                topPointer = midPointer - 1;
	            }
	        }
	    };
	    InMemoryRowModel.prototype.isRowInPixel = function (rowNode, pixelToMatch) {
	        var topPixel = rowNode.rowTop;
	        var bottomPixel = rowNode.rowTop + rowNode.rowHeight;
	        var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;
	        return pixelInRow;
	    };
	    InMemoryRowModel.prototype.getCurrentPageHeight = function () {
	        if (this.rowsToDisplay && this.rowsToDisplay.length > 0) {
	            var lastRow = this.rowsToDisplay[this.rowsToDisplay.length - 1];
	            var lastPixel = lastRow.rowTop + lastRow.rowHeight;
	            return lastPixel;
	        }
	        else {
	            return 0;
	        }
	    };
	    InMemoryRowModel.prototype.forEachLeafNode = function (callback) {
	        if (this.rootNode.allLeafChildren) {
	            this.rootNode.allLeafChildren.forEach(function (rowNode, index) { return callback(rowNode, index); });
	        }
	    };
	    InMemoryRowModel.prototype.forEachNode = function (callback) {
	        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);
	    };
	    InMemoryRowModel.prototype.forEachNodeAfterFilter = function (callback) {
	        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, RecursionType.AfterFilter, 0);
	    };
	    InMemoryRowModel.prototype.forEachNodeAfterFilterAndSort = function (callback) {
	        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);
	    };
	    InMemoryRowModel.prototype.forEachPivotNode = function (callback) {
	        this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);
	    };
	    // iterates through each item in memory, and calls the callback function
	    // nodes - the rowNodes to traverse
	    // callback - the user provided callback
	    // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc
	    // index - works similar to the index in forEach in javascripts array function
	    InMemoryRowModel.prototype.recursivelyWalkNodesAndCallback = function (nodes, callback, recursionType, index) {
	        if (nodes) {
	            for (var i = 0; i < nodes.length; i++) {
	                var node = nodes[i];
	                callback(node, index++);
	                // go to the next level if it is a group
	                if (node.group) {
	                    // depending on the recursion type, we pick a difference set of children
	                    var nodeChildren = void 0;
	                    switch (recursionType) {
	                        case RecursionType.Normal:
	                            nodeChildren = node.childrenAfterGroup;
	                            break;
	                        case RecursionType.AfterFilter:
	                            nodeChildren = node.childrenAfterFilter;
	                            break;
	                        case RecursionType.AfterFilterAndSort:
	                            nodeChildren = node.childrenAfterSort;
	                            break;
	                        case RecursionType.PivotNodes:
	                            // for pivot, we don't go below leafGroup levels
	                            nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;
	                            break;
	                    }
	                    if (nodeChildren) {
	                        index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);
	                    }
	                }
	            }
	        }
	        return index;
	    };
	    // it's possible to recompute the aggregate without doing the other parts
	    // + gridApi.recomputeAggregates()
	    InMemoryRowModel.prototype.doAggregate = function (changedPath) {
	        if (this.aggregationStage) {
	            this.aggregationStage.execute({ rowNode: this.rootNode, changedPath: changedPath });
	        }
	    };
	    // + gridApi.expandAll()
	    // + gridApi.collapseAll()
	    InMemoryRowModel.prototype.expandOrCollapseAll = function (expand) {
	        if (this.rootNode) {
	            recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);
	        }
	        function recursiveExpandOrCollapse(rowNodes) {
	            if (!rowNodes) {
	                return;
	            }
	            rowNodes.forEach(function (rowNode) {
	                if (rowNode.group) {
	                    rowNode.expanded = expand;
	                    recursiveExpandOrCollapse(rowNode.childrenAfterGroup);
	                }
	            });
	        }
	        this.refreshModel({ step: constants_1.Constants.STEP_MAP });
	    };
	    InMemoryRowModel.prototype.doSort = function () {
	        this.sortStage.execute({ rowNode: this.rootNode });
	    };
	    InMemoryRowModel.prototype.doRowGrouping = function (groupState, rowNodeTransaction, changedPath) {
	        // grouping is enterprise only, so if service missing, skip the step
	        var rowsAlreadyGrouped = utils_1.Utils.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());
	        if (rowsAlreadyGrouped) {
	            return;
	        }
	        if (this.groupStage) {
	            if (rowNodeTransaction) {
	                this.groupStage.execute({ rowNode: this.rootNode,
	                    rowNodeTransaction: rowNodeTransaction,
	                    changedPath: changedPath });
	            }
	            else {
	                // groups are about to get disposed, so need to deselect any that are selected
	                this.selectionController.removeGroupsFromSelection();
	                this.groupStage.execute({ rowNode: this.rootNode });
	                // set open/closed state on groups
	                this.restoreGroupState(groupState);
	            }
	            if (this.gridOptionsWrapper.isGroupSelectsChildren()) {
	                this.selectionController.updateGroupsFromChildrenSelections();
	            }
	        }
	        else {
	            this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;
	        }
	    };
	    InMemoryRowModel.prototype.restoreGroupState = function (groupState) {
	        if (!groupState) {
	            return;
	        }
	        utils_1.Utils.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {
	            // if the group was open last time, then open it this time. however
	            // if was not open last time, then don't touch the group, so the 'groupDefaultExpanded'
	            // setting will take effect.
	            if (typeof groupState[key] === 'boolean') {
	                node.expanded = groupState[key];
	            }
	        });
	    };
	    InMemoryRowModel.prototype.doFilter = function () {
	        this.filterStage.execute({ rowNode: this.rootNode });
	    };
	    InMemoryRowModel.prototype.doPivot = function () {
	        if (this.pivotStage) {
	            this.pivotStage.execute({ rowNode: this.rootNode });
	        }
	    };
	    InMemoryRowModel.prototype.getGroupState = function () {
	        if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {
	            return null;
	        }
	        var result = {};
	        utils_1.Utils.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) { return result[key] = node.expanded; });
	        return result;
	    };
	    InMemoryRowModel.prototype.getCopyOfNodesMap = function () {
	        return this.nodeManager.getCopyOfNodesMap();
	    };
	    InMemoryRowModel.prototype.getRowNode = function (id) {
	        return this.nodeManager.getRowNode(id);
	    };
	    // rows: the rows to put into the model
	    InMemoryRowModel.prototype.setRowData = function (rowData) {
	        // no need to invalidate cache, as the cache is stored on the rowNode,
	        // so new rowNodes means the cache is wiped anyway.
	        // remember group state, so we can expand groups that should be expanded
	        var groupState = this.getGroupState();
	        this.nodeManager.setRowData(rowData);
	        // this event kicks off:
	        // - clears selection
	        // - updates filters
	        // - shows 'no rows' overlay if needed
	        var rowDataChangedEvent = {
	            type: events_1.Events.EVENT_ROW_DATA_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(rowDataChangedEvent);
	        this.refreshModel({
	            step: constants_1.Constants.STEP_EVERYTHING,
	            groupState: groupState,
	            newData: true
	        });
	    };
	    InMemoryRowModel.prototype.updateRowData = function (rowDataTran) {
	        this.valueCache.onDataChanged();
	        var rowNodeTran = this.nodeManager.updateRowData(rowDataTran);
	        this.refreshModel({
	            step: constants_1.Constants.STEP_EVERYTHING,
	            rowNodeTransaction: rowNodeTran,
	            keepRenderedRows: true,
	            animate: true,
	            keepEditingRows: true
	        });
	        var event = {
	            type: events_1.Events.EVENT_ROW_DATA_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(event);
	        return rowNodeTran;
	    };
	    InMemoryRowModel.prototype.doRowsToDisplay = function () {
	        this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });
	    };
	    InMemoryRowModel.prototype.onRowHeightChanged = function () {
	        this.refreshModel({ step: constants_1.Constants.STEP_MAP, keepRenderedRows: true, keepEditingRows: true });
	    };
	    InMemoryRowModel.prototype.resetRowHeights = function () {
	        this.forEachNode(function (rowNode) { return rowNode.setRowHeight(null); });
	        this.onRowHeightChanged();
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], InMemoryRowModel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], InMemoryRowModel.prototype, "columnController", void 0);
	    __decorate([
	        context_1.Autowired('filterManager'),
	        __metadata("design:type", filterManager_1.FilterManager)
	    ], InMemoryRowModel.prototype, "filterManager", void 0);
	    __decorate([
	        context_1.Autowired('$scope'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "$scope", void 0);
	    __decorate([
	        context_1.Autowired('selectionController'),
	        __metadata("design:type", selectionController_1.SelectionController)
	    ], InMemoryRowModel.prototype, "selectionController", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], InMemoryRowModel.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], InMemoryRowModel.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('valueService'),
	        __metadata("design:type", valueService_1.ValueService)
	    ], InMemoryRowModel.prototype, "valueService", void 0);
	    __decorate([
	        context_1.Autowired('valueCache'),
	        __metadata("design:type", valueCache_1.ValueCache)
	    ], InMemoryRowModel.prototype, "valueCache", void 0);
	    __decorate([
	        context_1.Autowired('columnApi'),
	        __metadata("design:type", columnController_1.ColumnApi)
	    ], InMemoryRowModel.prototype, "columnApi", void 0);
	    __decorate([
	        context_1.Autowired('gridApi'),
	        __metadata("design:type", gridApi_1.GridApi)
	    ], InMemoryRowModel.prototype, "gridApi", void 0);
	    __decorate([
	        context_1.Autowired('filterStage'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "filterStage", void 0);
	    __decorate([
	        context_1.Autowired('sortStage'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "sortStage", void 0);
	    __decorate([
	        context_1.Autowired('flattenStage'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "flattenStage", void 0);
	    __decorate([
	        context_1.Optional('groupStage'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "groupStage", void 0);
	    __decorate([
	        context_1.Optional('aggregationStage'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "aggregationStage", void 0);
	    __decorate([
	        context_1.Optional('pivotStage'),
	        __metadata("design:type", Object)
	    ], InMemoryRowModel.prototype, "pivotStage", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], InMemoryRowModel.prototype, "init", null);
	    InMemoryRowModel = __decorate([
	        context_1.Bean('rowModel')
	    ], InMemoryRowModel);
	    return InMemoryRowModel;
	}());
	exports.InMemoryRowModel = InMemoryRowModel;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var rowNode_1 = __webpack_require__(30);
	var utils_1 = __webpack_require__(8);
	var InMemoryNodeManager = (function () {
	    function InMemoryNodeManager(rootNode, gridOptionsWrapper, context, eventService, columnController) {
	        this.nextId = 0;
	        // when user is provide the id's, we also keep a map of ids to row nodes for convenience
	        this.allNodesMap = {};
	        this.rootNode = rootNode;
	        this.gridOptionsWrapper = gridOptionsWrapper;
	        this.context = context;
	        this.eventService = eventService;
	        this.columnController = columnController;
	        this.rootNode.group = true;
	        this.rootNode.level = -1;
	        this.rootNode.id = InMemoryNodeManager.ROOT_NODE_ID;
	        this.rootNode.allLeafChildren = [];
	        this.rootNode.childrenAfterGroup = [];
	        this.rootNode.childrenAfterSort = [];
	        this.rootNode.childrenAfterFilter = [];
	    }
	    InMemoryNodeManager.prototype.getCopyOfNodesMap = function () {
	        var result = utils_1.Utils.cloneObject(this.allNodesMap);
	        return result;
	    };
	    InMemoryNodeManager.prototype.getRowNode = function (id) {
	        return this.allNodesMap[id];
	    };
	    InMemoryNodeManager.prototype.setRowData = function (rowData) {
	        this.rootNode.childrenAfterFilter = null;
	        this.rootNode.childrenAfterGroup = null;
	        this.rootNode.childrenAfterSort = null;
	        this.rootNode.childrenMapped = null;
	        this.nextId = 0;
	        this.allNodesMap = {};
	        if (!rowData) {
	            this.rootNode.allLeafChildren = [];
	            this.rootNode.childrenAfterGroup = [];
	            return;
	        }
	        // func below doesn't have 'this' pointer, so need to pull out these bits
	        this.getNodeChildDetails = this.gridOptionsWrapper.getNodeChildDetailsFunc();
	        this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();
	        this.doesDataFlower = this.gridOptionsWrapper.getDoesDataFlowerFunc();
	        var rowsAlreadyGrouped = utils_1.Utils.exists(this.getNodeChildDetails);
	        // kick off recursion
	        var result = this.recursiveFunction(rowData, null, InMemoryNodeManager.TOP_LEVEL);
	        if (rowsAlreadyGrouped) {
	            this.rootNode.childrenAfterGroup = result;
	            this.setLeafChildren(this.rootNode);
	        }
	        else {
	            this.rootNode.allLeafChildren = result;
	        }
	    };
	    InMemoryNodeManager.prototype.updateRowData = function (rowDataTran) {
	        var _this = this;
	        if (this.isRowsAlreadyGrouped()) {
	            return null;
	        }
	        var add = rowDataTran.add, addIndex = rowDataTran.addIndex, remove = rowDataTran.remove, update = rowDataTran.update;
	        var rowNodeTransaction = {
	            remove: [],
	            update: [],
	            add: []
	        };
	        if (utils_1.Utils.exists(add)) {
	            var useIndex = typeof addIndex === 'number' && addIndex >= 0;
	            if (useIndex) {
	                // items get inserted in reverse order for index insertion
	                add.reverse().forEach(function (item) {
	                    var newRowNode = _this.addRowNode(item, addIndex);
	                    rowNodeTransaction.add.push(newRowNode);
	                });
	            }
	            else {
	                add.forEach(function (item) {
	                    var newRowNode = _this.addRowNode(item);
	                    rowNodeTransaction.add.push(newRowNode);
	                });
	            }
	        }
	        if (utils_1.Utils.exists(remove)) {
	            remove.forEach(function (item) {
	                var removedRowNode = _this.updatedRowNode(item, false);
	                if (removedRowNode) {
	                    rowNodeTransaction.remove.push(removedRowNode);
	                }
	            });
	        }
	        if (utils_1.Utils.exists(update)) {
	            update.forEach(function (item) {
	                var updatedRowNode = _this.updatedRowNode(item, true);
	                if (updatedRowNode) {
	                    rowNodeTransaction.update.push(updatedRowNode);
	                }
	            });
	        }
	        return rowNodeTransaction;
	    };
	    InMemoryNodeManager.prototype.addRowNode = function (data, index) {
	        var newNode = this.createNode(data, null, InMemoryNodeManager.TOP_LEVEL);
	        if (utils_1.Utils.exists(index)) {
	            utils_1.Utils.insertIntoArray(this.rootNode.allLeafChildren, newNode, index);
	        }
	        else {
	            this.rootNode.allLeafChildren.push(newNode);
	        }
	        return newNode;
	    };
	    InMemoryNodeManager.prototype.updatedRowNode = function (data, update) {
	        var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();
	        var rowNode;
	        if (utils_1.Utils.exists(rowNodeIdFunc)) {
	            // find rowNode us id
	            var id = rowNodeIdFunc(data);
	            rowNode = this.allNodesMap[id];
	            if (!rowNode) {
	                console.error("ag-Grid: could not find row id=" + id + ", data item was not found for this id");
	                return null;
	            }
	        }
	        else {
	            // find rowNode using object references
	            rowNode = utils_1.Utils.find(this.rootNode.allLeafChildren, function (rowNode) { return rowNode.data === data; });
	            if (!rowNode) {
	                console.error("ag-Grid: could not find data item as object was not found", data);
	                return null;
	            }
	        }
	        if (update) {
	            // do update
	            rowNode.updateData(data);
	        }
	        else {
	            // do delete
	            rowNode.setSelected(false);
	            utils_1.Utils.removeFromArray(this.rootNode.allLeafChildren, rowNode);
	            this.allNodesMap[rowNode.id] = undefined;
	        }
	        return rowNode;
	    };
	    InMemoryNodeManager.prototype.recursiveFunction = function (rowData, parent, level) {
	        var _this = this;
	        // make sure the rowData is an array and not a string of json - this was a commonly reported problem on the forum
	        if (typeof rowData === 'string') {
	            console.warn('ag-Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');
	            return;
	        }
	        var rowNodes = [];
	        rowData.forEach(function (dataItem) {
	            var node = _this.createNode(dataItem, parent, level);
	            rowNodes.push(node);
	        });
	        return rowNodes;
	    };
	    InMemoryNodeManager.prototype.createNode = function (dataItem, parent, level) {
	        var node = new rowNode_1.RowNode();
	        this.context.wireBean(node);
	        var nodeChildDetails = this.getNodeChildDetails ? this.getNodeChildDetails(dataItem) : null;
	        if (nodeChildDetails && nodeChildDetails.group) {
	            node.group = true;
	            node.childrenAfterGroup = this.recursiveFunction(nodeChildDetails.children, node, level + 1);
	            node.expanded = nodeChildDetails.expanded === true;
	            node.field = nodeChildDetails.field;
	            node.key = nodeChildDetails.key;
	            node.canFlower = false;
	            // pull out all the leaf children and add to our node
	            this.setLeafChildren(node);
	        }
	        else {
	            node.group = false;
	            node.canFlower = this.doesDataFlower ? this.doesDataFlower(dataItem) : false;
	            if (node.canFlower) {
	                node.expanded = this.isExpanded(level);
	            }
	        }
	        if (parent && !this.suppressParentsInRowNodes) {
	            node.parent = parent;
	        }
	        node.level = level;
	        node.setDataAndId(dataItem, this.nextId.toString());
	        this.allNodesMap[node.id] = node;
	        this.nextId++;
	        return node;
	    };
	    InMemoryNodeManager.prototype.isExpanded = function (level) {
	        var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();
	        if (expandByDefault === -1) {
	            return true;
	        }
	        else {
	            return level < expandByDefault;
	        }
	    };
	    InMemoryNodeManager.prototype.setLeafChildren = function (node) {
	        node.allLeafChildren = [];
	        if (node.childrenAfterGroup) {
	            node.childrenAfterGroup.forEach(function (childAfterGroup) {
	                if (childAfterGroup.group) {
	                    if (childAfterGroup.allLeafChildren) {
	                        childAfterGroup.allLeafChildren.forEach(function (leafChild) { return node.allLeafChildren.push(leafChild); });
	                    }
	                }
	                else {
	                    node.allLeafChildren.push(childAfterGroup);
	                }
	            });
	        }
	    };
	    InMemoryNodeManager.prototype.insertItemsAtIndex = function (index, rowData) {
	        if (this.isRowsAlreadyGrouped()) {
	            return null;
	        }
	        var nodeList = this.rootNode.allLeafChildren;
	        if (index > nodeList.length) {
	            console.warn("ag-Grid: invalid index " + index + ", max index is " + nodeList.length);
	            return;
	        }
	        var newNodes = [];
	        // go through the items backwards, otherwise they get added in reverse order
	        for (var i = rowData.length - 1; i >= 0; i--) {
	            var data = rowData[i];
	            var newNode = this.createNode(data, null, InMemoryNodeManager.TOP_LEVEL);
	            utils_1.Utils.insertIntoArray(nodeList, newNode, index);
	            newNodes.push(newNode);
	        }
	        return newNodes.length > 0 ? newNodes : null;
	    };
	    InMemoryNodeManager.prototype.removeItems = function (rowNodes) {
	        var _this = this;
	        if (this.isRowsAlreadyGrouped()) {
	            return;
	        }
	        var nodeList = this.rootNode.allLeafChildren;
	        var removedNodes = [];
	        rowNodes.forEach(function (rowNode) {
	            var indexOfNode = nodeList.indexOf(rowNode);
	            if (indexOfNode >= 0) {
	                rowNode.setSelected(false);
	                nodeList.splice(indexOfNode, 1);
	                _this.allNodesMap[rowNode.id] = undefined;
	            }
	            removedNodes.push(rowNode);
	        });
	        return removedNodes.length > 0 ? removedNodes : null;
	    };
	    InMemoryNodeManager.prototype.addItems = function (items) {
	        var nodeList = this.rootNode.allLeafChildren;
	        return this.insertItemsAtIndex(nodeList.length, items);
	    };
	    InMemoryNodeManager.prototype.isRowsAlreadyGrouped = function () {
	        var rowsAlreadyGrouped = utils_1.Utils.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());
	        if (rowsAlreadyGrouped) {
	            console.warn('ag-Grid: adding and removing rows is not supported when using nodeChildDetailsFunc, ie it is not ' +
	                'supported if providing groups');
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    InMemoryNodeManager.TOP_LEVEL = 0;
	    InMemoryNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';
	    return InMemoryNodeManager;
	}());
	exports.InMemoryNodeManager = InMemoryNodeManager;


/***/ }),
/* 126 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var ChangedPath = (function () {
	    function ChangedPath(keepingColumns) {
	        this.nodeIdsToBoolean = {};
	        this.nodeIdsToColumns = {};
	        this.keepingColumns = keepingColumns;
	    }
	    ChangedPath.prototype.addParentNode = function (rowNode, columns) {
	        var _this = this;
	        var pointer = rowNode;
	        while (pointer) {
	            // add this item to the path, all the way to parent
	            this.nodeIdsToBoolean[pointer.id] = true;
	            // if columns, add the columns in all the way to parent, merging
	            // in any other columns that might be there already
	            if (this.keepingColumns && columns) {
	                if (!this.nodeIdsToColumns[pointer.id]) {
	                    this.nodeIdsToColumns[pointer.id] = {};
	                }
	                columns.forEach(function (col) { return _this.nodeIdsToColumns[pointer.id][col.getId()] = true; });
	            }
	            pointer = pointer.parent;
	        }
	    };
	    ChangedPath.prototype.isInPath = function (rowNode) {
	        return this.nodeIdsToBoolean[rowNode.id];
	    };
	    ChangedPath.prototype.getValueColumnsForNode = function (rowNode, valueColumns) {
	        if (!this.keepingColumns) {
	            return valueColumns;
	        }
	        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
	        var result = valueColumns.filter(function (col) { return colsForThisNode[col.getId()]; });
	        return result;
	    };
	    ChangedPath.prototype.getNotValueColumnsForNode = function (rowNode, valueColumns) {
	        if (!this.keepingColumns) {
	            return null;
	        }
	        var colsForThisNode = this.nodeIdsToColumns[rowNode.id];
	        var result = valueColumns.filter(function (col) { return !colsForThisNode[col.getId()]; });
	        return result;
	    };
	    return ChangedPath;
	}());
	exports.ChangedPath = ChangedPath;


/***/ }),
/* 127 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/** The base frameworks, eg React & Angular 2, override this bean with implementations specific to their requirement. */
	var BaseFrameworkFactory = (function () {
	    function BaseFrameworkFactory() {
	    }
	    BaseFrameworkFactory.prototype.dateComponent = function (gridOptions) {
	        return gridOptions.dateComponent;
	    };
	    BaseFrameworkFactory.prototype.colDefFloatingCellRenderer = function (colDef) {
	        return colDef.pinnedRowCellRenderer;
	    };
	    BaseFrameworkFactory.prototype.colDefCellRenderer = function (colDef) {
	        return colDef.cellRenderer;
	    };
	    BaseFrameworkFactory.prototype.colDefCellEditor = function (colDef) {
	        return colDef.cellEditor;
	    };
	    BaseFrameworkFactory.prototype.colDefFilter = function (colDef) {
	        return colDef.filter;
	    };
	    BaseFrameworkFactory.prototype.gridOptionsFullWidthCellRenderer = function (gridOptions) {
	        return gridOptions.fullWidthCellRenderer;
	    };
	    BaseFrameworkFactory.prototype.gridOptionsGroupRowRenderer = function (gridOptions) {
	        return gridOptions.groupRowRenderer;
	    };
	    BaseFrameworkFactory.prototype.gridOptionsGroupRowInnerRenderer = function (gridOptions) {
	        return gridOptions.groupRowInnerRenderer;
	    };
	    BaseFrameworkFactory.prototype.setTimeout = function (action, timeout) {
	        setTimeout(action, timeout);
	    };
	    return BaseFrameworkFactory;
	}());
	exports.BaseFrameworkFactory = BaseFrameworkFactory;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var LINE_SEPARATOR = '\r\n';
	var XmlFactory = (function () {
	    function XmlFactory() {
	    }
	    XmlFactory.prototype.createXml = function (xmlElement, booleanTransformer) {
	        var _this = this;
	        var props = "";
	        if (xmlElement.properties) {
	            if (xmlElement.properties.prefixedAttributes) {
	                xmlElement.properties.prefixedAttributes.forEach(function (prefixedSet) {
	                    Object.keys(prefixedSet.map).forEach(function (key) {
	                        props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);
	                    });
	                });
	            }
	            if (xmlElement.properties.rawMap) {
	                Object.keys(xmlElement.properties.rawMap).forEach(function (key) {
	                    props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);
	                });
	            }
	        }
	        var result = "<" + xmlElement.name + props;
	        if (!xmlElement.children && xmlElement.textNode == null) {
	            return result + "/>" + LINE_SEPARATOR;
	        }
	        if (xmlElement.textNode != null) {
	            return result + ">" + xmlElement.textNode + "</" + xmlElement.name + ">" + LINE_SEPARATOR;
	        }
	        result += ">" + LINE_SEPARATOR;
	        xmlElement.children.forEach(function (it) {
	            result += _this.createXml(it, booleanTransformer);
	        });
	        return result + "</" + xmlElement.name + ">" + LINE_SEPARATOR;
	    };
	    XmlFactory.prototype.returnAttributeIfPopulated = function (key, value, booleanTransformer) {
	        if (!value) {
	            return "";
	        }
	        var xmlValue = value;
	        if ((typeof (value) === 'boolean')) {
	            if (booleanTransformer) {
	                xmlValue = booleanTransformer(value);
	            }
	        }
	        xmlValue = '"' + xmlValue + '"';
	        return " " + key + "=" + xmlValue;
	    };
	    XmlFactory = __decorate([
	        context_1.Bean('xmlFactory')
	    ], XmlFactory);
	    return XmlFactory;
	}());
	exports.XmlFactory = XmlFactory;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var rowNode_1 = __webpack_require__(30);
	var inMemoryNodeManager_1 = __webpack_require__(125);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var eventService_1 = __webpack_require__(5);
	var context_1 = __webpack_require__(7);
	var columnController_1 = __webpack_require__(15);
	var RowNodeFactory = (function () {
	    function RowNodeFactory() {
	    }
	    RowNodeFactory.prototype.create = function (data) {
	        var rootNode = new rowNode_1.RowNode();
	        var nodeManager = new inMemoryNodeManager_1.InMemoryNodeManager(rootNode, this.gridOptionsWrapper, this.context, this.eventService, this.columnController);
	        this.context.wireBean(rootNode);
	        nodeManager.setRowData(data);
	        return rootNode;
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], RowNodeFactory.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], RowNodeFactory.prototype, "eventService", void 0);
	    __decorate([
	        context_1.Autowired('context'),
	        __metadata("design:type", context_1.Context)
	    ], RowNodeFactory.prototype, "context", void 0);
	    __decorate([
	        context_1.Autowired('columnController'),
	        __metadata("design:type", columnController_1.ColumnController)
	    ], RowNodeFactory.prototype, "columnController", void 0);
	    RowNodeFactory = __decorate([
	        context_1.Bean("rowNodeFactory")
	    ], RowNodeFactory);
	    return RowNodeFactory;
	}());
	exports.RowNodeFactory = RowNodeFactory;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var context_1 = __webpack_require__(7);
	var gridOptionsWrapper_1 = __webpack_require__(4);
	var changedPath_1 = __webpack_require__(126);
	var rowRenderer_1 = __webpack_require__(23);
	var eventService_1 = __webpack_require__(5);
	var constants_1 = __webpack_require__(9);
	var beanStub_1 = __webpack_require__(36);
	var events_1 = __webpack_require__(11);
	var ChangeDetectionService = (function (_super) {
	    __extends(ChangeDetectionService, _super);
	    function ChangeDetectionService() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ChangeDetectionService.prototype.init = function () {
	        if (this.rowModel.getType() === constants_1.Constants.ROW_MODEL_TYPE_IN_MEMORY) {
	            this.inMemoryRowModel = this.rowModel;
	        }
	        this.addDestroyableEventListener(this.eventService, events_1.Events.EVENT_CELL_VALUE_CHANGED, this.onCellValueChanged.bind(this));
	    };
	    ChangeDetectionService.prototype.onCellValueChanged = function (event) {
	        this.doChangeDetection(event.node, event.column);
	    };
	    ChangeDetectionService.prototype.doChangeDetection = function (rowNode, column) {
	        if (this.gridOptionsWrapper.isSuppressChangeDetection()) {
	            return;
	        }
	        // step 1 of change detection is to update the aggregated values
	        if (this.inMemoryRowModel) {
	            var changedPath = void 0;
	            if (rowNode.parent) {
	                var onlyChangedColumns = this.gridOptionsWrapper.isAggregateOnlyChangedColumns();
	                changedPath = new changedPath_1.ChangedPath(onlyChangedColumns);
	                changedPath.addParentNode(rowNode.parent, [column]);
	            }
	            this.inMemoryRowModel.doAggregate(changedPath);
	        }
	        // step 2 of change detection is to refresh the cells
	        this.rowRenderer.refreshCells();
	    };
	    __decorate([
	        context_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", gridOptionsWrapper_1.GridOptionsWrapper)
	    ], ChangeDetectionService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        context_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], ChangeDetectionService.prototype, "rowModel", void 0);
	    __decorate([
	        context_1.Autowired('rowRenderer'),
	        __metadata("design:type", rowRenderer_1.RowRenderer)
	    ], ChangeDetectionService.prototype, "rowRenderer", void 0);
	    __decorate([
	        context_1.Autowired('eventService'),
	        __metadata("design:type", eventService_1.EventService)
	    ], ChangeDetectionService.prototype, "eventService", void 0);
	    __decorate([
	        context_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ChangeDetectionService.prototype, "init", null);
	    ChangeDetectionService = __decorate([
	        context_1.Bean('changeDetectionService')
	    ], ChangeDetectionService);
	    return ChangeDetectionService;
	}(beanStub_1.BeanStub));
	exports.ChangeDetectionService = ChangeDetectionService;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var componentUtil_1 = __webpack_require__(10);
	var grid_1 = __webpack_require__(111);
	var registered = false;
	function initialiseAgGridWithWebComponents() {
	    console.warn('ag-grid: initialiseAgGridWithWebComponents is deprecated. Please use the ag-grid-webcomponent dependency instead. ');
	    // only register to WebComponents once
	    if (registered) {
	        return;
	    }
	    registered = true;
	    if (typeof document === 'undefined' || !document.registerElement) {
	        console.error('ag-Grid: unable to find document.registerElement() function, unable to initialise ag-Grid as a Web Component');
	    }
	    // i don't think this type of extension is possible in TypeScript, so back to
	    // plain Javascript to create this object
	    var AgileGridProto = Object.create(HTMLElement.prototype);
	    // wrap each property with a get and set method, so we can track when changes are done
	    componentUtil_1.ComponentUtil.ALL_PROPERTIES.forEach(function (key) {
	        Object.defineProperty(AgileGridProto, key, {
	            set: function (v) {
	                this.__agGridSetProperty(key, v);
	            },
	            get: function () {
	                return this.__agGridGetProperty(key);
	            },
	            enumerable: true,
	            configurable: true
	        });
	    });
	    var agGridProtoNoType = AgileGridProto;
	    agGridProtoNoType.__agGridSetProperty = function (key, value) {
	        if (!this.__attributes) {
	            this.__attributes = {};
	        }
	        this.__attributes[key] = value;
	        // keeping this consistent with the ng2 onChange, so I can reuse the handling code
	        var changeObject = {};
	        changeObject[key] = { currentValue: value };
	        this.onChange(changeObject);
	    };
	    agGridProtoNoType.onChange = function (changes) {
	        if (this._initialised) {
	            componentUtil_1.ComponentUtil.processOnChange(changes, this._gridOptions, this.api, this.columnApi);
	        }
	    };
	    agGridProtoNoType.__agGridGetProperty = function (key) {
	        if (!this.__attributes) {
	            this.__attributes = {};
	        }
	        return this.__attributes[key];
	    };
	    agGridProtoNoType.setGridOptions = function (options) {
	        var globalEventListener = this.globalEventListener.bind(this);
	        this._gridOptions = componentUtil_1.ComponentUtil.copyAttributesToGridOptions(options, this);
	        var gridParams = {
	            globalEventListener: globalEventListener
	        };
	        this._agGrid = new grid_1.Grid(this, this._gridOptions, gridParams);
	        this.api = options.api;
	        this.columnApi = options.columnApi;
	        this._initialised = true;
	    };
	    // copies all the attributes into this object
	    agGridProtoNoType.createdCallback = function () {
	        for (var i = 0; i < this.attributes.length; i++) {
	            var attribute = this.attributes[i];
	            this.setPropertyFromAttribute(attribute);
	        }
	    };
	    agGridProtoNoType.setPropertyFromAttribute = function (attribute) {
	        var name = toCamelCase(attribute.nodeName);
	        var value = attribute.nodeValue;
	        if (componentUtil_1.ComponentUtil.ALL_PROPERTIES.indexOf(name) >= 0) {
	            this[name] = value;
	        }
	    };
	    agGridProtoNoType.attachedCallback = function (params) { };
	    agGridProtoNoType.detachedCallback = function (params) { };
	    agGridProtoNoType.attributeChangedCallback = function (attributeName) {
	        var attribute = this.attributes[attributeName];
	        this.setPropertyFromAttribute(attribute);
	    };
	    agGridProtoNoType.globalEventListener = function (eventType, event) {
	        var eventLowerCase = eventType.toLowerCase();
	        var browserEvent = new Event(eventLowerCase);
	        var browserEventNoType = browserEvent;
	        browserEventNoType.agGridDetails = event;
	        this.dispatchEvent(browserEvent);
	        var callbackMethod = 'on' + eventLowerCase;
	        if (typeof this[callbackMethod] === 'function') {
	            this[callbackMethod](browserEvent);
	        }
	    };
	    // finally, register
	    document.registerElement('ag-grid', { prototype: AgileGridProto });
	}
	exports.initialiseAgGridWithWebComponents = initialiseAgGridWithWebComponents;
	function toCamelCase(myString) {
	    if (typeof myString === 'string') {
	        var result = myString.replace(/-([a-z])/g, function (g) {
	            return g[1].toUpperCase();
	        });
	        return result;
	    }
	    else {
	        return myString;
	    }
	}


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	var TabbedLayout = (function () {
	    function TabbedLayout(params) {
	        var _this = this;
	        this.items = [];
	        this.params = params;
	        this.eGui = document.createElement('div');
	        this.eGui.innerHTML = TabbedLayout.TEMPLATE;
	        this.eHeader = this.eGui.querySelector('#tabHeader');
	        this.eBody = this.eGui.querySelector('#tabBody');
	        utils_1.Utils.addCssClass(this.eGui, params.cssClass);
	        if (params.items) {
	            params.items.forEach(function (item) { return _this.addItem(item); });
	        }
	    }
	    TabbedLayout.prototype.setAfterAttachedParams = function (params) {
	        this.afterAttachedParams = params;
	    };
	    TabbedLayout.prototype.getMinWidth = function () {
	        var eDummyContainer = document.createElement('span');
	        // position fixed, so it isn't restricted to the boundaries of the parent
	        eDummyContainer.style.position = 'fixed';
	        // we put the dummy into the body container, so it will inherit all the
	        // css styles that the real cells are inheriting
	        this.eGui.appendChild(eDummyContainer);
	        var minWidth = 0;
	        this.items.forEach(function (itemWrapper) {
	            utils_1.Utils.removeAllChildren(eDummyContainer);
	            var eClone = itemWrapper.tabbedItem.body.cloneNode(true);
	            eDummyContainer.appendChild(eClone);
	            if (minWidth < eDummyContainer.offsetWidth) {
	                minWidth = eDummyContainer.offsetWidth;
	            }
	        });
	        this.eGui.removeChild(eDummyContainer);
	        return minWidth;
	    };
	    TabbedLayout.prototype.showFirstItem = function () {
	        if (this.items.length > 0) {
	            this.showItemWrapper(this.items[0]);
	        }
	    };
	    TabbedLayout.prototype.addItem = function (item) {
	        var eHeaderButton = document.createElement('span');
	        eHeaderButton.appendChild(item.title);
	        utils_1.Utils.addCssClass(eHeaderButton, 'ag-tab');
	        this.eHeader.appendChild(eHeaderButton);
	        var wrapper = {
	            tabbedItem: item,
	            eHeaderButton: eHeaderButton
	        };
	        this.items.push(wrapper);
	        eHeaderButton.addEventListener('click', this.showItemWrapper.bind(this, wrapper));
	    };
	    TabbedLayout.prototype.showItem = function (tabbedItem) {
	        var itemWrapper = utils_1.Utils.find(this.items, function (itemWrapper) {
	            return itemWrapper.tabbedItem === tabbedItem;
	        });
	        if (itemWrapper) {
	            this.showItemWrapper(itemWrapper);
	        }
	    };
	    TabbedLayout.prototype.showItemWrapper = function (wrapper) {
	        if (this.params.onItemClicked) {
	            this.params.onItemClicked({ item: wrapper.tabbedItem });
	        }
	        if (this.activeItem === wrapper) {
	            utils_1.Utils.callIfPresent(this.params.onActiveItemClicked);
	            return;
	        }
	        utils_1.Utils.removeAllChildren(this.eBody);
	        this.eBody.appendChild(wrapper.tabbedItem.body);
	        if (this.activeItem) {
	            utils_1.Utils.removeCssClass(this.activeItem.eHeaderButton, 'ag-tab-selected');
	        }
	        utils_1.Utils.addCssClass(wrapper.eHeaderButton, 'ag-tab-selected');
	        this.activeItem = wrapper;
	        if (wrapper.tabbedItem.afterAttachedCallback) {
	            wrapper.tabbedItem.afterAttachedCallback(this.afterAttachedParams);
	        }
	    };
	    TabbedLayout.prototype.getGui = function () {
	        return this.eGui;
	    };
	    TabbedLayout.TEMPLATE = '<div>' +
	        '<div id="tabHeader" class="ag-tab-header"></div>' +
	        '<div id="tabBody" class="ag-tab-body"></div>' +
	        '</div>';
	    return TabbedLayout;
	}());
	exports.TabbedLayout = TabbedLayout;


/***/ }),
/* 133 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var VerticalStack = (function () {
	    function VerticalStack() {
	        this.isLayoutPanel = true;
	        this.childPanels = [];
	        this.eGui = document.createElement('div');
	        this.eGui.style.height = '100%';
	    }
	    VerticalStack.prototype.addPanel = function (panel, height) {
	        var component;
	        if (panel.isLayoutPanel) {
	            this.childPanels.push(panel);
	            component = panel.getGui();
	        }
	        else {
	            component = panel;
	        }
	        if (height) {
	            component.style.height = height;
	        }
	        this.eGui.appendChild(component);
	    };
	    VerticalStack.prototype.getGui = function () {
	        return this.eGui;
	    };
	    VerticalStack.prototype.doLayout = function () {
	        for (var i = 0; i < this.childPanels.length; i++) {
	            this.childPanels[i].doLayout();
	        }
	    };
	    return VerticalStack;
	}());
	exports.VerticalStack = VerticalStack;


/***/ }),
/* 134 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	function simpleHttpRequest(params) {
	    var promise = new Promise();
	    var httpRequest = new XMLHttpRequest();
	    httpRequest.open('GET', params.url);
	    httpRequest.send();
	    httpRequest.onreadystatechange = function () {
	        if (httpRequest.readyState == 4 && httpRequest.status == 200) {
	            var httpResponse = JSON.parse(httpRequest.responseText);
	            promise.resolve(httpResponse);
	        }
	    };
	    return promise;
	}
	exports.simpleHttpRequest = simpleHttpRequest;
	var Promise = (function () {
	    function Promise() {
	    }
	    Promise.prototype.then = function (func) {
	        this.thenFunc = func;
	    };
	    Promise.prototype.resolve = function (result) {
	        if (this.thenFunc) {
	            this.thenFunc(result);
	        }
	    };
	    return Promise;
	}());
	exports.Promise = Promise;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var utils_1 = __webpack_require__(8);
	function defaultGroupComparator(valueA, valueB, nodeA, nodeB, accentedCompare) {
	    if (accentedCompare === void 0) { accentedCompare = false; }
	    console.warn('ag-Grid: Since ag-grid 11.0.0 defaultGroupComparator is not necessary. You can remove this from your colDef');
	    var nodeAIsGroup = utils_1.Utils.exists(nodeA) && nodeA.group;
	    var nodeBIsGroup = utils_1.Utils.exists(nodeB) && nodeB.group;
	    var bothAreGroups = nodeAIsGroup && nodeBIsGroup;
	    var bothAreNormal = !nodeAIsGroup && !nodeBIsGroup;
	    if (bothAreGroups) {
	        return utils_1.Utils.defaultComparator(nodeA.key, nodeB.key, accentedCompare);
	    }
	    else if (bothAreNormal) {
	        return utils_1.Utils.defaultComparator(valueA, valueB, accentedCompare);
	    }
	    else if (nodeAIsGroup) {
	        return 1;
	    }
	    else {
	        return -1;
	    }
	}
	exports.defaultGroupComparator = defaultGroupComparator;


/***/ }),
/* 136 */
/***/ (function(module, exports) {

	/**
	 * ag-grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components
	 * @version v13.2.0
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var BaseComponentWrapper = (function () {
	    function BaseComponentWrapper() {
	    }
	    BaseComponentWrapper.prototype.wrap = function (OriginalConstructor, mandatoryMethodList, optionalMethodList) {
	        var _this = this;
	        var wrapper = this.createWrapper(OriginalConstructor);
	        mandatoryMethodList.forEach((function (methodName) {
	            _this.createMethod(wrapper, methodName, true);
	        }));
	        if (optionalMethodList) {
	            optionalMethodList.forEach((function (methodName) {
	                _this.createMethod(wrapper, methodName, false);
	            }));
	        }
	        return wrapper;
	    };
	    BaseComponentWrapper.prototype.createMethod = function (wrapper, methodName, mandatory) {
	        wrapper.addMethod(methodName, this.createMethodProxy(wrapper, methodName, mandatory));
	    };
	    BaseComponentWrapper.prototype.createMethodProxy = function (wrapper, methodName, mandatory) {
	        return function () {
	            if (wrapper.hasMethod(methodName)) {
	                return wrapper.callMethod(methodName, arguments);
	            }
	            if (mandatory) {
	                console.warn('ag-Grid: Framework component is missing the method ' + methodName + '()');
	            }
	            return null;
	        };
	    };
	    return BaseComponentWrapper;
	}());
	exports.BaseComponentWrapper = BaseComponentWrapper;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var ag_grid_1 = __webpack_require__(2);
	var columnSelectPanel_1 = __webpack_require__(138);
	var menuList_1 = __webpack_require__(141);
	var menuItemComponent_1 = __webpack_require__(142);
	var menuItemMapper_1 = __webpack_require__(143);
	var EnterpriseMenuFactory = (function () {
	    function EnterpriseMenuFactory() {
	    }
	    EnterpriseMenuFactory.prototype.showMenuAfterMouseEvent = function (column, mouseEvent, defaultTab) {
	        var _this = this;
	        console.log("event = ", mouseEvent);
	        this.showMenu(column, function (menu) {
	            _this.popupService.positionPopupUnderMouseEvent({
	                column: column,
	                type: 'columnMenu',
	                mouseEvent: mouseEvent,
	                ePopup: menu.getGui()
	            });
	            if (defaultTab) {
	                menu.showTab(defaultTab);
	            }
	        }, defaultTab);
	    };
	    EnterpriseMenuFactory.prototype.showMenuAfterButtonClick = function (column, eventSource, defaultTab, restrictToTabs) {
	        var _this = this;
	        this.showMenu(column, function (menu) {
	            _this.popupService.positionPopupUnderComponent({
	                column: column,
	                type: 'columnMenu',
	                eventSource: eventSource,
	                ePopup: menu.getGui(),
	                nudgeX: -9,
	                nudgeY: -26,
	                minWidth: menu.getMinWidth(),
	                keepWithinBounds: true
	            });
	            if (defaultTab) {
	                menu.showTab(defaultTab);
	            }
	        }, defaultTab, restrictToTabs);
	    };
	    EnterpriseMenuFactory.prototype.showMenu = function (column, positionCallback, defaultTab, restrictToTabs) {
	        var _this = this;
	        var menu = new EnterpriseMenu(column, this.lastSelectedTab, restrictToTabs);
	        this.context.wireBean(menu);
	        var eMenuGui = menu.getGui();
	        // need to show filter before positioning, as only after filter
	        // is visible can we find out what the width of it is
	        var hidePopup = this.popupService.addAsModalPopup(eMenuGui, true, function () {
	            menu.destroy();
	            column.setMenuVisible(false);
	        });
	        positionCallback(menu);
	        menu.afterGuiAttached({
	            hidePopup: hidePopup
	        });
	        if (!defaultTab) {
	            menu.showTabBasedOnPreviousSelection();
	        }
	        menu.addEventListener(EnterpriseMenu.EVENT_TAB_SELECTED, function (event) {
	            _this.lastSelectedTab = event.key;
	        });
	        column.setMenuVisible(true);
	    };
	    EnterpriseMenuFactory.prototype.isMenuEnabled = function (column) {
	        return column.getMenuTabs(EnterpriseMenu.TABS_DEFAULT).length > 0;
	    };
	    __decorate([
	        ag_grid_1.Autowired('context'),
	        __metadata("design:type", ag_grid_1.Context)
	    ], EnterpriseMenuFactory.prototype, "context", void 0);
	    __decorate([
	        ag_grid_1.Autowired('popupService'),
	        __metadata("design:type", ag_grid_1.PopupService)
	    ], EnterpriseMenuFactory.prototype, "popupService", void 0);
	    __decorate([
	        ag_grid_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", ag_grid_1.GridOptionsWrapper)
	    ], EnterpriseMenuFactory.prototype, "gridOptionsWrapper", void 0);
	    EnterpriseMenuFactory = __decorate([
	        ag_grid_1.Bean('menuFactory')
	    ], EnterpriseMenuFactory);
	    return EnterpriseMenuFactory;
	}());
	exports.EnterpriseMenuFactory = EnterpriseMenuFactory;
	var EnterpriseMenu = (function () {
	    function EnterpriseMenu(column, initialSelection, restrictTo) {
	        var _this = this;
	        this.localEventService = new ag_grid_1.EventService();
	        this.destroyFunctions = [];
	        this.tabFactories = {};
	        this.includeChecks = {};
	        this.column = column;
	        this.initialSelection = initialSelection;
	        this.tabFactories[EnterpriseMenu.TAB_GENERAL] = this.createMainPanel.bind(this);
	        this.tabFactories[EnterpriseMenu.TAB_FILTER] = this.createFilterPanel.bind(this);
	        this.tabFactories[EnterpriseMenu.TAB_COLUMNS] = this.createColumnsPanel.bind(this);
	        this.includeChecks[EnterpriseMenu.TAB_GENERAL] = function () { return true; };
	        this.includeChecks[EnterpriseMenu.TAB_FILTER] = function () {
	            var isFilterEnabled = _this.gridOptionsWrapper.isEnableFilter();
	            var isFloatingFiltersEnabled = _this.gridOptionsWrapper.isFloatingFilter();
	            var isAnyFilteringEnabled = isFilterEnabled || isFloatingFiltersEnabled;
	            var suppressFilterForThisColumn = _this.column.getColDef().suppressFilter;
	            return isAnyFilteringEnabled && !suppressFilterForThisColumn;
	        };
	        this.includeChecks[EnterpriseMenu.TAB_COLUMNS] = function () { return true; };
	        this.restrictTo = restrictTo;
	    }
	    EnterpriseMenu.prototype.addEventListener = function (event, listener) {
	        this.localEventService.addEventListener(event, listener);
	    };
	    EnterpriseMenu.prototype.getMinWidth = function () {
	        return this.tabbedLayout.getMinWidth();
	    };
	    EnterpriseMenu.prototype.init = function () {
	        var _this = this;
	        var items = this.column.getMenuTabs(this.restrictTo ? this.restrictTo : EnterpriseMenu.TABS_DEFAULT)
	            .filter(function (menuTabName) {
	            return _this.isValidMenuTabItem(menuTabName);
	        })
	            .filter(function (menuTabName) {
	            return _this.isNotSuppressed(menuTabName);
	        })
	            .map(function (menuTabName) {
	            return _this.createTab(menuTabName);
	        });
	        this.tabbedLayout = new ag_grid_1.TabbedLayout({
	            items: items,
	            cssClass: 'ag-menu',
	            onActiveItemClicked: this.onHidePopup.bind(this),
	            onItemClicked: this.onTabItemClicked.bind(this)
	        });
	    };
	    EnterpriseMenu.prototype.isValidMenuTabItem = function (menuTabName) {
	        var isValid = true;
	        var itemsToConsider = EnterpriseMenu.TABS_DEFAULT;
	        if (this.restrictTo != null) {
	            isValid = this.restrictTo.indexOf(menuTabName) > -1;
	            itemsToConsider = this.restrictTo;
	        }
	        isValid = isValid && EnterpriseMenu.TABS_DEFAULT.indexOf(menuTabName) > -1;
	        if (!isValid)
	            console.warn("Trying to render an invalid menu item '" + menuTabName + "'. Check that your 'menuTabs' contains one of [" + itemsToConsider + "]");
	        return isValid;
	    };
	    EnterpriseMenu.prototype.isNotSuppressed = function (menuTabName) {
	        return this.includeChecks[menuTabName]();
	    };
	    EnterpriseMenu.prototype.createTab = function (name) {
	        return this.tabFactories[name]();
	    };
	    EnterpriseMenu.prototype.showTabBasedOnPreviousSelection = function () {
	        // show the tab the user was on last time they had a menu open
	        this.showTab(this.initialSelection);
	    };
	    EnterpriseMenu.prototype.showTab = function (toShow) {
	        if (this.tabItemColumns && toShow === EnterpriseMenu.TAB_COLUMNS) {
	            this.tabbedLayout.showItem(this.tabItemColumns);
	        }
	        else if (this.tabItemFilter && toShow === EnterpriseMenu.TAB_FILTER) {
	            this.tabbedLayout.showItem(this.tabItemFilter);
	        }
	        else if (this.tabItemGeneral && toShow === EnterpriseMenu.TAB_GENERAL) {
	            this.tabbedLayout.showItem(this.tabItemGeneral);
	        }
	        else {
	            this.tabbedLayout.showFirstItem();
	        }
	    };
	    EnterpriseMenu.prototype.onTabItemClicked = function (event) {
	        var key;
	        switch (event.item) {
	            case this.tabItemColumns:
	                key = EnterpriseMenu.TAB_COLUMNS;
	                break;
	            case this.tabItemFilter:
	                key = EnterpriseMenu.TAB_FILTER;
	                break;
	            case this.tabItemGeneral:
	                key = EnterpriseMenu.TAB_GENERAL;
	                break;
	        }
	        if (key) {
	            var event_1 = {
	                type: EnterpriseMenu.EVENT_TAB_SELECTED,
	                key: key
	            };
	            this.localEventService.dispatchEvent(event_1);
	        }
	    };
	    EnterpriseMenu.prototype.destroy = function () {
	        if (this.columnSelectPanel) {
	            this.columnSelectPanel.destroy();
	        }
	        if (this.mainMenuList) {
	            this.mainMenuList.destroy();
	        }
	        this.destroyFunctions.forEach(function (func) { return func(); });
	    };
	    EnterpriseMenu.prototype.getMenuItems = function () {
	        var defaultMenuOptions = this.getDefaultMenuOptions();
	        var result;
	        var userFunc = this.gridOptionsWrapper.getMainMenuItemsFunc();
	        if (userFunc) {
	            var userOptions = userFunc({
	                column: this.column,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext(),
	                defaultItems: defaultMenuOptions
	            });
	            result = userOptions;
	        }
	        else {
	            result = defaultMenuOptions;
	        }
	        // GUI looks weird when two separators are side by side. this can happen accidentally
	        // if we remove items from the menu then two separators can edit up adjacent.
	        ag_grid_1.Utils.removeRepeatsFromArray(result, EnterpriseMenu.MENU_ITEM_SEPARATOR);
	        return result;
	    };
	    EnterpriseMenu.prototype.getDefaultMenuOptions = function () {
	        var result = [];
	        var rowGroupCount = this.columnController.getRowGroupColumns().length;
	        var doingGrouping = rowGroupCount > 0;
	        var groupedByThisColumn = this.columnController.getRowGroupColumns().indexOf(this.column) >= 0;
	        var allowValue = this.column.isAllowValue();
	        var allowRowGroup = this.column.isAllowRowGroup();
	        var isPrimary = this.column.isPrimary();
	        var pivotModeOn = this.columnController.isPivotMode();
	        var isInMemoryRowModel = this.rowModel.getType() === ag_grid_1.Constants.ROW_MODEL_TYPE_IN_MEMORY;
	        result.push('pinSubMenu');
	        var allowValueAgg = 
	        // if primary, then only allow aggValue if grouping and it's a value columns
	        (isPrimary && doingGrouping && allowValue)
	            || !isPrimary;
	        if (allowValueAgg) {
	            result.push('valueAggSubMenu');
	        }
	        result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);
	        result.push('autoSizeThis');
	        result.push('autoSizeAll');
	        result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);
	        if (allowRowGroup && this.column.isPrimary()) {
	            if (groupedByThisColumn) {
	                result.push('rowUnGroup');
	            }
	            else {
	                result.push('rowGroup');
	            }
	        }
	        result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);
	        result.push('resetColumns');
	        result.push('toolPanel');
	        // only add grouping expand/collapse if grouping in the InMemoryRowModel
	        // if pivoting, we only have expandable groups if grouping by 2 or more columns
	        // as the lowest level group is not expandable while pivoting.
	        // if not pivoting, then any active row group can be expanded.
	        var allowExpandAndContract = isInMemoryRowModel && (pivotModeOn ? rowGroupCount > 1 : rowGroupCount > 0);
	        if (allowExpandAndContract) {
	            result.push('expandAll');
	            result.push('contractAll');
	        }
	        return result;
	    };
	    EnterpriseMenu.prototype.createMainPanel = function () {
	        this.mainMenuList = new menuList_1.MenuList();
	        this.context.wireBean(this.mainMenuList);
	        var menuItems = this.getMenuItems();
	        var menuItemsMapped = this.menuItemMapper.mapWithStockItems(menuItems, this.column);
	        this.mainMenuList.addMenuItems(menuItemsMapped);
	        this.mainMenuList.addEventListener(menuItemComponent_1.MenuItemComponent.EVENT_ITEM_SELECTED, this.onHidePopup.bind(this));
	        this.tabItemGeneral = {
	            title: ag_grid_1.Utils.createIconNoSpan('menu', this.gridOptionsWrapper, this.column),
	            body: this.mainMenuList.getHtmlElement(),
	            name: EnterpriseMenu.TAB_GENERAL
	        };
	        return this.tabItemGeneral;
	    };
	    EnterpriseMenu.prototype.onHidePopup = function () {
	        this.hidePopupFunc();
	    };
	    EnterpriseMenu.prototype.createFilterPanel = function () {
	        var filterWrapper = this.filterManager.getOrCreateFilterWrapper(this.column);
	        var afterFilterAttachedCallback;
	        if (filterWrapper.filter.afterGuiAttached) {
	            afterFilterAttachedCallback = filterWrapper.filter.afterGuiAttached.bind(filterWrapper.filter);
	        }
	        this.tabItemFilter = {
	            title: ag_grid_1.Utils.createIconNoSpan('filter', this.gridOptionsWrapper, this.column),
	            body: filterWrapper.gui,
	            afterAttachedCallback: afterFilterAttachedCallback,
	            name: EnterpriseMenu.TAB_FILTER
	        };
	        return this.tabItemFilter;
	    };
	    EnterpriseMenu.prototype.createColumnsPanel = function () {
	        var eWrapperDiv = document.createElement('div');
	        ag_grid_1.Utils.addCssClass(eWrapperDiv, 'ag-menu-column-select-wrapper');
	        this.columnSelectPanel = new columnSelectPanel_1.ColumnSelectPanel(false);
	        this.context.wireBean(this.columnSelectPanel);
	        eWrapperDiv.appendChild(this.columnSelectPanel.getHtmlElement());
	        this.tabItemColumns = {
	            title: ag_grid_1.Utils.createIconNoSpan('columns', this.gridOptionsWrapper, this.column),
	            body: eWrapperDiv,
	            name: EnterpriseMenu.TAB_COLUMNS
	        };
	        return this.tabItemColumns;
	    };
	    EnterpriseMenu.prototype.afterGuiAttached = function (params) {
	        var _this = this;
	        this.tabbedLayout.setAfterAttachedParams({ hidePopup: params.hidePopup });
	        this.hidePopupFunc = params.hidePopup;
	        // if the body scrolls, we want to hide the menu, as the menu will not appear in the right location anymore
	        var onBodyScroll = function (event) {
	            // if h scroll, popup is no longer over the column
	            if (event.direction === 'horizontal') {
	                params.hidePopup();
	            }
	        };
	        this.eventService.addEventListener('bodyScroll', onBodyScroll);
	        this.destroyFunctions.push(function () { return _this.eventService.removeEventListener('bodyScroll', onBodyScroll); });
	    };
	    EnterpriseMenu.prototype.getGui = function () {
	        return this.tabbedLayout.getGui();
	    };
	    EnterpriseMenu.EVENT_TAB_SELECTED = 'tabSelected';
	    EnterpriseMenu.TAB_FILTER = 'filterMenuTab';
	    EnterpriseMenu.TAB_GENERAL = 'generalMenuTab';
	    EnterpriseMenu.TAB_COLUMNS = 'columnsMenuTab';
	    EnterpriseMenu.TABS_DEFAULT = [EnterpriseMenu.TAB_GENERAL, EnterpriseMenu.TAB_FILTER, EnterpriseMenu.TAB_COLUMNS];
	    EnterpriseMenu.MENU_ITEM_SEPARATOR = 'separator';
	    __decorate([
	        ag_grid_1.Autowired('columnController'),
	        __metadata("design:type", ag_grid_1.ColumnController)
	    ], EnterpriseMenu.prototype, "columnController", void 0);
	    __decorate([
	        ag_grid_1.Autowired('filterManager'),
	        __metadata("design:type", ag_grid_1.FilterManager)
	    ], EnterpriseMenu.prototype, "filterManager", void 0);
	    __decorate([
	        ag_grid_1.Autowired('context'),
	        __metadata("design:type", ag_grid_1.Context)
	    ], EnterpriseMenu.prototype, "context", void 0);
	    __decorate([
	        ag_grid_1.Autowired('gridApi'),
	        __metadata("design:type", ag_grid_1.GridApi)
	    ], EnterpriseMenu.prototype, "gridApi", void 0);
	    __decorate([
	        ag_grid_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", ag_grid_1.GridOptionsWrapper)
	    ], EnterpriseMenu.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        ag_grid_1.Autowired('eventService'),
	        __metadata("design:type", ag_grid_1.EventService)
	    ], EnterpriseMenu.prototype, "eventService", void 0);
	    __decorate([
	        ag_grid_1.Autowired('menuItemMapper'),
	        __metadata("design:type", menuItemMapper_1.MenuItemMapper)
	    ], EnterpriseMenu.prototype, "menuItemMapper", void 0);
	    __decorate([
	        ag_grid_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], EnterpriseMenu.prototype, "rowModel", void 0);
	    __decorate([
	        ag_grid_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], EnterpriseMenu.prototype, "init", null);
	    return EnterpriseMenu;
	}());
	exports.EnterpriseMenu = EnterpriseMenu;


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var renderedGroup_1 = __webpack_require__(139);
	var renderedColumn_1 = __webpack_require__(140);
	var ColumnSelectPanel = (function (_super) {
	    __extends(ColumnSelectPanel, _super);
	    // we allow dragging in the toolPanel, but not when this component appears in the column menu
	    function ColumnSelectPanel(allowDragging) {
	        var _this = _super.call(this, ColumnSelectPanel.TEMPLATE) || this;
	        _this.allowDragging = allowDragging;
	        return _this;
	    }
	    ColumnSelectPanel.prototype.init = function () {
	        this.addDestroyableEventListener(this.globalEventService, main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnsChanged.bind(this));
	        if (this.columnController.isReady()) {
	            this.onColumnsChanged();
	        }
	    };
	    ColumnSelectPanel.prototype.onColumnsChanged = function () {
	        this.destroyAllRenderedElements();
	        this.columnTree = this.columnController.getPrimaryColumnTree();
	        this.recursivelyRenderComponents(this.columnTree, 0);
	    };
	    ColumnSelectPanel.prototype.destroy = function () {
	        _super.prototype.destroy.call(this);
	        this.destroyAllRenderedElements();
	    };
	    ColumnSelectPanel.prototype.destroyAllRenderedElements = function () {
	        main_1.Utils.removeAllChildren(this.getHtmlElement());
	        if (this.renderedItems) {
	            main_1.Utils.iterateObject(this.renderedItems, function (key, renderedItem) { return renderedItem.destroy(); });
	        }
	        this.renderedItems = {};
	    };
	    ColumnSelectPanel.prototype.recursivelyRenderGroupComponent = function (columnGroup, dept) {
	        // only render group if user provided the definition
	        var newDept;
	        if (columnGroup.getColGroupDef() && columnGroup.getColGroupDef().suppressToolPanel) {
	            return;
	        }
	        if (!columnGroup.isPadding()) {
	            var renderedGroup = new renderedGroup_1.RenderedGroup(columnGroup, dept, this.onGroupExpanded.bind(this), this.allowDragging);
	            this.context.wireBean(renderedGroup);
	            this.appendChild(renderedGroup.getHtmlElement());
	            // we want to indent on the gui for the children
	            newDept = dept + 1;
	            this.renderedItems[columnGroup.getId()] = renderedGroup;
	        }
	        else {
	            // no children, so no indent
	            newDept = dept;
	        }
	        this.recursivelyRenderComponents(columnGroup.getChildren(), newDept);
	    };
	    ColumnSelectPanel.prototype.recursivelyRenderColumnComponent = function (column, dept) {
	        if (column.getColDef() && column.getColDef().suppressToolPanel) {
	            return;
	        }
	        var renderedColumn = new renderedColumn_1.RenderedColumn(column, dept, this.allowDragging);
	        this.context.wireBean(renderedColumn);
	        this.appendChild(renderedColumn.getHtmlElement());
	        this.renderedItems[column.getId()] = renderedColumn;
	    };
	    ColumnSelectPanel.prototype.recursivelyRenderComponents = function (tree, dept) {
	        var _this = this;
	        tree.forEach(function (child) {
	            if (child instanceof main_1.OriginalColumnGroup) {
	                _this.recursivelyRenderGroupComponent(child, dept);
	            }
	            else {
	                _this.recursivelyRenderColumnComponent(child, dept);
	            }
	        });
	    };
	    ColumnSelectPanel.prototype.recursivelySetVisibility = function (columnTree, visible) {
	        var _this = this;
	        columnTree.forEach(function (child) {
	            var component = _this.renderedItems[child.getId()];
	            if (component) {
	                component.setVisible(visible);
	            }
	            if (child instanceof main_1.OriginalColumnGroup) {
	                var columnGroup = child;
	                var newVisible = void 0;
	                if (component) {
	                    var expanded = component.isExpanded();
	                    newVisible = visible ? expanded : false;
	                }
	                else {
	                    newVisible = visible;
	                }
	                var newChildren = columnGroup.getChildren();
	                _this.recursivelySetVisibility(newChildren, newVisible);
	            }
	        });
	    };
	    ColumnSelectPanel.prototype.onGroupExpanded = function () {
	        this.recursivelySetVisibility(this.columnTree, true);
	    };
	    ColumnSelectPanel.TEMPLATE = '<div class="ag-column-select-panel"></div>';
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], ColumnSelectPanel.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], ColumnSelectPanel.prototype, "globalEventService", void 0);
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], ColumnSelectPanel.prototype, "context", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ColumnSelectPanel.prototype, "init", null);
	    return ColumnSelectPanel;
	}(main_1.Component));
	exports.ColumnSelectPanel = ColumnSelectPanel;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var RenderedGroup = (function (_super) {
	    __extends(RenderedGroup, _super);
	    function RenderedGroup(columnGroup, columnDept, expandedCallback, allowDragging) {
	        var _this = _super.call(this) || this;
	        _this.expanded = true;
	        _this.processingColumnStateChange = false;
	        _this.columnGroup = columnGroup;
	        _this.columnDept = columnDept;
	        _this.expandedCallback = expandedCallback;
	        _this.allowDragging = allowDragging;
	        return _this;
	    }
	    RenderedGroup.prototype.init = function () {
	        this.setTemplate(RenderedGroup.TEMPLATE);
	        this.instantiate(this.context);
	        var eText = this.queryForHtmlElement('#eText');
	        this.displayName = this.columnGroup.getColGroupDef() ? this.columnGroup.getColGroupDef().headerName : null;
	        if (main_1.Utils.missing(this.displayName)) {
	            this.displayName = '>>';
	        }
	        eText.innerHTML = this.displayName;
	        this.setupExpandContract();
	        var eIndent = this.queryForHtmlElement('#eIndent');
	        eIndent.style.width = (this.columnDept * 10) + 'px';
	        this.addDestroyableEventListener(eText, 'click', this.onClick.bind(this));
	        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));
	        this.addDestroyableEventListener(this.cbSelect, main_1.AgCheckbox.EVENT_CHANGED, this.onCheckboxChanged.bind(this));
	        var eCheckboxAndText = this.queryForHtmlElement('#eCheckboxAndText');
	        var touchListener = new main_1.TouchListener(eCheckboxAndText);
	        this.addDestroyableEventListener(touchListener, main_1.TouchListener.EVENT_TAP, this.onClick.bind(this));
	        this.addDestroyFunc(touchListener.destroy.bind(touchListener));
	        this.setOpenClosedIcons();
	        if (this.allowDragging) {
	            this.addDragSource();
	        }
	        this.onColumnStateChanged();
	        this.addVisibilityListenersToAllChildren();
	        main_1.CssClassApplier.addToolPanelClassesFromColDef(this.columnGroup.getColGroupDef(), this.getHtmlElement(), this.gridOptionsWrapper, null, this.columnGroup);
	    };
	    RenderedGroup.prototype.addVisibilityListenersToAllChildren = function () {
	        var _this = this;
	        this.columnGroup.getLeafColumns().forEach(function (column) {
	            _this.addDestroyableEventListener(column, main_1.Column.EVENT_VISIBLE_CHANGED, _this.onColumnStateChanged.bind(_this));
	            _this.addDestroyableEventListener(column, main_1.Column.EVENT_VALUE_CHANGED, _this.onColumnStateChanged.bind(_this));
	            _this.addDestroyableEventListener(column, main_1.Column.EVENT_PIVOT_CHANGED, _this.onColumnStateChanged.bind(_this));
	            _this.addDestroyableEventListener(column, main_1.Column.EVENT_ROW_GROUP_CHANGED, _this.onColumnStateChanged.bind(_this));
	        });
	    };
	    RenderedGroup.prototype.addDragSource = function () {
	        var _this = this;
	        var dragSource = {
	            type: main_1.DragSourceType.ToolPanel,
	            eElement: this.getHtmlElement(),
	            dragItemName: this.displayName,
	            dragItemCallback: function () { return _this.createDragItem(); }
	        };
	        this.dragAndDropService.addDragSource(dragSource, true);
	        this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource); });
	    };
	    RenderedGroup.prototype.createDragItem = function () {
	        var visibleState = {};
	        this.columnGroup.getLeafColumns().forEach(function (col) {
	            visibleState[col.getId()] = col.isVisible();
	        });
	        return {
	            columns: this.columnGroup.getLeafColumns(),
	            visibleState: visibleState
	        };
	    };
	    RenderedGroup.prototype.setupExpandContract = function () {
	        this.eGroupClosedIcon = this.queryForHtmlElement('#eGroupClosedIcon');
	        this.eGroupOpenedIcon = this.queryForHtmlElement('#eGroupOpenedIcon');
	        this.eGroupClosedIcon.appendChild(main_1.Utils.createIcon('columnSelectClosed', this.gridOptionsWrapper, null));
	        this.eGroupOpenedIcon.appendChild(main_1.Utils.createIcon('columnSelectOpen', this.gridOptionsWrapper, null));
	        this.addDestroyableEventListener(this.eGroupClosedIcon, 'click', this.onExpandOrContractClicked.bind(this));
	        this.addDestroyableEventListener(this.eGroupOpenedIcon, 'click', this.onExpandOrContractClicked.bind(this));
	        var eColumnGroupIcons = this.queryForHtmlElement('#eColumnGroupIcons');
	        var touchListener = new main_1.TouchListener(eColumnGroupIcons);
	        this.addDestroyableEventListener(touchListener, main_1.TouchListener.EVENT_TAP, this.onExpandOrContractClicked.bind(this));
	        this.addDestroyFunc(touchListener.destroy.bind(touchListener));
	    };
	    RenderedGroup.prototype.onClick = function () {
	        this.cbSelect.setSelected(!this.cbSelect.isSelected());
	    };
	    RenderedGroup.prototype.onCheckboxChanged = function () {
	        if (this.processingColumnStateChange) {
	            return;
	        }
	        var childColumns = this.columnGroup.getLeafColumns();
	        var selected = this.cbSelect.isSelected();
	        if (this.columnController.isPivotMode()) {
	            if (selected) {
	                this.actionCheckedReduce(childColumns);
	            }
	            else {
	                this.actionUnCheckedReduce(childColumns);
	            }
	        }
	        else {
	            this.columnController.setColumnsVisible(childColumns, selected);
	        }
	    };
	    RenderedGroup.prototype.actionUnCheckedReduce = function (columns) {
	        var columnsToUnPivot = [];
	        var columnsToUnValue = [];
	        var columnsToUnGroup = [];
	        columns.forEach(function (column) {
	            if (column.isPivotActive()) {
	                columnsToUnPivot.push(column);
	            }
	            if (column.isRowGroupActive()) {
	                columnsToUnGroup.push(column);
	            }
	            if (column.isValueActive()) {
	                columnsToUnValue.push(column);
	            }
	        });
	        if (columnsToUnPivot.length > 0) {
	            this.columnController.removePivotColumns(columnsToUnPivot);
	        }
	        if (columnsToUnGroup.length > 0) {
	            this.columnController.removeRowGroupColumns(columnsToUnGroup);
	        }
	        if (columnsToUnValue.length > 0) {
	            this.columnController.removeValueColumns(columnsToUnValue);
	        }
	    };
	    RenderedGroup.prototype.actionCheckedReduce = function (columns) {
	        var columnsToAggregate = [];
	        var columnsToGroup = [];
	        var columnsToPivot = [];
	        columns.forEach(function (column) {
	            // don't change any column that's already got a function active
	            if (column.isAnyFunctionActive()) {
	                return;
	            }
	            if (column.isAllowValue()) {
	                columnsToAggregate.push(column);
	            }
	            else if (column.isAllowRowGroup()) {
	                columnsToGroup.push(column);
	            }
	            else if (column.isAllowRowGroup()) {
	                columnsToPivot.push(column);
	            }
	        });
	        if (columnsToAggregate.length > 0) {
	            this.columnController.addValueColumns(columnsToAggregate);
	        }
	        if (columnsToGroup.length > 0) {
	            this.columnController.addRowGroupColumns(columnsToGroup);
	        }
	        if (columnsToPivot.length > 0) {
	            this.columnController.addPivotColumns(columnsToPivot);
	        }
	    };
	    RenderedGroup.prototype.onColumnStateChanged = function () {
	        var _this = this;
	        var columnsReduced = this.columnController.isPivotMode();
	        var visibleChildCount = 0;
	        var hiddenChildCount = 0;
	        this.columnGroup.getLeafColumns().forEach(function (column) {
	            if (_this.isColumnVisible(column, columnsReduced)) {
	                visibleChildCount++;
	            }
	            else {
	                hiddenChildCount++;
	            }
	        });
	        var selectedValue;
	        if (visibleChildCount > 0 && hiddenChildCount > 0) {
	            selectedValue = null;
	        }
	        else if (visibleChildCount > 0) {
	            selectedValue = true;
	        }
	        else {
	            selectedValue = false;
	        }
	        this.processingColumnStateChange = true;
	        this.cbSelect.setSelected(selectedValue);
	        this.processingColumnStateChange = false;
	    };
	    RenderedGroup.prototype.isColumnVisible = function (column, columnsReduced) {
	        if (columnsReduced) {
	            var pivoted = column.isPivotActive();
	            var grouped = column.isRowGroupActive();
	            var aggregated = column.isValueActive();
	            return pivoted || grouped || aggregated;
	        }
	        else {
	            return column.isVisible();
	        }
	    };
	    RenderedGroup.prototype.onExpandOrContractClicked = function () {
	        this.expanded = !this.expanded;
	        this.setOpenClosedIcons();
	        this.expandedCallback();
	    };
	    RenderedGroup.prototype.setOpenClosedIcons = function () {
	        var folderOpen = this.expanded;
	        main_1.Utils.setVisible(this.eGroupClosedIcon, !folderOpen);
	        main_1.Utils.setVisible(this.eGroupOpenedIcon, folderOpen);
	    };
	    RenderedGroup.prototype.isExpanded = function () {
	        return this.expanded;
	    };
	    RenderedGroup.TEMPLATE = '<div class="ag-column-select-column-group">' +
	        '  <span id="eIndent" class="ag-column-select-indent"></span>' +
	        '  <span id="eColumnGroupIcons" class="ag-column-group-icons">' +
	        '    <span id="eGroupOpenedIcon" class="ag-column-group-closed-icon"></span>' +
	        '    <span id="eGroupClosedIcon" class="ag-column-group-opened-icon"></span>' +
	        '  </span>' +
	        '  <span id="eCheckboxAndText">' +
	        '    <ag-checkbox class="ag-column-select-checkbox"></ag-checkbox>' +
	        '    <span id="eText" class="ag-column-select-column-group-label"></span>' +
	        '  </span>' +
	        '</div>';
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], RenderedGroup.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], RenderedGroup.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('gridPanel'),
	        __metadata("design:type", main_1.GridPanel)
	    ], RenderedGroup.prototype, "gridPanel", void 0);
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], RenderedGroup.prototype, "context", void 0);
	    __decorate([
	        main_1.Autowired('dragAndDropService'),
	        __metadata("design:type", main_1.DragAndDropService)
	    ], RenderedGroup.prototype, "dragAndDropService", void 0);
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], RenderedGroup.prototype, "eventService", void 0);
	    __decorate([
	        main_1.QuerySelector('.ag-column-select-checkbox'),
	        __metadata("design:type", main_1.AgCheckbox)
	    ], RenderedGroup.prototype, "cbSelect", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RenderedGroup.prototype, "init", null);
	    return RenderedGroup;
	}(main_1.Component));
	exports.RenderedGroup = RenderedGroup;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var RenderedColumn = (function (_super) {
	    __extends(RenderedColumn, _super);
	    function RenderedColumn(column, columnDept, allowDragging) {
	        var _this = _super.call(this) || this;
	        _this.processingColumnStateChange = false;
	        _this.column = column;
	        _this.columnDept = columnDept;
	        _this.allowDragging = allowDragging;
	        return _this;
	    }
	    RenderedColumn.prototype.init = function () {
	        this.setTemplate(RenderedColumn.TEMPLATE);
	        this.displayName = this.columnController.getDisplayNameForColumn(this.column, 'toolPanel');
	        this.eText.innerHTML = this.displayName;
	        this.eIndent.style.width = (this.columnDept * 10) + 'px';
	        if (this.allowDragging) {
	            this.addDragSource();
	        }
	        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));
	        this.addDestroyableEventListener(this.column, main_1.Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));
	        this.addDestroyableEventListener(this.column, main_1.Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));
	        this.addDestroyableEventListener(this.column, main_1.Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));
	        this.addDestroyableEventListener(this.column, main_1.Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));
	        this.addDestroyableEventListener(this.gridOptionsWrapper, 'functionsReadOnly', this.onColumnStateChanged.bind(this));
	        this.instantiate(this.context);
	        this.onColumnStateChanged();
	        this.addDestroyableEventListener(this.cbSelect, main_1.AgCheckbox.EVENT_CHANGED, this.onChange.bind(this));
	        this.addDestroyableEventListener(this.eText, 'click', this.onClick.bind(this));
	        this.addTap();
	        main_1.CssClassApplier.addToolPanelClassesFromColDef(this.column.getColDef(), this.getHtmlElement(), this.gridOptionsWrapper, this.column, null);
	    };
	    RenderedColumn.prototype.addTap = function () {
	        var touchListener = new main_1.TouchListener(this.getHtmlElement());
	        this.addDestroyableEventListener(touchListener, main_1.TouchListener.EVENT_TAP, this.onClick.bind(this));
	        this.addDestroyFunc(touchListener.destroy.bind(touchListener));
	    };
	    RenderedColumn.prototype.onClick = function () {
	        if (this.cbSelect.isReadOnly()) {
	            return;
	        }
	        this.cbSelect.toggle();
	    };
	    RenderedColumn.prototype.onChange = function (event) {
	        // only want to action if the user clicked the checkbox, not is we are setting the checkbox because
	        // of a change in the model
	        if (this.processingColumnStateChange) {
	            return;
	        }
	        // action in a timeout, as the action takes some time, we want to update the icons first
	        // so the user gets nice feedback when they click. otherwise there would be a lag and the
	        // user would think the checkboxes were clunky
	        if (this.columnController.isPivotMode()) {
	            if (event.selected) {
	                this.actionCheckedPivotMode();
	            }
	            else {
	                this.actionUnCheckedPivotMode();
	            }
	        }
	        else {
	            this.columnController.setColumnVisible(this.column, event.selected);
	        }
	    };
	    RenderedColumn.prototype.actionUnCheckedPivotMode = function () {
	        var functionPassive = this.gridOptionsWrapper.isFunctionsPassive();
	        var column = this.column;
	        var columnController = this.columnController;
	        // remove pivot if column is pivoted
	        if (column.isPivotActive()) {
	            if (functionPassive) {
	                var copyOfPivotColumns = this.columnController.getPivotColumns().slice();
	                copyOfPivotColumns.push(column);
	                var event_1 = {
	                    type: main_1.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,
	                    columns: copyOfPivotColumns,
	                    api: this.gridApi,
	                    columnApi: this.columnApi
	                };
	                this.eventService.dispatchEvent(event_1);
	            }
	            else {
	                columnController.removePivotColumn(column);
	            }
	        }
	        // remove value if column is value
	        if (column.isValueActive()) {
	            if (functionPassive) {
	                var copyOfValueColumns = this.columnController.getValueColumns().slice();
	                copyOfValueColumns.push(column);
	                var event_2 = {
	                    type: main_1.Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,
	                    columns: copyOfValueColumns,
	                    api: this.gridApi,
	                    columnApi: this.columnApi
	                };
	                this.eventService.dispatchEvent(event_2);
	            }
	            else {
	                columnController.removeValueColumn(column);
	            }
	        }
	        // remove group if column is grouped
	        if (column.isRowGroupActive()) {
	            if (functionPassive) {
	                var copyOfRowGroupColumns = this.columnController.getRowGroupColumns().slice();
	                copyOfRowGroupColumns.push(column);
	                var event_3 = {
	                    type: main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,
	                    columns: copyOfRowGroupColumns,
	                    api: this.gridApi,
	                    columnApi: this.columnApi
	                };
	                this.eventService.dispatchEvent(event_3);
	            }
	            else {
	                columnController.removeRowGroupColumn(column);
	            }
	        }
	    };
	    RenderedColumn.prototype.actionCheckedPivotMode = function () {
	        var column = this.column;
	        // function already active, so do nothing
	        if (column.isValueActive() || column.isPivotActive() || column.isRowGroupActive()) {
	            return;
	        }
	        var functionPassive = this.gridOptionsWrapper.isFunctionsPassive();
	        if (column.isAllowValue()) {
	            if (functionPassive) {
	                var copyOfValueColumns = this.columnController.getValueColumns().slice();
	                main_1.Utils.removeFromArray(copyOfValueColumns, column);
	                var event_4 = {
	                    type: main_1.Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,
	                    api: this.gridApi,
	                    columnApi: this.columnApi,
	                    columns: copyOfValueColumns
	                };
	                this.eventService.dispatchEvent(event_4);
	            }
	            else {
	                this.columnController.addValueColumn(column);
	            }
	        }
	        else if (column.isAllowRowGroup()) {
	            if (functionPassive) {
	                var copyOfRowGroupColumns = this.columnController.getRowGroupColumns().slice();
	                main_1.Utils.removeFromArray(copyOfRowGroupColumns, column);
	                var event_5 = {
	                    type: main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,
	                    api: this.gridApi,
	                    columnApi: this.columnApi,
	                    columns: copyOfRowGroupColumns
	                };
	                this.eventService.dispatchEvent(event_5);
	            }
	            else {
	                this.columnController.addRowGroupColumn(column);
	            }
	        }
	        else if (column.isAllowPivot()) {
	            if (functionPassive) {
	                var copyOfPivotColumns = this.columnController.getPivotColumns().slice();
	                main_1.Utils.removeFromArray(copyOfPivotColumns, column);
	                var event_6 = {
	                    type: main_1.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,
	                    api: this.gridApi,
	                    columnApi: this.columnApi,
	                    columns: copyOfPivotColumns
	                };
	                this.eventService.dispatchEvent(event_6);
	            }
	            else {
	                this.columnController.addPivotColumn(column);
	            }
	        }
	    };
	    RenderedColumn.prototype.addDragSource = function () {
	        var _this = this;
	        var dragSource = {
	            type: main_1.DragSourceType.ToolPanel,
	            eElement: this.getHtmlElement(),
	            dragItemName: this.displayName,
	            dragItemCallback: function () { return _this.createDragItem(); }
	        };
	        this.dragAndDropService.addDragSource(dragSource, true);
	        this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource); });
	    };
	    RenderedColumn.prototype.createDragItem = function () {
	        var visibleState = {};
	        visibleState[this.column.getId()] = this.column.isVisible();
	        return {
	            columns: [this.column],
	            visibleState: visibleState
	        };
	    };
	    RenderedColumn.prototype.onColumnStateChanged = function () {
	        this.processingColumnStateChange = true;
	        var isPivotMode = this.columnController.isPivotMode();
	        if (isPivotMode) {
	            // if reducing, checkbox means column is one of pivot, value or group
	            var anyFunctionActive = this.column.isAnyFunctionActive();
	            this.cbSelect.setSelected(anyFunctionActive);
	        }
	        else {
	            // if not reducing, the checkbox tells us if column is visible or not
	            this.cbSelect.setSelected(this.column.isVisible());
	        }
	        // read only in pivot mode if:
	        var checkboxReadOnly = isPivotMode
	            && (this.gridOptionsWrapper.isFunctionsReadOnly()
	                || !this.column.isAnyFunctionAllowed());
	        this.cbSelect.setReadOnly(checkboxReadOnly);
	        var checkboxPassive = isPivotMode && this.gridOptionsWrapper.isFunctionsPassive();
	        this.cbSelect.setPassive(checkboxPassive);
	        this.processingColumnStateChange = false;
	    };
	    RenderedColumn.TEMPLATE = '<div class="ag-column-select-column">' +
	        '<span class="ag-column-select-indent"></span>' +
	        '<ag-checkbox class="ag-column-select-checkbox"></ag-checkbox>' +
	        '<span class="ag-column-select-label"></span>' +
	        '</div>';
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], RenderedColumn.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], RenderedColumn.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], RenderedColumn.prototype, "eventService", void 0);
	    __decorate([
	        main_1.Autowired('dragAndDropService'),
	        __metadata("design:type", main_1.DragAndDropService)
	    ], RenderedColumn.prototype, "dragAndDropService", void 0);
	    __decorate([
	        main_1.Autowired('gridPanel'),
	        __metadata("design:type", main_1.GridPanel)
	    ], RenderedColumn.prototype, "gridPanel", void 0);
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], RenderedColumn.prototype, "context", void 0);
	    __decorate([
	        main_1.Autowired('columnApi'),
	        __metadata("design:type", main_1.ColumnApi)
	    ], RenderedColumn.prototype, "columnApi", void 0);
	    __decorate([
	        main_1.Autowired('gridApi'),
	        __metadata("design:type", main_1.GridApi)
	    ], RenderedColumn.prototype, "gridApi", void 0);
	    __decorate([
	        main_1.QuerySelector('.ag-column-select-label'),
	        __metadata("design:type", HTMLElement)
	    ], RenderedColumn.prototype, "eText", void 0);
	    __decorate([
	        main_1.QuerySelector('.ag-column-select-indent'),
	        __metadata("design:type", HTMLElement)
	    ], RenderedColumn.prototype, "eIndent", void 0);
	    __decorate([
	        main_1.QuerySelector('.ag-column-select-checkbox'),
	        __metadata("design:type", main_1.AgCheckbox)
	    ], RenderedColumn.prototype, "cbSelect", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RenderedColumn.prototype, "init", null);
	    return RenderedColumn;
	}(main_1.Component));
	exports.RenderedColumn = RenderedColumn;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var ag_grid_1 = __webpack_require__(2);
	var menuItemComponent_1 = __webpack_require__(142);
	var MenuList = (function (_super) {
	    __extends(MenuList, _super);
	    function MenuList() {
	        var _this = _super.call(this, MenuList.TEMPLATE) || this;
	        _this.timerCount = 0;
	        _this.removeChildFuncs = [];
	        return _this;
	        // console.log('MenuList->constructor() ' + this.instance);
	    }
	    MenuList.prototype.clearActiveItem = function () {
	        this.removeActiveItem();
	        this.removeChildPopup();
	    };
	    MenuList.prototype.addMenuItems = function (menuItems) {
	        var _this = this;
	        if (ag_grid_1.Utils.missing(menuItems)) {
	            return;
	        }
	        menuItems.forEach(function (menuItemOrString) {
	            if (menuItemOrString === 'separator') {
	                _this.addSeparator();
	            }
	            else if (typeof menuItemOrString === 'string') {
	                console.log("ag-Grid: unrecognised menu item " + menuItemOrString);
	            }
	            else {
	                var menuItem = menuItemOrString;
	                _this.addItem(menuItem);
	            }
	        });
	    };
	    MenuList.prototype.addItem = function (menuItemDef) {
	        var _this = this;
	        var cMenuItem = new menuItemComponent_1.MenuItemComponent(menuItemDef);
	        this.context.wireBean(cMenuItem);
	        this.getHtmlElement().appendChild(cMenuItem.getHtmlElement());
	        this.addDestroyFunc(function () { return cMenuItem.destroy(); });
	        cMenuItem.addEventListener(menuItemComponent_1.MenuItemComponent.EVENT_ITEM_SELECTED, function (event) {
	            if (menuItemDef.subMenu) {
	                _this.showChildMenu(menuItemDef, cMenuItem);
	            }
	            else {
	                _this.dispatchEvent(event);
	            }
	        });
	        cMenuItem.addGuiEventListener('mouseenter', this.mouseEnterItem.bind(this, menuItemDef, cMenuItem));
	        cMenuItem.addGuiEventListener('mouseleave', function () { return _this.timerCount++; });
	    };
	    MenuList.prototype.mouseEnterItem = function (menuItemParams, menuItem) {
	        if (menuItemParams.disabled) {
	            return;
	        }
	        if (this.activeMenuItemParams !== menuItemParams) {
	            this.removeChildPopup();
	        }
	        this.removeActiveItem();
	        this.activeMenuItemParams = menuItemParams;
	        this.activeMenuItem = menuItem;
	        ag_grid_1.Utils.addCssClass(this.activeMenuItem.getHtmlElement(), 'ag-menu-option-active');
	        if (menuItemParams.subMenu) {
	            this.addHoverForChildPopup(menuItemParams, menuItem);
	        }
	    };
	    MenuList.prototype.removeActiveItem = function () {
	        if (this.activeMenuItem) {
	            ag_grid_1.Utils.removeCssClass(this.activeMenuItem.getHtmlElement(), 'ag-menu-option-active');
	            this.activeMenuItem = null;
	            this.activeMenuItemParams = null;
	        }
	    };
	    MenuList.prototype.addHoverForChildPopup = function (menuItemDef, menuItemComp) {
	        var _this = this;
	        var timerCountCopy = this.timerCount;
	        setTimeout(function () {
	            var shouldShow = timerCountCopy === _this.timerCount;
	            var showingThisMenu = _this.subMenuParentDef === menuItemDef;
	            if (shouldShow && !showingThisMenu) {
	                _this.showChildMenu(menuItemDef, menuItemComp);
	            }
	        }, 500);
	    };
	    MenuList.prototype.addSeparator = function () {
	        this.getHtmlElement().appendChild(ag_grid_1.Utils.loadTemplate(MenuList.SEPARATOR_TEMPLATE));
	    };
	    MenuList.prototype.showChildMenu = function (menuItemDef, menuItemComp) {
	        var _this = this;
	        this.removeChildPopup();
	        var childMenu = new MenuList();
	        this.context.wireBean(childMenu);
	        childMenu.addMenuItems(menuItemDef.subMenu);
	        var ePopup = ag_grid_1.Utils.loadTemplate('<div class="ag-menu"></div>');
	        ePopup.appendChild(childMenu.getHtmlElement());
	        var hidePopupFunc = this.popupService.addAsModalPopup(ePopup, true);
	        this.popupService.positionPopupForMenu({
	            eventSource: menuItemComp.getGui(),
	            ePopup: ePopup
	        });
	        this.subMenuParentDef = menuItemDef;
	        var selectedListener = function (event) {
	            _this.dispatchEvent(event);
	        };
	        childMenu.addEventListener(menuItemComponent_1.MenuItemComponent.EVENT_ITEM_SELECTED, selectedListener);
	        this.removeChildFuncs.push(function () {
	            childMenu.clearActiveItem();
	            childMenu.destroy();
	            _this.subMenuParentDef = null;
	            childMenu.removeEventListener(menuItemComponent_1.MenuItemComponent.EVENT_ITEM_SELECTED, selectedListener);
	            hidePopupFunc();
	        });
	    };
	    MenuList.prototype.removeChildPopup = function () {
	        this.removeChildFuncs.forEach(function (func) { return func(); });
	        this.removeChildFuncs = [];
	    };
	    MenuList.prototype.destroy = function () {
	        // console.log('MenuList->destroy() ' + this.instance);
	        this.removeChildPopup();
	        _super.prototype.destroy.call(this);
	    };
	    // private instance = Math.random();
	    MenuList.TEMPLATE = '<div class="ag-menu-list"></div>';
	    MenuList.SEPARATOR_TEMPLATE = '<div class="ag-menu-separator">' +
	        '  <span class="ag-menu-separator-cell"></span>' +
	        '  <span class="ag-menu-separator-cell"></span>' +
	        '  <span class="ag-menu-separator-cell"></span>' +
	        '  <span class="ag-menu-separator-cell"></span>' +
	        '</div>';
	    __decorate([
	        ag_grid_1.Autowired('context'),
	        __metadata("design:type", ag_grid_1.Context)
	    ], MenuList.prototype, "context", void 0);
	    __decorate([
	        ag_grid_1.Autowired('popupService'),
	        __metadata("design:type", ag_grid_1.PopupService)
	    ], MenuList.prototype, "popupService", void 0);
	    return MenuList;
	}(ag_grid_1.Component));
	exports.MenuList = MenuList;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var ag_grid_1 = __webpack_require__(2);
	var MenuItemComponent = (function (_super) {
	    __extends(MenuItemComponent, _super);
	    function MenuItemComponent(params) {
	        var _this = _super.call(this, MenuItemComponent.TEMPLATE) || this;
	        _this.params = params;
	        return _this;
	    }
	    MenuItemComponent.prototype.init = function () {
	        var _this = this;
	        if (this.params.checked) {
	            this.queryForHtmlElement('#eIcon').innerHTML = '<span class="ag-icon ag-icon-tick"></span>';
	        }
	        else if (this.params.icon) {
	            if (ag_grid_1.Utils.isNodeOrElement(this.params.icon)) {
	                this.queryForHtmlElement('#eIcon').appendChild(this.params.icon);
	            }
	            else if (typeof this.params.icon === 'string') {
	                this.queryForHtmlElement('#eIcon').innerHTML = this.params.icon;
	            }
	            else {
	                console.log('ag-Grid: menu item icon must be DOM node or string');
	            }
	        }
	        else {
	            // if i didn't put space here, the alignment was messed up, probably
	            // fixable with CSS but i was spending to much time trying to figure
	            // it out.
	            this.queryForHtmlElement('#eIcon').innerHTML = '&nbsp;';
	        }
	        if (this.params.tooltip) {
	            this.getHtmlElement().setAttribute('title', this.params.tooltip);
	        }
	        if (this.params.shortcut) {
	            this.queryForHtmlElement('#eShortcut').innerHTML = this.params.shortcut;
	        }
	        if (this.params.subMenu) {
	            if (this.gridOptionsWrapper.isEnableRtl()) {
	                // for RTL, we show arrow going left
	                this.queryForHtmlElement('#ePopupPointer').classList.add('ag-icon-small-left');
	            }
	            else {
	                // for normal, we show arrow going right
	                this.queryForHtmlElement('#ePopupPointer').classList.add('ag-icon-small-right');
	            }
	        }
	        else {
	            this.queryForHtmlElement('#ePopupPointer').innerHTML = '&nbsp;';
	        }
	        this.queryForHtmlElement('#eName').innerHTML = this.params.name;
	        if (this.params.disabled) {
	            ag_grid_1.Utils.addCssClass(this.getHtmlElement(), 'ag-menu-option-disabled');
	        }
	        else {
	            this.addGuiEventListener('click', this.onOptionSelected.bind(this));
	        }
	        if (this.params.cssClasses) {
	            this.params.cssClasses.forEach(function (it) { return ag_grid_1.Utils.addCssClass(_this.getHtmlElement(), it); });
	        }
	    };
	    MenuItemComponent.prototype.onOptionSelected = function () {
	        var event = {
	            type: MenuItemComponent.EVENT_ITEM_SELECTED,
	            action: this.params.action,
	            checked: this.params.checked,
	            cssClasses: this.params.cssClasses,
	            disabled: this.params.disabled,
	            icon: this.params.icon,
	            name: this.params.name,
	            shortcut: this.params.shortcut,
	            subMenu: this.params.subMenu,
	            tooltip: this.params.tooltip
	        };
	        this.dispatchEvent(event);
	        if (this.params.action) {
	            this.params.action();
	        }
	    };
	    MenuItemComponent.prototype.destroy = function () {
	        // console.log('MenuItemComponent->destroy() ' + this.instance);
	        _super.prototype.destroy.call(this);
	    };
	    // private instance = Math.random();
	    MenuItemComponent.TEMPLATE = '<div class="ag-menu-option">' +
	        '  <span id="eIcon" class="ag-menu-option-icon"></span>' +
	        '  <span id="eName" class="ag-menu-option-text"></span>' +
	        '  <span id="eShortcut" class="ag-menu-option-shortcut"></span>' +
	        '  <span id="ePopupPointer" class="ag-menu-option-popup-pointer"></span>' +
	        '</div>';
	    MenuItemComponent.EVENT_ITEM_SELECTED = 'itemSelected';
	    __decorate([
	        ag_grid_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", ag_grid_1.GridOptionsWrapper)
	    ], MenuItemComponent.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        ag_grid_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], MenuItemComponent.prototype, "init", null);
	    return MenuItemComponent;
	}(ag_grid_1.Component));
	exports.MenuItemComponent = MenuItemComponent;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var ag_grid_1 = __webpack_require__(2);
	var clipboardService_1 = __webpack_require__(144);
	var aggFuncService_1 = __webpack_require__(146);
	var MenuItemMapper = (function () {
	    function MenuItemMapper() {
	    }
	    MenuItemMapper.prototype.mapWithStockItems = function (originalList, column) {
	        var _this = this;
	        if (!originalList) {
	            return [];
	        }
	        var resultList = [];
	        originalList.forEach(function (menuItemOrString) {
	            var result;
	            if (typeof menuItemOrString === 'string') {
	                result = _this.getStockMenuItem(menuItemOrString, column);
	            }
	            else {
	                result = menuItemOrString;
	            }
	            if (result.subMenu) {
	                var resultDef = result;
	                resultDef.subMenu = _this.mapWithStockItems(resultDef.subMenu, column);
	            }
	            resultList.push(result);
	        });
	        return resultList;
	    };
	    MenuItemMapper.prototype.getStockMenuItem = function (key, column) {
	        var _this = this;
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        switch (key) {
	            case 'pinSubMenu': return {
	                name: localeTextFunc('pinColumn', 'Pin Column'),
	                icon: ag_grid_1.Utils.createIconNoSpan('menuPin', this.gridOptionsWrapper, null),
	                subMenu: ['pinLeft', 'pinRight', 'clearPinned']
	            };
	            case 'pinLeft': return {
	                name: localeTextFunc('pinLeft', 'Pin Left'),
	                action: function () { return _this.columnController.setColumnPinned(column, ag_grid_1.Column.PINNED_LEFT); },
	                checked: column.isPinnedLeft()
	            };
	            case 'pinRight': return {
	                name: localeTextFunc('pinRight', 'Pin Right'),
	                action: function () { return _this.columnController.setColumnPinned(column, ag_grid_1.Column.PINNED_RIGHT); },
	                checked: column.isPinnedRight()
	            };
	            case 'clearPinned': return {
	                name: localeTextFunc('noPin', 'No Pin'),
	                action: function () { return _this.columnController.setColumnPinned(column, null); },
	                checked: !column.isPinned()
	            };
	            case 'valueAggSubMenu': return {
	                name: localeTextFunc('valueAggregation', 'Value Aggregation'),
	                icon: ag_grid_1.Utils.createIconNoSpan('menuValue', this.gridOptionsWrapper, null),
	                subMenu: this.createAggregationSubMenu(column)
	            };
	            case 'autoSizeThis': return {
	                name: localeTextFunc('autosizeThiscolumn', 'Autosize This Column'),
	                action: function () { return _this.columnController.autoSizeColumn(column); }
	            };
	            case 'autoSizeAll': return {
	                name: localeTextFunc('autosizeAllColumns', 'Autosize All Columns'),
	                action: function () { return _this.columnController.autoSizeAllColumns(); }
	            };
	            case 'rowGroup': return {
	                name: localeTextFunc('groupBy', 'Group by') + ' ' + this.columnController.getDisplayNameForColumn(column, 'header'),
	                action: function () { return _this.columnController.addRowGroupColumn(column); },
	                icon: ag_grid_1.Utils.createIconNoSpan('menuAddRowGroup', this.gridOptionsWrapper, null)
	            };
	            case 'rowUnGroup': return {
	                name: localeTextFunc('ungroupBy', 'Un-Group by') + ' ' + this.columnController.getDisplayNameForColumn(column, 'header'),
	                action: function () { return _this.columnController.removeRowGroupColumn(column); },
	                icon: ag_grid_1.Utils.createIconNoSpan('menuRemoveRowGroup', this.gridOptionsWrapper, null)
	            };
	            case 'resetColumns': return {
	                name: localeTextFunc('resetColumns', 'Reset Columns'),
	                action: function () { return _this.columnController.resetColumnState(); }
	            };
	            case 'expandAll': return {
	                name: localeTextFunc('expandAll', 'Expand All'),
	                action: function () { return _this.gridApi.expandAll(); }
	            };
	            case 'contractAll': return {
	                name: localeTextFunc('collapseAll', 'Collapse All'),
	                action: function () { return _this.gridApi.collapseAll(); }
	            };
	            case 'copy': return {
	                name: localeTextFunc('copy', 'Copy'),
	                shortcut: localeTextFunc('ctrlC', 'Ctrl+C'),
	                icon: ag_grid_1.Utils.createIconNoSpan('clipboardCopy', this.gridOptionsWrapper, null),
	                action: function () { return _this.clipboardService.copyToClipboard(false); }
	            };
	            case 'copyWithHeaders': return {
	                name: localeTextFunc('copyWithHeaders', 'Copy with Headers'),
	                // shortcut: localeTextFunc('ctrlC','Ctrl+C'),
	                icon: ag_grid_1.Utils.createIconNoSpan('clipboardCopy', this.gridOptionsWrapper, null),
	                action: function () { return _this.clipboardService.copyToClipboard(true); }
	            };
	            case 'paste': return {
	                name: localeTextFunc('paste', 'Paste'),
	                shortcut: localeTextFunc('ctrlV', 'Ctrl+V'),
	                disabled: true,
	                icon: ag_grid_1.Utils.createIconNoSpan('clipboardPaste', this.gridOptionsWrapper, null),
	                action: function () { return _this.clipboardService.pasteFromClipboard(); }
	            };
	            case 'toolPanel': return {
	                name: localeTextFunc('toolPanel', 'Tool Panel'),
	                checked: this.gridApi.isToolPanelShowing(),
	                action: function () { return _this.gridApi.showToolPanel(!_this.gridApi.isToolPanelShowing()); }
	            };
	            case 'export':
	                var exportSubMenuItems = [];
	                if (!this.gridOptionsWrapper.isSuppressCsvExport()) {
	                    exportSubMenuItems.push('csvExport');
	                }
	                if (!this.gridOptionsWrapper.isSuppressExcelExport()) {
	                    exportSubMenuItems.push('excelExport');
	                }
	                return {
	                    name: localeTextFunc('export', 'Export'),
	                    subMenu: exportSubMenuItems
	                };
	            case 'csvExport': return {
	                name: localeTextFunc('csvExport', 'CSV Export'),
	                action: function () { return _this.gridApi.exportDataAsCsv({}); }
	            };
	            case 'excelExport': return {
	                name: localeTextFunc('excelExport', 'Excel Export'),
	                action: function () { return _this.gridApi.exportDataAsExcel({}); }
	            };
	            case 'separator': return 'separator';
	            default:
	                console.log("ag-Grid: unknown menu item type " + key);
	                return null;
	        }
	    };
	    MenuItemMapper.prototype.createAggregationSubMenu = function (column) {
	        var _this = this;
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var columnIsAlreadyAggValue = column.isValueActive();
	        var funcNames = this.aggFuncService.getFuncNames(column);
	        var columnToUse;
	        if (column.isPrimary()) {
	            columnToUse = column;
	        }
	        else {
	            columnToUse = column.getColDef().pivotValueColumn;
	        }
	        var result = [];
	        funcNames.forEach(function (funcName) {
	            result.push({
	                name: localeTextFunc(funcName, funcName),
	                action: function () {
	                    _this.columnController.setColumnAggFunc(columnToUse, funcName);
	                    _this.columnController.addValueColumn(columnToUse);
	                },
	                checked: columnIsAlreadyAggValue && columnToUse.getAggFunc() === funcName
	            });
	        });
	        return result;
	    };
	    __decorate([
	        ag_grid_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", ag_grid_1.GridOptionsWrapper)
	    ], MenuItemMapper.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        ag_grid_1.Autowired('columnController'),
	        __metadata("design:type", ag_grid_1.ColumnController)
	    ], MenuItemMapper.prototype, "columnController", void 0);
	    __decorate([
	        ag_grid_1.Autowired('gridApi'),
	        __metadata("design:type", ag_grid_1.GridApi)
	    ], MenuItemMapper.prototype, "gridApi", void 0);
	    __decorate([
	        ag_grid_1.Autowired('clipboardService'),
	        __metadata("design:type", clipboardService_1.ClipboardService)
	    ], MenuItemMapper.prototype, "clipboardService", void 0);
	    __decorate([
	        ag_grid_1.Autowired('aggFuncService'),
	        __metadata("design:type", aggFuncService_1.AggFuncService)
	    ], MenuItemMapper.prototype, "aggFuncService", void 0);
	    MenuItemMapper = __decorate([
	        ag_grid_1.Bean('menuItemMapper')
	    ], MenuItemMapper);
	    return MenuItemMapper;
	}());
	exports.MenuItemMapper = MenuItemMapper;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var rangeController_1 = __webpack_require__(145);
	var ClipboardService = (function () {
	    function ClipboardService() {
	    }
	    ClipboardService.prototype.init = function () {
	        this.logger = this.loggerFactory.create('ClipboardService');
	    };
	    ClipboardService.prototype.pasteFromClipboard = function () {
	        var _this = this;
	        this.logger.log('pasteFromClipboard');
	        this.executeOnTempElement(function (textArea) {
	            textArea.focus();
	        }, function (element) {
	            var text = element.value;
	            _this.finishPasteFromClipboard(text);
	        });
	    };
	    ClipboardService.prototype.copyRangeDown = function () {
	        var _this = this;
	        if (this.rangeController.isEmpty()) {
	            return;
	        }
	        var cellsToFlash = {};
	        var firstRowValues = null;
	        var updatedRowNodes = [];
	        var updatedColumnIds = [];
	        var rowCallback = function (currentRow, rowNode, columns) {
	            // take reference of first row, this is the one we will be using to copy from
	            if (!firstRowValues) {
	                firstRowValues = [];
	                // two reasons for looping through columns
	                columns.forEach(function (column) {
	                    // reason 1 - to get the initial values to copy down
	                    var value = _this.valueService.getValue(column, rowNode);
	                    var processCellForClipboardFunc = _this.gridOptionsWrapper.getProcessCellForClipboardFunc();
	                    value = _this.userProcessCell(rowNode, column, value, processCellForClipboardFunc, main_1.Constants.EXPORT_TYPE_DRAG_COPY);
	                    firstRowValues.push(value);
	                    // reason 2 - to record the columnId for refreshing
	                    updatedColumnIds.push(column.getId());
	                });
	            }
	            else {
	                // otherwise we are not the first row, so copy
	                updatedRowNodes.push(rowNode);
	                columns.forEach(function (column, index) {
	                    if (!column.isCellEditable(rowNode)) {
	                        return;
	                    }
	                    var firstRowValue = firstRowValues[index];
	                    var processCellFromClipboardFunc = _this.gridOptionsWrapper.getProcessCellFromClipboardFunc();
	                    firstRowValue = _this.userProcessCell(rowNode, column, firstRowValue, processCellFromClipboardFunc, main_1.Constants.EXPORT_TYPE_DRAG_COPY);
	                    _this.valueService.setValue(rowNode, column, firstRowValue);
	                    var gridCellDef = { rowIndex: currentRow.rowIndex, floating: currentRow.floating, column: column };
	                    var cellId = new main_1.GridCell(gridCellDef).createId();
	                    cellsToFlash[cellId] = true;
	                });
	            }
	        };
	        this.iterateActiveRanges(true, rowCallback);
	        // this is very heavy, should possibly just refresh the specific cells?
	        this.rowRenderer.refreshCells({ rowNodes: updatedRowNodes, columns: updatedColumnIds });
	        this.dispatchFlashCells(cellsToFlash);
	    };
	    ClipboardService.prototype.finishPasteFromClipboard = function (data) {
	        if (main_1.Utils.missingOrEmpty(data)) {
	            return;
	        }
	        var focusedCell = this.focusedCellController.getFocusedCell();
	        if (!focusedCell) {
	            return;
	        }
	        var parsedData = this.dataToArray(data);
	        if (!parsedData) {
	            return;
	        }
	        // remove last row if empty, excel puts empty last row in
	        var lastLine = parsedData[parsedData.length - 1];
	        if (lastLine.length === 1 && lastLine[0] === '') {
	            main_1.Utils.removeFromArray(parsedData, lastLine);
	        }
	        var currentRow = new main_1.GridRow(focusedCell.rowIndex, focusedCell.floating);
	        var cellsToFlash = {};
	        var updatedRowNodes = [];
	        var updatedColumnIds = [];
	        var columnsToPasteInto = this.columnController.getDisplayedColumnsStartingAt(focusedCell.column);
	        var onlyOneCellInRange = parsedData.length === 1 && parsedData[0].length === 1;
	        if (onlyOneCellInRange) {
	            this.singleCellRange(parsedData, updatedRowNodes, currentRow, cellsToFlash, updatedColumnIds);
	        }
	        else {
	            this.multipleCellRange(parsedData, currentRow, updatedRowNodes, columnsToPasteInto, cellsToFlash, updatedColumnIds, main_1.Constants.EXPORT_TYPE_CLIPBOARD);
	        }
	        // this is very heavy, should possibly just refresh the specific cells?
	        this.rowRenderer.refreshCells({ rowNodes: updatedRowNodes, columns: updatedColumnIds });
	        this.dispatchFlashCells(cellsToFlash);
	        this.focusedCellController.setFocusedCell(focusedCell.rowIndex, focusedCell.column, focusedCell.floating, true);
	    };
	    ClipboardService.prototype.multipleCellRange = function (clipboardGridData, currentRow, updatedRowNodes, columnsToPasteInto, cellsToFlash, updatedColumnIds, type) {
	        var _this = this;
	        clipboardGridData.forEach(function (clipboardRowData) {
	            // if we have come to end of rows in grid, then skip
	            if (!currentRow) {
	                return;
	            }
	            var rowNode = _this.getRowNode(currentRow);
	            updatedRowNodes.push(rowNode);
	            clipboardRowData.forEach(function (value, index) {
	                var column = columnsToPasteInto[index];
	                if (main_1.Utils.missing(column)) {
	                    return;
	                }
	                if (!column.isCellEditable(rowNode)) {
	                    return;
	                }
	                _this.updateCellValue(rowNode, column, value, currentRow, cellsToFlash, updatedColumnIds, type);
	            });
	            // move to next row down for next set of values
	            currentRow = _this.cellNavigationService.getRowBelow(currentRow);
	        });
	        return currentRow;
	    };
	    ClipboardService.prototype.singleCellRange = function (parsedData, updatedRowNodes, currentRow, cellsToFlash, updatedColumnIds) {
	        var _this = this;
	        var value = parsedData[0][0];
	        var rowCallback = function (gridRow, rowNode, columns) {
	            updatedRowNodes.push(rowNode);
	            columns.forEach(function (column) {
	                _this.updateCellValue(rowNode, column, value, currentRow, cellsToFlash, updatedColumnIds, main_1.Constants.EXPORT_TYPE_CLIPBOARD);
	            });
	        };
	        this.iterateActiveRanges(false, rowCallback);
	    };
	    ClipboardService.prototype.updateCellValue = function (rowNode, column, value, currentRow, cellsToFlash, updatedColumnIds, type) {
	        if (column.isSuppressPaste(rowNode)) {
	            return;
	        }
	        var processedValue = this.userProcessCell(rowNode, column, value, this.gridOptionsWrapper.getProcessCellFromClipboardFunc(), type);
	        this.valueService.setValue(rowNode, column, processedValue);
	        var gridCellDef = {
	            rowIndex: currentRow.rowIndex,
	            floating: currentRow.floating,
	            column: column
	        };
	        var cellId = new main_1.GridCell(gridCellDef).createId();
	        cellsToFlash[cellId] = true;
	        if (updatedColumnIds.indexOf(column.getId()) < 0) {
	            updatedColumnIds.push(column.getId());
	        }
	    };
	    ClipboardService.prototype.copyToClipboard = function (includeHeaders) {
	        if (includeHeaders === void 0) { includeHeaders = false; }
	        this.logger.log("copyToClipboard: includeHeaders = " + includeHeaders);
	        var selectedRowsToCopy = !this.selectionController.isEmpty()
	            && !this.gridOptionsWrapper.isSuppressCopyRowsToClipboard();
	        // default is copy range if exists, otherwise rows
	        if (this.rangeController.isMoreThanOneCell()) {
	            this.copySelectedRangeToClipboard(includeHeaders);
	        }
	        else if (selectedRowsToCopy) {
	            // otherwise copy selected rows if they exist
	            this.copySelectedRowsToClipboard(includeHeaders);
	        }
	        else if (this.focusedCellController.isAnyCellFocused()) {
	            // if there is a focused cell, copy this
	            this.copyFocusedCellToClipboard(includeHeaders);
	        }
	        else {
	            // lastly if no focused cell, try range again. this can happen
	            // if use has cellSelection turned off (so no focused cell)
	            // but has a cell clicked, so there exists a cell range
	            // of exactly one cell (hence the first 'if' above didn't
	            // get executed).
	            this.copySelectedRangeToClipboard(includeHeaders);
	        }
	    };
	    ClipboardService.prototype.iterateActiveRanges = function (onlyFirst, rowCallback, columnCallback) {
	        var _this = this;
	        if (this.rangeController.isEmpty()) {
	            return;
	        }
	        var rangeSelections = this.rangeController.getCellRanges();
	        if (onlyFirst) {
	            var range = rangeSelections[0];
	            this.iterateActiveRange(range, rowCallback, columnCallback);
	        }
	        else {
	            rangeSelections.forEach(function (range) { return _this.iterateActiveRange(range, rowCallback, columnCallback); });
	        }
	    };
	    ClipboardService.prototype.iterateActiveRange = function (range, rowCallback, columnCallback) {
	        // get starting and ending row, remember rowEnd could be before rowStart
	        var startRow = range.start.getGridRow();
	        var endRow = range.end.getGridRow();
	        var startRowIsFirst = startRow.before(endRow);
	        var currentRow = startRowIsFirst ? startRow : endRow;
	        var lastRow = startRowIsFirst ? endRow : startRow;
	        if (main_1.Utils.exists(columnCallback)) {
	            columnCallback(range.columns);
	        }
	        while (true) {
	            var rowNode = this.getRowNode(currentRow);
	            rowCallback(currentRow, rowNode, range.columns);
	            if (currentRow.equals(lastRow)) {
	                break;
	            }
	            currentRow = this.cellNavigationService.getRowBelow(currentRow);
	        }
	    };
	    ClipboardService.prototype.copySelectedRangeToClipboard = function (includeHeaders) {
	        var _this = this;
	        if (includeHeaders === void 0) { includeHeaders = false; }
	        if (this.rangeController.isEmpty()) {
	            return;
	        }
	        var deliminator = this.gridOptionsWrapper.getClipboardDeliminator();
	        var data = '';
	        var cellsToFlash = {};
	        // adds columns to the data
	        var columnCallback = function (columns) {
	            if (!includeHeaders) {
	                return;
	            }
	            columns.forEach(function (column, index) {
	                var value = _this.columnController.getDisplayNameForColumn(column, 'clipboard', true);
	                if (index != 0) {
	                    data += deliminator;
	                }
	                if (main_1.Utils.exists(value)) {
	                    data += value;
	                }
	            });
	            data += '\r\n';
	        };
	        // adds cell values to the data
	        var rowCallback = function (currentRow, rowNode, columns) {
	            columns.forEach(function (column, index) {
	                var value = _this.valueService.getValue(column, rowNode);
	                var processedValue = _this.userProcessCell(rowNode, column, value, _this.gridOptionsWrapper.getProcessCellForClipboardFunc(), main_1.Constants.EXPORT_TYPE_CLIPBOARD);
	                if (index != 0) {
	                    data += deliminator;
	                }
	                if (main_1.Utils.exists(processedValue)) {
	                    data += processedValue;
	                }
	                var gridCellDef = { rowIndex: currentRow.rowIndex, floating: currentRow.floating, column: column };
	                var cellId = new main_1.GridCell(gridCellDef).createId();
	                cellsToFlash[cellId] = true;
	            });
	            data += '\r\n';
	        };
	        this.iterateActiveRanges(false, rowCallback, columnCallback);
	        this.copyDataToClipboard(data);
	        this.dispatchFlashCells(cellsToFlash);
	    };
	    ClipboardService.prototype.copyFocusedCellToClipboard = function (includeHeaders) {
	        if (includeHeaders === void 0) { includeHeaders = false; }
	        var focusedCell = this.focusedCellController.getFocusedCell();
	        if (main_1.Utils.missing(focusedCell)) {
	            return;
	        }
	        var currentRow = focusedCell.getGridRow();
	        var rowNode = this.getRowNode(currentRow);
	        var column = focusedCell.column;
	        var value = this.valueService.getValue(column, rowNode);
	        var processedValue = this.userProcessCell(rowNode, column, value, this.gridOptionsWrapper.getProcessCellForClipboardFunc(), main_1.Constants.EXPORT_TYPE_CLIPBOARD);
	        if (main_1.Utils.exists(processedValue)) {
	            var data = '';
	            if (includeHeaders) {
	                data = this.columnController.getDisplayNameForColumn(column, 'clipboard', true) + '\r\n';
	            }
	            data += processedValue.toString();
	            this.copyDataToClipboard(data);
	        }
	        else {
	            this.copyDataToClipboard('');
	        }
	        var cellId = focusedCell.createId();
	        var cellsToFlash = {};
	        cellsToFlash[cellId] = true;
	        this.dispatchFlashCells(cellsToFlash);
	    };
	    ClipboardService.prototype.dispatchFlashCells = function (cellsToFlash) {
	        var _this = this;
	        setTimeout(function () {
	            var event = {
	                type: main_1.Events.EVENT_FLASH_CELLS,
	                cells: cellsToFlash,
	                api: _this.gridApi,
	                columnApi: _this.columnApi
	            };
	            _this.eventService.dispatchEvent(event);
	        }, 0);
	    };
	    ClipboardService.prototype.userProcessCell = function (rowNode, column, value, func, type) {
	        if (func) {
	            var params = {
	                column: column,
	                node: rowNode,
	                value: value,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext(),
	                type: type
	            };
	            return func(params);
	        }
	        else {
	            return value;
	        }
	    };
	    ClipboardService.prototype.getRowNode = function (gridRow) {
	        switch (gridRow.floating) {
	            case main_1.Constants.PINNED_TOP:
	                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
	            case main_1.Constants.PINNED_BOTTOM:
	                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
	            default:
	                return this.rowModel.getRow(gridRow.rowIndex);
	        }
	    };
	    ClipboardService.prototype.copySelectedRowsToClipboard = function (includeHeaders, columnKeys) {
	        if (includeHeaders === void 0) { includeHeaders = false; }
	        var skipHeader = !includeHeaders;
	        var deliminator = this.gridOptionsWrapper.getClipboardDeliminator();
	        var params = {
	            columnKeys: columnKeys,
	            skipHeader: skipHeader,
	            skipFooters: true,
	            suppressQuotes: true,
	            columnSeparator: deliminator,
	            onlySelected: true,
	            processCellCallback: this.gridOptionsWrapper.getProcessCellForClipboardFunc()
	        };
	        var data = this.csvCreator.getDataAsCsv(params);
	        this.copyDataToClipboard(data);
	    };
	    ClipboardService.prototype.copyDataToClipboard = function (data) {
	        var userProvidedFunc = this.gridOptionsWrapper.getSendToClipboardFunc();
	        if (main_1.Utils.exists(userProvidedFunc)) {
	            var params = { data: data };
	            userProvidedFunc(params);
	        }
	        else {
	            this.executeOnTempElement(function (element) {
	                element.value = data;
	                element.select();
	                element.focus();
	                return document.execCommand('copy');
	            });
	        }
	    };
	    ClipboardService.prototype.executeOnTempElement = function (callbackNow, callbackAfter) {
	        var eTempInput = document.createElement('textarea');
	        eTempInput.style.width = '1px';
	        eTempInput.style.height = '1px';
	        eTempInput.style.top = '0px';
	        eTempInput.style.left = '0px';
	        eTempInput.style.position = 'absolute';
	        eTempInput.style.opacity = '0.0';
	        var guiRoot = this.gridCore.getRootGui();
	        guiRoot.appendChild(eTempInput);
	        try {
	            var result = callbackNow(eTempInput);
	            this.logger.log('Clipboard operation result: ' + result);
	        }
	        catch (err) {
	            this.logger.log('Browser doesn\t support document.execComment(\'copy\') for clipboard operations');
	        }
	        //It needs 100 otherwise OS X seemed to not always be able to paste... Go figure...
	        if (callbackAfter) {
	            setTimeout(function () {
	                callbackAfter(eTempInput);
	                guiRoot.removeChild(eTempInput);
	            }, 100);
	        }
	        else {
	            guiRoot.removeChild(eTempInput);
	        }
	    };
	    // From http://stackoverflow.com/questions/1293147/javascript-code-to-parse-csv-data
	    // This will parse a delimited string into an array of
	    // arrays. The default delimiter is the comma, but this
	    // can be overriden in the second argument.
	    ClipboardService.prototype.dataToArray = function (strData) {
	        var delimiter = this.gridOptionsWrapper.getClipboardDeliminator();
	        // Create a regular expression to parse the CSV values.
	        var objPattern = new RegExp((
	        // Delimiters.
	        "(\\" + delimiter + "|\\r?\\n|\\r|^)" +
	            // Quoted fields.
	            "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
	            // Standard fields.
	            "([^\"\\" + delimiter + "\\r\\n]*))"), "gi");
	        // Create an array to hold our data. Give the array
	        // a default empty first row.
	        var arrData = [[]];
	        // Create an array to hold our individual pattern
	        // matching groups.
	        var arrMatches = null;
	        // Keep looping over the regular expression matches
	        // until we can no longer find a match.
	        while (arrMatches = objPattern.exec(strData)) {
	            // Get the delimiter that was found.
	            var strMatchedDelimiter = arrMatches[1];
	            // Check to see if the given delimiter has a length
	            // (is not the start of string) and if it matches
	            // field delimiter. If id does not, then we know
	            // that this delimiter is a row delimiter.
	            if (strMatchedDelimiter.length &&
	                strMatchedDelimiter !== delimiter) {
	                // Since we have reached a new row of data,
	                // add an empty row to our data array.
	                arrData.push([]);
	            }
	            var strMatchedValue = void 0;
	            // Now that we have our delimiter out of the way,
	            // let's check to see which kind of value we
	            // captured (quoted or unquoted).
	            if (arrMatches[2]) {
	                // We found a quoted value. When we capture
	                // this value, unescape any double quotes.
	                strMatchedValue = arrMatches[2].replace(new RegExp("\"\"", "g"), "\"");
	            }
	            else {
	                // We found a non-quoted value.
	                strMatchedValue = arrMatches[3];
	            }
	            // Now that we have our value string, let's add
	            // it to the data array.
	            arrData[arrData.length - 1].push(strMatchedValue);
	        }
	        // Return the parsed data.
	        return arrData;
	    };
	    __decorate([
	        main_1.Autowired('csvCreator'),
	        __metadata("design:type", main_1.CsvCreator)
	    ], ClipboardService.prototype, "csvCreator", void 0);
	    __decorate([
	        main_1.Autowired('loggerFactory'),
	        __metadata("design:type", main_1.LoggerFactory)
	    ], ClipboardService.prototype, "loggerFactory", void 0);
	    __decorate([
	        main_1.Autowired('selectionController'),
	        __metadata("design:type", main_1.SelectionController)
	    ], ClipboardService.prototype, "selectionController", void 0);
	    __decorate([
	        main_1.Autowired('rangeController'),
	        __metadata("design:type", rangeController_1.RangeController)
	    ], ClipboardService.prototype, "rangeController", void 0);
	    __decorate([
	        main_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], ClipboardService.prototype, "rowModel", void 0);
	    __decorate([
	        main_1.Autowired('pinnedRowModel'),
	        __metadata("design:type", main_1.PinnedRowModel)
	    ], ClipboardService.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        main_1.Autowired('valueService'),
	        __metadata("design:type", main_1.ValueService)
	    ], ClipboardService.prototype, "valueService", void 0);
	    __decorate([
	        main_1.Autowired('focusedCellController'),
	        __metadata("design:type", main_1.FocusedCellController)
	    ], ClipboardService.prototype, "focusedCellController", void 0);
	    __decorate([
	        main_1.Autowired('rowRenderer'),
	        __metadata("design:type", main_1.RowRenderer)
	    ], ClipboardService.prototype, "rowRenderer", void 0);
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], ClipboardService.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], ClipboardService.prototype, "eventService", void 0);
	    __decorate([
	        main_1.Autowired('cellNavigationService'),
	        __metadata("design:type", main_1.CellNavigationService)
	    ], ClipboardService.prototype, "cellNavigationService", void 0);
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], ClipboardService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.Autowired('gridCore'),
	        __metadata("design:type", main_1.GridCore)
	    ], ClipboardService.prototype, "gridCore", void 0);
	    __decorate([
	        main_1.Autowired('columnApi'),
	        __metadata("design:type", main_1.ColumnApi)
	    ], ClipboardService.prototype, "columnApi", void 0);
	    __decorate([
	        main_1.Autowired('gridApi'),
	        __metadata("design:type", main_1.GridApi)
	    ], ClipboardService.prototype, "gridApi", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ClipboardService.prototype, "init", null);
	    ClipboardService = __decorate([
	        main_1.Bean('clipboardService')
	    ], ClipboardService);
	    return ClipboardService;
	}());
	exports.ClipboardService = ClipboardService;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var RangeController = (function () {
	    function RangeController() {
	        this.bodyScrollListener = this.onBodyScroll.bind(this);
	        this.dragging = false;
	    }
	    RangeController.prototype.init = function () {
	        this.logger = this.loggerFactory.create('RangeController');
	        this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.clearSelection.bind(this));
	        this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_GROUP_OPENED, this.clearSelection.bind(this));
	        this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_MOVED, this.clearSelection.bind(this));
	        this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_PINNED, this.clearSelection.bind(this));
	        this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.clearSelection.bind(this));
	        this.eventService.addEventListener(main_1.Events.EVENT_COLUMN_VISIBLE, this.clearSelection.bind(this));
	    };
	    RangeController.prototype.setRangeToCell = function (cell) {
	        if (!this.gridOptionsWrapper.isEnableRangeSelection()) {
	            return;
	        }
	        var columns = this.updateSelectedColumns(cell.column, cell.column);
	        if (!columns) {
	            return;
	        }
	        var gridCellDef = { rowIndex: cell.rowIndex, floating: cell.floating, column: cell.column };
	        var newRange = {
	            start: new main_1.GridCell(gridCellDef),
	            end: new main_1.GridCell(gridCellDef),
	            columns: columns
	        };
	        this.cellRanges = [];
	        this.cellRanges.push(newRange);
	        this.activeRange = null;
	        this.dispatchChangedEvent(true, false);
	    };
	    RangeController.prototype.setRange = function (rangeSelection) {
	        if (!this.gridOptionsWrapper.isEnableRangeSelection()) {
	            return;
	        }
	        this.cellRanges = [];
	        this.addRange(rangeSelection);
	    };
	    RangeController.prototype.addRange = function (rangeSelection) {
	        if (!this.gridOptionsWrapper.isEnableRangeSelection()) {
	            return;
	        }
	        var columnStart = this.columnController.getColumnWithValidation(rangeSelection.columnStart);
	        var columnEnd = this.columnController.getPrimaryColumn(rangeSelection.columnEnd);
	        if (!columnStart || !columnEnd) {
	            return;
	        }
	        var columns = this.updateSelectedColumns(columnStart, columnEnd);
	        if (!columns) {
	            return;
	        }
	        var startGridCellDef = { column: columnStart, rowIndex: rangeSelection.rowStart, floating: rangeSelection.floatingStart };
	        var endGridCellDef = { column: columnEnd, rowIndex: rangeSelection.rowEnd, floating: rangeSelection.floatingEnd };
	        var newRange = {
	            start: new main_1.GridCell(startGridCellDef),
	            end: new main_1.GridCell(endGridCellDef),
	            columns: columns
	        };
	        if (!this.cellRanges) {
	            this.cellRanges = [];
	        }
	        this.cellRanges.push(newRange);
	        this.dispatchChangedEvent(true, false);
	    };
	    RangeController.prototype.getCellRanges = function () {
	        return this.cellRanges;
	    };
	    RangeController.prototype.isEmpty = function () {
	        return main_1.Utils.missingOrEmpty(this.cellRanges);
	    };
	    RangeController.prototype.isMoreThanOneCell = function () {
	        if (main_1.Utils.missingOrEmpty(this.cellRanges)) {
	            return false;
	        }
	        else {
	            if (this.cellRanges.length > 1) {
	                return true;
	            }
	            else {
	                var onlyRange = this.cellRanges[0];
	                var onlyOneCellInRange = onlyRange.start.column === onlyRange.end.column &&
	                    onlyRange.start.rowIndex === onlyRange.end.rowIndex;
	                return !onlyOneCellInRange;
	            }
	        }
	    };
	    RangeController.prototype.clearSelection = function () {
	        if (main_1.Utils.missing(this.cellRanges)) {
	            return;
	        }
	        this.activeRange = null;
	        this.cellRanges = null;
	        this.dispatchChangedEvent(true, false);
	    };
	    // as the user is dragging outside of the panel, the div starts to scroll, which in turn
	    // means we are selection more (or less) cells, but the mouse isn't moving, so we recalculate
	    // the selection my mimicking a new mouse event
	    RangeController.prototype.onBodyScroll = function () {
	        this.onDragging(this.lastMouseEvent);
	    };
	    RangeController.prototype.isCellInAnyRange = function (cell) {
	        return this.getCellRangeCount(cell) > 0;
	    };
	    RangeController.prototype.isCellInSpecificRange = function (cell, range) {
	        var columnInRange = range.columns.indexOf(cell.column) >= 0;
	        var rowInRange = this.isRowInRange(cell.rowIndex, cell.floating, range);
	        return columnInRange && rowInRange;
	    };
	    // returns the number of ranges this cell is in
	    RangeController.prototype.getCellRangeCount = function (cell) {
	        var _this = this;
	        if (main_1.Utils.missingOrEmpty(this.cellRanges)) {
	            return 0;
	        }
	        var matchingCount = 0;
	        this.cellRanges.forEach(function (cellRange) {
	            if (_this.isCellInSpecificRange(cell, cellRange)) {
	                matchingCount++;
	            }
	        });
	        return matchingCount;
	    };
	    RangeController.prototype.isRowInRange = function (rowIndex, floating, cellRange) {
	        var row1 = new main_1.GridRow(cellRange.start.rowIndex, cellRange.start.floating);
	        var row2 = new main_1.GridRow(cellRange.end.rowIndex, cellRange.end.floating);
	        var firstRow = row1.before(row2) ? row1 : row2;
	        var lastRow = row1.before(row2) ? row2 : row1;
	        var thisRow = new main_1.GridRow(rowIndex, floating);
	        if (thisRow.equals(firstRow) || thisRow.equals(lastRow)) {
	            return true;
	        }
	        else {
	            var afterFirstRow = !thisRow.before(firstRow);
	            var beforeLastRow = thisRow.before(lastRow);
	            return afterFirstRow && beforeLastRow;
	        }
	    };
	    RangeController.prototype.onDragStart = function (mouseEvent) {
	        if (!this.gridOptionsWrapper.isEnableRangeSelection()) {
	            return;
	        }
	        // ctrlKey for windows, metaKey for Apple
	        var multiSelectKeyPressed = mouseEvent.ctrlKey || mouseEvent.metaKey;
	        if (main_1.Utils.missing(this.cellRanges) || !multiSelectKeyPressed) {
	            this.cellRanges = [];
	        }
	        var cell = this.mouseEventService.getGridCellForEvent(mouseEvent);
	        if (main_1.Utils.missing(cell)) {
	            // if drag wasn't on cell, then do nothing, including do not set dragging=true,
	            // (which them means onDragging and onDragStop do nothing)
	            return;
	        }
	        this.createNewActiveRange(cell);
	        this.gridPanel.addScrollEventListener(this.bodyScrollListener);
	        this.dragging = true;
	        this.lastMouseEvent = mouseEvent;
	        this.selectionChanged(false, true);
	    };
	    RangeController.prototype.createNewActiveRange = function (cell) {
	        var gridCellDef = { column: cell.column, rowIndex: cell.rowIndex, floating: cell.floating };
	        this.activeRange = {
	            start: new main_1.GridCell(gridCellDef),
	            end: new main_1.GridCell(gridCellDef),
	            columns: [cell.column]
	        };
	        this.cellRanges.push(this.activeRange);
	    };
	    RangeController.prototype.selectionChanged = function (finished, started) {
	        this.activeRange.columns = this.updateSelectedColumns(this.activeRange.start.column, this.activeRange.end.column);
	        this.dispatchChangedEvent(finished, started);
	    };
	    RangeController.prototype.dispatchChangedEvent = function (finished, started) {
	        var event = {
	            type: main_1.Events.EVENT_RANGE_SELECTION_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            finished: finished,
	            started: started
	        };
	        this.eventService.dispatchEvent(event);
	    };
	    RangeController.prototype.onDragStop = function () {
	        if (!this.dragging) {
	            return;
	        }
	        this.gridPanel.removeScrollEventListener(this.bodyScrollListener);
	        this.lastMouseEvent = null;
	        this.dragging = false;
	        this.dispatchChangedEvent(true, false);
	    };
	    RangeController.prototype.onDragging = function (mouseEvent) {
	        if (!this.dragging) {
	            return;
	        }
	        this.lastMouseEvent = mouseEvent;
	        var cell = this.mouseEventService.getGridCellForEvent(mouseEvent);
	        if (main_1.Utils.missing(cell)) {
	            return;
	        }
	        var columnChanged = false;
	        if (cell.column !== this.activeRange.end.column) {
	            this.activeRange.end.column = cell.column;
	            columnChanged = true;
	        }
	        var rowChanged = false;
	        if (cell.rowIndex !== this.activeRange.end.rowIndex || cell.floating !== this.activeRange.end.floating) {
	            this.activeRange.end.rowIndex = cell.rowIndex;
	            this.activeRange.end.floating = cell.floating;
	            rowChanged = true;
	        }
	        if (columnChanged || rowChanged) {
	            this.selectionChanged(false, false);
	        }
	    };
	    RangeController.prototype.updateSelectedColumns = function (columnFrom, columnTo) {
	        var allColumns = this.columnController.getAllDisplayedColumns();
	        var fromIndex = allColumns.indexOf(columnFrom);
	        var toIndex = allColumns.indexOf(columnTo);
	        if (fromIndex < 0) {
	            console.log('ag-Grid: column ' + columnFrom.getId() + ' is not visible');
	            return null;
	        }
	        if (toIndex < 0) {
	            console.log('ag-Grid: column ' + columnTo.getId() + ' is not visible');
	            return null;
	        }
	        var firstIndex = Math.min(fromIndex, toIndex);
	        var lastIndex = Math.max(fromIndex, toIndex);
	        var columns = [];
	        for (var i = firstIndex; i <= lastIndex; i++) {
	            columns.push(allColumns[i]);
	        }
	        return columns;
	    };
	    __decorate([
	        main_1.Autowired('loggerFactory'),
	        __metadata("design:type", main_1.LoggerFactory)
	    ], RangeController.prototype, "loggerFactory", void 0);
	    __decorate([
	        main_1.Autowired('gridPanel'),
	        __metadata("design:type", main_1.GridPanel)
	    ], RangeController.prototype, "gridPanel", void 0);
	    __decorate([
	        main_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], RangeController.prototype, "rowModel", void 0);
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], RangeController.prototype, "eventService", void 0);
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], RangeController.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('rowRenderer'),
	        __metadata("design:type", main_1.RowRenderer)
	    ], RangeController.prototype, "rowRenderer", void 0);
	    __decorate([
	        main_1.Autowired('focusedCellController'),
	        __metadata("design:type", main_1.FocusedCellController)
	    ], RangeController.prototype, "focusedCellController", void 0);
	    __decorate([
	        main_1.Autowired('mouseEventService'),
	        __metadata("design:type", main_1.MouseEventService)
	    ], RangeController.prototype, "mouseEventService", void 0);
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], RangeController.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.Autowired('columnApi'),
	        __metadata("design:type", main_1.ColumnApi)
	    ], RangeController.prototype, "columnApi", void 0);
	    __decorate([
	        main_1.Autowired('gridApi'),
	        __metadata("design:type", main_1.GridApi)
	    ], RangeController.prototype, "gridApi", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RangeController.prototype, "init", null);
	    RangeController = __decorate([
	        main_1.Bean('rangeController')
	    ], RangeController);
	    return RangeController;
	}());
	exports.RangeController = RangeController;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var AggFuncService = (function () {
	    function AggFuncService() {
	        this.aggFuncsMap = {};
	        this.initialised = false;
	    }
	    AggFuncService_1 = AggFuncService;
	    AggFuncService.prototype.init = function () {
	        if (this.initialised) {
	            return;
	        }
	        this.initialised = true;
	        this.initialiseWithDefaultAggregations();
	        this.addAggFuncs(this.gridOptionsWrapper.getAggFuncs());
	    };
	    AggFuncService.prototype.initialiseWithDefaultAggregations = function () {
	        this.aggFuncsMap[AggFuncService_1.AGG_SUM] = aggSum;
	        this.aggFuncsMap[AggFuncService_1.AGG_FIRST] = aggFirst;
	        this.aggFuncsMap[AggFuncService_1.AGG_LAST] = aggLast;
	        this.aggFuncsMap[AggFuncService_1.AGG_MIN] = aggMin;
	        this.aggFuncsMap[AggFuncService_1.AGG_MAX] = aggMax;
	        this.aggFuncsMap[AggFuncService_1.AGG_COUNT] = aggCount;
	        this.aggFuncsMap[AggFuncService_1.AGG_AVG] = aggAvg;
	    };
	    AggFuncService.prototype.getDefaultAggFunc = function (column) {
	        var allKeys = this.getFuncNames(column);
	        // use 'sum' if it's a) allowed for the column and b) still registered
	        // (ie not removed by user)
	        var sumInKeysList = allKeys.indexOf(AggFuncService_1.AGG_SUM) >= 0;
	        var sumInFuncs = main_1._.exists(this.aggFuncsMap[AggFuncService_1.AGG_SUM]);
	        var useSum = sumInKeysList && sumInFuncs;
	        if (useSum) {
	            return AggFuncService_1.AGG_SUM;
	        }
	        else {
	            if (main_1.Utils.existsAndNotEmpty(allKeys)) {
	                return allKeys[0];
	            }
	            else {
	                return null;
	            }
	        }
	    };
	    AggFuncService.prototype.addAggFuncs = function (aggFuncs) {
	        main_1.Utils.iterateObject(aggFuncs, this.addAggFunc.bind(this));
	    };
	    AggFuncService.prototype.addAggFunc = function (key, aggFunc) {
	        this.init();
	        this.aggFuncsMap[key] = aggFunc;
	    };
	    AggFuncService.prototype.getAggFunc = function (name) {
	        this.init();
	        return this.aggFuncsMap[name];
	    };
	    AggFuncService.prototype.getFuncNames = function (column) {
	        var userAllowedFuncs = column.getColDef().allowedAggFuncs;
	        if (main_1._.exists(userAllowedFuncs)) {
	            return userAllowedFuncs;
	        }
	        else {
	            return Object.keys(this.aggFuncsMap).sort();
	        }
	    };
	    AggFuncService.prototype.clear = function () {
	        this.aggFuncsMap = {};
	    };
	    AggFuncService.AGG_SUM = 'sum';
	    AggFuncService.AGG_FIRST = 'first';
	    AggFuncService.AGG_LAST = 'last';
	    AggFuncService.AGG_MIN = 'min';
	    AggFuncService.AGG_MAX = 'max';
	    AggFuncService.AGG_COUNT = 'count';
	    AggFuncService.AGG_AVG = 'avg';
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], AggFuncService.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], AggFuncService.prototype, "init", null);
	    AggFuncService = AggFuncService_1 = __decorate([
	        main_1.Bean('aggFuncService')
	    ], AggFuncService);
	    return AggFuncService;
	    var AggFuncService_1;
	}());
	exports.AggFuncService = AggFuncService;
	function aggSum(input) {
	    var result = null;
	    var length = input.length;
	    for (var i = 0; i < length; i++) {
	        if (typeof input[i] === 'number') {
	            if (result === null) {
	                result = input[i];
	            }
	            else {
	                result += input[i];
	            }
	        }
	    }
	    return result;
	}
	function aggFirst(input) {
	    if (input.length >= 0) {
	        return input[0];
	    }
	    else {
	        return null;
	    }
	}
	function aggLast(input) {
	    if (input.length >= 0) {
	        return input[input.length - 1];
	    }
	    else {
	        return null;
	    }
	}
	function aggMin(input) {
	    var result = null;
	    var length = input.length;
	    for (var i = 0; i < length; i++) {
	        if (typeof input[i] === 'number') {
	            if (result === null) {
	                result = input[i];
	            }
	            else if (result > input[i]) {
	                result = input[i];
	            }
	        }
	    }
	    return result;
	}
	function aggMax(input) {
	    var result = null;
	    var length = input.length;
	    for (var i = 0; i < length; i++) {
	        if (typeof input[i] === 'number') {
	            if (result === null) {
	                result = input[i];
	            }
	            else if (result < input[i]) {
	                result = input[i];
	            }
	        }
	    }
	    return result;
	}
	function aggCount(input) {
	    var result = {
	        value: 0,
	        toString: function () {
	            return this.value.toString();
	        },
	        // used for sorting
	        toNumber: function () {
	            return this.value;
	        }
	    };
	    var length = input.length;
	    for (var i = 0; i < length; i++) {
	        var isGroupAgg = main_1.Utils.exists(input[i]) && typeof input[i].value === 'number';
	        if (isGroupAgg) {
	            result.value += input[i].value;
	        }
	        else {
	            result.value++;
	        }
	    }
	    return result;
	}
	// the average function is tricky as the multiple levels require weighted averages
	// for the non-leaf node aggregations.
	function aggAvg(input) {
	    // the average will be the sum / count
	    var sum = 0;
	    var count = 0;
	    var length = input.length;
	    for (var i = 0; i < length; i++) {
	        var currentItem = input[i];
	        var itemIsGroupResult = main_1.Utils.exists(currentItem) && typeof currentItem.value === 'number' && typeof currentItem.count === 'number';
	        // skip values that are not numbers (ie skip empty values)
	        if (typeof currentItem === 'number') {
	            sum += currentItem;
	            count++;
	            // check if it's a group (ie value is a wrapper object)
	        }
	        else if (itemIsGroupResult) {
	            // we are aggregating groups, so we take the
	            // aggregated values to calculated a weighted average
	            sum += currentItem.value * currentItem.count;
	            count += currentItem.count;
	        }
	    }
	    // avoid divide by zero error
	    var value = null;
	    if (count !== 0) {
	        value = sum / count;
	    }
	    // the result will be an object. when this cell is rendered, only the avg is shown.
	    // however when this cell is part of another aggregation, the count is also needed
	    // to create a weighted average for the next level.
	    var result = {
	        count: count,
	        value: value,
	        // the grid by default uses toString to render values for an object, so this
	        // is a trick to get the default cellRenderer to display the avg value
	        toString: function () {
	            if (typeof this.value === 'number') {
	                return this.value.toString();
	            }
	            else {
	                return '';
	            }
	        },
	        // used for sorting
	        toNumber: function () {
	            return this.value;
	        }
	    };
	    return result;
	}


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var GroupStage = (function () {
	    function GroupStage() {
	        // we use a sequence variable so that each time we do a grouping, we don't
	        // reuse the ids - otherwise the rowRenderer will confuse rowNodes between redraws
	        // when it tries to animate between rows. we set to -1 as others row id 0 will be shared
	        // with the other rows.
	        this.groupIdSequence = new main_1.NumberSequence(1);
	    }
	    // when grouping, these items are of note:
	    // rowNode.parent: RowNode: set to the parent
	    // rowNode.childrenAfterGroup: RowNode[] = the direct children of this group
	    // rowNode.childrenMapped: string=>RowNode = children mapped by group key (when groups) or an empty map if leaf group (this is then used by pivot)
	    // for leaf groups, rowNode.childrenAfterGroup = rowNode.allLeafChildren;
	    GroupStage.prototype.execute = function (params) {
	        var rowNode = params.rowNode, changedPath = params.changedPath, rowNodeTransaction = params.rowNodeTransaction;
	        var groupedCols = this.columnController.getRowGroupColumns();
	        var expandByDefault;
	        if (this.gridOptionsWrapper.isGroupSuppressRow()) {
	            expandByDefault = -1;
	        }
	        else {
	            expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();
	        }
	        var includeParents = !this.gridOptionsWrapper.isSuppressParentsInRowNodes();
	        var isPivot = this.columnController.isPivotMode();
	        var isGrouping = groupedCols.length > 0;
	        // important not to do transaction if we are not grouping, as otherwise the 'insert index' is ignored.
	        // ie, if not grouping, then we just want to shotgun so the rootNode.allLeafChildren gets copied
	        // to rootNode.childrenAfterGroup and maintaining order (as delta transaction misses the order).
	        var doTransaction = isGrouping && main_1._.exists(rowNodeTransaction);
	        if (doTransaction) {
	            this.handleTransaction(rowNodeTransaction, changedPath, rowNode, groupedCols, expandByDefault, includeParents, isPivot);
	        }
	        else {
	            this.shotgunResetEverything(rowNode, groupedCols, expandByDefault, includeParents, isPivot);
	        }
	    };
	    GroupStage.prototype.handleTransaction = function (tran, changedPath, rootNode, groupedCols, expandByDefault, includeParents, isPivot) {
	        if (tran.add) {
	            this.insertRowNodesIntoGroups(tran.add, changedPath, rootNode, groupedCols, expandByDefault, includeParents, isPivot);
	        }
	        if (tran.update) {
	            // the InMemoryNodeManager already updated the value, however we
	            // need to check the grouping, in case a dimension changed.
	            this.checkParents(tran.update, changedPath, rootNode, groupedCols, expandByDefault, includeParents, isPivot);
	        }
	        if (tran.remove) {
	            this.removeRowNodesFromGroups(tran.remove, changedPath, rootNode);
	        }
	    };
	    GroupStage.prototype.checkParents = function (leafRowNodes, changedPath, rootNode, groupColumns, expandByDefault, includeParents, isPivot) {
	        var _this = this;
	        leafRowNodes.forEach(function (nodeToPlace) {
	            // always add existing parent, as if row is moved, then old parent needs
	            // to be recomputed
	            if (changedPath) {
	                changedPath.addParentNode(nodeToPlace.parent);
	            }
	            var groupKeys = groupColumns.map(function (col) { return _this.getKeyForNode(col, nodeToPlace); });
	            var parent = nodeToPlace.parent;
	            var keysMatch = true;
	            groupKeys.forEach(function (key) {
	                if (parent.key !== key) {
	                    keysMatch = false;
	                }
	                parent = parent.parent;
	            });
	            if (!keysMatch) {
	                _this.removeRowNodeFromGroups(nodeToPlace, rootNode);
	                _this.insertRowNodeIntoGroups(nodeToPlace, rootNode, groupColumns, expandByDefault, includeParents, isPivot);
	                // add in new parent
	                if (changedPath) {
	                    changedPath.addParentNode(nodeToPlace.parent);
	                }
	            }
	        });
	    };
	    GroupStage.prototype.removeRowNodesFromGroups = function (leafRowNodes, changedPath, rootNode) {
	        var _this = this;
	        leafRowNodes.forEach(function (leafToRemove) {
	            _this.removeRowNodeFromGroups(leafToRemove, rootNode);
	            if (changedPath) {
	                changedPath.addParentNode(leafToRemove.parent);
	            }
	        });
	    };
	    GroupStage.prototype.removeRowNodeFromGroups = function (leafToRemove, rootNode) {
	        // step 1 - remove leaf from direct parent
	        main_1._.removeFromArray(leafToRemove.parent.childrenAfterGroup, leafToRemove);
	        // step 2 - go up the row group hierarchy and:
	        //  a) remove from allLeafChildren
	        //  b) remove empty groups
	        var groupPointer = leafToRemove.parent;
	        while (groupPointer !== rootNode) {
	            main_1._.removeFromArray(groupPointer.allLeafChildren, leafToRemove);
	            var isEmptyGroup = groupPointer.allLeafChildren.length === 0;
	            if (isEmptyGroup) {
	                this.removeGroupFromParent(groupPointer);
	            }
	            groupPointer = groupPointer.parent;
	        }
	    };
	    GroupStage.prototype.removeGroupFromParent = function (groupPointer) {
	        main_1._.removeFromArray(groupPointer.parent.childrenAfterGroup, groupPointer);
	        groupPointer.parent.childrenMapped[groupPointer.key] = undefined;
	    };
	    GroupStage.prototype.shotgunResetEverything = function (rootNode, groupedCols, expandByDefault, includeParents, isPivot) {
	        // because we are not creating the root node each time, we have the logic
	        // here to change leafGroup once.
	        rootNode.leafGroup = groupedCols.length === 0;
	        // we are going everything from scratch, so reset childrenAfterGroup and childrenMapped from the rootNode
	        rootNode.childrenAfterGroup = [];
	        rootNode.childrenMapped = {};
	        this.insertRowNodesIntoGroups(rootNode.allLeafChildren, null, rootNode, groupedCols, expandByDefault, includeParents, isPivot);
	    };
	    GroupStage.prototype.insertRowNodesIntoGroups = function (newRowNodes, changedPath, rootNode, groupColumns, expandByDefault, includeParents, isPivot) {
	        var _this = this;
	        newRowNodes.forEach(function (rowNode) {
	            _this.insertRowNodeIntoGroups(rowNode, rootNode, groupColumns, expandByDefault, includeParents, isPivot);
	            if (changedPath) {
	                changedPath.addParentNode(rowNode.parent);
	            }
	        });
	    };
	    GroupStage.prototype.insertRowNodeIntoGroups = function (rowNode, rootNode, groupColumns, expandByDefault, includeParents, isPivot) {
	        var _this = this;
	        var nextGroup = rootNode;
	        groupColumns.forEach(function (groupColumn, level) {
	            nextGroup = _this.getOrCreateNextGroup(nextGroup, rowNode, groupColumn, expandByDefault, level, includeParents, groupColumns.length, isPivot);
	            // node gets added to all group nodes.
	            // note: we do not add to rootNode here, as the rootNode is the master list of rowNodes, not impacted by grouping
	            nextGroup.allLeafChildren.push(rowNode);
	        });
	        rowNode.parent = nextGroup;
	        rowNode.level = groupColumns.length;
	        nextGroup.childrenAfterGroup.push(rowNode);
	    };
	    GroupStage.prototype.getOrCreateNextGroup = function (parentGroup, nodeToPlace, groupColumn, expandByDefault, level, includeParents, numberOfGroupColumns, isPivot) {
	        var groupKey = this.getKeyForNode(groupColumn, nodeToPlace);
	        var nextGroup = parentGroup.childrenMapped[groupKey];
	        if (!nextGroup) {
	            nextGroup = this.createSubGroup(groupKey, groupColumn, parentGroup, expandByDefault, level, includeParents, numberOfGroupColumns, isPivot);
	            // attach the new group to the parent
	            parentGroup.childrenMapped[groupKey] = nextGroup;
	            parentGroup.childrenAfterGroup.push(nextGroup);
	        }
	        return nextGroup;
	    };
	    GroupStage.prototype.getKeyForNode = function (groupColumn, rowNode) {
	        var value = this.valueService.getValue(groupColumn, rowNode);
	        var result;
	        var keyCreator = groupColumn.getColDef().keyCreator;
	        if (keyCreator) {
	            result = keyCreator({ value: value });
	        }
	        else {
	            result = value;
	        }
	        return result;
	    };
	    GroupStage.prototype.createSubGroup = function (groupKey, groupColumn, parent, expandByDefault, level, includeParents, numberOfGroupColumns, isPivot) {
	        var newGroup = new main_1.RowNode();
	        this.context.wireBean(newGroup);
	        newGroup.group = true;
	        newGroup.field = groupColumn.getColDef().field;
	        newGroup.rowGroupColumn = groupColumn;
	        newGroup.groupData = {};
	        var groupDisplayCols = this.columnController.getGroupDisplayColumns();
	        groupDisplayCols.forEach(function (col) {
	            if (col.isRowGroupDisplayed(newGroup.rowGroupColumn.getId())) {
	                newGroup.groupData[col.getColId()] = groupKey;
	            }
	        });
	        // we use negative number for the ids of the groups, this makes sure we don't clash with the
	        // id's of the leaf nodes.
	        newGroup.id = (this.groupIdSequence.next() * -1).toString();
	        newGroup.key = groupKey;
	        newGroup.level = level;
	        newGroup.leafGroup = level === (numberOfGroupColumns - 1);
	        // if doing pivoting, then the leaf group is never expanded,
	        // as we do not show leaf rows
	        if (isPivot && newGroup.leafGroup) {
	            newGroup.expanded = false;
	        }
	        else {
	            newGroup.expanded = this.isExpanded(expandByDefault, level);
	        }
	        newGroup.allLeafChildren = [];
	        // why is this done here? we are not updating the children could as we go,
	        // i suspect this is updated in the filter stage
	        newGroup.setAllChildrenCount(0);
	        newGroup.rowGroupIndex = level;
	        newGroup.childrenAfterGroup = [];
	        newGroup.childrenMapped = {};
	        newGroup.parent = includeParents ? parent : null;
	        return newGroup;
	    };
	    GroupStage.prototype.isExpanded = function (expandByDefault, level) {
	        if (expandByDefault === -1) {
	            return true;
	        }
	        else {
	            return level < expandByDefault;
	        }
	    };
	    __decorate([
	        main_1.Autowired('selectionController'),
	        __metadata("design:type", main_1.SelectionController)
	    ], GroupStage.prototype, "selectionController", void 0);
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], GroupStage.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], GroupStage.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('valueService'),
	        __metadata("design:type", main_1.ValueService)
	    ], GroupStage.prototype, "valueService", void 0);
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], GroupStage.prototype, "eventService", void 0);
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], GroupStage.prototype, "context", void 0);
	    GroupStage = __decorate([
	        main_1.Bean('groupStage')
	    ], GroupStage);
	    return GroupStage;
	}());
	exports.GroupStage = GroupStage;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var pivotStage_1 = __webpack_require__(149);
	var aggFuncService_1 = __webpack_require__(146);
	var AggregationStage = (function () {
	    function AggregationStage() {
	    }
	    // it's possible to recompute the aggregate without doing the other parts
	    // + gridApi.recomputeAggregates()
	    AggregationStage.prototype.execute = function (params) {
	        var rowNode = params.rowNode, changedPath = params.changedPath;
	        // we don't do aggregation if user provided the groups
	        var rowsAlreadyGrouped = main_1._.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());
	        if (rowsAlreadyGrouped) {
	            return;
	        }
	        var pivotActive = this.columnController.isPivotActive();
	        var measureColumns = this.columnController.getValueColumns();
	        var pivotColumns = pivotActive ? this.columnController.getPivotColumns() : [];
	        this.recursivelyCreateAggData(rowNode, changedPath, measureColumns, pivotColumns);
	    };
	    AggregationStage.prototype.recursivelyCreateAggData = function (rowNode, changedPath, measureColumns, pivotColumns) {
	        var _this = this;
	        // aggregate all children first, as we use the result in this nodes calculations
	        rowNode.childrenAfterFilter.forEach(function (child) {
	            if (child.group) {
	                _this.recursivelyCreateAggData(child, changedPath, measureColumns, pivotColumns);
	            }
	        });
	        //Optionally prevent the aggregation at the root Node
	        //https://ag-grid.atlassian.net/browse/AG-388
	        var isRootNode = rowNode.level === -1;
	        if (isRootNode) {
	            var notPivoting = !this.columnController.isPivotMode();
	            var suppressAggAtRootLevel = this.gridOptionsWrapper.isSuppressAggAtRootLevel();
	            if (suppressAggAtRootLevel && notPivoting) {
	                return;
	            }
	        }
	        var skipBecauseNoChangedPath = changedPath && !changedPath.isInPath(rowNode);
	        if (skipBecauseNoChangedPath) {
	            return;
	        }
	        this.aggregateRowNode(rowNode, changedPath, measureColumns, pivotColumns);
	    };
	    AggregationStage.prototype.aggregateRowNode = function (rowNode, changedPath, measureColumns, pivotColumns) {
	        var measureColumnsMissing = measureColumns.length === 0;
	        var pivotColumnsMissing = pivotColumns.length === 0;
	        var userProvidedGroupRowAggNodes = this.gridOptionsWrapper.getGroupRowAggNodesFunc();
	        var aggResult;
	        if (rowNode.group && userProvidedGroupRowAggNodes) {
	            aggResult = userProvidedGroupRowAggNodes(rowNode.childrenAfterFilter);
	        }
	        else if (measureColumnsMissing) {
	            aggResult = null;
	        }
	        else if (rowNode.group && pivotColumnsMissing) {
	            aggResult = this.aggregateRowNodeUsingValuesOnly(rowNode, changedPath, measureColumns);
	        }
	        else {
	            aggResult = this.aggregateRowNodeUsingValuesAndPivot(rowNode);
	        }
	        rowNode.setAggData(aggResult);
	        // if we are grouping, then it's possible there is a sibling footer
	        // to the group, so update the data here also if there is one
	        if (rowNode.sibling) {
	            rowNode.sibling.setAggData(aggResult);
	        }
	    };
	    AggregationStage.prototype.aggregateRowNodeUsingValuesAndPivot = function (rowNode) {
	        var _this = this;
	        var result = {};
	        var pivotColumnDefs = this.pivotStage.getPivotColumnDefs();
	        // Step 1: process value columns
	        pivotColumnDefs
	            .filter(function (v) { return !main_1.Utils.exists(v.pivotTotalColumnIds); }) // only process pivot value columns
	            .forEach(function (valueColDef) {
	            var keys = valueColDef.pivotKeys;
	            var values;
	            var valueColumn = valueColDef.pivotValueColumn;
	            if (rowNode.leafGroup) {
	                // lowest level group, get the values from the mapped set
	                values = _this.getValuesFromMappedSet(rowNode.childrenMapped, keys, valueColumn);
	            }
	            else {
	                // value columns and pivot columns, non-leaf group
	                values = _this.getValuesPivotNonLeaf(rowNode, valueColDef.colId);
	            }
	            result[valueColDef.colId] = _this.aggregateValues(values, valueColumn.getAggFunc());
	        });
	        // Step 2: process total columns
	        pivotColumnDefs
	            .filter(function (v) { return main_1.Utils.exists(v.pivotTotalColumnIds); }) // only process pivot total columns
	            .forEach(function (totalColDef) {
	            var aggResults = [];
	            //retrieve results for colIds associated with this pivot total column
	            totalColDef.pivotTotalColumnIds.forEach(function (colId) {
	                aggResults.push(result[colId]);
	            });
	            result[totalColDef.colId] = _this.aggregateValues(aggResults, totalColDef.aggFunc);
	        });
	        return result;
	    };
	    AggregationStage.prototype.aggregateRowNodeUsingValuesOnly = function (rowNode, changedPath, valueColumns) {
	        var _this = this;
	        var result = {};
	        var changedValueColumns = changedPath ? changedPath.getValueColumnsForNode(rowNode, valueColumns) : valueColumns;
	        var notChangedValueColumns = changedPath ? changedPath.getNotValueColumnsForNode(rowNode, valueColumns) : null;
	        var values2d = this.getValuesNormal(rowNode, changedValueColumns);
	        var oldValues = rowNode.aggData;
	        changedValueColumns.forEach(function (valueColumn, index) {
	            result[valueColumn.getId()] = _this.aggregateValues(values2d[index], valueColumn.getAggFunc());
	        });
	        if (notChangedValueColumns && oldValues) {
	            notChangedValueColumns.forEach(function (valueColumn) {
	                result[valueColumn.getId()] = oldValues[valueColumn.getId()];
	            });
	        }
	        return result;
	    };
	    AggregationStage.prototype.getValuesPivotNonLeaf = function (rowNode, colId) {
	        var values = [];
	        rowNode.childrenAfterFilter.forEach(function (rowNode) {
	            var value = rowNode.aggData[colId];
	            values.push(value);
	        });
	        return values;
	    };
	    AggregationStage.prototype.getValuesFromMappedSet = function (mappedSet, keys, valueColumn) {
	        var _this = this;
	        var mapPointer = mappedSet;
	        keys.forEach(function (key) { return mapPointer = mapPointer ? mapPointer[key] : null; });
	        if (!mapPointer) {
	            return [];
	        }
	        var values = [];
	        mapPointer.forEach(function (rowNode) {
	            var value = _this.valueService.getValue(valueColumn, rowNode);
	            values.push(value);
	        });
	        return values;
	    };
	    AggregationStage.prototype.getValuesNormal = function (rowNode, valueColumns) {
	        // create 2d array, of all values for all valueColumns
	        var values = [];
	        valueColumns.forEach(function () { return values.push([]); });
	        var valueColumnCount = valueColumns.length;
	        var rowCount = rowNode.childrenAfterFilter.length;
	        for (var i = 0; i < rowCount; i++) {
	            var childNode = rowNode.childrenAfterFilter[i];
	            for (var j = 0; j < valueColumnCount; j++) {
	                var valueColumn = valueColumns[j];
	                var value = void 0;
	                // if the row is a group, then it will only have an agg result value,
	                // which means valueGetter is never used.
	                if (childNode.group) {
	                    value = childNode.aggData[valueColumn.getId()];
	                }
	                else {
	                    value = this.valueService.getValue(valueColumn, childNode);
	                }
	                values[j].push(value);
	            }
	        }
	        return values;
	    };
	    AggregationStage.prototype.aggregateValues = function (values, aggFuncOrString) {
	        var aggFunction;
	        if (typeof aggFuncOrString === 'string') {
	            aggFunction = this.aggFuncService.getAggFunc(aggFuncOrString);
	        }
	        else {
	            aggFunction = aggFuncOrString;
	        }
	        if (typeof aggFunction !== 'function') {
	            console.error("ag-Grid: unrecognised aggregation function " + aggFuncOrString);
	            return null;
	        }
	        return aggFunction(values);
	    };
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], AggregationStage.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], AggregationStage.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('valueService'),
	        __metadata("design:type", main_1.ValueService)
	    ], AggregationStage.prototype, "valueService", void 0);
	    __decorate([
	        main_1.Autowired('pivotStage'),
	        __metadata("design:type", pivotStage_1.PivotStage)
	    ], AggregationStage.prototype, "pivotStage", void 0);
	    __decorate([
	        main_1.Autowired('aggFuncService'),
	        __metadata("design:type", aggFuncService_1.AggFuncService)
	    ], AggregationStage.prototype, "aggFuncService", void 0);
	    AggregationStage = __decorate([
	        main_1.Bean('aggregationStage')
	    ], AggregationStage);
	    return AggregationStage;
	}());
	exports.AggregationStage = AggregationStage;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var pivotColDefService_1 = __webpack_require__(150);
	var PivotStage = (function () {
	    function PivotStage() {
	        this.uniqueValues = {};
	    }
	    PivotStage.prototype.execute = function (params) {
	        var rootNode = params.rowNode;
	        if (this.columnController.isPivotActive()) {
	            this.executePivotOn(rootNode);
	        }
	        else {
	            this.executePivotOff();
	        }
	    };
	    PivotStage.prototype.executePivotOff = function () {
	        this.aggregationColumnsHashLastTime = null;
	        this.uniqueValues = {};
	        this.columnController.setSecondaryColumns(null);
	    };
	    PivotStage.prototype.executePivotOn = function (rootNode) {
	        var uniqueValues = this.bucketUpRowNodes(rootNode);
	        var uniqueValuesChanged = this.setUniqueValues(uniqueValues);
	        var aggregationColumns = this.columnController.getValueColumns();
	        var aggregationColumnsHash = aggregationColumns.map(function (column) { return column.getId(); }).join('#');
	        var aggregationFuncsHash = aggregationColumns.map(function (column) { return column.getAggFunc().toString(); }).join('#');
	        var aggregationColumnsChanged = this.aggregationColumnsHashLastTime !== aggregationColumnsHash;
	        var aggregationFuncsChanged = this.aggregationFuncsHashLastTime !== aggregationFuncsHash;
	        this.aggregationColumnsHashLastTime = aggregationColumnsHash;
	        this.aggregationFuncsHashLastTime = aggregationFuncsHash;
	        if (uniqueValuesChanged || aggregationColumnsChanged || aggregationFuncsChanged) {
	            var result = this.pivotColDefService.createPivotColumnDefs(this.uniqueValues);
	            this.pivotColumnGroupDefs = result.pivotColumnGroupDefs;
	            this.pivotColumnDefs = result.pivotColumnDefs;
	            this.columnController.setSecondaryColumns(this.pivotColumnGroupDefs);
	        }
	    };
	    PivotStage.prototype.setUniqueValues = function (newValues) {
	        var json1 = JSON.stringify(newValues);
	        var json2 = JSON.stringify(this.uniqueValues);
	        var uniqueValuesChanged = json1 !== json2;
	        // we only continue the below if the unique values are different, as otherwise
	        // the result will be the same as the last time we did it
	        if (uniqueValuesChanged) {
	            this.uniqueValues = newValues;
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    // returns true if values were different
	    PivotStage.prototype.bucketUpRowNodes = function (rootNode) {
	        var _this = this;
	        // accessed from inside inner function
	        var uniqueValues = {};
	        // finds all leaf groups and calls mapRowNode with it
	        var recursivelySearchForLeafNodes = function (rowNode) {
	            if (rowNode.leafGroup) {
	                _this.bucketRowNode(rowNode, uniqueValues);
	            }
	            else {
	                rowNode.childrenAfterFilter.forEach(function (child) {
	                    recursivelySearchForLeafNodes(child);
	                });
	            }
	        };
	        recursivelySearchForLeafNodes(rootNode);
	        return uniqueValues;
	    };
	    PivotStage.prototype.bucketRowNode = function (rowNode, uniqueValues) {
	        var pivotColumns = this.columnController.getPivotColumns();
	        if (pivotColumns.length === 0) {
	            rowNode.childrenMapped = null;
	            return;
	        }
	        rowNode.childrenMapped = this.bucketChildren(rowNode.childrenAfterFilter, pivotColumns, 0, uniqueValues);
	    };
	    PivotStage.prototype.bucketChildren = function (children, pivotColumns, pivotIndex, uniqueValues) {
	        var _this = this;
	        var mappedChildren = {};
	        var pivotColumn = pivotColumns[pivotIndex];
	        // map the children out based on the pivot column
	        children.forEach(function (child) {
	            var key = _this.valueService.getValue(pivotColumn, child);
	            if (main_1.Utils.missing(key)) {
	                key = '';
	            }
	            if (!uniqueValues[key]) {
	                uniqueValues[key] = {};
	            }
	            if (!mappedChildren[key]) {
	                mappedChildren[key] = [];
	            }
	            mappedChildren[key].push(child);
	        });
	        // if it's the last pivot column, return as is, otherwise go one level further in the map
	        if (pivotIndex === pivotColumns.length - 1) {
	            return mappedChildren;
	        }
	        else {
	            var result_1 = {};
	            main_1.Utils.iterateObject(mappedChildren, function (key, value) {
	                result_1[key] = _this.bucketChildren(value, pivotColumns, pivotIndex + 1, uniqueValues[key]);
	            });
	            return result_1;
	        }
	    };
	    PivotStage.prototype.getPivotColumnDefs = function () {
	        return this.pivotColumnDefs;
	    };
	    __decorate([
	        main_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], PivotStage.prototype, "rowModel", void 0);
	    __decorate([
	        main_1.Autowired('valueService'),
	        __metadata("design:type", main_1.ValueService)
	    ], PivotStage.prototype, "valueService", void 0);
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], PivotStage.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], PivotStage.prototype, "eventService", void 0);
	    __decorate([
	        main_1.Autowired('pivotColDefService'),
	        __metadata("design:type", pivotColDefService_1.PivotColDefService)
	    ], PivotStage.prototype, "pivotColDefService", void 0);
	    PivotStage = __decorate([
	        main_1.Bean('pivotStage')
	    ], PivotStage);
	    return PivotStage;
	}());
	exports.PivotStage = PivotStage;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var PivotColDefService = (function () {
	    function PivotColDefService() {
	    }
	    PivotColDefService.prototype.createPivotColumnDefs = function (uniqueValues) {
	        // this is passed to the columnController, to configure the columns and groups we show
	        var pivotColumnGroupDefs = [];
	        // this is used by the aggregation stage, to do the aggregation based on the pivot columns
	        var pivotColumnDefs = [];
	        var pivotColumns = this.columnController.getPivotColumns();
	        var levelsDeep = pivotColumns.length;
	        var columnIdSequence = new main_1.NumberSequence();
	        this.recursivelyAddGroup(pivotColumnGroupDefs, pivotColumnDefs, 1, uniqueValues, [], columnIdSequence, levelsDeep, pivotColumns);
	        this.addPivotTotalsToGroups(pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence);
	        // we clone, so the colDefs in pivotColumnsGroupDefs and pivotColumnDefs are not shared. this is so that
	        // any changes the user makes (via processSecondaryColumnDefinitions) don't impact the internal aggregations,
	        // as these use the col defs also
	        var pivotColumnDefsClone = pivotColumnDefs.map(function (colDef) { return main_1.Utils.cloneObject(colDef); });
	        return {
	            pivotColumnGroupDefs: pivotColumnGroupDefs,
	            pivotColumnDefs: pivotColumnDefsClone
	        };
	    };
	    // parentChildren - the list of colDefs we are adding to
	    // @index - how far the column is from the top (also same as pivotKeys.length)
	    // @uniqueValues - the values for which we should create a col for
	    // @pivotKeys - the keys for the pivot, eg if pivoting on {Language,Country} then could be {English,Ireland}
	    PivotColDefService.prototype.recursivelyAddGroup = function (parentChildren, pivotColumnDefs, index, uniqueValues, pivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns) {
	        var _this = this;
	        main_1.Utils.iterateObject(uniqueValues, function (key, value) {
	            var newPivotKeys = pivotKeys.slice(0);
	            newPivotKeys.push(key);
	            var createGroup = index !== levelsDeep;
	            if (createGroup) {
	                var groupDef = {
	                    children: [],
	                    headerName: key,
	                    pivotKeys: newPivotKeys,
	                    columnGroupShow: 'open',
	                    groupId: 'pivot' + columnIdSequence.next()
	                };
	                // add total pivot column to non value group
	                // this.addPivotTotalColumn(newPivotKeys, columnIdSequence, groupDef, pivotColumnDefs);
	                parentChildren.push(groupDef);
	                _this.recursivelyAddGroup(groupDef.children, pivotColumnDefs, index + 1, value, newPivotKeys, columnIdSequence, levelsDeep, primaryPivotColumns);
	            }
	            else {
	                var measureColumns = _this.columnController.getValueColumns();
	                var valueGroup_1 = {
	                    children: [],
	                    headerName: key,
	                    pivotKeys: newPivotKeys,
	                    columnGroupShow: 'open',
	                    groupId: 'pivot' + columnIdSequence.next()
	                };
	                // if no value columns selected, then we insert one blank column, so the user at least sees columns
	                // rendered. otherwise the grid would render with no columns (just empty groups) which would give the
	                // impression that the grid is broken
	                if (measureColumns.length === 0) {
	                    // this is the blank column, for when no value columns enabled.
	                    var colDef_1 = _this.createColDef(null, '-', newPivotKeys, columnIdSequence);
	                    valueGroup_1.children.push(colDef_1);
	                    pivotColumnDefs.push(colDef_1);
	                }
	                else {
	                    // add total pivot column to value group
	                    // this.addPivotTotalColumn(newPivotKeys, columnIdSequence, valueGroup, pivotColumnDefs);
	                    measureColumns.forEach(function (measureColumn) {
	                        var columnName = _this.columnController.getDisplayNameForColumn(measureColumn, 'header');
	                        var colDef = _this.createColDef(measureColumn, columnName, newPivotKeys, columnIdSequence);
	                        colDef.columnGroupShow = 'open';
	                        valueGroup_1.children.push(colDef);
	                        pivotColumnDefs.push(colDef);
	                    });
	                }
	                parentChildren.push(valueGroup_1);
	            }
	        });
	        // sort by either user provided comparator, or our own one
	        var colDef = primaryPivotColumns[index - 1].getColDef();
	        var userComparator = colDef.pivotComparator;
	        var comparator = this.headerNameComparator.bind(this, userComparator);
	        parentChildren.sort(comparator);
	    };
	    PivotColDefService.prototype.addPivotTotalsToGroups = function (pivotColumnGroupDefs, pivotColumnDefs, columnIdSequence) {
	        var _this = this;
	        if (!this.gridOptionsWrapper.isPivotTotals())
	            return;
	        var valueColDefs = this.columnController.getValueColumns();
	        var aggFuncs = valueColDefs.map(function (colDef) { return colDef.getAggFunc(); });
	        // don't add pivot totals if there is less than 1 aggFunc or they are not all the same
	        if (!aggFuncs || aggFuncs.length < 1 || !this.sameAggFuncs(aggFuncs)) {
	            // console.warn('ag-Grid: aborting adding pivot total columns - value columns require same aggFunc');
	            return;
	        }
	        // arbitrarily select a value column to use as a template for pivot columns
	        var valueColumn = this.columnController.getValueColumns()[0];
	        pivotColumnGroupDefs.forEach(function (groupDef) {
	            _this.recursivelyAddPivotTotal(groupDef, pivotColumnDefs, columnIdSequence, valueColumn);
	        });
	    };
	    PivotColDefService.prototype.recursivelyAddPivotTotal = function (groupDef, pivotColumnDefs, columnIdSequence, valueColumn) {
	        var _this = this;
	        var group = groupDef;
	        if (!group.children)
	            return [groupDef.colId];
	        var colIds = [];
	        // need to recurse children first to obtain colIds used in the aggregation stage
	        group.children
	            .forEach(function (grp) {
	            var childColIds = _this.recursivelyAddPivotTotal(grp, pivotColumnDefs, columnIdSequence, valueColumn);
	            colIds = colIds.concat(childColIds);
	        });
	        // only add total colDef if there is more than 1 child node
	        if (group.children.length > 1) {
	            //create total colDef using an arbitrary value column as a template
	            var totalColDef = this.createColDef(valueColumn, 'Total', groupDef.pivotKeys, columnIdSequence);
	            totalColDef.pivotTotalColumnIds = colIds;
	            totalColDef.aggFunc = valueColumn.getAggFunc();
	            // add total colDef to group and pivot colDefs array
	            groupDef.children.unshift(totalColDef); //put totals to the front
	            pivotColumnDefs.push(totalColDef);
	        }
	        return colIds;
	    };
	    PivotColDefService.prototype.createColDef = function (valueColumn, headerName, pivotKeys, columnIdSequence) {
	        var colDef = {};
	        if (valueColumn) {
	            var colDefToCopy = valueColumn.getColDef();
	            main_1.Utils.assign(colDef, colDefToCopy);
	            // even if original column was hidden, we always show the pivot value column, otherwise it would be
	            // very confusing for people thinking the pivot is broken
	            colDef.hide = false;
	        }
	        colDef.headerName = headerName;
	        colDef.colId = 'pivot_' + columnIdSequence.next();
	        // pivot columns repeat over field, so it makes sense to use the unique id instead. For example if you want to
	        // assign values to pinned bottom rows using setPinnedBottomRowData the value service will use this colId.
	        colDef.field = colDef.colId;
	        colDef.pivotKeys = pivotKeys;
	        colDef.pivotValueColumn = valueColumn;
	        return colDef;
	    };
	    PivotColDefService.prototype.sameAggFuncs = function (aggFuncs) {
	        if (aggFuncs.length == 1)
	            return true;
	        //check if all aggFunc's match
	        for (var i = 1; i < aggFuncs.length; i++) {
	            if (aggFuncs[i] !== aggFuncs[0])
	                return false;
	        }
	        return true;
	    };
	    PivotColDefService.prototype.headerNameComparator = function (userComparator, a, b) {
	        if (userComparator) {
	            return userComparator(a.headerName, b.headerName);
	        }
	        else {
	            if (a.headerName < b.headerName) {
	                return -1;
	            }
	            else if (a.headerName > b.headerName) {
	                return 1;
	            }
	            else {
	                return 0;
	            }
	        }
	    };
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], PivotColDefService.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], PivotColDefService.prototype, "gridOptionsWrapper", void 0);
	    PivotColDefService = __decorate([
	        main_1.Bean('pivotColDefService')
	    ], PivotColDefService);
	    return PivotColDefService;
	}());
	exports.PivotColDefService = PivotColDefService;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var setFilter_1 = __webpack_require__(152);
	var richSelectCellEditor_1 = __webpack_require__(156);
	var licenseManager_1 = __webpack_require__(158);
	var EnterpriseBoot = (function () {
	    function EnterpriseBoot() {
	    }
	    EnterpriseBoot_1 = EnterpriseBoot;
	    EnterpriseBoot.prototype.init = function () {
	        this.filterManager.registerFilter('set', setFilter_1.SetFilter);
	        this.cellEditorFactory.addCellEditor(EnterpriseBoot_1.RICH_SELECT, richSelectCellEditor_1.RichSelectCellEditor);
	        this.licenseManager.validateLicense();
	    };
	    EnterpriseBoot.RICH_SELECT = 'richSelect';
	    __decorate([
	        main_1.Autowired('filterManager'),
	        __metadata("design:type", main_1.FilterManager)
	    ], EnterpriseBoot.prototype, "filterManager", void 0);
	    __decorate([
	        main_1.Autowired('cellEditorFactory'),
	        __metadata("design:type", main_1.CellEditorFactory)
	    ], EnterpriseBoot.prototype, "cellEditorFactory", void 0);
	    __decorate([
	        main_1.Autowired('licenseManager'),
	        __metadata("design:type", licenseManager_1.LicenseManager)
	    ], EnterpriseBoot.prototype, "licenseManager", void 0);
	    __decorate([
	        main_1.PreConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], EnterpriseBoot.prototype, "init", null);
	    EnterpriseBoot = EnterpriseBoot_1 = __decorate([
	        main_1.Bean('enterpriseBoot')
	    ], EnterpriseBoot);
	    return EnterpriseBoot;
	    var EnterpriseBoot_1;
	}());
	exports.EnterpriseBoot = EnterpriseBoot;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var setFilterModel_1 = __webpack_require__(153);
	var setFilterListItem_1 = __webpack_require__(154);
	var virtualList_1 = __webpack_require__(155);
	var SetFilter = (function (_super) {
	    __extends(SetFilter, _super);
	    function SetFilter() {
	        var _this = _super.call(this) || this;
	        _this.selected = true;
	        return _this;
	    }
	    SetFilter.prototype.customInit = function () {
	        var _this = this;
	        var changeFilter = function () {
	            _this.onFilterChanged();
	        };
	        var debounceMs = this.filterParams && this.filterParams.debounceMs != null ? this.filterParams.debounceMs : 0;
	        this.debounceFilterChanged = main_1._.debounce(changeFilter, debounceMs);
	        this.eCheckedIcon = main_1._.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, this.filterParams.column);
	        this.eUncheckedIcon = main_1._.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, this.filterParams.column);
	        this.eIndeterminateCheckedIcon = main_1._.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, this.filterParams.column);
	    };
	    SetFilter.prototype.updateCheckboxIcon = function () {
	        if (this.eSelectAll.children) {
	            for (var i = 0; i < this.eSelectAll.children.length; i++) {
	                this.eSelectAll.removeChild(this.eSelectAll.children.item(i));
	            }
	        }
	        if (this.eSelectAll.indeterminate) {
	            this.eSelectAll.appendChild(this.eIndeterminateCheckedIcon);
	        }
	        else if (this.eSelectAll.checked) {
	            this.eSelectAll.appendChild(this.eCheckedIcon);
	        }
	        else {
	            this.eSelectAll.appendChild(this.eUncheckedIcon);
	        }
	    };
	    SetFilter.prototype.initialiseFilterBodyUi = function () {
	        var _this = this;
	        this.virtualList = new virtualList_1.VirtualList();
	        this.context.wireBean(this.virtualList);
	        this.getHtmlElement().querySelector('#richList').appendChild(this.virtualList.getHtmlElement());
	        if (main_1.Utils.exists(this.filterParams.cellHeight)) {
	            this.virtualList.setRowHeight(this.filterParams.cellHeight);
	        }
	        this.virtualList.setComponentCreator(this.createSetListItem.bind(this));
	        this.model = new setFilterModel_1.SetFilterModel(this.filterParams.colDef, this.filterParams.rowModel, this.filterParams.valueGetter, this.filterParams.doesRowPassOtherFilter, this.filterParams.suppressSorting);
	        this.virtualList.setModel(new ModelWrapper(this.model));
	        main_1._.setVisible(this.getHtmlElement().querySelector('#ag-mini-filter'), !this.filterParams.suppressMiniFilter);
	        this.eMiniFilter.value = this.model.getMiniFilter();
	        this.addDestroyableEventListener(this.eMiniFilter, 'input', function () { return _this.onMiniFilterChanged(); });
	        this.updateCheckboxIcon();
	        this.eSelectAllContainer.onclick = this.onSelectAll.bind(this);
	        this.updateSelectAll();
	        this.virtualList.refresh();
	    };
	    SetFilter.prototype.modelFromFloatingFilter = function (from) {
	        return [from];
	    };
	    SetFilter.prototype.refreshFilterBodyUi = function () {
	    };
	    SetFilter.prototype.createSetListItem = function (value) {
	        var _this = this;
	        var listItem = new setFilterListItem_1.SetFilterListItem(value, this.filterParams.column);
	        this.context.wireBean(listItem);
	        listItem.setSelected(this.model.isValueSelected(value));
	        listItem.addEventListener(setFilterListItem_1.SetFilterListItem.EVENT_SELECTED, function () {
	            _this.onItemSelected(value, listItem.isSelected());
	        });
	        return listItem;
	    };
	    // we need to have the gui attached before we can draw the virtual rows, as the
	    // virtual row logic needs info about the gui state
	    SetFilter.prototype.afterGuiAttached = function (params) {
	        this.virtualList.refresh();
	        this.eMiniFilter.focus();
	    };
	    SetFilter.prototype.isFilterActive = function () {
	        return this.model.isFilterActive();
	    };
	    SetFilter.prototype.doesFilterPass = function (params) {
	        // if no filter, always pass
	        if (this.model.isEverythingSelected() && !this.filterParams.selectAllOnMiniFilter) {
	            return true;
	        }
	        // if nothing selected in filter, always fail
	        if (this.model.isNothingSelected() && !this.filterParams.selectAllOnMiniFilter) {
	            return false;
	        }
	        var value = this.filterParams.valueGetter(params.node);
	        if (this.filterParams.colDef.keyCreator) {
	            value = this.filterParams.colDef.keyCreator({ value: value });
	        }
	        value = main_1.Utils.makeNull(value);
	        if (Array.isArray(value)) {
	            for (var i = 0; i < value.length; i++) {
	                if (this.model.isValueSelected(value[i])) {
	                    return true;
	                }
	            }
	            return false;
	        }
	        else {
	            return this.model.isValueSelected(value);
	        }
	    };
	    SetFilter.prototype.onNewRowsLoaded = function () {
	        var keepSelection = this.filterParams && this.filterParams.newRowsAction === 'keep';
	        var isSelectAll = this.eSelectAll && this.eSelectAll.checked && !this.eSelectAll.indeterminate;
	        // default is reset
	        this.model.refreshAfterNewRowsLoaded(keepSelection, isSelectAll);
	        this.updateSelectAll();
	        this.virtualList.refresh();
	    };
	    //noinspection JSUnusedGlobalSymbols
	    /**
	     * Public method provided so the user can change the value of the filter once
	     * the filter has been already started
	     * @param options The options to use.
	     */
	    SetFilter.prototype.setFilterValues = function (options) {
	        var keepSelection = this.filterParams && this.filterParams.newRowsAction === 'keep';
	        var isSelectAll = this.eSelectAll && this.eSelectAll.checked && !this.eSelectAll.indeterminate;
	        this.model.setUsingProvidedSet(true);
	        this.model.refreshValues(options, keepSelection, isSelectAll);
	        this.updateSelectAll();
	        this.virtualList.refresh();
	    };
	    //noinspection JSUnusedGlobalSymbols
	    /**
	     * Public method provided so the user can reset the values of the filter once that it has started
	     * @param options The options to use.
	     */
	    SetFilter.prototype.resetFilterValues = function () {
	        this.model.setUsingProvidedSet(false);
	        this.onNewRowsLoaded();
	    };
	    SetFilter.prototype.onAnyFilterChanged = function () {
	        this.model.refreshAfterAnyFilterChanged();
	        this.virtualList.refresh();
	    };
	    SetFilter.prototype.bodyTemplate = function () {
	        var translate = this.translate.bind(this);
	        return "<div>\n                    <div class=\"ag-filter-header-container\" id=\"ag-mini-filter\">\n                        <input class=\"ag-filter-filter\" type=\"text\" placeholder=\"" + translate('searchOoo') + "\"/>\n                    </div>\n                    <div class=\"ag-filter-header-container\">\n                        <label id=\"selectAllContainer\">\n                            <div id=\"selectAll\" class=\"ag-filter-checkbox\"></div>\n                            <span class=\"ag-filter-value\">(" + translate('selectAll') + ")</span>\n                        </label>\n                    </div>\n                    <div id=\"richList\" class=\"ag-set-filter-list\"></div>                    \n                </div>";
	    };
	    SetFilter.prototype.updateSelectAll = function () {
	        if (this.model.isEverythingSelected()) {
	            this.eSelectAll.indeterminate = false;
	            this.eSelectAll.checked = true;
	        }
	        else if (this.model.isNothingSelected()) {
	            this.eSelectAll.indeterminate = false;
	            this.eSelectAll.checked = false;
	        }
	        else {
	            this.eSelectAll.indeterminate = true;
	        }
	        this.updateCheckboxIcon();
	    };
	    SetFilter.prototype.onMiniFilterChanged = function () {
	        var miniFilterChanged = this.model.setMiniFilter(this.eMiniFilter.value);
	        if (miniFilterChanged) {
	            this.virtualList.refresh();
	        }
	        this.updateSelectAll();
	    };
	    SetFilter.prototype.onSelectAll = function () {
	        this.eSelectAll.checked = !this.eSelectAll.checked;
	        var checked = this.eSelectAll.checked;
	        if (checked) {
	            this.model.selectEverything();
	        }
	        else {
	            this.model.selectNothing();
	        }
	        this.virtualList.refresh();
	        this.debounceFilterChanged();
	        this.updateSelectAll();
	    };
	    SetFilter.prototype.onItemSelected = function (value, selected) {
	        if (selected) {
	            this.model.selectValue(value);
	        }
	        else {
	            this.model.unselectValue(value);
	        }
	        this.updateSelectAll();
	        this.debounceFilterChanged();
	    };
	    SetFilter.prototype.setMiniFilter = function (newMiniFilter) {
	        this.model.setMiniFilter(newMiniFilter);
	        this.eMiniFilter.value = this.model.getMiniFilter();
	    };
	    SetFilter.prototype.getMiniFilter = function () {
	        return this.model.getMiniFilter();
	    };
	    SetFilter.prototype.selectEverything = function () {
	        this.model.selectEverything();
	        this.updateSelectAll();
	        this.virtualList.refresh();
	    };
	    SetFilter.prototype.selectNothing = function () {
	        this.model.selectNothing();
	        this.updateSelectAll();
	        this.virtualList.refresh();
	    };
	    SetFilter.prototype.unselectValue = function (value) {
	        this.model.unselectValue(value);
	        this.updateSelectAll();
	        this.virtualList.refresh();
	    };
	    SetFilter.prototype.selectValue = function (value) {
	        this.model.selectValue(value);
	        this.updateSelectAll();
	        this.virtualList.refresh();
	    };
	    SetFilter.prototype.isValueSelected = function (value) {
	        return this.model.isValueSelected(value);
	    };
	    SetFilter.prototype.isEverythingSelected = function () {
	        return this.model.isEverythingSelected();
	    };
	    SetFilter.prototype.isNothingSelected = function () {
	        return this.model.isNothingSelected();
	    };
	    SetFilter.prototype.getUniqueValueCount = function () {
	        return this.model.getUniqueValueCount();
	    };
	    SetFilter.prototype.getUniqueValue = function (index) {
	        return this.model.getUniqueValue(index);
	    };
	    SetFilter.prototype.serialize = function () {
	        return this.model.getModel();
	    };
	    SetFilter.prototype.parse = function (dataModel) {
	        this.model.setModel(dataModel);
	        this.updateSelectAll();
	        this.virtualList.refresh();
	    };
	    SetFilter.prototype.resetState = function () {
	        this.setMiniFilter(null);
	        this.model.setModel(null, true);
	        this.selectEverything();
	    };
	    __decorate([
	        main_1.QuerySelector('#selectAll'),
	        __metadata("design:type", HTMLInputElement)
	    ], SetFilter.prototype, "eSelectAll", void 0);
	    __decorate([
	        main_1.QuerySelector('#selectAllContainer'),
	        __metadata("design:type", HTMLElement)
	    ], SetFilter.prototype, "eSelectAllContainer", void 0);
	    __decorate([
	        main_1.QuerySelector('.ag-filter-filter'),
	        __metadata("design:type", HTMLInputElement)
	    ], SetFilter.prototype, "eMiniFilter", void 0);
	    return SetFilter;
	}(main_1.BaseFilter));
	exports.SetFilter = SetFilter;
	var ModelWrapper = (function () {
	    function ModelWrapper(model) {
	        this.model = model;
	    }
	    ModelWrapper.prototype.getRowCount = function () {
	        return this.model.getDisplayedValueCount();
	    };
	    ModelWrapper.prototype.getRow = function (index) {
	        return this.model.getDisplayedValue(index);
	    };
	    return ModelWrapper;
	}());


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var main_2 = __webpack_require__(2);
	// we cannot have 'null' as a key in a JavaScript map,
	// it needs to be a string. so we use this string for
	// storing null values.
	var NULL_VALUE = '___NULL___';
	var SetFilterModel = (function () {
	    function SetFilterModel(colDef, rowModel, valueGetter, doesRowPassOtherFilters, suppressSorting) {
	        this.suppressSorting = suppressSorting;
	        this.colDef = colDef;
	        this.rowModel = rowModel;
	        this.valueGetter = valueGetter;
	        this.doesRowPassOtherFilters = doesRowPassOtherFilters;
	        this.filterParams = this.colDef.filterParams ? this.colDef.filterParams : {};
	        if (main_1.Utils.exists(this.filterParams)) {
	            this.usingProvidedSet = main_1.Utils.exists(this.filterParams.values);
	            this.showingAvailableOnly = this.filterParams.suppressRemoveEntries !== true;
	        }
	        else {
	            this.usingProvidedSet = false;
	            this.showingAvailableOnly = true;
	        }
	        this.createAllUniqueValues();
	        this.createAvailableUniqueValues();
	        // by default, no filter, so we display everything
	        this.displayedValues = this.availableUniqueValues;
	        this.miniFilter = null;
	        // we use a map rather than an array for the selected values as the lookup
	        // for a map is much faster than the lookup for an array, especially when
	        // the length of the array is thousands of records long
	        this.selectedValuesMap = {};
	        this.selectEverything();
	        this.formatter = this.filterParams.textFormatter ? this.filterParams.textFormatter : main_2.TextFilter.DEFAULT_FORMATTER;
	    }
	    // if keepSelection not set will always select all filters
	    // if keepSelection set will keep current state of selected filters
	    //    unless selectAll chosen in which case will select all
	    SetFilterModel.prototype.refreshAfterNewRowsLoaded = function (keepSelection, isSelectAll) {
	        this.createAllUniqueValues();
	        this.refreshSelection(keepSelection, isSelectAll);
	    };
	    // if keepSelection not set will always select all filters
	    // if keepSelection set will keep current state of selected filters
	    //    unless selectAll chosen in which case will select all
	    SetFilterModel.prototype.refreshValues = function (valuesToUse, keepSelection, isSelectAll) {
	        this.setValues(valuesToUse);
	        this.refreshSelection(keepSelection, isSelectAll);
	    };
	    SetFilterModel.prototype.refreshSelection = function (keepSelection, isSelectAll) {
	        this.createAvailableUniqueValues();
	        var oldModel = Object.keys(this.selectedValuesMap);
	        this.selectedValuesMap = {};
	        this.processMiniFilter();
	        if (keepSelection) {
	            this.setModel(oldModel, isSelectAll);
	        }
	        else {
	            this.selectEverything();
	        }
	    };
	    SetFilterModel.prototype.refreshAfterAnyFilterChanged = function () {
	        if (this.showingAvailableOnly) {
	            this.createAvailableUniqueValues();
	            this.processMiniFilter();
	        }
	    };
	    SetFilterModel.prototype.createAllUniqueValues = function () {
	        var valuesToUse = this.extractValuesToUse();
	        this.setValues(valuesToUse);
	    };
	    SetFilterModel.prototype.setUsingProvidedSet = function (value) {
	        this.usingProvidedSet = value;
	    };
	    SetFilterModel.prototype.setValues = function (valuesToUse) {
	        this.allUniqueValues = valuesToUse;
	        if (!this.suppressSorting) {
	            this.sortValues(this.allUniqueValues);
	        }
	    };
	    SetFilterModel.prototype.extractValuesToUse = function () {
	        var valuesToUse;
	        if (this.usingProvidedSet) {
	            valuesToUse = main_1.Utils.toStrings(this.filterParams.values);
	        }
	        else {
	            var uniqueValuesAsAnyObjects = this.getUniqueValues(false);
	            valuesToUse = main_1.Utils.toStrings(uniqueValuesAsAnyObjects);
	        }
	        return valuesToUse;
	    };
	    SetFilterModel.prototype.createAvailableUniqueValues = function () {
	        var dontCheckAvailableValues = !this.showingAvailableOnly || this.usingProvidedSet;
	        if (dontCheckAvailableValues) {
	            this.availableUniqueValues = this.allUniqueValues;
	            return;
	        }
	        var uniqueValuesAsAnyObjects = this.getUniqueValues(true);
	        this.availableUniqueValues = main_1.Utils.toStrings(uniqueValuesAsAnyObjects);
	        this.sortValues(this.availableUniqueValues);
	    };
	    SetFilterModel.prototype.sortValues = function (values) {
	        if (this.filterParams && this.filterParams.comparator) {
	            values.sort(this.filterParams.comparator);
	        }
	        else if (this.colDef.comparator) {
	            values.sort(this.colDef.comparator);
	        }
	        else {
	            values.sort(main_1.Utils.defaultComparator);
	        }
	    };
	    SetFilterModel.prototype.getUniqueValues = function (filterOutNotAvailable) {
	        var _this = this;
	        var uniqueCheck = {};
	        var result = [];
	        if (!this.rowModel.forEachLeafNode) {
	            console.error('ag-Grid: Set Filter cannot initialise because you are using a row model that does not contain all rows in the browser. Either use a different filter type, or configure Set Filter such that you provide it with values');
	            return [];
	        }
	        this.rowModel.forEachLeafNode(function (node) {
	            if (!node.group) {
	                var value = _this.valueGetter(node);
	                if (_this.colDef.keyCreator) {
	                    value = _this.colDef.keyCreator({ value: value });
	                }
	                if (value === "" || value === undefined) {
	                    value = null;
	                }
	                if (filterOutNotAvailable) {
	                    if (!_this.doesRowPassOtherFilters(node)) {
	                        return;
	                    }
	                }
	                if (value != null && Array.isArray(value)) {
	                    for (var j = 0; j < value.length; j++) {
	                        addUniqueValueIfMissing(value[j]);
	                    }
	                }
	                else {
	                    addUniqueValueIfMissing(value);
	                }
	            }
	        });
	        function addUniqueValueIfMissing(value) {
	            if (!uniqueCheck.hasOwnProperty(value)) {
	                result.push(value);
	                uniqueCheck[value] = 1;
	            }
	        }
	        return result;
	    };
	    //sets mini filter. returns true if it changed from last value, otherwise false
	    SetFilterModel.prototype.setMiniFilter = function (newMiniFilter) {
	        newMiniFilter = main_1.Utils.makeNull(newMiniFilter);
	        if (this.miniFilter === newMiniFilter) {
	            //do nothing if filter has not changed
	            return false;
	        }
	        this.miniFilter = newMiniFilter;
	        this.processMiniFilter();
	        return true;
	    };
	    SetFilterModel.prototype.getMiniFilter = function () {
	        return this.miniFilter;
	    };
	    SetFilterModel.prototype.processMiniFilter = function () {
	        // if no filter, just use the unique values
	        if (this.miniFilter === null) {
	            this.displayedValues = this.availableUniqueValues;
	            return;
	        }
	        // if filter present, we filter down the list
	        this.displayedValues = [];
	        var miniFilterFormatted = this.formatter(this.miniFilter);
	        for (var i = 0, l = this.availableUniqueValues.length; i < l; i++) {
	            var filteredValue = this.availableUniqueValues[i];
	            if (filteredValue) {
	                var filteredValueFormatted = this.formatter(filteredValue.toString());
	                if (filteredValueFormatted !== null && filteredValueFormatted.indexOf(miniFilterFormatted) >= 0) {
	                    this.displayedValues.push(filteredValue);
	                }
	            }
	        }
	    };
	    SetFilterModel.prototype.getDisplayedValueCount = function () {
	        return this.displayedValues.length;
	    };
	    SetFilterModel.prototype.getDisplayedValue = function (index) {
	        return this.displayedValues[index];
	    };
	    SetFilterModel.prototype.selectEverything = function () {
	        if (!this.filterParams.selectAllOnMiniFilter || !this.miniFilter) {
	            this.selectOn(this.allUniqueValues);
	        }
	        else {
	            this.selectOn(this.displayedValues);
	        }
	    };
	    SetFilterModel.prototype.selectOn = function (toSelectOn) {
	        var count = toSelectOn.length;
	        for (var i = 0; i < count; i++) {
	            var key = toSelectOn[i];
	            var safeKey = this.valueToKey(key);
	            this.selectedValuesMap[safeKey] = null;
	        }
	        this.selectedValuesCount = count;
	    };
	    SetFilterModel.prototype.valueToKey = function (key) {
	        if (key === null) {
	            return NULL_VALUE;
	        }
	        else {
	            return key;
	        }
	    };
	    SetFilterModel.prototype.keyToValue = function (value) {
	        if (value === NULL_VALUE) {
	            return null;
	        }
	        else {
	            return value;
	        }
	    };
	    SetFilterModel.prototype.isFilterActive = function () {
	        return this.allUniqueValues.length !== this.selectedValuesCount;
	    };
	    SetFilterModel.prototype.selectNothing = function () {
	        var _this = this;
	        if (!this.filterParams.selectAllOnMiniFilter || !this.miniFilter) {
	            this.selectedValuesMap = {};
	            this.selectedValuesCount = 0;
	        }
	        else {
	            this.displayedValues.forEach(function (it) { return _this.unselectValue(it); });
	        }
	    };
	    SetFilterModel.prototype.getUniqueValueCount = function () {
	        return this.allUniqueValues.length;
	    };
	    SetFilterModel.prototype.getUniqueValue = function (index) {
	        return this.allUniqueValues[index];
	    };
	    SetFilterModel.prototype.unselectValue = function (value) {
	        var safeKey = this.valueToKey(value);
	        if (this.selectedValuesMap[safeKey] !== undefined) {
	            delete this.selectedValuesMap[safeKey];
	            this.selectedValuesCount--;
	        }
	    };
	    SetFilterModel.prototype.selectValue = function (value) {
	        var safeKey = this.valueToKey(value);
	        if (this.selectedValuesMap[safeKey] === undefined) {
	            this.selectedValuesMap[safeKey] = null;
	            this.selectedValuesCount++;
	        }
	    };
	    SetFilterModel.prototype.isValueSelected = function (value) {
	        var safeKey = this.valueToKey(value);
	        return this.selectedValuesMap[safeKey] !== undefined;
	    };
	    SetFilterModel.prototype.isEverythingSelected = function () {
	        var _this = this;
	        if (!this.filterParams.selectAllOnMiniFilter || !this.miniFilter) {
	            return this.allUniqueValues.length === this.selectedValuesCount;
	        }
	        else {
	            return this.displayedValues.filter(function (it) { return _this.isValueSelected(it); }).length === this.displayedValues.length;
	        }
	    };
	    SetFilterModel.prototype.isNothingSelected = function () {
	        var _this = this;
	        if (!this.filterParams.selectAllOnMiniFilter || !this.miniFilter) {
	            return this.selectedValuesCount === 0;
	        }
	        else {
	            return this.displayedValues.filter(function (it) { return _this.isValueSelected(it); }).length === 0;
	        }
	    };
	    SetFilterModel.prototype.getModel = function () {
	        var _this = this;
	        if (!this.isFilterActive()) {
	            return null;
	        }
	        var selectedValues = [];
	        main_1.Utils.iterateObject(this.selectedValuesMap, function (key) {
	            var value = _this.keyToValue(key);
	            selectedValues.push(value);
	        });
	        return selectedValues;
	    };
	    SetFilterModel.prototype.setModel = function (model, isSelectAll) {
	        if (isSelectAll === void 0) { isSelectAll = false; }
	        if (model && !isSelectAll) {
	            this.selectNothing();
	            for (var i = 0; i < model.length; i++) {
	                var rawValue = model[i];
	                var value = this.keyToValue(rawValue);
	                if (this.allUniqueValues.indexOf(value) >= 0) {
	                    this.selectValue(value);
	                }
	            }
	        }
	        else {
	            this.selectEverything();
	        }
	    };
	    return SetFilterModel;
	}());
	exports.SetFilterModel = SetFilterModel;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var SetFilterListItem = (function (_super) {
	    __extends(SetFilterListItem, _super);
	    function SetFilterListItem(value, column) {
	        var _this = _super.call(this, SetFilterListItem.TEMPLATE) || this;
	        _this.selected = true;
	        _this.value = value;
	        _this.column = column;
	        return _this;
	    }
	    SetFilterListItem.prototype.init = function () {
	        var _this = this;
	        this.eCheckedIcon = main_1._.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, this.column);
	        this.eUncheckedIcon = main_1._.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, this.column);
	        this.eCheckbox = this.queryForHtmlElement(".ag-filter-checkbox");
	        this.eClickableArea = this.getHtmlElement();
	        this.updateCheckboxIcon();
	        this.render();
	        var listener = function () {
	            _this.selected = !_this.selected;
	            _this.updateCheckboxIcon();
	            var event = {
	                type: SetFilterListItem.EVENT_SELECTED
	            };
	            return _this.dispatchEvent(event);
	        };
	        this.addDestroyableEventListener(this.eClickableArea, 'click', listener);
	    };
	    SetFilterListItem.prototype.isSelected = function () {
	        return this.selected;
	    };
	    SetFilterListItem.prototype.setSelected = function (selected) {
	        this.selected = selected;
	        this.updateCheckboxIcon();
	    };
	    SetFilterListItem.prototype.updateCheckboxIcon = function () {
	        if (this.eCheckbox.children) {
	            for (var i = 0; i < this.eCheckbox.children.length; i++) {
	                this.eCheckbox.removeChild(this.eCheckbox.children.item(i));
	            }
	        }
	        if (this.isSelected()) {
	            this.eCheckbox.appendChild(this.eCheckedIcon);
	        }
	        else {
	            this.eCheckbox.appendChild(this.eUncheckedIcon);
	        }
	    };
	    SetFilterListItem.prototype.render = function () {
	        var valueElement = this.queryForHtmlElement(".ag-filter-value");
	        var valueFormatted = this.valueFormatterService.formatValue(this.column, null, null, this.value);
	        var component = this.cellRendererService.useFilterCellRenderer(this.column.getColDef(), valueElement, { value: this.value, valueFormatted: valueFormatted });
	        if (component && component.destroy) {
	            this.addDestroyFunc(component.destroy.bind(component));
	        }
	    };
	    SetFilterListItem.EVENT_SELECTED = 'selected';
	    SetFilterListItem.TEMPLATE = '<label class="ag-set-filter-item">' +
	        '<div class="ag-filter-checkbox"></div>' +
	        '<span class="ag-filter-value"></span>' +
	        '</label>';
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], SetFilterListItem.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.Autowired('cellRendererService'),
	        __metadata("design:type", main_1.CellRendererService)
	    ], SetFilterListItem.prototype, "cellRendererService", void 0);
	    __decorate([
	        main_1.Autowired('valueFormatterService'),
	        __metadata("design:type", main_1.ValueFormatterService)
	    ], SetFilterListItem.prototype, "valueFormatterService", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], SetFilterListItem.prototype, "init", null);
	    return SetFilterListItem;
	}(main_1.Component));
	exports.SetFilterListItem = SetFilterListItem;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var VirtualList = (function (_super) {
	    __extends(VirtualList, _super);
	    function VirtualList() {
	        var _this = _super.call(this, null) || this;
	        _this.rowsInBodyContainer = {};
	        _this.rowHeight = 20;
	        return _this;
	    }
	    VirtualList.prototype.init = function () {
	        this.setTemplate(VirtualList.TEMPLATE);
	        this.eListContainer = this.queryForHtmlElement(".ag-virtual-list-container");
	        this.addScrollListener();
	        // Material data table has strict guidelines about whitespace, and these values are different than the ones
	        // ag-grid uses by default. We override the default ones for the sake of making it better out of the box
	        if (this.environment.getTheme() == "ag-material-next") {
	            this.rowHeight = 32;
	        }
	    };
	    VirtualList.prototype.ensureIndexVisible = function (index) {
	        var lastRow = this.model.getRowCount();
	        if (typeof index !== 'number' || index < 0 || index >= lastRow) {
	            console.warn('invalid row index for ensureIndexVisible: ' + index);
	            return;
	        }
	        // let nodeAtIndex = this.rowModel.getRow(index);
	        var rowTopPixel = index * this.rowHeight;
	        var rowBottomPixel = rowTopPixel + this.rowHeight;
	        var viewportTopPixel = this.getHtmlElement().scrollTop;
	        var viewportHeight = this.getHtmlElement().offsetHeight;
	        var viewportBottomPixel = viewportTopPixel + viewportHeight;
	        var viewportScrolledPastRow = viewportTopPixel > rowTopPixel;
	        var viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel;
	        if (viewportScrolledPastRow) {
	            // if row is before, scroll up with row at top
	            this.getHtmlElement().scrollTop = rowTopPixel;
	        }
	        else if (viewportScrolledBeforeRow) {
	            // if row is below, scroll down with row at bottom
	            var newScrollPosition = rowBottomPixel - viewportHeight;
	            this.getHtmlElement().scrollTop = newScrollPosition;
	        }
	    };
	    VirtualList.prototype.setComponentCreator = function (componentCreator) {
	        this.componentCreator = componentCreator;
	    };
	    VirtualList.prototype.getRowHeight = function () {
	        return this.rowHeight;
	    };
	    VirtualList.prototype.getScrollTop = function () {
	        return this.getHtmlElement().scrollTop;
	    };
	    VirtualList.prototype.setRowHeight = function (rowHeight) {
	        this.rowHeight = rowHeight;
	        this.refresh();
	    };
	    VirtualList.prototype.refresh = function () {
	        if (main_1.Utils.missing(this.model)) {
	            return;
	        }
	        this.eListContainer.style.height = (this.model.getRowCount() * this.rowHeight) + "px";
	        this.clearVirtualRows();
	        this.drawVirtualRows();
	    };
	    VirtualList.prototype.clearVirtualRows = function () {
	        var rowsToRemove = Object.keys(this.rowsInBodyContainer);
	        this.removeVirtualRows(rowsToRemove);
	    };
	    VirtualList.prototype.drawVirtualRows = function () {
	        var topPixel = this.getHtmlElement().scrollTop;
	        var bottomPixel = topPixel + this.getHtmlElement().offsetHeight;
	        var firstRow = Math.floor(topPixel / this.rowHeight);
	        var lastRow = Math.floor(bottomPixel / this.rowHeight);
	        this.ensureRowsRendered(firstRow, lastRow);
	    };
	    VirtualList.prototype.ensureRowsRendered = function (start, finish) {
	        // at the end, this array will contain the items we need to remove
	        var rowsToRemove = Object.keys(this.rowsInBodyContainer);
	        // add in new rows
	        for (var rowIndex = start; rowIndex <= finish; rowIndex++) {
	            // see if item already there, and if yes, take it out of the 'to remove' array
	            if (rowsToRemove.indexOf(rowIndex.toString()) >= 0) {
	                rowsToRemove.splice(rowsToRemove.indexOf(rowIndex.toString()), 1);
	                continue;
	            }
	            // check this row actually exists (in case overflow buffer window exceeds real data)
	            if (this.model.getRowCount() > rowIndex) {
	                var value = this.model.getRow(rowIndex);
	                this.insertRow(value, rowIndex);
	            }
	        }
	        // at this point, everything in our 'rowsToRemove' . . .
	        this.removeVirtualRows(rowsToRemove);
	    };
	    // takes array of row id's
	    VirtualList.prototype.removeVirtualRows = function (rowsToRemove) {
	        var _this = this;
	        rowsToRemove.forEach(function (index) {
	            var component = _this.rowsInBodyContainer[index];
	            _this.eListContainer.removeChild(component.eDiv);
	            if (component.rowComponent.destroy) {
	                component.rowComponent.destroy();
	            }
	            delete _this.rowsInBodyContainer[index];
	        });
	    };
	    VirtualList.prototype.insertRow = function (value, rowIndex) {
	        var eDiv = document.createElement('div');
	        main_1.Utils.addCssClass(eDiv, 'ag-virtual-list-item');
	        eDiv.style.top = (this.rowHeight * rowIndex) + "px";
	        var rowComponent = this.componentCreator(value);
	        eDiv.appendChild(rowComponent.getHtmlElement());
	        this.eListContainer.appendChild(eDiv);
	        this.rowsInBodyContainer[rowIndex] = {
	            rowComponent: rowComponent,
	            eDiv: eDiv
	        };
	    };
	    VirtualList.prototype.addScrollListener = function () {
	        var _this = this;
	        this.addGuiEventListener('scroll', function () {
	            _this.drawVirtualRows();
	        });
	    };
	    VirtualList.prototype.setModel = function (model) {
	        this.model = model;
	    };
	    VirtualList.TEMPLATE = '<div class="ag-virtual-list-viewport">' +
	        '<div class="ag-virtual-list-container">' +
	        '</div>' +
	        '</div>';
	    __decorate([
	        main_1.Autowired('environment'),
	        __metadata("design:type", main_1.Environment)
	    ], VirtualList.prototype, "environment", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], VirtualList.prototype, "init", null);
	    return VirtualList;
	}(main_1.Component));
	exports.VirtualList = VirtualList;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var richSelectRow_1 = __webpack_require__(157);
	var virtualList_1 = __webpack_require__(155);
	var RichSelectCellEditor = (function (_super) {
	    __extends(RichSelectCellEditor, _super);
	    function RichSelectCellEditor() {
	        var _this = _super.call(this, RichSelectCellEditor.TEMPLATE) || this;
	        _this.selectionConfirmed = false;
	        return _this;
	    }
	    RichSelectCellEditor.prototype.init = function (params) {
	        this.params = params;
	        this.selectedValue = params.value;
	        this.originalSelectedValue = params.value;
	        this.cellRenderer = params.cellRenderer;
	        this.focusAfterAttached = params.cellStartedEdit;
	        this.virtualList = new virtualList_1.VirtualList();
	        this.context.wireBean(this.virtualList);
	        this.virtualList.setComponentCreator(this.createRowComponent.bind(this));
	        this.getHtmlElement().querySelector('.ag-rich-select-list').appendChild(this.virtualList.getHtmlElement());
	        if (main_1.Utils.exists(this.params.cellHeight)) {
	            this.virtualList.setRowHeight(this.params.cellHeight);
	        }
	        this.renderSelectedValue();
	        if (main_1.Utils.missing(params.values)) {
	            console.log('ag-Grid: richSelectCellEditor requires values for it to work');
	            return;
	        }
	        var values = params.values;
	        this.virtualList.setModel({
	            getRowCount: function () { return values.length; },
	            getRow: function (index) { return values[index]; }
	        });
	        this.addGuiEventListener('keydown', this.onKeyDown.bind(this));
	        this.addDestroyableEventListener(this.virtualList.getHtmlElement(), 'click', this.onClick.bind(this));
	        this.addDestroyableEventListener(this.virtualList.getHtmlElement(), 'mousemove', this.onMouseMove.bind(this));
	    };
	    RichSelectCellEditor.prototype.onKeyDown = function (event) {
	        var key = event.which || event.keyCode;
	        switch (key) {
	            case main_1.Constants.KEY_ENTER:
	                this.onEnterKeyDown();
	                break;
	            case main_1.Constants.KEY_DOWN:
	            case main_1.Constants.KEY_UP:
	                this.onNavigationKeyPressed(event, key);
	                break;
	        }
	    };
	    RichSelectCellEditor.prototype.onEnterKeyDown = function () {
	        this.selectionConfirmed = true;
	        this.params.stopEditing();
	    };
	    RichSelectCellEditor.prototype.onNavigationKeyPressed = function (event, key) {
	        // if we don't stop propagation, then the grids navigation kicks in
	        event.stopPropagation();
	        var oldIndex = this.params.values.indexOf(this.selectedValue);
	        var newIndex = key === main_1.Constants.KEY_UP ? oldIndex - 1 : oldIndex + 1;
	        if (newIndex >= 0 && newIndex < this.params.values.length) {
	            var valueToSelect = this.params.values[newIndex];
	            this.setSelectedValue(valueToSelect);
	        }
	    };
	    RichSelectCellEditor.prototype.renderSelectedValue = function () {
	        var eValue = this.getHtmlElement().querySelector('.ag-rich-select-value');
	        var valueFormatted = this.params.formatValue(this.selectedValue);
	        if (this.cellRenderer) {
	            var result_1 = this.cellRendererService.useCellRenderer(this.params.column.getColDef(), eValue, { value: this.selectedValue, valueFormatted: valueFormatted });
	            if (result_1 && result_1.destroy) {
	                this.addDestroyFunc(function () { return result_1.destroy(); });
	            }
	        }
	        else {
	            if (main_1.Utils.exists(this.selectedValue)) {
	                eValue.innerHTML = valueFormatted;
	            }
	            else {
	                eValue.innerHTML = '';
	            }
	        }
	    };
	    RichSelectCellEditor.prototype.setSelectedValue = function (value) {
	        if (this.selectedValue === value) {
	            return;
	        }
	        var index = this.params.values.indexOf(value);
	        if (index >= 0) {
	            this.selectedValue = value;
	            this.virtualList.ensureIndexVisible(index);
	            this.virtualList.refresh();
	        }
	    };
	    RichSelectCellEditor.prototype.createRowComponent = function (value) {
	        var valueFormatted = this.params.formatValue(value);
	        var row = new richSelectRow_1.RichSelectRow(this.params.column.getColDef());
	        this.context.wireBean(row);
	        row.setState(value, valueFormatted, value === this.selectedValue);
	        return row;
	    };
	    RichSelectCellEditor.prototype.onMouseMove = function (mouseEvent) {
	        var rect = this.virtualList.getHtmlElement().getBoundingClientRect();
	        var scrollTop = this.virtualList.getScrollTop();
	        var mouseY = mouseEvent.clientY - rect.top + scrollTop;
	        var row = Math.floor(mouseY / this.virtualList.getRowHeight());
	        var value = this.params.values[row];
	        // not using utils.exist() as want empty string test to pass
	        if (value !== null && value !== undefined) {
	            this.setSelectedValue(value);
	        }
	    };
	    RichSelectCellEditor.prototype.onClick = function () {
	        this.selectionConfirmed = true;
	        this.params.stopEditing();
	    };
	    // we need to have the gui attached before we can draw the virtual rows, as the
	    // virtual row logic needs info about the gui state
	    RichSelectCellEditor.prototype.afterGuiAttached = function () {
	        var selectedIndex = this.params.values.indexOf(this.selectedValue);
	        // we have to call this here to get the list to have the right height, ie
	        // otherwise it would not have scrolls yet and ensureIndeVisible would do nothing
	        this.virtualList.refresh();
	        if (selectedIndex >= 0) {
	            this.virtualList.ensureIndexVisible(selectedIndex);
	        }
	        // we call refresh again, as the list could of moved, and we need to render the new rows
	        this.virtualList.refresh();
	        if (this.focusAfterAttached) {
	            this.getHtmlElement().focus();
	        }
	    };
	    RichSelectCellEditor.prototype.getValue = function () {
	        if (this.selectionConfirmed) {
	            return this.selectedValue;
	        }
	        else {
	            return this.originalSelectedValue;
	        }
	    };
	    RichSelectCellEditor.prototype.isPopup = function () {
	        return true;
	    };
	    RichSelectCellEditor.TEMPLATE = 
	    // tab index is needed so we can focus, which is needed for keyboard events
	    '<div class="ag-rich-select" tabindex="0">' +
	        '<div class="ag-rich-select-value"></div>' +
	        '<div class="ag-rich-select-list"></div>' +
	        '</div>';
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], RichSelectCellEditor.prototype, "context", void 0);
	    __decorate([
	        main_1.Autowired('cellRendererService'),
	        __metadata("design:type", main_1.CellRendererService)
	    ], RichSelectCellEditor.prototype, "cellRendererService", void 0);
	    return RichSelectCellEditor;
	}(main_1.Component));
	exports.RichSelectCellEditor = RichSelectCellEditor;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var RichSelectRow = (function (_super) {
	    __extends(RichSelectRow, _super);
	    function RichSelectRow(columnDef) {
	        var _this = _super.call(this, '<div class="ag-rich-select-row"></div>') || this;
	        _this.columnDef = columnDef;
	        return _this;
	    }
	    RichSelectRow.prototype.setState = function (value, valueFormatted, selected) {
	        if (!this.populateWithRenderer(value, valueFormatted)) {
	            this.populateWithoutRenderer(value, valueFormatted);
	        }
	        main_1.Utils.addOrRemoveCssClass(this.getHtmlElement(), 'ag-rich-select-row-selected', selected);
	    };
	    RichSelectRow.prototype.populateWithoutRenderer = function (value, valueFormatted) {
	        var valueFormattedExits = valueFormatted !== null && valueFormatted !== undefined;
	        var valueToRender = valueFormattedExits ? valueFormatted : value;
	        if (main_1.Utils.exists(valueToRender) && valueToRender !== '') {
	            // not using innerHTML to prevent injection of HTML
	            // https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations
	            this.getHtmlElement().textContent = valueToRender.toString();
	        }
	        else {
	            // putting in blank, so if missing, at least the user can click on it
	            this.getHtmlElement().innerHTML = '&nbsp;';
	        }
	    };
	    RichSelectRow.prototype.populateWithRenderer = function (value, valueFormatted) {
	        var childComponent = this.cellRendererService.useCellRenderer(this.columnDef, this.getHtmlElement(), { value: value, valueFormatted: valueFormatted });
	        if (childComponent && childComponent.destroy) {
	            this.addDestroyFunc(childComponent.destroy.bind(childComponent));
	        }
	        return childComponent;
	    };
	    __decorate([
	        main_1.Autowired('cellRendererService'),
	        __metadata("design:type", main_1.CellRendererService)
	    ], RichSelectRow.prototype, "cellRendererService", void 0);
	    return RichSelectRow;
	}(main_1.Component));
	exports.RichSelectRow = RichSelectRow;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var main_2 = __webpack_require__(2);
	var md5_1 = __webpack_require__(159);
	var LicenseManager = (function () {
	    function LicenseManager() {
	    }
	    LicenseManager_1 = LicenseManager;
	    LicenseManager.prototype.validateLicense = function () {
	        var gridReleaseDate = LicenseManager_1.getGridReleaseDate();
	        var valid = false;
	        var current = false;
	        var expiry = null;
	        if (!main_2.Utils.missingOrEmpty(LicenseManager_1.licenseKey) && LicenseManager_1.licenseKey.length > 32) {
	            var _a = LicenseManager_1.extractLicenseComponents(LicenseManager_1.licenseKey), md5 = _a.md5, license = _a.license;
	            if (md5 === this.md5.md5(license)) {
	                expiry = LicenseManager_1.extractExpiry(license);
	                if (!isNaN(expiry.getTime())) {
	                    valid = true;
	                    current = (gridReleaseDate < expiry);
	                }
	            }
	        }
	        if (!valid) {
	            LicenseManager_1.outputMessage('********************************************* Invalid License **************************************************', '* Your license for ag-Grid Enterprise is not valid - please contact accounts@ag-grid.com to obtain a valid license. *');
	        }
	        else if (!current) {
	            var formattedExpiryDate = LicenseManager_1.formatDate(expiry);
	            var formattedReleaseDate = LicenseManager_1.formatDate(gridReleaseDate);
	            LicenseManager_1.outputMessage('********************* License not compatible with installed version of ag-Grid Enterprise. *********************', "Your license for ag-Grid Enterprise expired on " + formattedExpiryDate + " but the version installed was released on " + formattedReleaseDate + ". Please " +
	                'contact accounts@ag-grid.com to renew your license');
	        }
	    };
	    LicenseManager.extractExpiry = function (license) {
	        var restrictionHashed = license.substring(license.lastIndexOf('_') + 1, license.length);
	        return new Date(parseInt(LicenseManager_1.decode(restrictionHashed)));
	    };
	    LicenseManager.extractLicenseComponents = function (licenseKey) {
	        var hashStart = licenseKey.length - 32;
	        var md5 = licenseKey.substring(hashStart);
	        var license = licenseKey.substring(0, hashStart);
	        return { md5: md5, license: license };
	    };
	    LicenseManager.prototype.getLicenseDetails = function (licenseKey) {
	        var _a = LicenseManager_1.extractLicenseComponents(licenseKey), md5 = _a.md5, license = _a.license;
	        var valid = (md5 === this.md5.md5(license));
	        var expiry;
	        if (valid) {
	            expiry = LicenseManager_1.extractExpiry(license);
	            valid = !isNaN(expiry.getTime());
	        }
	        return {
	            licenseKey: licenseKey,
	            valid: valid,
	            expiry: valid ? LicenseManager_1.formatDate(expiry) : null
	        };
	    };
	    LicenseManager.outputMessage = function (header, message) {
	        console.error('****************************************************************************************************************');
	        console.error('*************************************** ag-Grid Enterprise License *********************************************');
	        console.error(header);
	        console.error(message);
	        console.error('****************************************************************************************************************');
	        console.error('****************************************************************************************************************');
	    };
	    LicenseManager.formatDate = function (date) {
	        var monthNames = [
	            'January', 'February', 'March',
	            'April', 'May', 'June', 'July',
	            'August', 'September', 'October',
	            'November', 'December'
	        ];
	        var day = date.getDate();
	        var monthIndex = date.getMonth();
	        var year = date.getFullYear();
	        return day + ' ' + monthNames[monthIndex] + ' ' + year;
	    };
	    LicenseManager.getGridReleaseDate = function () {
	        return new Date(parseInt(LicenseManager_1.decode(LicenseManager_1.RELEASE_INFORMATION)));
	    };
	    ;
	    LicenseManager.decode = function (input) {
	        var keystr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	        var t = '';
	        var n, r, i;
	        var s, o, u, a;
	        var f = 0;
	        var e = input.replace(/[^A-Za-z0-9+/=]/g, '');
	        while (f < e.length) {
	            s = keystr.indexOf(e.charAt(f++));
	            o = keystr.indexOf(e.charAt(f++));
	            u = keystr.indexOf(e.charAt(f++));
	            a = keystr.indexOf(e.charAt(f++));
	            n = s << 2 | o >> 4;
	            r = (o & 15) << 4 | u >> 2;
	            i = (u & 3) << 6 | a;
	            t = t + String.fromCharCode(n);
	            if (u != 64) {
	                t = t + String.fromCharCode(r);
	            }
	            if (a != 64) {
	                t = t + String.fromCharCode(i);
	            }
	        }
	        t = LicenseManager_1.utf8_decode(t);
	        return t;
	    };
	    LicenseManager.utf8_decode = function (input) {
	        input = input.replace(/rn/g, 'n');
	        var t = '';
	        for (var n = 0; n < input.length; n++) {
	            var r = input.charCodeAt(n);
	            if (r < 128) {
	                t += String.fromCharCode(r);
	            }
	            else if (r > 127 && r < 2048) {
	                t += String.fromCharCode(r >> 6 | 192);
	                t += String.fromCharCode(r & 63 | 128);
	            }
	            else {
	                t += String.fromCharCode(r >> 12 | 224);
	                t += String.fromCharCode(r >> 6 & 63 | 128);
	                t += String.fromCharCode(r & 63 | 128);
	            }
	        }
	        return t;
	    };
	    LicenseManager.setLicenseKey = function (licenseKey) {
	        LicenseManager_1.licenseKey = licenseKey;
	    };
	    LicenseManager.RELEASE_INFORMATION = 'MTUwNTgxNDAzMTE4OQ==';
	    __decorate([
	        main_1.Autowired('md5'),
	        __metadata("design:type", md5_1.MD5)
	    ], LicenseManager.prototype, "md5", void 0);
	    LicenseManager = LicenseManager_1 = __decorate([
	        main_1.Bean('licenseManager')
	    ], LicenseManager);
	    return LicenseManager;
	    var LicenseManager_1;
	}());
	exports.LicenseManager = LicenseManager;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var MD5 = (function () {
	    function MD5() {
	        this.ieCompatibility = false;
	    }
	    MD5.prototype.init = function () {
	        this.ieCompatibility = (this.md5('hello') != '5d41402abc4b2a76b9719d911017c592');
	    };
	    MD5.prototype.md5cycle = function (x, k) {
	        var a = x[0], b = x[1], c = x[2], d = x[3];
	        a = this.ff(a, b, c, d, k[0], 7, -680876936);
	        d = this.ff(d, a, b, c, k[1], 12, -389564586);
	        c = this.ff(c, d, a, b, k[2], 17, 606105819);
	        b = this.ff(b, c, d, a, k[3], 22, -1044525330);
	        a = this.ff(a, b, c, d, k[4], 7, -176418897);
	        d = this.ff(d, a, b, c, k[5], 12, 1200080426);
	        c = this.ff(c, d, a, b, k[6], 17, -1473231341);
	        b = this.ff(b, c, d, a, k[7], 22, -45705983);
	        a = this.ff(a, b, c, d, k[8], 7, 1770035416);
	        d = this.ff(d, a, b, c, k[9], 12, -1958414417);
	        c = this.ff(c, d, a, b, k[10], 17, -42063);
	        b = this.ff(b, c, d, a, k[11], 22, -1990404162);
	        a = this.ff(a, b, c, d, k[12], 7, 1804603682);
	        d = this.ff(d, a, b, c, k[13], 12, -40341101);
	        c = this.ff(c, d, a, b, k[14], 17, -1502002290);
	        b = this.ff(b, c, d, a, k[15], 22, 1236535329);
	        a = this.gg(a, b, c, d, k[1], 5, -165796510);
	        d = this.gg(d, a, b, c, k[6], 9, -1069501632);
	        c = this.gg(c, d, a, b, k[11], 14, 643717713);
	        b = this.gg(b, c, d, a, k[0], 20, -373897302);
	        a = this.gg(a, b, c, d, k[5], 5, -701558691);
	        d = this.gg(d, a, b, c, k[10], 9, 38016083);
	        c = this.gg(c, d, a, b, k[15], 14, -660478335);
	        b = this.gg(b, c, d, a, k[4], 20, -405537848);
	        a = this.gg(a, b, c, d, k[9], 5, 568446438);
	        d = this.gg(d, a, b, c, k[14], 9, -1019803690);
	        c = this.gg(c, d, a, b, k[3], 14, -187363961);
	        b = this.gg(b, c, d, a, k[8], 20, 1163531501);
	        a = this.gg(a, b, c, d, k[13], 5, -1444681467);
	        d = this.gg(d, a, b, c, k[2], 9, -51403784);
	        c = this.gg(c, d, a, b, k[7], 14, 1735328473);
	        b = this.gg(b, c, d, a, k[12], 20, -1926607734);
	        a = this.hh(a, b, c, d, k[5], 4, -378558);
	        d = this.hh(d, a, b, c, k[8], 11, -2022574463);
	        c = this.hh(c, d, a, b, k[11], 16, 1839030562);
	        b = this.hh(b, c, d, a, k[14], 23, -35309556);
	        a = this.hh(a, b, c, d, k[1], 4, -1530992060);
	        d = this.hh(d, a, b, c, k[4], 11, 1272893353);
	        c = this.hh(c, d, a, b, k[7], 16, -155497632);
	        b = this.hh(b, c, d, a, k[10], 23, -1094730640);
	        a = this.hh(a, b, c, d, k[13], 4, 681279174);
	        d = this.hh(d, a, b, c, k[0], 11, -358537222);
	        c = this.hh(c, d, a, b, k[3], 16, -722521979);
	        b = this.hh(b, c, d, a, k[6], 23, 76029189);
	        a = this.hh(a, b, c, d, k[9], 4, -640364487);
	        d = this.hh(d, a, b, c, k[12], 11, -421815835);
	        c = this.hh(c, d, a, b, k[15], 16, 530742520);
	        b = this.hh(b, c, d, a, k[2], 23, -995338651);
	        a = this.ii(a, b, c, d, k[0], 6, -198630844);
	        d = this.ii(d, a, b, c, k[7], 10, 1126891415);
	        c = this.ii(c, d, a, b, k[14], 15, -1416354905);
	        b = this.ii(b, c, d, a, k[5], 21, -57434055);
	        a = this.ii(a, b, c, d, k[12], 6, 1700485571);
	        d = this.ii(d, a, b, c, k[3], 10, -1894986606);
	        c = this.ii(c, d, a, b, k[10], 15, -1051523);
	        b = this.ii(b, c, d, a, k[1], 21, -2054922799);
	        a = this.ii(a, b, c, d, k[8], 6, 1873313359);
	        d = this.ii(d, a, b, c, k[15], 10, -30611744);
	        c = this.ii(c, d, a, b, k[6], 15, -1560198380);
	        b = this.ii(b, c, d, a, k[13], 21, 1309151649);
	        a = this.ii(a, b, c, d, k[4], 6, -145523070);
	        d = this.ii(d, a, b, c, k[11], 10, -1120210379);
	        c = this.ii(c, d, a, b, k[2], 15, 718787259);
	        b = this.ii(b, c, d, a, k[9], 21, -343485551);
	        x[0] = this.add32(a, x[0]);
	        x[1] = this.add32(b, x[1]);
	        x[2] = this.add32(c, x[2]);
	        x[3] = this.add32(d, x[3]);
	    };
	    MD5.prototype.cmn = function (q, a, b, x, s, t) {
	        a = this.add32(this.add32(a, q), this.add32(x, t));
	        return this.add32((a << s) | (a >>> (32 - s)), b);
	    };
	    MD5.prototype.ff = function (a, b, c, d, x, s, t) {
	        return this.cmn((b & c) | ((~b) & d), a, b, x, s, t);
	    };
	    MD5.prototype.gg = function (a, b, c, d, x, s, t) {
	        return this.cmn((b & d) | (c & (~d)), a, b, x, s, t);
	    };
	    MD5.prototype.hh = function (a, b, c, d, x, s, t) {
	        return this.cmn(b ^ c ^ d, a, b, x, s, t);
	    };
	    MD5.prototype.ii = function (a, b, c, d, x, s, t) {
	        return this.cmn(c ^ (b | (~d)), a, b, x, s, t);
	    };
	    MD5.prototype.md51 = function (s) {
	        var n = s.length, state = [1732584193, -271733879, -1732584194, 271733878], i;
	        for (i = 64; i <= s.length; i += 64) {
	            this.md5cycle(state, this.md5blk(s.substring(i - 64, i)));
	        }
	        s = s.substring(i - 64);
	        var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	        for (i = 0; i < s.length; i++)
	            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);
	        tail[i >> 2] |= 0x80 << ((i % 4) << 3);
	        if (i > 55) {
	            this.md5cycle(state, tail);
	            for (i = 0; i < 16; i++)
	                tail[i] = 0;
	        }
	        tail[14] = n * 8;
	        this.md5cycle(state, tail);
	        return state;
	    };
	    /* there needs to be support for Unicode here, * unless we pretend that we can redefine the MD-5
	     * algorithm for multi-byte characters (perhaps by adding every four 16-bit characters and
	     * shortening the sum to 32 bits). Otherwise I suthis.ggest performing MD-5 as if every character
	     * was two bytes--e.g., 0040 0025 = @%--but then how will an ordinary MD-5 sum be matched?
	     * There is no way to standardize text to something like UTF-8 before transformation; speed cost is
	     * utterly prohibitive. The JavaScript standard itself needs to look at this: it should start
	     * providing access to strings as preformed UTF-8 8-bit unsigned value arrays.
	     */
	    MD5.prototype.md5blk = function (s) {
	        var md5blks = [], i;
	        /* Andy King said do it this way. */
	        for (i = 0; i < 64; i += 4) {
	            md5blks[i >> 2] = s.charCodeAt(i)
	                + (s.charCodeAt(i + 1) << 8)
	                + (s.charCodeAt(i + 2) << 16)
	                + (s.charCodeAt(i + 3) << 24);
	        }
	        return md5blks;
	    };
	    MD5.prototype.rhex = function (n) {
	        var hex_chr = '0123456789abcdef'.split('');
	        var s = '', j = 0;
	        for (; j < 4; j++)
	            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F]
	                + hex_chr[(n >> (j * 8)) & 0x0F];
	        return s;
	    };
	    MD5.prototype.hex = function (x) {
	        for (var i = 0; i < x.length; i++)
	            x[i] = this.rhex(x[i]);
	        return x.join('');
	    };
	    MD5.prototype.md5 = function (s) {
	        return this.hex(this.md51(s));
	    };
	    MD5.prototype.add32 = function (a, b) {
	        return this.ieCompatibility ? this.add32Compat(a, b) : this.add32Std(a, b);
	    };
	    /* this function is much faster, so if possible we use it. Some IEs are the only ones I know of that
	     need the idiotic second function, generated by an if clause.  */
	    MD5.prototype.add32Std = function (a, b) {
	        return (a + b) & 0xFFFFFFFF;
	    };
	    MD5.prototype.add32Compat = function (x, y) {
	        var lsw = (x & 0xFFFF) + (y & 0xFFFF), msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	        return (msw << 16) | (lsw & 0xFFFF);
	    };
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], MD5.prototype, "init", null);
	    MD5 = __decorate([
	        main_1.Bean('md5')
	    ], MD5);
	    return MD5;
	}());
	exports.MD5 = MD5;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var statusItem_1 = __webpack_require__(161);
	var rangeController_1 = __webpack_require__(145);
	var StatusBar = (function (_super) {
	    __extends(StatusBar, _super);
	    function StatusBar() {
	        var _this = _super.call(this, StatusBar_1.TEMPLATE) || this;
	        _this.aggregationsComponent = new main_1.Component('<div class="ag-status-bar-aggregations"></div>');
	        _this.infoLabel = new main_1.Component("<div class=\"ag-status-bar-info-label\"></div>");
	        return _this;
	    }
	    StatusBar_1 = StatusBar;
	    StatusBar.prototype.init = function () {
	        // we want to hide until the first aggregation comes in
	        this.setVisible(false);
	        this.createStatusItems();
	        this.eventService.addEventListener(main_1.Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));
	        this.eventService.addEventListener(main_1.Events.EVENT_MODEL_UPDATED, this.onRangeSelectionChanged.bind(this));
	    };
	    StatusBar.prototype.createStatusItems = function () {
	        var _this = this;
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        this.statusItemSum = new statusItem_1.StatusItem(localeTextFunc('sum', 'Sum'));
	        this.statusItemCount = new statusItem_1.StatusItem(localeTextFunc('count', 'Count'));
	        this.statusItemMin = new statusItem_1.StatusItem(localeTextFunc('min', 'Min'));
	        this.statusItemMax = new statusItem_1.StatusItem(localeTextFunc('max', 'Max'));
	        this.statusItemAvg = new statusItem_1.StatusItem(localeTextFunc('average', 'Average'));
	        this.forEachStatusItem(function (statusItem) {
	            _this.context.wireBean(statusItem);
	            _this.aggregationsComponent.appendChild(statusItem);
	            statusItem.setVisible(false);
	        });
	        this.appendChild(this.infoLabel);
	        this.appendChild(this.aggregationsComponent);
	    };
	    StatusBar.prototype.forEachStatusItem = function (callback) {
	        [this.statusItemAvg, this.statusItemCount, this.statusItemMin, this.statusItemMax, this.statusItemSum].forEach(callback);
	    };
	    StatusBar.prototype.onRangeSelectionChanged = function () {
	        var _this = this;
	        var cellRanges = this.rangeController.getCellRanges();
	        var sum = 0;
	        var count = 0;
	        var numberCount = 0;
	        var min = null;
	        var max = null;
	        var cellsSoFar = {};
	        if (!main_1._.missingOrEmpty(cellRanges)) {
	            cellRanges.forEach(function (cellRange) {
	                // get starting and ending row, remember rowEnd could be before rowStart
	                var startRow = cellRange.start.getGridRow();
	                var endRow = cellRange.end.getGridRow();
	                var startRowIsFirst = startRow.before(endRow);
	                var currentRow = startRowIsFirst ? startRow : endRow;
	                var lastRow = startRowIsFirst ? endRow : startRow;
	                while (true) {
	                    var finishedAllRows = main_1._.missing(currentRow) || lastRow.before(currentRow);
	                    if (finishedAllRows) {
	                        break;
	                    }
	                    cellRange.columns.forEach(function (column) {
	                        // we only want to include each cell once, in case a cell is in multiple ranges
	                        var cellId = currentRow.getGridCell(column).createId();
	                        if (cellsSoFar[cellId]) {
	                            return;
	                        }
	                        cellsSoFar[cellId] = true;
	                        var rowNode = _this.getRowNode(currentRow);
	                        if (main_1._.missing(rowNode)) {
	                            return;
	                        }
	                        var value = _this.valueService.getValue(column, rowNode);
	                        // if empty cell, skip it, doesn't impact count or anything
	                        if (main_1._.missing(value) || value === '') {
	                            return;
	                        }
	                        // see if value is wrapped, can happen when doing count() or avg() functions
	                        if (value.value) {
	                            value = value.value;
	                        }
	                        if (typeof value === 'string') {
	                            value = Number(value);
	                        }
	                        if (typeof value === 'number' && !isNaN(value)) {
	                            sum += value;
	                            if (max === null || value > max) {
	                                max = value;
	                            }
	                            if (min === null || value < min) {
	                                min = value;
	                            }
	                            numberCount++;
	                        }
	                        count++;
	                    });
	                    currentRow = _this.cellNavigationService.getRowBelow(currentRow);
	                }
	            });
	        }
	        var gotResult = this.gridOptionsWrapper.isAlwaysShowStatusBar() || count > 1;
	        var gotNumberResult = numberCount > 1;
	        // we should count even if no numbers
	        if (gotResult) {
	            this.statusItemCount.setValue(count);
	        }
	        this.statusItemCount.setVisible(gotResult);
	        // if numbers, then show the number items
	        if (gotNumberResult) {
	            this.statusItemSum.setValue(sum);
	            this.statusItemMin.setValue(min);
	            this.statusItemMax.setValue(max);
	            this.statusItemAvg.setValue(sum / numberCount);
	        }
	        this.statusItemSum.setVisible(gotNumberResult);
	        this.statusItemMin.setVisible(gotNumberResult);
	        this.statusItemMax.setVisible(gotNumberResult);
	        this.statusItemAvg.setVisible(gotNumberResult);
	        if (this.isVisible() !== gotResult) {
	            this.setVisible(gotResult);
	            this.gridCore.doLayout();
	        }
	    };
	    StatusBar.prototype.getRowNode = function (gridRow) {
	        switch (gridRow.floating) {
	            case main_1.Constants.PINNED_TOP:
	                return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];
	            case main_1.Constants.PINNED_BOTTOM:
	                return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];
	            default:
	                return this.rowModel.getRow(gridRow.rowIndex);
	        }
	    };
	    StatusBar.TEMPLATE = '<div class="ag-status-bar">' +
	        '</div>';
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], StatusBar.prototype, "eventService", void 0);
	    __decorate([
	        main_1.Autowired('rangeController'),
	        __metadata("design:type", rangeController_1.RangeController)
	    ], StatusBar.prototype, "rangeController", void 0);
	    __decorate([
	        main_1.Autowired('valueService'),
	        __metadata("design:type", main_1.ValueService)
	    ], StatusBar.prototype, "valueService", void 0);
	    __decorate([
	        main_1.Autowired('cellNavigationService'),
	        __metadata("design:type", main_1.CellNavigationService)
	    ], StatusBar.prototype, "cellNavigationService", void 0);
	    __decorate([
	        main_1.Autowired('pinnedRowModel'),
	        __metadata("design:type", main_1.PinnedRowModel)
	    ], StatusBar.prototype, "pinnedRowModel", void 0);
	    __decorate([
	        main_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], StatusBar.prototype, "rowModel", void 0);
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], StatusBar.prototype, "context", void 0);
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], StatusBar.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.Autowired('gridCore'),
	        __metadata("design:type", main_1.GridCore)
	    ], StatusBar.prototype, "gridCore", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], StatusBar.prototype, "init", null);
	    StatusBar = StatusBar_1 = __decorate([
	        main_1.Bean('statusBar'),
	        __metadata("design:paramtypes", [])
	    ], StatusBar);
	    return StatusBar;
	    var StatusBar_1;
	}(main_1.Component));
	exports.StatusBar = StatusBar;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var StatusItem = (function (_super) {
	    __extends(StatusItem, _super);
	    function StatusItem(label) {
	        var _this = _super.call(this, StatusItem.TEMPLATE) || this;
	        _this.queryForHtmlElement('#_label').innerHTML = label;
	        return _this;
	    }
	    StatusItem.prototype.init = function () {
	        this.lbValue = this.queryForHtmlElement('#_value');
	    };
	    StatusItem.prototype.setValue = function (value) {
	        this.lbValue.innerHTML = main_1.Utils.formatNumberTwoDecimalPlacesAndCommas(value);
	    };
	    StatusItem.TEMPLATE = '<span class="ag-status-bar-item">' +
	        '  <span id="_label"></span>' +
	        '  <span id="_value"></span>' +
	        '</span>';
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], StatusItem.prototype, "init", null);
	    return StatusItem;
	}(main_1.Component));
	exports.StatusItem = StatusItem;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var ag_grid_1 = __webpack_require__(2);
	var clipboardService_1 = __webpack_require__(144);
	var menuItemComponent_1 = __webpack_require__(142);
	var menuList_1 = __webpack_require__(141);
	var menuItemMapper_1 = __webpack_require__(143);
	var ContextMenuFactory = (function () {
	    function ContextMenuFactory() {
	    }
	    ContextMenuFactory.prototype.init = function () {
	    };
	    ContextMenuFactory.prototype.getMenuItems = function (node, column, value) {
	        var defaultMenuOptions;
	        if (ag_grid_1.Utils.exists(node)) {
	            // if user clicks a cell
	            var anyExport = !this.gridOptionsWrapper.isSuppressExcelExport() || !this.gridOptionsWrapper.isSuppressCsvExport();
	            defaultMenuOptions = ['copy', 'copyWithHeaders', 'paste', 'separator', 'toolPanel'];
	            if (anyExport) {
	                defaultMenuOptions.push('export');
	            }
	        }
	        else {
	            // if user clicks outside of a cell (eg below the rows, or not rows present)
	            defaultMenuOptions = ['toolPanel'];
	        }
	        if (this.gridOptionsWrapper.getContextMenuItemsFunc()) {
	            var userFunc = this.gridOptionsWrapper.getContextMenuItemsFunc();
	            var params = {
	                node: node,
	                column: column,
	                value: value,
	                defaultItems: defaultMenuOptions,
	                api: this.gridOptionsWrapper.getApi(),
	                columnApi: this.gridOptionsWrapper.getColumnApi(),
	                context: this.gridOptionsWrapper.getContext()
	            };
	            var menuItemsFromUser = userFunc(params);
	            return menuItemsFromUser;
	        }
	        else {
	            return defaultMenuOptions;
	        }
	    };
	    ContextMenuFactory.prototype.showMenu = function (node, column, value, mouseEvent) {
	        var menuItems = this.getMenuItems(node, column, value);
	        if (ag_grid_1.Utils.missingOrEmpty(menuItems)) {
	            return;
	        }
	        var menu = new ContextMenu(menuItems);
	        this.context.wireBean(menu);
	        var eMenuGui = menu.getHtmlElement();
	        // need to show filter before positioning, as only after filter
	        // is visible can we find out what the width of it is
	        var hidePopup = this.popupService.addAsModalPopup(eMenuGui, true, function () { return menu.destroy(); });
	        this.popupService.positionPopupUnderMouseEvent({
	            column: column,
	            rowNode: node,
	            type: 'contextMenu',
	            mouseEvent: mouseEvent,
	            ePopup: eMenuGui
	        });
	        menu.afterGuiAttached({
	            eComponent: eMenuGui,
	            hidePopupCallback: hidePopup
	        });
	    };
	    __decorate([
	        ag_grid_1.Autowired('context'),
	        __metadata("design:type", ag_grid_1.Context)
	    ], ContextMenuFactory.prototype, "context", void 0);
	    __decorate([
	        ag_grid_1.Autowired('popupService'),
	        __metadata("design:type", ag_grid_1.PopupService)
	    ], ContextMenuFactory.prototype, "popupService", void 0);
	    __decorate([
	        ag_grid_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", ag_grid_1.GridOptionsWrapper)
	    ], ContextMenuFactory.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        ag_grid_1.Autowired('rowModel'),
	        __metadata("design:type", Object)
	    ], ContextMenuFactory.prototype, "rowModel", void 0);
	    __decorate([
	        ag_grid_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ContextMenuFactory.prototype, "init", null);
	    ContextMenuFactory = __decorate([
	        ag_grid_1.Bean('contextMenuFactory')
	    ], ContextMenuFactory);
	    return ContextMenuFactory;
	}());
	exports.ContextMenuFactory = ContextMenuFactory;
	var ContextMenu = (function (_super) {
	    __extends(ContextMenu, _super);
	    function ContextMenu(menuItems) {
	        var _this = _super.call(this, '<div class="ag-menu"></div>') || this;
	        _this.menuItems = menuItems;
	        return _this;
	    }
	    ContextMenu.prototype.addMenuItems = function () {
	        var menuList = new menuList_1.MenuList();
	        this.context.wireBean(menuList);
	        var menuItemsMapped = this.menuItemMapper.mapWithStockItems(this.menuItems, null);
	        menuList.addMenuItems(menuItemsMapped);
	        this.appendChild(menuList);
	        menuList.addEventListener(menuItemComponent_1.MenuItemComponent.EVENT_ITEM_SELECTED, this.destroy.bind(this));
	    };
	    ContextMenu.prototype.afterGuiAttached = function (params) {
	        this.addDestroyFunc(params.hidePopupCallback);
	        // if the body scrolls, we want to hide the menu, as the menu will not appear in the right location anymore
	        this.addDestroyableEventListener(this.eventService, 'bodyScroll', this.destroy.bind(this));
	    };
	    __decorate([
	        ag_grid_1.Autowired('context'),
	        __metadata("design:type", ag_grid_1.Context)
	    ], ContextMenu.prototype, "context", void 0);
	    __decorate([
	        ag_grid_1.Autowired('clipboardService'),
	        __metadata("design:type", clipboardService_1.ClipboardService)
	    ], ContextMenu.prototype, "clipboardService", void 0);
	    __decorate([
	        ag_grid_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", ag_grid_1.GridOptionsWrapper)
	    ], ContextMenu.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        ag_grid_1.Autowired('gridApi'),
	        __metadata("design:type", ag_grid_1.GridApi)
	    ], ContextMenu.prototype, "gridApi", void 0);
	    __decorate([
	        ag_grid_1.Autowired('eventService'),
	        __metadata("design:type", ag_grid_1.EventService)
	    ], ContextMenu.prototype, "eventService", void 0);
	    __decorate([
	        ag_grid_1.Autowired('menuItemMapper'),
	        __metadata("design:type", menuItemMapper_1.MenuItemMapper)
	    ], ContextMenu.prototype, "menuItemMapper", void 0);
	    __decorate([
	        ag_grid_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ContextMenu.prototype, "addMenuItems", null);
	    return ContextMenu;
	}(ag_grid_1.Component));


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var ViewportRowModel = (function () {
	    function ViewportRowModel() {
	        // rowRenderer tells us these
	        this.firstRow = -1;
	        this.lastRow = -1;
	        // datasource tells us this
	        this.rowCount = -1;
	        this.rowNodesByIndex = {};
	    }
	    ViewportRowModel.prototype.init = function () {
	        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
	        this.eventService.addEventListener(main_1.Events.EVENT_VIEWPORT_CHANGED, this.onViewportChanged.bind(this));
	        var viewportEnabled = this.gridOptionsWrapper.isRowModelViewport();
	        if (viewportEnabled && this.gridOptionsWrapper.getViewportDatasource()) {
	            this.setViewportDatasource(this.gridOptionsWrapper.getViewportDatasource());
	        }
	    };
	    ViewportRowModel.prototype.destroy = function () {
	        this.destroyCurrentDatasource();
	    };
	    ViewportRowModel.prototype.isLastRowFound = function () {
	        return true;
	    };
	    ViewportRowModel.prototype.destroyCurrentDatasource = function () {
	        if (this.viewportDatasource && this.viewportDatasource.destroy) {
	            this.viewportDatasource.destroy();
	        }
	    };
	    ViewportRowModel.prototype.calculateFirstRow = function (firstRenderedRow) {
	        var bufferSize = this.gridOptionsWrapper.getViewportRowModelBufferSize();
	        var pageSize = this.gridOptionsWrapper.getViewportRowModelPageSize();
	        var afterBuffer = firstRenderedRow - bufferSize;
	        if (afterBuffer < 0) {
	            return 0;
	        }
	        else {
	            return Math.floor(afterBuffer / pageSize) * pageSize;
	        }
	    };
	    ViewportRowModel.prototype.calculateLastRow = function (lastRenderedRow) {
	        var bufferSize = this.gridOptionsWrapper.getViewportRowModelBufferSize();
	        var pageSize = this.gridOptionsWrapper.getViewportRowModelPageSize();
	        var afterBuffer = lastRenderedRow + bufferSize;
	        var result = Math.ceil(afterBuffer / pageSize) * pageSize;
	        if (result <= this.rowCount) {
	            return result;
	        }
	        else {
	            return this.rowCount;
	        }
	    };
	    ViewportRowModel.prototype.onViewportChanged = function (event) {
	        var newFirst = this.calculateFirstRow(event.firstRow);
	        var newLast = this.calculateLastRow(event.lastRow);
	        if (this.firstRow !== newFirst || this.lastRow !== newLast) {
	            this.firstRow = newFirst;
	            this.lastRow = newLast;
	            this.purgeRowsNotInViewport();
	            if (this.viewportDatasource) {
	                this.viewportDatasource.setViewportRange(this.firstRow, this.lastRow);
	            }
	        }
	    };
	    ViewportRowModel.prototype.purgeRowsNotInViewport = function () {
	        var _this = this;
	        Object.keys(this.rowNodesByIndex).forEach(function (indexStr) {
	            var index = parseInt(indexStr);
	            if (index < _this.firstRow || index > _this.lastRow) {
	                delete _this.rowNodesByIndex[index];
	            }
	        });
	    };
	    ViewportRowModel.prototype.setViewportDatasource = function (viewportDatasource) {
	        this.destroyCurrentDatasource();
	        this.viewportDatasource = viewportDatasource;
	        this.rowCount = 0;
	        if (!viewportDatasource.init) {
	            console.warn('ag-Grid: viewport is missing init method.');
	        }
	        else {
	            viewportDatasource.init({
	                setRowCount: this.setRowCount.bind(this),
	                setRowData: this.setRowData.bind(this),
	                getRow: this.getRow.bind(this)
	            });
	        }
	    };
	    ViewportRowModel.prototype.getType = function () {
	        return main_1.Constants.ROW_MODEL_TYPE_VIEWPORT;
	    };
	    ViewportRowModel.prototype.getRow = function (rowIndex) {
	        if (!this.rowNodesByIndex[rowIndex]) {
	            this.rowNodesByIndex[rowIndex] = this.createBlankRowNode(rowIndex);
	        }
	        return this.rowNodesByIndex[rowIndex];
	    };
	    ViewportRowModel.prototype.getPageFirstRow = function () {
	        return 0;
	    };
	    ViewportRowModel.prototype.getPageLastRow = function () {
	        return this.rowCount - 1;
	    };
	    ViewportRowModel.prototype.getRowCount = function () {
	        return this.rowCount;
	    };
	    ViewportRowModel.prototype.getRowIndexAtPixel = function (pixel) {
	        if (this.rowHeight !== 0) {
	            return Math.floor(pixel / this.rowHeight);
	        }
	        else {
	            return 0;
	        }
	    };
	    ViewportRowModel.prototype.getRowBounds = function (index) {
	        return {
	            rowHeight: this.rowHeight,
	            rowTop: this.rowHeight * index
	        };
	    };
	    ViewportRowModel.prototype.getCurrentPageHeight = function () {
	        return this.rowCount * this.rowHeight;
	    };
	    ViewportRowModel.prototype.isEmpty = function () {
	        return this.rowCount > 0;
	    };
	    ViewportRowModel.prototype.isRowsToRender = function () {
	        return this.rowCount > 0;
	    };
	    ViewportRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
	        var firstIndex = main_1.Utils.missing(firstInRange) ? 0 : firstInRange.rowIndex;
	        var lastIndex = lastInRange.rowIndex;
	        var firstNodeOutOfRange = firstIndex < this.firstRow || firstIndex > this.lastRow;
	        var lastNodeOutOfRange = lastIndex < this.firstRow || lastIndex > this.lastRow;
	        if (firstNodeOutOfRange || lastNodeOutOfRange) {
	            return [];
	        }
	        var result = [];
	        for (var i = firstIndex; i <= lastIndex; i++) {
	            result.push(this.rowNodesByIndex[i]);
	        }
	        return result;
	    };
	    ViewportRowModel.prototype.forEachNode = function (callback) {
	        var _this = this;
	        var callbackCount = 0;
	        Object.keys(this.rowNodesByIndex).forEach(function (indexStr) {
	            var index = parseInt(indexStr);
	            var rowNode = _this.rowNodesByIndex[index];
	            callback(rowNode, callbackCount);
	            callbackCount++;
	        });
	    };
	    ViewportRowModel.prototype.setRowData = function (rowData) {
	        var _this = this;
	        main_1.Utils.iterateObject(rowData, function (indexStr, dataItem) {
	            var index = parseInt(indexStr);
	            // we should never keep rows that we didn't specifically ask for, this
	            // guarantees the contract we have with the server.
	            if (index >= _this.firstRow && index <= _this.lastRow) {
	                var rowNode = _this.rowNodesByIndex[index];
	                // the abnormal case is we requested a row even though the grid didn't need it
	                // as a result of the paging and buffer (ie the row is off screen), in which
	                // case we need to create a new node now
	                if (main_1.Utils.missing(rowNode)) {
	                    rowNode = _this.createBlankRowNode(index);
	                    _this.rowNodesByIndex[index] = rowNode;
	                }
	                // now we deffo have a row node, so set in the details
	                // if the grid already asked for this row (the normal case), then we would
	                // of put a placeholder node in place.
	                rowNode.setDataAndId(dataItem, index.toString());
	            }
	        });
	    };
	    ViewportRowModel.prototype.createBlankRowNode = function (rowIndex) {
	        var rowNode = new main_1.RowNode();
	        this.context.wireBean(rowNode);
	        rowNode.setRowHeight(this.rowHeight);
	        rowNode.setRowTop(this.rowHeight * rowIndex);
	        rowNode.setRowIndex(rowIndex);
	        return rowNode;
	    };
	    ViewportRowModel.prototype.setRowCount = function (rowCount) {
	        if (rowCount !== this.rowCount) {
	            this.rowCount = rowCount;
	            var event_1 = {
	                type: main_1.Events.EVENT_MODEL_UPDATED,
	                api: this.gridApi,
	                columnApi: this.columnApi,
	                newData: false,
	                newPage: false,
	                keepRenderedRows: false,
	                animate: false
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	    };
	    ViewportRowModel.prototype.isRowPresent = function (rowNode) {
	        console.log('not yet supported');
	        return false;
	    };
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], ViewportRowModel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], ViewportRowModel.prototype, "eventService", void 0);
	    __decorate([
	        main_1.Autowired('selectionController'),
	        __metadata("design:type", main_1.SelectionController)
	    ], ViewportRowModel.prototype, "selectionController", void 0);
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], ViewportRowModel.prototype, "context", void 0);
	    __decorate([
	        main_1.Autowired('gridApi'),
	        __metadata("design:type", main_1.GridApi)
	    ], ViewportRowModel.prototype, "gridApi", void 0);
	    __decorate([
	        main_1.Autowired('columnApi'),
	        __metadata("design:type", main_1.ColumnApi)
	    ], ViewportRowModel.prototype, "columnApi", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ViewportRowModel.prototype, "init", null);
	    __decorate([
	        main_1.PreDestroy,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ViewportRowModel.prototype, "destroy", null);
	    ViewportRowModel = __decorate([
	        main_1.Bean('rowModel')
	    ], ViewportRowModel);
	    return ViewportRowModel;
	}());
	exports.ViewportRowModel = ViewportRowModel;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var abstractColumnDropPanel_1 = __webpack_require__(165);
	var PivotColumnsPanel = (function (_super) {
	    __extends(PivotColumnsPanel, _super);
	    function PivotColumnsPanel(horizontal) {
	        return _super.call(this, horizontal, false, 'pivot') || this;
	    }
	    PivotColumnsPanel.prototype.passBeansUp = function () {
	        _super.prototype.setBeans.call(this, {
	            gridOptionsWrapper: this.gridOptionsWrapper,
	            eventService: this.eventService,
	            context: this.context,
	            loggerFactory: this.loggerFactory,
	            dragAndDropService: this.dragAndDropService
	        });
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var emptyMessage = localeTextFunc('pivotColumnsEmptyMessage', 'Drag here to set column labels');
	        var title = localeTextFunc('pivots', 'Column Labels');
	        _super.prototype.init.call(this, {
	            dragAndDropIcon: main_1.DragAndDropService.ICON_GROUP,
	            icon: main_1.Utils.createIconNoSpan('pivotPanel', this.gridOptionsWrapper, null),
	            emptyMessage: emptyMessage,
	            title: title
	        });
	        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.refresh.bind(this));
	        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_CHANGED, this.refresh.bind(this));
	        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.checkVisibility.bind(this));
	        this.refresh();
	    };
	    PivotColumnsPanel.prototype.refresh = function () {
	        this.checkVisibility();
	        this.refreshGui();
	    };
	    PivotColumnsPanel.prototype.checkVisibility = function () {
	        var pivotMode = this.columnController.isPivotMode();
	        if (this.isHorizontal()) {
	            // what we do for horizontal (ie the pivot panel at the top) depends
	            // on the user property as well as pivotMode.
	            switch (this.gridOptionsWrapper.getPivotPanelShow()) {
	                case 'always':
	                    this.setVisible(pivotMode);
	                    break;
	                case 'onlyWhenPivoting':
	                    var pivotActive = this.columnController.isPivotActive();
	                    this.setVisible(pivotMode && pivotActive);
	                    break;
	                default:
	                    // never show it
	                    this.setVisible(false);
	                    break;
	            }
	        }
	        else {
	            // in toolPanel, the pivot panel is always shown when pivot mode is on
	            this.setVisible(pivotMode);
	        }
	    };
	    PivotColumnsPanel.prototype.isColumnDroppable = function (column) {
	        if (this.gridOptionsWrapper.isFunctionsReadOnly()) {
	            return false;
	        }
	        // we never allow grouping of secondary columns
	        if (!column.isPrimary()) {
	            return false;
	        }
	        var allowPivot = column.isAllowPivot();
	        var columnNotAlreadyPivoted = !column.isPivotActive();
	        return allowPivot && columnNotAlreadyPivoted;
	    };
	    PivotColumnsPanel.prototype.updateColumns = function (columns) {
	        if (this.gridOptionsWrapper.isFunctionsPassive()) {
	            var event_1 = {
	                type: main_1.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,
	                columns: columns,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	        else {
	            this.columnController.setPivotColumns(columns);
	        }
	    };
	    PivotColumnsPanel.prototype.getIconName = function () {
	        return this.isPotentialDndColumns() ? main_1.DragAndDropService.ICON_PIVOT : main_1.DragAndDropService.ICON_NOT_ALLOWED;
	    };
	    PivotColumnsPanel.prototype.getExistingColumns = function () {
	        return this.columnController.getPivotColumns();
	    };
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], PivotColumnsPanel.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], PivotColumnsPanel.prototype, "eventService", void 0);
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], PivotColumnsPanel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], PivotColumnsPanel.prototype, "context", void 0);
	    __decorate([
	        main_1.Autowired('loggerFactory'),
	        __metadata("design:type", main_1.LoggerFactory)
	    ], PivotColumnsPanel.prototype, "loggerFactory", void 0);
	    __decorate([
	        main_1.Autowired('dragAndDropService'),
	        __metadata("design:type", main_1.DragAndDropService)
	    ], PivotColumnsPanel.prototype, "dragAndDropService", void 0);
	    __decorate([
	        main_1.Autowired('columnApi'),
	        __metadata("design:type", main_1.ColumnApi)
	    ], PivotColumnsPanel.prototype, "columnApi", void 0);
	    __decorate([
	        main_1.Autowired('gridApi'),
	        __metadata("design:type", main_1.GridApi)
	    ], PivotColumnsPanel.prototype, "gridApi", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], PivotColumnsPanel.prototype, "passBeansUp", null);
	    PivotColumnsPanel = __decorate([
	        main_1.Bean("pivotColumnsPanel"),
	        __metadata("design:paramtypes", [Boolean])
	    ], PivotColumnsPanel);
	    return PivotColumnsPanel;
	}(abstractColumnDropPanel_1.AbstractColumnDropPanel));
	exports.PivotColumnsPanel = PivotColumnsPanel;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var columnComponent_1 = __webpack_require__(166);
	var AbstractColumnDropPanel = (function (_super) {
	    __extends(AbstractColumnDropPanel, _super);
	    function AbstractColumnDropPanel(horizontal, valueColumn, name) {
	        var _this = _super.call(this, "<div class=\"ag-column-drop ag-font-style ag-column-drop-" + (horizontal ? 'horizontal' : 'vertical') + " ag-column-drop-" + name + "\"></div>") || this;
	        _this.state = AbstractColumnDropPanel.STATE_NOT_DRAGGING;
	        _this.guiDestroyFunctions = [];
	        _this.childColumnComponents = [];
	        _this.horizontal = horizontal;
	        _this.valueColumn = valueColumn;
	        return _this;
	    }
	    AbstractColumnDropPanel.prototype.isHorizontal = function () {
	        return this.horizontal;
	    };
	    AbstractColumnDropPanel.prototype.setBeans = function (beans) {
	        this.beans = beans;
	    };
	    AbstractColumnDropPanel.prototype.destroy = function () {
	        this.destroyGui();
	        _super.prototype.destroy.call(this);
	    };
	    AbstractColumnDropPanel.prototype.destroyGui = function () {
	        this.guiDestroyFunctions.forEach(function (func) { return func(); });
	        this.guiDestroyFunctions.length = 0;
	        this.childColumnComponents.length = 0;
	        main_1.Utils.removeAllChildren(this.getHtmlElement());
	    };
	    AbstractColumnDropPanel.prototype.init = function (params) {
	        this.params = params;
	        this.logger = this.beans.loggerFactory.create('AbstractColumnDropPanel');
	        this.beans.eventService.addEventListener(main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.refreshGui.bind(this));
	        this.addDestroyableEventListener(this.beans.gridOptionsWrapper, 'functionsReadOnly', this.refreshGui.bind(this));
	        this.setupDropTarget();
	        // we don't know if this bean will be initialised before columnController.
	        // if columnController first, then below will work
	        // if columnController second, then below will put blank in, and then above event gets first when columnController is set up
	        this.refreshGui();
	    };
	    AbstractColumnDropPanel.prototype.setupDropTarget = function () {
	        this.dropTarget = {
	            getContainer: this.getGui.bind(this),
	            getIconName: this.getIconName.bind(this),
	            onDragging: this.onDragging.bind(this),
	            onDragEnter: this.onDragEnter.bind(this),
	            onDragLeave: this.onDragLeave.bind(this),
	            onDragStop: this.onDragStop.bind(this)
	        };
	        this.beans.dragAndDropService.addDropTarget(this.dropTarget);
	    };
	    AbstractColumnDropPanel.prototype.checkInsertIndex = function (draggingEvent) {
	        var newIndex;
	        if (this.horizontal) {
	            newIndex = this.getNewHorizontalInsertIndex(draggingEvent);
	        }
	        else {
	            newIndex = this.getNewVerticalInsertIndex(draggingEvent);
	        }
	        // <0 happens when drag is no a direction we are interested in, eg drag is up/down but in horizontal panel
	        if (newIndex < 0) {
	            return false;
	        }
	        var changed = newIndex !== this.insertIndex;
	        if (changed) {
	            this.insertIndex = newIndex;
	        }
	        return changed;
	    };
	    AbstractColumnDropPanel.prototype.getNewHorizontalInsertIndex = function (draggingEvent) {
	        if (main_1.Utils.missing(draggingEvent.hDirection)) {
	            return -1;
	        }
	        var newIndex = 0;
	        var mouseEvent = draggingEvent.event;
	        var enableRtl = this.beans.gridOptionsWrapper.isEnableRtl();
	        var goingLeft = draggingEvent.hDirection === main_1.HDirection.Left;
	        var mouseX = mouseEvent.clientX;
	        this.childColumnComponents.forEach(function (childColumn) {
	            var rect = childColumn.getHtmlElement().getBoundingClientRect();
	            var rectX = goingLeft ? rect.right : rect.left;
	            var horizontalFit = enableRtl ? (mouseX <= rectX) : (mouseX >= rectX);
	            if (horizontalFit) {
	                newIndex++;
	            }
	        });
	        return newIndex;
	    };
	    AbstractColumnDropPanel.prototype.getNewVerticalInsertIndex = function (draggingEvent) {
	        if (main_1.Utils.missing(draggingEvent.vDirection)) {
	            return -1;
	        }
	        var newIndex = 0;
	        var mouseEvent = draggingEvent.event;
	        this.childColumnComponents.forEach(function (childColumn) {
	            var rect = childColumn.getHtmlElement().getBoundingClientRect();
	            if (draggingEvent.vDirection === main_1.VDirection.Down) {
	                var verticalFit = mouseEvent.clientY >= rect.top;
	                if (verticalFit) {
	                    newIndex++;
	                }
	            }
	            else {
	                var verticalFit = mouseEvent.clientY >= rect.bottom;
	                if (verticalFit) {
	                    newIndex++;
	                }
	            }
	        });
	        return newIndex;
	    };
	    AbstractColumnDropPanel.prototype.checkDragStartedBySelf = function (draggingEvent) {
	        if (this.state !== AbstractColumnDropPanel.STATE_NOT_DRAGGING) {
	            return;
	        }
	        this.state = AbstractColumnDropPanel.STATE_REARRANGE_COLUMNS;
	        this.potentialDndColumns = draggingEvent.dragSource.dragItemCallback().columns;
	        this.refreshGui();
	        this.checkInsertIndex(draggingEvent);
	        this.refreshGui();
	    };
	    AbstractColumnDropPanel.prototype.onDragging = function (draggingEvent) {
	        this.checkDragStartedBySelf(draggingEvent);
	        var positionChanged = this.checkInsertIndex(draggingEvent);
	        if (positionChanged) {
	            this.refreshGui();
	        }
	    };
	    AbstractColumnDropPanel.prototype.onDragEnter = function (draggingEvent) {
	        // this will contain all columns that are potential drops
	        var dragColumns = draggingEvent.dragSource.dragItemCallback().columns;
	        this.state = AbstractColumnDropPanel.STATE_NEW_COLUMNS_IN;
	        // take out columns that are not groupable
	        var goodDragColumns = main_1.Utils.filter(dragColumns, this.isColumnDroppable.bind(this));
	        var weHaveColumnsToDrag = goodDragColumns.length > 0;
	        if (weHaveColumnsToDrag) {
	            this.potentialDndColumns = goodDragColumns;
	            this.checkInsertIndex(draggingEvent);
	            this.refreshGui();
	        }
	    };
	    AbstractColumnDropPanel.prototype.isPotentialDndColumns = function () {
	        return main_1.Utils.existsAndNotEmpty(this.potentialDndColumns);
	    };
	    AbstractColumnDropPanel.prototype.onDragLeave = function (draggingEvent) {
	        // if the dragging started from us, we remove the group, however if it started
	        // someplace else, then we don't, as it was only 'asking'
	        if (this.state === AbstractColumnDropPanel.STATE_REARRANGE_COLUMNS) {
	            var columns = draggingEvent.dragSource.dragItemCallback().columns;
	            this.removeColumns(columns);
	        }
	        if (this.potentialDndColumns) {
	            this.potentialDndColumns = null;
	            this.refreshGui();
	        }
	        this.state = AbstractColumnDropPanel.STATE_NOT_DRAGGING;
	    };
	    AbstractColumnDropPanel.prototype.onDragStop = function () {
	        if (this.potentialDndColumns) {
	            var success = void 0;
	            if (this.state === AbstractColumnDropPanel.STATE_NEW_COLUMNS_IN) {
	                this.addColumns(this.potentialDndColumns);
	                success = true;
	            }
	            else {
	                success = this.rearrangeColumns(this.potentialDndColumns);
	            }
	            this.potentialDndColumns = null;
	            // if the function is passive, then we don't refresh, as we assume the client application
	            // is going to call setRowGroups / setPivots / setValues at a later point which will then
	            // cause a refresh. this gives a nice gui where the ghost stays until the app has caught
	            // up with the changes.
	            if (this.beans.gridOptionsWrapper.isFunctionsPassive()) {
	                // when functions are passive, we don't refresh,
	                // unless there was no change in the order, then we
	                // do need to refresh to reset the columns
	                if (!success) {
	                    this.refreshGui();
	                }
	            }
	            else {
	                this.refreshGui();
	            }
	        }
	        this.state = AbstractColumnDropPanel.STATE_NOT_DRAGGING;
	    };
	    AbstractColumnDropPanel.prototype.removeColumns = function (columnsToRemove) {
	        var newColumnList = this.getExistingColumns().slice();
	        columnsToRemove.forEach(function (column) { return main_1.Utils.removeFromArray(newColumnList, column); });
	        this.updateColumns(newColumnList);
	    };
	    AbstractColumnDropPanel.prototype.addColumns = function (columnsToAdd) {
	        var newColumnList = this.getExistingColumns().slice();
	        main_1.Utils.insertArrayIntoArray(newColumnList, columnsToAdd, this.insertIndex);
	        this.updateColumns(newColumnList);
	    };
	    AbstractColumnDropPanel.prototype.rearrangeColumns = function (columnsToAdd) {
	        var newColumnList = this.getNonGhostColumns().slice();
	        main_1.Utils.insertArrayIntoArray(newColumnList, columnsToAdd, this.insertIndex);
	        var noChangeDetected = main_1.Utils.shallowCompare(newColumnList, this.getExistingColumns());
	        if (noChangeDetected) {
	            return false;
	        }
	        else {
	            this.updateColumns(newColumnList);
	            return true;
	        }
	    };
	    AbstractColumnDropPanel.prototype.refreshGui = function () {
	        this.destroyGui();
	        this.addIconAndTitleToGui();
	        this.addEmptyMessageToGui();
	        this.addColumnsToGui();
	    };
	    AbstractColumnDropPanel.prototype.getNonGhostColumns = function () {
	        var _this = this;
	        var existingColumns = this.getExistingColumns();
	        var nonGhostColumns;
	        if (main_1.Utils.exists(this.potentialDndColumns)) {
	            nonGhostColumns = main_1.Utils.filter(existingColumns, function (column) { return _this.potentialDndColumns.indexOf(column) < 0; });
	        }
	        else {
	            nonGhostColumns = existingColumns;
	        }
	        return nonGhostColumns;
	    };
	    AbstractColumnDropPanel.prototype.addColumnsToGui = function () {
	        var _this = this;
	        var nonGhostColumns = this.getNonGhostColumns();
	        var itemsToAddToGui = [];
	        var addingGhosts = main_1.Utils.exists(this.potentialDndColumns);
	        nonGhostColumns.forEach(function (column, index) {
	            if (addingGhosts && index >= _this.insertIndex) {
	                return;
	            }
	            var columnComponent = _this.createColumnComponent(column, false);
	            itemsToAddToGui.push(columnComponent);
	        });
	        if (this.potentialDndColumns) {
	            this.potentialDndColumns.forEach(function (column) {
	                var columnComponent = _this.createColumnComponent(column, true);
	                itemsToAddToGui.push(columnComponent);
	            });
	            nonGhostColumns.forEach(function (column, index) {
	                if (index < _this.insertIndex) {
	                    return;
	                }
	                var columnComponent = _this.createColumnComponent(column, false);
	                itemsToAddToGui.push(columnComponent);
	            });
	        }
	        itemsToAddToGui.forEach(function (columnComponent, index) {
	            var needSeparator = index !== 0;
	            if (needSeparator) {
	                _this.addArrowToGui();
	            }
	            _this.getHtmlElement().appendChild(columnComponent.getHtmlElement());
	        });
	    };
	    AbstractColumnDropPanel.prototype.createColumnComponent = function (column, ghost) {
	        var columnComponent = new columnComponent_1.ColumnComponent(column, this.dropTarget, ghost, this.valueColumn);
	        columnComponent.addEventListener(columnComponent_1.ColumnComponent.EVENT_COLUMN_REMOVE, this.removeColumns.bind(this, [column]));
	        this.beans.context.wireBean(columnComponent);
	        this.guiDestroyFunctions.push(function () { return columnComponent.destroy(); });
	        if (!ghost) {
	            this.childColumnComponents.push(columnComponent);
	        }
	        return columnComponent;
	    };
	    AbstractColumnDropPanel.prototype.addIconAndTitleToGui = function () {
	        var iconFaded = this.horizontal && this.isExistingColumnsEmpty();
	        var eGroupIcon = this.params.icon;
	        main_1.Utils.addCssClass(eGroupIcon, 'ag-column-drop-icon');
	        main_1.Utils.addOrRemoveCssClass(eGroupIcon, 'ag-faded', iconFaded);
	        this.getHtmlElement().appendChild(eGroupIcon);
	        if (!this.horizontal) {
	            var eTitle = document.createElement('span');
	            eTitle.innerHTML = this.params.title;
	            main_1.Utils.addCssClass(eTitle, 'ag-column-drop-title');
	            main_1.Utils.addOrRemoveCssClass(eTitle, 'ag-faded', iconFaded);
	            this.getHtmlElement().appendChild(eTitle);
	        }
	    };
	    AbstractColumnDropPanel.prototype.isExistingColumnsEmpty = function () {
	        return this.getExistingColumns().length === 0;
	    };
	    AbstractColumnDropPanel.prototype.addEmptyMessageToGui = function () {
	        var showEmptyMessage = this.isExistingColumnsEmpty() && !this.potentialDndColumns;
	        if (!showEmptyMessage) {
	            return;
	        }
	        var eMessage = document.createElement('span');
	        eMessage.innerHTML = this.params.emptyMessage;
	        main_1.Utils.addCssClass(eMessage, 'ag-column-drop-empty-message');
	        this.getHtmlElement().appendChild(eMessage);
	    };
	    AbstractColumnDropPanel.prototype.addArrowToGui = function () {
	        // only add the arrows if the layout is horizontal
	        if (this.horizontal) {
	            // for RTL it's a left arrow, otherwise it's a right arrow
	            var enableRtl = this.beans.gridOptionsWrapper.isEnableRtl();
	            var charCode = enableRtl ?
	                AbstractColumnDropPanel.CHAR_LEFT_ARROW : AbstractColumnDropPanel.CHAR_RIGHT_ARROW;
	            var spanClass = enableRtl ? 'ag-left-arrow' : 'ag-right-arrow';
	            var eArrow = document.createElement('span');
	            eArrow.className = spanClass;
	            eArrow.innerHTML = charCode;
	            this.getHtmlElement().appendChild(eArrow);
	        }
	    };
	    AbstractColumnDropPanel.STATE_NOT_DRAGGING = 'notDragging';
	    AbstractColumnDropPanel.STATE_NEW_COLUMNS_IN = 'newColumnsIn';
	    AbstractColumnDropPanel.STATE_REARRANGE_COLUMNS = 'rearrangeColumns';
	    AbstractColumnDropPanel.CHAR_LEFT_ARROW = '&#8592;';
	    AbstractColumnDropPanel.CHAR_RIGHT_ARROW = '&#8594;';
	    return AbstractColumnDropPanel;
	}(main_1.Component));
	exports.AbstractColumnDropPanel = AbstractColumnDropPanel;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var virtualList_1 = __webpack_require__(155);
	var aggFuncService_1 = __webpack_require__(146);
	var ColumnComponent = (function (_super) {
	    __extends(ColumnComponent, _super);
	    function ColumnComponent(column, dragSourceDropTarget, ghost, valueColumn) {
	        var _this = _super.call(this) || this;
	        _this.popupShowing = false;
	        _this.valueColumn = valueColumn;
	        _this.column = column;
	        _this.dragSourceDropTarget = dragSourceDropTarget;
	        _this.ghost = ghost;
	        return _this;
	    }
	    ColumnComponent.prototype.init = function () {
	        this.setTemplate(ColumnComponent.TEMPLATE);
	        this.displayName = this.columnController.getDisplayNameForColumn(this.column, 'columnDrop');
	        this.setupComponents();
	        if (!this.ghost && !this.gridOptionsWrapper.isFunctionsReadOnly()) {
	            this.addDragSource();
	        }
	    };
	    ColumnComponent.prototype.addDragSource = function () {
	        var _this = this;
	        var dragSource = {
	            type: main_1.DragSourceType.ToolPanel,
	            eElement: this.eText,
	            dragItemCallback: function () { return _this.createDragItem(); },
	            dragItemName: this.displayName,
	            dragSourceDropTarget: this.dragSourceDropTarget
	        };
	        this.dragAndDropService.addDragSource(dragSource, true);
	        this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource); });
	    };
	    ColumnComponent.prototype.createDragItem = function () {
	        var visibleState = {};
	        visibleState[this.column.getId()] = this.column.isVisible();
	        return {
	            columns: [this.column],
	            visibleState: visibleState
	        };
	    };
	    ColumnComponent.prototype.setupComponents = function () {
	        this.setTextValue();
	        this.setupRemove();
	        if (this.ghost) {
	            main_1.Utils.addCssClass(this.getHtmlElement(), 'ag-column-drop-cell-ghost');
	        }
	        if (this.valueColumn && !this.gridOptionsWrapper.isFunctionsReadOnly()) {
	            this.addGuiEventListener('click', this.onShowAggFuncSelection.bind(this));
	        }
	    };
	    ColumnComponent.prototype.setupRemove = function () {
	        var _this = this;
	        main_1.Utils.setVisible(this.btRemove, !this.gridOptionsWrapper.isFunctionsReadOnly());
	        this.addDestroyableEventListener(this.btRemove, 'click', function (mouseEvent) {
	            var agEvent = { type: ColumnComponent.EVENT_COLUMN_REMOVE };
	            _this.dispatchEvent(agEvent);
	            mouseEvent.stopPropagation();
	        });
	        var touchListener = new main_1.TouchListener(this.btRemove);
	        this.addDestroyableEventListener(touchListener, main_1.TouchListener.EVENT_TAP, function (event) {
	            var agEvent = { type: ColumnComponent.EVENT_COLUMN_REMOVE };
	            _this.dispatchEvent(agEvent);
	        });
	        this.addDestroyFunc(touchListener.destroy.bind(touchListener));
	    };
	    ColumnComponent.prototype.setTextValue = function () {
	        var displayValue;
	        if (this.valueColumn) {
	            var aggFunc = this.column.getAggFunc();
	            // if aggFunc is a string, we can use it, but if it's a function, then we swap with 'func'
	            var aggFuncString = (typeof aggFunc === 'string') ? aggFunc : 'agg';
	            var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	            var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
	            displayValue = aggFuncStringTranslated + "(" + this.displayName + ")";
	        }
	        else {
	            displayValue = this.displayName;
	        }
	        this.eText.innerHTML = displayValue;
	    };
	    ColumnComponent.prototype.onShowAggFuncSelection = function () {
	        var _this = this;
	        if (this.popupShowing) {
	            return;
	        }
	        this.popupShowing = true;
	        var virtualList = new virtualList_1.VirtualList();
	        var rows = this.aggFuncService.getFuncNames(this.column);
	        virtualList.setModel({
	            getRow: function (index) { return rows[index]; },
	            getRowCount: function () { return rows.length; }
	        });
	        this.context.wireBean(virtualList);
	        var ePopup = main_1.Utils.loadTemplate('<div class="ag-select-agg-func-popup"></div>');
	        ePopup.style.top = '0px';
	        ePopup.style.left = '0px';
	        ePopup.appendChild(virtualList.getHtmlElement());
	        ePopup.style.height = '100px';
	        ePopup.style.width = this.getHtmlElement().clientWidth + 'px';
	        var popupHiddenFunc = function () {
	            virtualList.destroy();
	            _this.popupShowing = false;
	        };
	        var hidePopup = this.popupService.addAsModalPopup(ePopup, true, popupHiddenFunc);
	        virtualList.setComponentCreator(this.createAggSelect.bind(this, hidePopup));
	        this.popupService.positionPopupUnderComponent({
	            type: 'aggFuncSelect',
	            eventSource: this.getHtmlElement(),
	            ePopup: ePopup,
	            keepWithinBounds: true,
	            column: this.column
	        });
	        virtualList.refresh();
	    };
	    ColumnComponent.prototype.createAggSelect = function (hidePopup, value) {
	        var _this = this;
	        var itemSelected = function () {
	            hidePopup();
	            if (_this.gridOptionsWrapper.isFunctionsPassive()) {
	                var event_1 = {
	                    type: main_1.Events.EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST,
	                    columns: [_this.column],
	                    aggFunc: value,
	                    api: _this.gridApi,
	                    columnApi: _this.columnApi
	                };
	                _this.eventService.dispatchEvent(event_1);
	            }
	            else {
	                _this.columnController.setColumnAggFunc(_this.column, value);
	            }
	        };
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var aggFuncString = value.toString();
	        var aggFuncStringTranslated = localeTextFunc(aggFuncString, aggFuncString);
	        var comp = new AggItemComp(itemSelected, aggFuncStringTranslated);
	        return comp;
	    };
	    ColumnComponent.EVENT_COLUMN_REMOVE = 'columnRemove';
	    ColumnComponent.TEMPLATE = "<span class=\"ag-column-drop-cell\">\n          <span class=\"ag-column-drop-cell-text\"></span>\n          <span class=\"ag-column-drop-cell-button\">&#10006;</span>\n        </span>";
	    __decorate([
	        main_1.Autowired('dragAndDropService'),
	        __metadata("design:type", main_1.DragAndDropService)
	    ], ColumnComponent.prototype, "dragAndDropService", void 0);
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], ColumnComponent.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('gridPanel'),
	        __metadata("design:type", main_1.GridPanel)
	    ], ColumnComponent.prototype, "gridPanel", void 0);
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], ColumnComponent.prototype, "context", void 0);
	    __decorate([
	        main_1.Autowired('popupService'),
	        __metadata("design:type", main_1.PopupService)
	    ], ColumnComponent.prototype, "popupService", void 0);
	    __decorate([
	        main_1.Autowired('aggFuncService'),
	        __metadata("design:type", aggFuncService_1.AggFuncService)
	    ], ColumnComponent.prototype, "aggFuncService", void 0);
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], ColumnComponent.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], ColumnComponent.prototype, "eventService", void 0);
	    __decorate([
	        main_1.Autowired('columnApi'),
	        __metadata("design:type", main_1.ColumnApi)
	    ], ColumnComponent.prototype, "columnApi", void 0);
	    __decorate([
	        main_1.Autowired('gridApi'),
	        __metadata("design:type", main_1.GridApi)
	    ], ColumnComponent.prototype, "gridApi", void 0);
	    __decorate([
	        main_1.QuerySelector('.ag-column-drop-cell-text'),
	        __metadata("design:type", HTMLElement)
	    ], ColumnComponent.prototype, "eText", void 0);
	    __decorate([
	        main_1.QuerySelector('.ag-column-drop-cell-button'),
	        __metadata("design:type", HTMLElement)
	    ], ColumnComponent.prototype, "btRemove", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ColumnComponent.prototype, "init", null);
	    return ColumnComponent;
	}(main_1.Component));
	exports.ColumnComponent = ColumnComponent;
	var AggItemComp = (function (_super) {
	    __extends(AggItemComp, _super);
	    function AggItemComp(itemSelected, value) {
	        var _this = _super.call(this, '<div class="ag-select-agg-func-item"/>') || this;
	        _this.getHtmlElement().innerText = value;
	        _this.value = value;
	        _this.addGuiEventListener('click', itemSelected);
	        return _this;
	    }
	    return AggItemComp;
	}(main_1.Component));


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var columnSelectPanel_1 = __webpack_require__(138);
	var rowGroupColumnsPanel_1 = __webpack_require__(168);
	var pivotColumnsPanel_1 = __webpack_require__(164);
	var pivotModePanel_1 = __webpack_require__(169);
	var valueColumnsPanel_1 = __webpack_require__(170);
	var ToolPanelComp = (function (_super) {
	    __extends(ToolPanelComp, _super);
	    function ToolPanelComp() {
	        var _this = _super.call(this, ToolPanelComp_1.TEMPLATE) || this;
	        _this.initialised = false;
	        return _this;
	    }
	    ToolPanelComp_1 = ToolPanelComp;
	    // lazy initialise the toolPanel
	    ToolPanelComp.prototype.setVisible = function (visible) {
	        _super.prototype.setVisible.call(this, visible);
	        if (visible && !this.initialised) {
	            this.init();
	        }
	    };
	    ToolPanelComp.prototype.init = function () {
	        if (!this.gridOptionsWrapper.isToolPanelSuppressPivotMode()) {
	            this.addComponent(new pivotModePanel_1.PivotModePanel());
	        }
	        this.addComponent(new columnSelectPanel_1.ColumnSelectPanel(true));
	        if (!this.gridOptionsWrapper.isToolPanelSuppressRowGroups()) {
	            this.addComponent(new rowGroupColumnsPanel_1.RowGroupColumnsPanel(false));
	        }
	        if (!this.gridOptionsWrapper.isToolPanelSuppressValues()) {
	            this.addComponent(new valueColumnsPanel_1.ValuesColumnPanel(false));
	        }
	        if (!this.gridOptionsWrapper.isToolPanelSuppressPivots()) {
	            this.addComponent(new pivotColumnsPanel_1.PivotColumnsPanel(false));
	        }
	        this.initialised = true;
	    };
	    ToolPanelComp.prototype.addComponent = function (component) {
	        this.context.wireBean(component);
	        this.getHtmlElement().appendChild(component.getHtmlElement());
	        this.addDestroyFunc(function () {
	            component.destroy();
	        });
	    };
	    ToolPanelComp.TEMPLATE = '<div class="ag-tool-panel"></div>';
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], ToolPanelComp.prototype, "context", void 0);
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], ToolPanelComp.prototype, "gridOptionsWrapper", void 0);
	    ToolPanelComp = ToolPanelComp_1 = __decorate([
	        main_1.Bean('toolPanel'),
	        __metadata("design:paramtypes", [])
	    ], ToolPanelComp);
	    return ToolPanelComp;
	    var ToolPanelComp_1;
	}(main_1.Component));
	exports.ToolPanelComp = ToolPanelComp;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var abstractColumnDropPanel_1 = __webpack_require__(165);
	var RowGroupColumnsPanel = (function (_super) {
	    __extends(RowGroupColumnsPanel, _super);
	    function RowGroupColumnsPanel(horizontal) {
	        return _super.call(this, horizontal, false, 'row-group') || this;
	    }
	    RowGroupColumnsPanel.prototype.passBeansUp = function () {
	        _super.prototype.setBeans.call(this, {
	            gridOptionsWrapper: this.gridOptionsWrapper,
	            eventService: this.eventService,
	            context: this.context,
	            loggerFactory: this.loggerFactory,
	            dragAndDropService: this.dragAndDropService
	        });
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var emptyMessage = localeTextFunc('rowGroupColumnsEmptyMessage', 'Drag here to set row groups');
	        var title = localeTextFunc('groups', 'Row Groups');
	        _super.prototype.init.call(this, {
	            dragAndDropIcon: main_1.DragAndDropService.ICON_GROUP,
	            icon: main_1.Utils.createIconNoSpan('rowGroupPanel', this.gridOptionsWrapper, null),
	            emptyMessage: emptyMessage,
	            title: title
	        });
	        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.refreshGui.bind(this));
	    };
	    RowGroupColumnsPanel.prototype.isColumnDroppable = function (column) {
	        if (this.gridOptionsWrapper.isFunctionsReadOnly()) {
	            return false;
	        }
	        // we never allow grouping of secondary columns
	        if (!column.isPrimary()) {
	            return false;
	        }
	        var columnGroupable = column.isAllowRowGroup();
	        var columnNotAlreadyGrouped = !column.isRowGroupActive();
	        return columnGroupable && columnNotAlreadyGrouped;
	    };
	    RowGroupColumnsPanel.prototype.updateColumns = function (columns) {
	        if (this.gridOptionsWrapper.isFunctionsPassive()) {
	            var event_1 = {
	                type: main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,
	                columns: columns,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	        else {
	            this.columnController.setRowGroupColumns(columns);
	        }
	    };
	    RowGroupColumnsPanel.prototype.getIconName = function () {
	        return this.isPotentialDndColumns() ? main_1.DragAndDropService.ICON_GROUP : main_1.DragAndDropService.ICON_NOT_ALLOWED;
	    };
	    RowGroupColumnsPanel.prototype.getExistingColumns = function () {
	        return this.columnController.getRowGroupColumns();
	    };
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], RowGroupColumnsPanel.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], RowGroupColumnsPanel.prototype, "eventService", void 0);
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], RowGroupColumnsPanel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], RowGroupColumnsPanel.prototype, "context", void 0);
	    __decorate([
	        main_1.Autowired('loggerFactory'),
	        __metadata("design:type", main_1.LoggerFactory)
	    ], RowGroupColumnsPanel.prototype, "loggerFactory", void 0);
	    __decorate([
	        main_1.Autowired('dragAndDropService'),
	        __metadata("design:type", main_1.DragAndDropService)
	    ], RowGroupColumnsPanel.prototype, "dragAndDropService", void 0);
	    __decorate([
	        main_1.Autowired('columnApi'),
	        __metadata("design:type", main_1.ColumnApi)
	    ], RowGroupColumnsPanel.prototype, "columnApi", void 0);
	    __decorate([
	        main_1.Autowired('gridApi'),
	        __metadata("design:type", main_1.GridApi)
	    ], RowGroupColumnsPanel.prototype, "gridApi", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], RowGroupColumnsPanel.prototype, "passBeansUp", null);
	    return RowGroupColumnsPanel;
	}(abstractColumnDropPanel_1.AbstractColumnDropPanel));
	exports.RowGroupColumnsPanel = RowGroupColumnsPanel;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var PivotModePanel = (function (_super) {
	    __extends(PivotModePanel, _super);
	    function PivotModePanel() {
	        return _super.call(this) || this;
	    }
	    PivotModePanel.prototype.createTemplate = function () {
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        return "<div class=\"ag-pivot-mode\">\n                <ag-checkbox class=\"ag-pivot-mode-select\" label=\"" + localeTextFunc('pivotMode', 'Pivot Mode') + "\"></ag-checkbox>\n            </div>";
	    };
	    PivotModePanel.prototype.init = function () {
	        this.setTemplate(this.createTemplate());
	        this.instantiate(this.context);
	        this.cbPivotMode.setSelected(this.columnController.isPivotMode());
	        this.addDestroyableEventListener(this.cbPivotMode, main_1.AgCheckbox.EVENT_CHANGED, this.onBtPivotMode.bind(this));
	        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onPivotModeChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
	    };
	    PivotModePanel.prototype.onBtPivotMode = function () {
	        var newValue = this.cbPivotMode.isSelected();
	        if (newValue !== this.columnController.isPivotMode()) {
	            this.columnController.setPivotMode(newValue);
	            this.gridOptionsWrapper.getApi().refreshHeader();
	        }
	    };
	    PivotModePanel.prototype.onPivotModeChanged = function () {
	        var pivotModeActive = this.columnController.isPivotMode();
	        this.cbPivotMode.setSelected(pivotModeActive);
	    };
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], PivotModePanel.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], PivotModePanel.prototype, "eventService", void 0);
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], PivotModePanel.prototype, "context", void 0);
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], PivotModePanel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.QuerySelector('.ag-pivot-mode-select'),
	        __metadata("design:type", main_1.AgCheckbox)
	    ], PivotModePanel.prototype, "cbPivotMode", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], PivotModePanel.prototype, "init", null);
	    return PivotModePanel;
	}(main_1.Component));
	exports.PivotModePanel = PivotModePanel;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var abstractColumnDropPanel_1 = __webpack_require__(165);
	var ValuesColumnPanel = (function (_super) {
	    __extends(ValuesColumnPanel, _super);
	    function ValuesColumnPanel(horizontal) {
	        return _super.call(this, horizontal, true, 'values') || this;
	    }
	    ValuesColumnPanel.prototype.passBeansUp = function () {
	        _super.prototype.setBeans.call(this, {
	            gridOptionsWrapper: this.gridOptionsWrapper,
	            eventService: this.eventService,
	            context: this.context,
	            loggerFactory: this.loggerFactory,
	            dragAndDropService: this.dragAndDropService
	        });
	        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	        var emptyMessage = localeTextFunc('valueColumnsEmptyMessage', 'Drag here to aggregate');
	        var title = localeTextFunc('values', 'Values');
	        _super.prototype.init.call(this, {
	            dragAndDropIcon: main_1.DragAndDropService.ICON_AGGREGATE,
	            icon: main_1.Utils.createIconNoSpan('valuePanel', this.gridOptionsWrapper, null),
	            emptyMessage: emptyMessage,
	            title: title
	        });
	        this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.refreshGui.bind(this));
	    };
	    ValuesColumnPanel.prototype.getIconName = function () {
	        return this.isPotentialDndColumns() ? main_1.DragAndDropService.ICON_AGGREGATE : main_1.DragAndDropService.ICON_NOT_ALLOWED;
	    };
	    ValuesColumnPanel.prototype.isColumnDroppable = function (column) {
	        if (this.gridOptionsWrapper.isFunctionsReadOnly()) {
	            return false;
	        }
	        // we never allow grouping of secondary columns
	        if (!column.isPrimary()) {
	            return false;
	        }
	        var columnValue = column.isAllowValue();
	        var columnNotValue = !column.isValueActive();
	        return columnValue && columnNotValue;
	    };
	    ValuesColumnPanel.prototype.updateColumns = function (columns) {
	        if (this.gridOptionsWrapper.isFunctionsPassive()) {
	            var event_1 = {
	                type: main_1.Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,
	                columns: columns,
	                api: this.gridApi,
	                columnApi: this.columnApi
	            };
	            this.eventService.dispatchEvent(event_1);
	        }
	        else {
	            this.columnController.setValueColumns(columns);
	        }
	    };
	    ValuesColumnPanel.prototype.getExistingColumns = function () {
	        return this.columnController.getValueColumns();
	    };
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], ValuesColumnPanel.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('eventService'),
	        __metadata("design:type", main_1.EventService)
	    ], ValuesColumnPanel.prototype, "eventService", void 0);
	    __decorate([
	        main_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", main_1.GridOptionsWrapper)
	    ], ValuesColumnPanel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], ValuesColumnPanel.prototype, "context", void 0);
	    __decorate([
	        main_1.Autowired('loggerFactory'),
	        __metadata("design:type", main_1.LoggerFactory)
	    ], ValuesColumnPanel.prototype, "loggerFactory", void 0);
	    __decorate([
	        main_1.Autowired('dragAndDropService'),
	        __metadata("design:type", main_1.DragAndDropService)
	    ], ValuesColumnPanel.prototype, "dragAndDropService", void 0);
	    __decorate([
	        main_1.Autowired('columnApi'),
	        __metadata("design:type", main_1.ColumnApi)
	    ], ValuesColumnPanel.prototype, "columnApi", void 0);
	    __decorate([
	        main_1.Autowired('gridApi'),
	        __metadata("design:type", main_1.GridApi)
	    ], ValuesColumnPanel.prototype, "gridApi", void 0);
	    __decorate([
	        main_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], ValuesColumnPanel.prototype, "passBeansUp", null);
	    return ValuesColumnPanel;
	}(abstractColumnDropPanel_1.AbstractColumnDropPanel));
	exports.ValuesColumnPanel = ValuesColumnPanel;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var rowGroupColumnsPanel_1 = __webpack_require__(168);
	var RowGroupCompFactory = (function () {
	    function RowGroupCompFactory() {
	    }
	    RowGroupCompFactory.prototype.create = function () {
	        var rowGroupComp = new rowGroupColumnsPanel_1.RowGroupColumnsPanel(true);
	        this.context.wireBean(rowGroupComp);
	        return rowGroupComp;
	    };
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], RowGroupCompFactory.prototype, "context", void 0);
	    RowGroupCompFactory = __decorate([
	        main_1.Bean('rowGroupCompFactory')
	    ], RowGroupCompFactory);
	    return RowGroupCompFactory;
	}());
	exports.RowGroupCompFactory = RowGroupCompFactory;


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var pivotColumnsPanel_1 = __webpack_require__(164);
	var PivotCompFactory = (function () {
	    function PivotCompFactory() {
	    }
	    PivotCompFactory.prototype.create = function () {
	        var pivotComp = new pivotColumnsPanel_1.PivotColumnsPanel(true);
	        this.context.wireBean(pivotComp);
	        return pivotComp;
	    };
	    __decorate([
	        main_1.Autowired('context'),
	        __metadata("design:type", main_1.Context)
	    ], PivotCompFactory.prototype, "context", void 0);
	    PivotCompFactory = __decorate([
	        main_1.Bean('pivotCompFactory')
	    ], PivotCompFactory);
	    return PivotCompFactory;
	}());
	exports.PivotCompFactory = PivotCompFactory;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var excelXmlFactory_1 = __webpack_require__(174);
	var ExcelGridSerializingSession = (function (_super) {
	    __extends(ExcelGridSerializingSession, _super);
	    function ExcelGridSerializingSession(columnController, valueService, gridOptionsWrapper, processCellCallback, processHeaderCallback, sheetName, excelXmlFactory, baseExcelStyles, styleLinker) {
	        var _this = _super.call(this, columnController, valueService, gridOptionsWrapper, processCellCallback, processHeaderCallback, function (raw) { return main_1.Utils.escape(raw); }) || this;
	        _this.excelXmlFactory = excelXmlFactory;
	        _this.styleLinker = styleLinker;
	        _this.mixedStyles = {};
	        _this.mixedStyleCounter = 0;
	        _this.rows = [];
	        _this.stylesByIds = {};
	        if (!baseExcelStyles) {
	            _this.excelStyles = [];
	        }
	        else {
	            baseExcelStyles.forEach(function (it) {
	                _this.stylesByIds[it.id] = it;
	            });
	            _this.excelStyles = baseExcelStyles.slice();
	        }
	        _this.sheetName = sheetName;
	        return _this;
	    }
	    ExcelGridSerializingSession.prototype.addCustomHeader = function (customHeader) {
	        this.customHeader = customHeader;
	    };
	    ExcelGridSerializingSession.prototype.addCustomFooter = function (customFooter) {
	        this.customFooter = customFooter;
	    };
	    ExcelGridSerializingSession.prototype.prepare = function (columnsToExport) {
	        this.cols = main_1.Utils.map(columnsToExport, function (it) {
	            it.getColDef().cellStyle;
	            return {
	                width: it.getActualWidth()
	            };
	        });
	    };
	    ExcelGridSerializingSession.prototype.onNewHeaderGroupingRow = function () {
	        var currentCells = [];
	        var that = this;
	        this.rows.push({
	            cells: currentCells
	        });
	        return {
	            onColumn: function (header, index, span) {
	                var styleIds = that.styleLinker(main_1.RowType.HEADER_GROUPING, 1, index, "grouping-" + header, null, null);
	                currentCells.push(that.createMergedCell(styleIds.length > 0 ? styleIds[0] : null, "String", header, span));
	            }
	        };
	    };
	    ExcelGridSerializingSession.prototype.onNewHeaderRow = function () {
	        return this.onNewRow(this.onNewHeaderColumn);
	    };
	    ExcelGridSerializingSession.prototype.onNewBodyRow = function () {
	        return this.onNewRow(this.onNewBodyColumn);
	    };
	    ExcelGridSerializingSession.prototype.onNewRow = function (onNewColumnAccumulator) {
	        var currentCells = [];
	        this.rows.push({
	            cells: currentCells
	        });
	        return {
	            onColumn: onNewColumnAccumulator.bind(this, this.rows.length, currentCells)()
	        };
	    };
	    ExcelGridSerializingSession.prototype.onNewHeaderColumn = function (rowIndex, currentCells) {
	        var _this = this;
	        var that = this;
	        return function (column, index, node) {
	            var nameForCol = _this.extractHeaderValue(column);
	            var styleIds = that.styleLinker(main_1.RowType.HEADER, rowIndex, index, nameForCol, column, null);
	            currentCells.push(_this.createCell(styleIds.length > 0 ? styleIds[0] : null, 'String', nameForCol));
	        };
	    };
	    ExcelGridSerializingSession.prototype.parse = function () {
	        function join(header, body, footer) {
	            var all = [];
	            if (header) {
	                header.forEach(function (rowArray) { return all.push({ cells: rowArray }); });
	            }
	            body.forEach(function (it) { return all.push(it); });
	            if (footer) {
	                footer.forEach(function (rowArray) { return all.push({ cells: rowArray }); });
	            }
	            return all;
	        }
	        var data = [{
	                name: this.sheetName,
	                table: {
	                    columns: this.cols,
	                    rows: join(this.customHeader, this.rows, this.customFooter)
	                }
	            }];
	        return this.excelXmlFactory.createExcelXml(this.excelStyles, data);
	    };
	    ExcelGridSerializingSession.prototype.onNewBodyColumn = function (rowIndex, currentCells) {
	        var _this = this;
	        var that = this;
	        return function (column, index, node) {
	            var valueForCell = _this.extractRowCellValue(column, index, main_1.Constants.EXPORT_TYPE_EXCEL, node);
	            var styleIds = that.styleLinker(main_1.RowType.BODY, rowIndex, index, valueForCell, column, node);
	            var excelStyleId = null;
	            if (styleIds && styleIds.length == 1) {
	                excelStyleId = styleIds[0];
	            }
	            else if (styleIds && styleIds.length > 1) {
	                var key = styleIds.join("-");
	                if (!_this.mixedStyles[key]) {
	                    _this.addNewMixedStyle(styleIds);
	                }
	                excelStyleId = _this.mixedStyles[key].excelID;
	            }
	            var type = main_1.Utils.isNumeric(valueForCell) ? 'Number' : 'String';
	            currentCells.push(that.createCell(excelStyleId, type, valueForCell));
	        };
	    };
	    ExcelGridSerializingSession.prototype.addNewMixedStyle = function (styleIds) {
	        var _this = this;
	        this.mixedStyleCounter += 1;
	        var excelId = 'mixedStyle' + this.mixedStyleCounter;
	        var resultantStyle = {};
	        styleIds.forEach(function (styleId) {
	            _this.excelStyles.forEach(function (excelStyle) {
	                if (excelStyle.id === styleId) {
	                    main_1.Utils.mergeDeep(resultantStyle, excelStyle);
	                }
	            });
	        });
	        resultantStyle['id'] = excelId;
	        resultantStyle['name'] = excelId;
	        var key = styleIds.join("-");
	        this.mixedStyles[key] = {
	            excelID: excelId,
	            key: key,
	            result: resultantStyle
	        };
	        this.excelStyles.push(resultantStyle);
	        this.stylesByIds[excelId] = resultantStyle;
	    };
	    ExcelGridSerializingSession.prototype.styleExists = function (styleId) {
	        if (styleId == null)
	            return false;
	        return this.stylesByIds[styleId];
	    };
	    ExcelGridSerializingSession.prototype.createCell = function (styleId, type, value) {
	        var actualStyle = this.stylesByIds[styleId];
	        var styleExists = actualStyle != null;
	        function getType() {
	            if (styleExists &&
	                actualStyle.dataType)
	                switch (actualStyle.dataType) {
	                    case 'string':
	                        return 'String';
	                    case 'number':
	                        return 'Number';
	                }
	            return type;
	        }
	        return {
	            styleId: styleExists ? styleId : null,
	            data: {
	                type: getType(),
	                value: value
	            }
	        };
	    };
	    ExcelGridSerializingSession.prototype.createMergedCell = function (styleId, type, value, numOfCells) {
	        return {
	            styleId: this.styleExists(styleId) ? styleId : null,
	            data: {
	                type: type,
	                value: value
	            },
	            mergeAcross: numOfCells
	        };
	    };
	    return ExcelGridSerializingSession;
	}(main_1.BaseGridSerializingSession));
	exports.ExcelGridSerializingSession = ExcelGridSerializingSession;
	var ExcelCreator = (function (_super) {
	    __extends(ExcelCreator, _super);
	    function ExcelCreator() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    ExcelCreator.prototype.exportDataAsExcel = function (params) {
	        return this.export(params);
	    };
	    ExcelCreator.prototype.getDataAsExcelXml = function (params) {
	        return this.getData(params);
	    };
	    ExcelCreator.prototype.getMimeType = function () {
	        return "application/vnd.ms-excel";
	    };
	    ExcelCreator.prototype.getDefaultFileName = function () {
	        return 'export.xls';
	    };
	    ExcelCreator.prototype.getDefaultFileExtension = function () {
	        return 'xls';
	    };
	    ExcelCreator.prototype.createSerializingSession = function (params) {
	        return new ExcelGridSerializingSession(this.columnController, this.valueService, this.gridOptionsWrapper, params ? params.processCellCallback : null, params ? params.processHeaderCallback : null, params && params.sheetName != null && params.sheetName != "" ? params.sheetName : 'ag-grid', this.excelXmlFactory, this.gridOptions.excelStyles, this.styleLinker.bind(this));
	    };
	    ExcelCreator.prototype.styleLinker = function (rowType, rowIndex, colIndex, value, column, node) {
	        if ((rowType === main_1.RowType.HEADER) || (rowType === main_1.RowType.HEADER_GROUPING))
	            return ["header"];
	        if (!this.gridOptions.excelStyles || this.gridOptions.excelStyles.length === 0)
	            return null;
	        var styleIds = this.gridOptions.excelStyles.map(function (it) {
	            return it.id;
	        });
	        var applicableStyles = [];
	        this.stylingService.processAllCellClasses(column.getColDef(), {
	            value: value,
	            data: node.data,
	            node: node,
	            colDef: column.getColDef(),
	            rowIndex: rowIndex,
	            api: this.gridOptionsWrapper.getApi(),
	            context: this.gridOptionsWrapper.getContext()
	        }, function (className) {
	            if (styleIds.indexOf(className) > -1) {
	                applicableStyles.push(className);
	            }
	        });
	        return applicableStyles.sort(function (left, right) {
	            return (styleIds.indexOf(left) < styleIds.indexOf(right)) ? -1 : 1;
	        });
	    };
	    ExcelCreator.prototype.isExportSuppressed = function () {
	        return this.gridOptionsWrapper.isSuppressExcelExport();
	    };
	    __decorate([
	        main_1.Autowired('excelXmlFactory'),
	        __metadata("design:type", excelXmlFactory_1.ExcelXmlFactory)
	    ], ExcelCreator.prototype, "excelXmlFactory", void 0);
	    __decorate([
	        main_1.Autowired('columnController'),
	        __metadata("design:type", main_1.ColumnController)
	    ], ExcelCreator.prototype, "columnController", void 0);
	    __decorate([
	        main_1.Autowired('valueService'),
	        __metadata("design:type", main_1.ValueService)
	    ], ExcelCreator.prototype, "valueService", void 0);
	    __decorate([
	        main_1.Autowired('gridOptions'),
	        __metadata("design:type", Object)
	    ], ExcelCreator.prototype, "gridOptions", void 0);
	    __decorate([
	        main_1.Autowired('stylingService'),
	        __metadata("design:type", main_1.StylingService)
	    ], ExcelCreator.prototype, "stylingService", void 0);
	    ExcelCreator = __decorate([
	        main_1.Bean('excelCreator')
	    ], ExcelCreator);
	    return ExcelCreator;
	}(main_1.BaseCreator));
	exports.ExcelCreator = ExcelCreator;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var main_1 = __webpack_require__(2);
	var main_2 = __webpack_require__(2);
	var main_3 = __webpack_require__(2);
	var LINE_SEPARATOR = '\r\n';
	/**
	 * See https://msdn.microsoft.com/en-us/library/aa140066(v=office.10).aspx
	 */
	var ExcelXmlFactory = (function () {
	    function ExcelXmlFactory() {
	    }
	    ExcelXmlFactory.prototype.createExcelXml = function (styles, worksheets) {
	        var documentProperties = this.documentProperties();
	        var excelWorkbook = this.excelWorkbook();
	        return this.excelXmlHeader() +
	            this.xmlFactory.createXml(this.workbook(documentProperties, excelWorkbook, styles, worksheets), function (boolean) { return boolean ? "1" : "0"; });
	    };
	    ExcelXmlFactory.prototype.workbook = function (documentProperties, excelWorkbook, styles, worksheets) {
	        var _this = this;
	        var children = [
	            documentProperties,
	            excelWorkbook,
	            this.stylesXmlElement(styles)
	        ];
	        main_3.Utils.map(worksheets, function (it) {
	            return _this.worksheetXmlElement(it);
	        }).forEach(function (it) {
	            children.push(it);
	        });
	        return {
	            name: "Workbook",
	            properties: {
	                prefixedAttributes: [{
	                        prefix: "xmlns:",
	                        map: {
	                            o: "urn:schemas-microsoft-com:office:office",
	                            x: "urn:schemas-microsoft-com:office:excel",
	                            ss: "urn:schemas-microsoft-com:office:spreadsheet",
	                            html: "http://www.w3.org/TR/REC-html40"
	                        },
	                    }],
	                rawMap: {
	                    xmlns: "urn:schemas-microsoft-com:office:spreadsheet"
	                }
	            },
	            children: children
	        };
	    };
	    ExcelXmlFactory.prototype.excelXmlHeader = function () {
	        // need to take out the question mark, otherwise it bothers php when have < and ? beside each
	        // other in a string, as php thinks it's a directive for php
	        var QUESTION_MARK = '?';
	        return '<' + QUESTION_MARK + 'xml version="1.0"' + QUESTION_MARK + '>' + LINE_SEPARATOR +
	            '<' + QUESTION_MARK + 'mso-application progid="Excel.Sheet"' + QUESTION_MARK + '>' + LINE_SEPARATOR;
	    };
	    ExcelXmlFactory.prototype.stylesXmlElement = function (styles) {
	        var _this = this;
	        return {
	            name: 'Styles',
	            children: styles ? main_3.Utils.map(styles, function (it) {
	                return _this.styleXmlElement(it);
	            }) : []
	        };
	    };
	    ExcelXmlFactory.prototype.styleXmlElement = function (style) {
	        var borders = [];
	        if (style.borders) {
	            [
	                style.borders.borderBottom,
	                style.borders.borderLeft,
	                style.borders.borderRight,
	                style.borders.borderTop
	            ].forEach(function (it, index) {
	                var current = index == 0 ? "Bottom" : index == 1 ? "Left" : index == 2 ? "Right" : "Top";
	                borders.push({
	                    name: "Border",
	                    properties: {
	                        prefixedAttributes: [{
	                                prefix: "ss:",
	                                map: {
	                                    Position: current,
	                                    LineStyle: it.lineStyle,
	                                    Weight: it.weight,
	                                    Color: it.color
	                                }
	                            }]
	                    }
	                });
	            });
	        }
	        var children = [];
	        if (style.alignment) {
	            children.push({
	                name: "Alignment",
	                properties: {
	                    prefixedAttributes: [{
	                            prefix: "ss:",
	                            map: {
	                                Vertical: style.alignment.vertical,
	                                Horizontal: style.alignment.horizontal,
	                                Indent: style.alignment.indent,
	                                ReadingOrder: style.alignment.readingOrder,
	                                Rotate: style.alignment.rotate,
	                                ShrinkToFit: style.alignment.shrinkToFit,
	                                VerticalText: style.alignment.verticalText,
	                                WrapText: style.alignment.wrapText
	                            }
	                        }]
	                }
	            });
	        }
	        if (style.borders) {
	            children.push({
	                name: "Borders",
	                children: borders
	            });
	        }
	        if (style.font) {
	            children.push({
	                name: "Font",
	                properties: {
	                    prefixedAttributes: [{
	                            prefix: "ss:",
	                            map: {
	                                Bold: style.font.bold,
	                                FontName: style.font.fontName,
	                                Italic: style.font.italic,
	                                Color: style.font.color,
	                                Outline: style.font.outline,
	                                Shadow: style.font.shadow,
	                                Size: style.font.size,
	                                StrikeThrough: style.font.strikeThrough,
	                                Underline: style.font.underline,
	                                VerticalAlign: style.font.verticalAlign
	                            }
	                        }, {
	                            prefix: "x:",
	                            map: {
	                                CharSet: style.font.charSet,
	                                Family: style.font.family
	                            }
	                        }]
	                }
	            });
	        }
	        if (style.interior) {
	            children.push({
	                name: "Interior",
	                properties: {
	                    prefixedAttributes: [{
	                            prefix: "ss:",
	                            map: {
	                                Color: style.interior.color,
	                                Pattern: style.interior.pattern,
	                                PatternColor: style.interior.patternColor
	                            }
	                        }]
	                }
	            });
	        }
	        if (style.protection) {
	            children.push({
	                name: "Protection",
	                properties: {
	                    prefixedAttributes: [{
	                            prefix: "ss:",
	                            map: {
	                                Protected: style.protection.protected,
	                                HideFormula: style.protection.hideFormula
	                            }
	                        }]
	                }
	            });
	        }
	        if (style.numberFormat) {
	            children.push({
	                name: "NumberFormat",
	                properties: {
	                    prefixedAttributes: [{
	                            prefix: "ss:",
	                            map: {
	                                Format: style.numberFormat.format
	                            }
	                        }]
	                }
	            });
	        }
	        return {
	            name: "Style",
	            properties: {
	                prefixedAttributes: [{
	                        prefix: "ss:",
	                        map: {
	                            ID: style.id,
	                            Name: (style.name) ? style.name : style.id
	                        }
	                    }]
	            },
	            children: children
	        };
	    };
	    ExcelXmlFactory.prototype.worksheetXmlElement = function (worksheet) {
	        var _this = this;
	        var children = [];
	        main_3.Utils.map(worksheet.table.columns, function (it) {
	            return _this.columnXmlElement(it);
	        }).forEach(function (it) {
	            children.push(it);
	        });
	        main_3.Utils.map(worksheet.table.rows, function (it) {
	            return _this.rowXmlElement(it);
	        }).forEach(function (it) {
	            children.push(it);
	        });
	        return {
	            name: "Worksheet",
	            children: [{
	                    name: "Table",
	                    children: children
	                }],
	            properties: {
	                prefixedAttributes: [{
	                        prefix: "ss:",
	                        map: {
	                            Name: worksheet.name
	                        }
	                    }]
	            }
	        };
	    };
	    ExcelXmlFactory.prototype.columnXmlElement = function (column) {
	        return {
	            name: "Column",
	            properties: {
	                prefixedAttributes: [{
	                        prefix: "ss:",
	                        map: {
	                            Width: column.width
	                        }
	                    }]
	            }
	        };
	    };
	    ExcelXmlFactory.prototype.rowXmlElement = function (row) {
	        var _this = this;
	        return {
	            name: "Row",
	            children: main_3.Utils.map(row.cells, function (it) {
	                return _this.rowCellXmlElement(it);
	            })
	        };
	    };
	    ExcelXmlFactory.prototype.rowCellXmlElement = function (cell) {
	        var properties = {};
	        if (cell.mergeAcross) {
	            properties['MergeAcross'] = cell.mergeAcross;
	        }
	        if (cell.styleId) {
	            properties['StyleID'] = cell.styleId;
	        }
	        return {
	            name: "Cell",
	            properties: {
	                prefixedAttributes: [{
	                        prefix: "ss:",
	                        map: properties
	                    }]
	            },
	            children: [{
	                    name: "Data",
	                    properties: {
	                        prefixedAttributes: [{
	                                prefix: "ss:",
	                                map: {
	                                    Type: cell.data.type
	                                }
	                            }]
	                    },
	                    textNode: cell.data.value
	                }]
	        };
	    };
	    ExcelXmlFactory.prototype.excelWorkbook = function () {
	        return {
	            name: "ExcelWorkbook",
	            properties: {
	                rawMap: {
	                    xmlns: "urn:schemas-microsoft-com:office:excel"
	                }
	            },
	            children: [{
	                    name: "WindowHeight",
	                    textNode: "8130"
	                }, {
	                    name: "WindowWidth",
	                    textNode: "15135"
	                }, {
	                    name: "WindowHeight",
	                    textNode: "8130"
	                }, {
	                    name: "WindowTopX",
	                    textNode: "120"
	                }, {
	                    name: "WindowTopY",
	                    textNode: "45"
	                }, {
	                    name: "ProtectStructure",
	                    textNode: "False"
	                }, {
	                    name: "ProtectWindow",
	                    textNode: "False"
	                }]
	        };
	    };
	    ExcelXmlFactory.prototype.documentProperties = function () {
	        return {
	            name: "DocumentProperties",
	            properties: {
	                rawMap: {
	                    xmlns: "urn:schemas-microsoft-com:office:office"
	                }
	            },
	            children: [{
	                    name: "Version",
	                    textNode: "12.00"
	                }]
	        };
	    };
	    __decorate([
	        main_2.Autowired('xmlFactory'),
	        __metadata("design:type", main_1.XmlFactory)
	    ], ExcelXmlFactory.prototype, "xmlFactory", void 0);
	    ExcelXmlFactory = __decorate([
	        main_2.Bean('excelXmlFactory')
	    ], ExcelXmlFactory);
	    return ExcelXmlFactory;
	}());
	exports.ExcelXmlFactory = ExcelXmlFactory;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var ag_grid_1 = __webpack_require__(2);
	var enterpriseCache_1 = __webpack_require__(176);
	var EnterpriseRowModel = (function (_super) {
	    __extends(EnterpriseRowModel, _super);
	    function EnterpriseRowModel() {
	        return _super !== null && _super.apply(this, arguments) || this;
	    }
	    EnterpriseRowModel.prototype.postConstruct = function () {
	        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();
	        this.addEventListeners();
	        var datasource = this.gridOptionsWrapper.getEnterpriseDatasource();
	        if (ag_grid_1._.exists(datasource)) {
	            this.setDatasource(datasource);
	        }
	    };
	    EnterpriseRowModel.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('EnterpriseRowModel');
	    };
	    EnterpriseRowModel.prototype.isLastRowFound = function () {
	        if (ag_grid_1._.exists(this.rootNode) && ag_grid_1._.exists(this.rootNode.childrenCache)) {
	            return this.rootNode.childrenCache.isMaxRowFound();
	        }
	        else {
	            return false;
	        }
	    };
	    EnterpriseRowModel.prototype.addEventListeners = function () {
	        this.addDestroyableEventListener(this.eventService, ag_grid_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onColumnRowGroupChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, ag_grid_1.Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));
	        this.addDestroyableEventListener(this.eventService, ag_grid_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, ag_grid_1.Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, ag_grid_1.Events.EVENT_COLUMN_PIVOT_CHANGED, this.onColumnPivotChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, ag_grid_1.Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));
	        this.addDestroyableEventListener(this.eventService, ag_grid_1.Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));
	    };
	    EnterpriseRowModel.prototype.onFilterChanged = function () {
	        this.reset();
	    };
	    EnterpriseRowModel.prototype.onSortChanged = function () {
	        this.reset();
	    };
	    EnterpriseRowModel.prototype.onValueChanged = function () {
	        this.reset();
	    };
	    EnterpriseRowModel.prototype.onColumnRowGroupChanged = function () {
	        this.reset();
	    };
	    EnterpriseRowModel.prototype.onColumnPivotChanged = function () {
	        this.reset();
	    };
	    EnterpriseRowModel.prototype.onPivotModeChanged = function () {
	        this.reset();
	    };
	    EnterpriseRowModel.prototype.onRowGroupOpened = function (event) {
	        var openedNode = event.node;
	        if (openedNode.expanded) {
	            if (ag_grid_1._.missing(openedNode.childrenCache)) {
	                this.createNodeCache(openedNode);
	            }
	        }
	        else {
	            if (this.gridOptionsWrapper.isPurgeClosedRowNodes() && ag_grid_1._.exists(openedNode.childrenCache)) {
	                openedNode.childrenCache.destroy();
	                openedNode.childrenCache = null;
	            }
	        }
	        this.updateRowIndexesAndBounds();
	        var modelUpdatedEvent = {
	            type: ag_grid_1.Events.EVENT_MODEL_UPDATED,
	            api: this.gridOptionsWrapper.getApi(),
	            columnApi: this.gridOptionsWrapper.getColumnApi(),
	            newPage: false,
	            newData: false,
	            animate: true,
	            keepRenderedRows: true
	        };
	        this.eventService.dispatchEvent(modelUpdatedEvent);
	    };
	    EnterpriseRowModel.prototype.reset = function () {
	        this.rootNode = new ag_grid_1.RowNode();
	        this.rootNode.group = true;
	        this.rootNode.level = -1;
	        this.context.wireBean(this.rootNode);
	        if (this.datasource) {
	            this.createNewRowNodeBlockLoader();
	            this.cacheParams = this.createCacheParams();
	            this.createNodeCache(this.rootNode);
	            this.updateRowIndexesAndBounds();
	        }
	        // this event: 1) clears selection 2) updates filters 3) shows/hides 'no rows' overlay
	        var rowDataChangedEvent = {
	            type: ag_grid_1.Events.EVENT_ROW_DATA_CHANGED,
	            api: this.gridApi,
	            columnApi: this.columnApi
	        };
	        this.eventService.dispatchEvent(rowDataChangedEvent);
	        // this gets the row to render rows (or remove the previously rendered rows, as it's blank to start).
	        // important to NOT pass in an event with keepRenderedRows or animate, as we want the renderer
	        // to treat the rows as new rows, as it's all new data
	        var modelUpdatedEvent = {
	            type: ag_grid_1.Events.EVENT_MODEL_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            animate: false,
	            keepRenderedRows: false,
	            newData: false,
	            newPage: false
	        };
	        this.eventService.dispatchEvent(modelUpdatedEvent);
	    };
	    EnterpriseRowModel.prototype.createNewRowNodeBlockLoader = function () {
	        this.destroyRowNodeBlockLoader();
	        var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();
	        this.rowNodeBlockLoader = new ag_grid_1.RowNodeBlockLoader(maxConcurrentRequests);
	        this.context.wireBean(this.rowNodeBlockLoader);
	    };
	    EnterpriseRowModel.prototype.destroyRowNodeBlockLoader = function () {
	        if (this.rowNodeBlockLoader) {
	            this.rowNodeBlockLoader.destroy();
	            this.rowNodeBlockLoader = null;
	        }
	    };
	    EnterpriseRowModel.prototype.setDatasource = function (datasource) {
	        this.datasource = datasource;
	        this.reset();
	    };
	    EnterpriseRowModel.prototype.toValueObjects = function (columns) {
	        var _this = this;
	        return columns.map(function (col) { return ({
	            id: col.getId(),
	            aggFunc: col.getAggFunc(),
	            displayName: _this.columnController.getDisplayNameForColumn(col, 'model'),
	            field: col.getColDef().field
	        }); });
	    };
	    EnterpriseRowModel.prototype.createCacheParams = function () {
	        var rowGroupColumnVos = this.toValueObjects(this.columnController.getRowGroupColumns());
	        var valueColumnVos = this.toValueObjects(this.columnController.getValueColumns());
	        var pivotColumnVos = this.toValueObjects(this.columnController.getPivotColumns());
	        var dynamicRowHeight = this.gridOptionsWrapper.isDynamicRowHeight();
	        var maxBlocksInCache = this.gridOptionsWrapper.getMaxBlocksInCache();
	        if (dynamicRowHeight && maxBlocksInCache >= 0) {
	            console.warn('ag-Grid: Enterprise Row Model does not support Dynamic Row Height and Cache Purging. ' +
	                'Either a) remove getRowHeight() callback or b) remove maxBlocksInCache property. Purging has been disabled.');
	            maxBlocksInCache = undefined;
	        }
	        var params = {
	            // the columns the user has grouped and aggregated by
	            valueCols: valueColumnVos,
	            rowGroupCols: rowGroupColumnVos,
	            pivotCols: pivotColumnVos,
	            pivotMode: this.columnController.isPivotMode(),
	            // sort and filter model
	            filterModel: this.filterManager.getFilterModel(),
	            sortModel: this.sortController.getSortModel(),
	            rowNodeBlockLoader: this.rowNodeBlockLoader,
	            datasource: this.datasource,
	            lastAccessedSequence: new ag_grid_1.NumberSequence(),
	            overflowSize: 1,
	            initialRowCount: 1,
	            maxConcurrentRequests: this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests(),
	            maxBlocksInCache: maxBlocksInCache,
	            blockSize: this.gridOptionsWrapper.getCacheBlockSize(),
	            rowHeight: this.rowHeight,
	            dynamicRowHeight: dynamicRowHeight
	        };
	        // set defaults
	        if (!(params.maxConcurrentRequests >= 1)) {
	            params.maxConcurrentRequests = 2;
	        }
	        // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the
	        // server for one page at a time. so the default if not specified is 100.
	        if (!(params.blockSize >= 1)) {
	            params.blockSize = 100;
	        }
	        // if user doesn't give initial rows to display, we assume zero
	        if (!(params.initialRowCount >= 1)) {
	            params.initialRowCount = 0;
	        }
	        // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past
	        // the current page and request first row of next page
	        if (!(params.overflowSize >= 1)) {
	            params.overflowSize = 1;
	        }
	        return params;
	    };
	    EnterpriseRowModel.prototype.createNodeCache = function (rowNode) {
	        var cache = new enterpriseCache_1.EnterpriseCache(this.cacheParams, rowNode);
	        this.context.wireBean(cache);
	        cache.addEventListener(ag_grid_1.RowNodeCache.EVENT_CACHE_UPDATED, this.onCacheUpdated.bind(this));
	        rowNode.childrenCache = cache;
	    };
	    EnterpriseRowModel.prototype.onCacheUpdated = function () {
	        this.updateRowIndexesAndBounds();
	        var modelUpdatedEvent = {
	            type: ag_grid_1.Events.EVENT_MODEL_UPDATED,
	            api: this.gridApi,
	            columnApi: this.columnApi,
	            animate: true,
	            keepRenderedRows: true,
	            newPage: false,
	            newData: false
	        };
	        this.eventService.dispatchEvent(modelUpdatedEvent);
	    };
	    EnterpriseRowModel.prototype.updateRowIndexesAndBounds = function () {
	        var cacheExists = ag_grid_1._.exists(this.rootNode) && ag_grid_1._.exists(this.rootNode.childrenCache);
	        if (cacheExists) {
	            // todo: should not be casting here, the RowModel should use IEnterpriseRowModel interface?
	            var enterpriseCache = this.rootNode.childrenCache;
	            this.resetRowTops(enterpriseCache);
	            this.setDisplayIndexes(enterpriseCache);
	        }
	    };
	    EnterpriseRowModel.prototype.setDisplayIndexes = function (cache) {
	        var numberSequence = new ag_grid_1.NumberSequence();
	        var nextRowTop = { value: 0 };
	        cache.setDisplayIndexes(numberSequence, nextRowTop);
	    };
	    // resetting row tops is needed for animation, as part of the operation is saving the old location,
	    // which is needed for rows that are transitioning in
	    EnterpriseRowModel.prototype.resetRowTops = function (cache) {
	        var numberSequence = new ag_grid_1.NumberSequence();
	        cache.forEachNodeDeep(function (rowNode) { return rowNode.clearRowTop(); }, numberSequence);
	    };
	    EnterpriseRowModel.prototype.getRow = function (index) {
	        var cacheExists = ag_grid_1._.exists(this.rootNode) && ag_grid_1._.exists(this.rootNode.childrenCache);
	        if (cacheExists) {
	            return this.rootNode.childrenCache.getRow(index);
	        }
	        else {
	            return null;
	        }
	    };
	    EnterpriseRowModel.prototype.getPageFirstRow = function () {
	        return 0;
	    };
	    EnterpriseRowModel.prototype.getPageLastRow = function () {
	        var cacheExists = ag_grid_1._.exists(this.rootNode) && ag_grid_1._.exists(this.rootNode.childrenCache);
	        var lastRow;
	        if (cacheExists) {
	            // todo: should not be casting here, the RowModel should use IEnterpriseRowModel interface?
	            var enterpriseCache = this.rootNode.childrenCache;
	            lastRow = enterpriseCache.getDisplayIndexEnd() - 1;
	        }
	        else {
	            lastRow = 0;
	        }
	        // this doesn't make sense, but it works, if there are now rows, then -1 is returned above
	        if (lastRow < 0) {
	            lastRow = 0;
	        }
	        return lastRow;
	    };
	    EnterpriseRowModel.prototype.getRowCount = function () {
	        return this.getPageLastRow() + 1;
	    };
	    EnterpriseRowModel.prototype.getRowBounds = function (index) {
	        var cacheMissing = ag_grid_1._.missing(this.rootNode) || ag_grid_1._.missing(this.rootNode.childrenCache);
	        if (cacheMissing) {
	            return {
	                rowTop: 0,
	                rowHeight: this.rowHeight
	            };
	        }
	        var enterpriseCache = this.rootNode.childrenCache;
	        return enterpriseCache.getRowBounds(index);
	    };
	    EnterpriseRowModel.prototype.getRowIndexAtPixel = function (pixel) {
	        if (pixel === 0)
	            return 0;
	        var cacheMissing = ag_grid_1._.missing(this.rootNode) || ag_grid_1._.missing(this.rootNode.childrenCache);
	        if (cacheMissing)
	            return 0;
	        var enterpriseCache = this.rootNode.childrenCache;
	        var result = enterpriseCache.getRowIndexAtPixel(pixel);
	        return result;
	    };
	    EnterpriseRowModel.prototype.getCurrentPageHeight = function () {
	        var pageHeight = this.rowHeight * this.getRowCount();
	        return pageHeight;
	    };
	    EnterpriseRowModel.prototype.isEmpty = function () {
	        return false;
	    };
	    EnterpriseRowModel.prototype.isRowsToRender = function () {
	        return this.getRowCount() > 0;
	    };
	    EnterpriseRowModel.prototype.getType = function () {
	        return ag_grid_1.Constants.ROW_MODEL_TYPE_ENTERPRISE;
	    };
	    EnterpriseRowModel.prototype.forEachNode = function (callback) {
	        if (this.rootNode && this.rootNode.childrenCache) {
	            this.rootNode.childrenCache.forEachNodeDeep(callback, new ag_grid_1.NumberSequence());
	        }
	    };
	    EnterpriseRowModel.prototype.purgeCache = function (route) {
	        if (route === void 0) { route = []; }
	        if (this.rootNode && this.rootNode.childrenCache) {
	            var topLevelCache = this.rootNode.childrenCache;
	            var cacheToPurge = topLevelCache.getChildCache(route);
	            if (cacheToPurge) {
	                cacheToPurge.purgeCache();
	            }
	        }
	    };
	    EnterpriseRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {
	        if (ag_grid_1._.exists(firstInRange) && firstInRange.parent !== lastInRange.parent)
	            return [];
	        return lastInRange.parent.childrenCache.getRowNodesInRange(firstInRange, lastInRange);
	    };
	    EnterpriseRowModel.prototype.getBlockState = function () {
	        if (this.rowNodeBlockLoader) {
	            return this.rowNodeBlockLoader.getBlockState();
	        }
	        else {
	            return null;
	        }
	    };
	    EnterpriseRowModel.prototype.isRowPresent = function (rowNode) {
	        return false;
	    };
	    __decorate([
	        ag_grid_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", ag_grid_1.GridOptionsWrapper)
	    ], EnterpriseRowModel.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        ag_grid_1.Autowired('eventService'),
	        __metadata("design:type", ag_grid_1.EventService)
	    ], EnterpriseRowModel.prototype, "eventService", void 0);
	    __decorate([
	        ag_grid_1.Autowired('context'),
	        __metadata("design:type", ag_grid_1.Context)
	    ], EnterpriseRowModel.prototype, "context", void 0);
	    __decorate([
	        ag_grid_1.Autowired('columnController'),
	        __metadata("design:type", ag_grid_1.ColumnController)
	    ], EnterpriseRowModel.prototype, "columnController", void 0);
	    __decorate([
	        ag_grid_1.Autowired('filterManager'),
	        __metadata("design:type", ag_grid_1.FilterManager)
	    ], EnterpriseRowModel.prototype, "filterManager", void 0);
	    __decorate([
	        ag_grid_1.Autowired('sortController'),
	        __metadata("design:type", ag_grid_1.SortController)
	    ], EnterpriseRowModel.prototype, "sortController", void 0);
	    __decorate([
	        ag_grid_1.Autowired('gridApi'),
	        __metadata("design:type", ag_grid_1.GridApi)
	    ], EnterpriseRowModel.prototype, "gridApi", void 0);
	    __decorate([
	        ag_grid_1.Autowired('columnApi'),
	        __metadata("design:type", ag_grid_1.ColumnApi)
	    ], EnterpriseRowModel.prototype, "columnApi", void 0);
	    __decorate([
	        ag_grid_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], EnterpriseRowModel.prototype, "postConstruct", null);
	    __decorate([
	        __param(0, ag_grid_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [ag_grid_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], EnterpriseRowModel.prototype, "setBeans", null);
	    EnterpriseRowModel = __decorate([
	        ag_grid_1.Bean('rowModel')
	    ], EnterpriseRowModel);
	    return EnterpriseRowModel;
	}(ag_grid_1.BeanStub));
	exports.EnterpriseRowModel = EnterpriseRowModel;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var ag_grid_1 = __webpack_require__(2);
	var enterpriseBlock_1 = __webpack_require__(177);
	var EnterpriseCache = (function (_super) {
	    __extends(EnterpriseCache, _super);
	    function EnterpriseCache(cacheParams, parentRowNode) {
	        var _this = _super.call(this, cacheParams) || this;
	        // this will always be zero for the top level cache only,
	        // all the other ones change as the groups open and close
	        _this.displayIndexStart = 0;
	        _this.displayIndexEnd = 0; // not sure if setting this one to zero is necessary
	        _this.cacheTop = 0;
	        _this.blockHeights = {};
	        _this.parentRowNode = parentRowNode;
	        return _this;
	    }
	    EnterpriseCache.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('EnterpriseCache');
	    };
	    EnterpriseCache.prototype.init = function () {
	        _super.prototype.init.call(this);
	    };
	    EnterpriseCache.prototype.getRowBounds = function (index) {
	        var _this = this;
	        this.logger.log("getRowBounds(" + index + ")");
	        // we return null if row not found
	        var result;
	        var blockFound = false;
	        var lastBlock;
	        this.forEachBlockInOrder(function (block) {
	            if (blockFound)
	                return;
	            if (block.isDisplayIndexInBlock(index)) {
	                result = block.getRowBounds(index, _this.getVirtualRowCount());
	                blockFound = true;
	            }
	            else if (block.isBlockBefore(index)) {
	                lastBlock = block;
	            }
	        });
	        if (!blockFound) {
	            var nextRowTop = void 0;
	            var nextRowIndex = void 0;
	            if (lastBlock) {
	                nextRowTop = lastBlock.getBlockTop() + lastBlock.getBlockHeight();
	                nextRowIndex = lastBlock.getDisplayIndexEnd();
	            }
	            else {
	                nextRowTop = this.cacheTop;
	                nextRowIndex = this.displayIndexStart;
	            }
	            var rowsBetween = index - nextRowIndex;
	            result = {
	                rowHeight: this.cacheParams.rowHeight,
	                rowTop: nextRowTop + rowsBetween * this.cacheParams.rowHeight
	            };
	        }
	        //TODO: what about purged blocks
	        this.logger.log("getRowBounds(" + index + "), result = " + result);
	        return result;
	    };
	    EnterpriseCache.prototype.destroyBlock = function (block) {
	        _super.prototype.destroyBlock.call(this, block);
	    };
	    EnterpriseCache.prototype.getRowIndexAtPixel = function (pixel) {
	        var _this = this;
	        this.logger.log("getRowIndexAtPixel(" + pixel + ")");
	        // we return null if row not found
	        var result;
	        var blockFound = false;
	        var lastBlock;
	        this.forEachBlockInOrder(function (block) {
	            if (blockFound)
	                return;
	            if (block.isPixelInRange(pixel)) {
	                result = block.getRowIndexAtPixel(pixel, _this.getVirtualRowCount());
	                blockFound = true;
	            }
	            else if (block.getBlockTop() > pixel) {
	                lastBlock = block;
	            }
	        });
	        if (!blockFound) {
	            var nextRowTop = void 0;
	            var nextRowIndex = void 0;
	            if (lastBlock) {
	                nextRowTop = lastBlock.getBlockTop() + lastBlock.getBlockHeight();
	                nextRowIndex = lastBlock.getDisplayIndexEnd();
	            }
	            else {
	                nextRowTop = this.cacheTop;
	                nextRowIndex = this.displayIndexStart;
	            }
	            var pixelsBetween = pixel - nextRowTop;
	            var rowsBetween = (pixelsBetween / this.cacheParams.rowHeight) | 0;
	            result = nextRowIndex + rowsBetween;
	        }
	        var lastAllowedIndex = this.getDisplayIndexEnd() - 1;
	        if (result > lastAllowedIndex) {
	            result = lastAllowedIndex;
	        }
	        //TODO: purged
	        this.logger.log("getRowIndexAtPixel(" + pixel + ") result = " + result);
	        return result;
	    };
	    EnterpriseCache.prototype.setDisplayIndexes = function (displayIndexSeq, nextRowTop) {
	        var _this = this;
	        this.displayIndexStart = displayIndexSeq.peek();
	        this.cacheTop = nextRowTop.value;
	        var lastBlockId = -1;
	        this.forEachBlockInOrder(function (currentBlock, blockId) {
	            // if we skipped blocks, then we need to skip the row indexes. we assume that all missing
	            // blocks are made up of closed RowNodes only (if they were groups), as we never expire from
	            // the cache if any row nodes are open.
	            var blocksSkippedCount = blockId - lastBlockId - 1;
	            var rowsSkippedCount = blocksSkippedCount * _this.cacheParams.blockSize;
	            if (rowsSkippedCount > 0) {
	                displayIndexSeq.skip(rowsSkippedCount);
	            }
	            for (var i = 1; i <= blocksSkippedCount; i++) {
	                var blockToAddId = blockId - i;
	                if (ag_grid_1._.exists(_this.blockHeights[blockToAddId])) {
	                    nextRowTop.value += _this.blockHeights[blockToAddId];
	                }
	                else {
	                    nextRowTop.value += _this.cacheParams.blockSize * _this.cacheParams.rowHeight;
	                }
	            }
	            lastBlockId = blockId;
	            currentBlock.setDisplayIndexes(displayIndexSeq, _this.getVirtualRowCount(), nextRowTop);
	            _this.blockHeights[blockId] = currentBlock.getBlockHeight();
	        });
	        // if any blocks missing at the end, need to increase the row index for them also
	        // eg if block size = 10, we have total rows of 25 (indexes 0 .. 24), but first 2 blocks loaded (because
	        // last row was ejected from cache), then:
	        // lastVisitedRow = 19, virtualRowCount = 25, rows not accounted for = 5 (24 - 19)
	        var lastVisitedRow = ((lastBlockId + 1) * this.cacheParams.blockSize) - 1;
	        var rowCount = this.getVirtualRowCount();
	        var rowsNotAccountedFor = rowCount - lastVisitedRow - 1;
	        if (rowsNotAccountedFor > 0) {
	            displayIndexSeq.skip(rowsNotAccountedFor);
	            nextRowTop.value += rowsNotAccountedFor * this.cacheParams.rowHeight;
	        }
	        this.displayIndexEnd = displayIndexSeq.peek();
	        this.cacheHeight = nextRowTop.value - this.cacheTop;
	    };
	    // gets called in a) init() above and b) by the grid
	    EnterpriseCache.prototype.getRow = function (displayRowIndex) {
	        var _this = this;
	        // this can happen if asking for a row that doesn't exist in the model,
	        // eg if a cell range is selected, and the user filters so rows no longer
	        // exist
	        if (!this.isDisplayIndexInCache(displayRowIndex)) {
	            return null;
	        }
	        // if we have the block, then this is the block
	        var block = null;
	        // this is the last block that we have BEFORE the right block
	        var beforeBlock = null;
	        this.forEachBlockInOrder(function (currentBlock) {
	            if (currentBlock.isDisplayIndexInBlock(displayRowIndex)) {
	                block = currentBlock;
	            }
	            else if (currentBlock.isBlockBefore(displayRowIndex)) {
	                // this will get assigned many times, but the last time will
	                // be the closest block to the required block that is BEFORE
	                beforeBlock = currentBlock;
	            }
	        });
	        // if block not found, we need to load it
	        if (ag_grid_1._.missing(block)) {
	            var blockNumber = void 0;
	            var displayIndexStart_1;
	            var nextRowTop = void 0;
	            // because missing blocks are always fully closed, we can work out
	            // the start index of the block we want by hopping from the closest block,
	            // as we know the row count in closed blocks is equal to the page size
	            if (beforeBlock) {
	                blockNumber = beforeBlock.getBlockNumber() + 1;
	                displayIndexStart_1 = beforeBlock.getDisplayIndexEnd();
	                nextRowTop = beforeBlock.getBlockHeight() + beforeBlock.getBlockTop();
	                var isInRange = function () {
	                    return displayRowIndex >= displayIndexStart_1 && displayRowIndex < (displayIndexStart_1 + _this.cacheParams.blockSize);
	                };
	                while (!isInRange()) {
	                    displayIndexStart_1 += this.cacheParams.blockSize;
	                    var cachedBlockHeight = this.blockHeights[blockNumber];
	                    if (ag_grid_1._.exists(cachedBlockHeight)) {
	                        nextRowTop += cachedBlockHeight;
	                    }
	                    else {
	                        nextRowTop += this.cacheParams.rowHeight * this.cacheParams.blockSize;
	                    }
	                    blockNumber++;
	                }
	            }
	            else {
	                var localIndex = displayRowIndex - this.displayIndexStart;
	                blockNumber = Math.floor(localIndex / this.cacheParams.blockSize);
	                displayIndexStart_1 = this.displayIndexStart + (blockNumber * this.cacheParams.blockSize);
	                nextRowTop = this.cacheTop + (blockNumber * this.cacheParams.blockSize * this.cacheParams.rowHeight);
	            }
	            block = this.createBlock(blockNumber, displayIndexStart_1, { value: nextRowTop });
	            this.logger.log("block missing, rowIndex = " + displayRowIndex + ", creating #" + blockNumber + ", displayIndexStart = " + displayIndexStart_1);
	        }
	        var rowNode = block.getRow(displayRowIndex);
	        return rowNode;
	    };
	    EnterpriseCache.prototype.createBlock = function (blockNumber, displayIndex, nextRowTop) {
	        var newBlock = new enterpriseBlock_1.EnterpriseBlock(blockNumber, this.parentRowNode, this.cacheParams, this);
	        this.context.wireBean(newBlock);
	        var displayIndexSequence = new ag_grid_1.NumberSequence(displayIndex);
	        newBlock.setDisplayIndexes(displayIndexSequence, this.getVirtualRowCount(), nextRowTop);
	        this.postCreateBlock(newBlock);
	        return newBlock;
	    };
	    EnterpriseCache.prototype.getDisplayIndexEnd = function () {
	        return this.displayIndexEnd;
	    };
	    EnterpriseCache.prototype.isDisplayIndexInCache = function (displayIndex) {
	        if (this.getVirtualRowCount() === 0) {
	            return false;
	        }
	        return displayIndex >= this.displayIndexStart && displayIndex < this.displayIndexEnd;
	    };
	    EnterpriseCache.prototype.getChildCache = function (keys) {
	        var _this = this;
	        if (ag_grid_1._.missingOrEmpty(keys)) {
	            return this;
	        }
	        var nextKey = keys[0];
	        var nextEnterpriseCache = null;
	        this.forEachBlockInOrder(function (block) {
	            // callback: (rowNode: RowNode, index: number) => void, sequence: NumberSequence, rowCount: number
	            block.forEachNodeShallow(function (rowNode) {
	                if (rowNode.key === nextKey) {
	                    nextEnterpriseCache = rowNode.childrenCache;
	                }
	            }, new ag_grid_1.NumberSequence(), _this.getVirtualRowCount());
	        });
	        if (nextEnterpriseCache) {
	            var keyListForNextLevel = keys.slice(1, keys.length);
	            return nextEnterpriseCache.getChildCache(keyListForNextLevel);
	        }
	        else {
	            return null;
	        }
	    };
	    EnterpriseCache.prototype.isPixelInRange = function (pixel) {
	        if (this.getVirtualRowCount() === 0) {
	            return false;
	        }
	        return pixel >= this.cacheTop && pixel < (this.cacheTop + this.cacheHeight);
	    };
	    __decorate([
	        ag_grid_1.Autowired('eventService'),
	        __metadata("design:type", ag_grid_1.EventService)
	    ], EnterpriseCache.prototype, "eventService", void 0);
	    __decorate([
	        ag_grid_1.Autowired('context'),
	        __metadata("design:type", ag_grid_1.Context)
	    ], EnterpriseCache.prototype, "context", void 0);
	    __decorate([
	        __param(0, ag_grid_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [ag_grid_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], EnterpriseCache.prototype, "setBeans", null);
	    __decorate([
	        ag_grid_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], EnterpriseCache.prototype, "init", null);
	    return EnterpriseCache;
	}(ag_grid_1.RowNodeCache));
	exports.EnterpriseCache = EnterpriseCache;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	var ag_grid_1 = __webpack_require__(2);
	var EnterpriseBlock = (function (_super) {
	    __extends(EnterpriseBlock, _super);
	    function EnterpriseBlock(pageNumber, parentRowNode, params, parentCache) {
	        var _this = _super.call(this, pageNumber, params) || this;
	        _this.params = params;
	        _this.parentRowNode = parentRowNode;
	        _this.parentCache = parentCache;
	        _this.level = parentRowNode.level + 1;
	        _this.groupLevel = _this.level < params.rowGroupCols.length;
	        _this.leafGroup = _this.level === (params.rowGroupCols.length - 1);
	        return _this;
	    }
	    EnterpriseBlock.prototype.createNodeIdPrefix = function () {
	        var parts = [];
	        var rowNode = this.parentRowNode;
	        while (ag_grid_1._.exists(rowNode.key)) {
	            parts.push(rowNode.key);
	            rowNode = rowNode.parent;
	        }
	        if (parts.length > 0) {
	            this.nodeIdPrefix = parts.reverse().join('-') + '-';
	        }
	    };
	    EnterpriseBlock.prototype.createIdForIndex = function (index) {
	        if (ag_grid_1._.exists(this.nodeIdPrefix)) {
	            return this.nodeIdPrefix + index.toString();
	        }
	        else {
	            return index.toString();
	        }
	    };
	    EnterpriseBlock.prototype.getNodeIdPrefix = function () {
	        return this.nodeIdPrefix;
	    };
	    EnterpriseBlock.prototype.getRow = function (displayRowIndex) {
	        // do binary search of tree
	        // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/
	        var bottomPointer = this.getStartRow();
	        // the end row depends on whether all this block is used or not. if the virtual row count
	        // is before the end, then not all the row is used
	        var virtualRowCount = this.parentCache.getVirtualRowCount();
	        var endRow = this.getEndRow();
	        var actualEnd = (virtualRowCount < endRow) ? virtualRowCount : endRow;
	        var topPointer = actualEnd - 1;
	        if (ag_grid_1._.missing(topPointer) || ag_grid_1._.missing(bottomPointer)) {
	            console.warn("ag-grid: error: topPointer = " + topPointer + ", bottomPointer = " + bottomPointer);
	            return null;
	        }
	        while (true) {
	            var midPointer = Math.floor((bottomPointer + topPointer) / 2);
	            var currentRowNode = _super.prototype.getRowUsingLocalIndex.call(this, midPointer);
	            if (currentRowNode.rowIndex === displayRowIndex) {
	                return currentRowNode;
	            }
	            var childrenCache = currentRowNode.childrenCache;
	            if (currentRowNode.rowIndex === displayRowIndex) {
	                return currentRowNode;
	            }
	            else if (currentRowNode.expanded && childrenCache && childrenCache.isDisplayIndexInCache(displayRowIndex)) {
	                return childrenCache.getRow(displayRowIndex);
	            }
	            else if (currentRowNode.rowIndex < displayRowIndex) {
	                bottomPointer = midPointer + 1;
	            }
	            else if (currentRowNode.rowIndex > displayRowIndex) {
	                topPointer = midPointer - 1;
	            }
	        }
	    };
	    EnterpriseBlock.prototype.setBeans = function (loggerFactory) {
	        this.logger = loggerFactory.create('EnterpriseBlock');
	    };
	    EnterpriseBlock.prototype.init = function () {
	        if (this.groupLevel) {
	            var groupColVo = this.params.rowGroupCols[this.level];
	            this.groupField = groupColVo.field;
	            this.rowGroupColumn = this.columnController.getRowGroupColumns()[this.level];
	        }
	        this.createNodeIdPrefix();
	        _super.prototype.init.call(this, {
	            context: this.context,
	            rowRenderer: this.rowRenderer
	        });
	    };
	    EnterpriseBlock.prototype.setDataAndId = function (rowNode, data, index) {
	        rowNode.stub = false;
	        if (ag_grid_1._.exists(data)) {
	            // if the user is not providing id's, then we build an id based on the index.
	            // for infinite scrolling, the index is used on it's own. for enterprise,
	            // we combine the index with the level and group key, so that the id is
	            // unique across the set.
	            //
	            // unique id is needed for selection (so selection can be maintained when
	            // doing server side sorting / filtering) - if user is not providing id's
	            // (and we use the indexes) then selection will not work between sorting &
	            // filtering.
	            //
	            // id's are also used by the row renderer for updating the dom as it identifies
	            // rowNodes by id
	            var idToUse = this.createIdForIndex(index);
	            rowNode.setDataAndId(data, idToUse);
	            rowNode.setRowHeight(this.gridOptionsWrapper.getRowHeightForNode(rowNode));
	            if (rowNode.group) {
	                rowNode.key = this.valueService.getValue(this.rowGroupColumn, rowNode);
	            }
	        }
	        else {
	            rowNode.setDataAndId(undefined, undefined);
	            rowNode.key = null;
	        }
	        if (this.groupLevel) {
	            this.setGroupDataIntoRowNode(rowNode);
	            this.setChildCountIntoRowNode(rowNode);
	        }
	    };
	    EnterpriseBlock.prototype.setChildCountIntoRowNode = function (rowNode) {
	        var getChildCount = this.gridOptionsWrapper.getChildCountFunc();
	        if (getChildCount) {
	            rowNode.allChildrenCount = getChildCount(rowNode.data);
	        }
	    };
	    EnterpriseBlock.prototype.setGroupDataIntoRowNode = function (rowNode) {
	        var _this = this;
	        var groupDisplayCols = this.columnController.getGroupDisplayColumns();
	        groupDisplayCols.forEach(function (col) {
	            if (col.isRowGroupDisplayed(_this.rowGroupColumn.getId())) {
	                var groupValue = _this.valueService.getValue(_this.rowGroupColumn, rowNode);
	                if (ag_grid_1._.missing(rowNode.groupData)) {
	                    rowNode.groupData = {};
	                }
	                rowNode.groupData[col.getColId()] = groupValue;
	            }
	        });
	    };
	    EnterpriseBlock.prototype.loadFromDatasource = function () {
	        var _this = this;
	        var params = this.createLoadParams();
	        setTimeout(function () {
	            _this.params.datasource.getRows(params);
	        }, 0);
	    };
	    EnterpriseBlock.prototype.createBlankRowNode = function (rowIndex) {
	        var rowNode = _super.prototype.createBlankRowNode.call(this, rowIndex);
	        rowNode.group = this.groupLevel;
	        rowNode.leafGroup = this.leafGroup;
	        rowNode.level = this.level;
	        rowNode.uiLevel = this.level;
	        rowNode.parent = this.parentRowNode;
	        // stub gets set to true here, and then false when this rowNode gets it's data
	        rowNode.stub = true;
	        if (rowNode.group) {
	            rowNode.expanded = false;
	            rowNode.field = this.groupField;
	            rowNode.rowGroupColumn = this.rowGroupColumn;
	        }
	        return rowNode;
	    };
	    EnterpriseBlock.prototype.createGroupKeys = function (groupNode) {
	        var keys = [];
	        var pointer = groupNode;
	        while (pointer.level >= 0) {
	            keys.push(pointer.key);
	            pointer = pointer.parent;
	        }
	        keys.reverse();
	        return keys;
	    };
	    EnterpriseBlock.prototype.isPixelInRange = function (pixel) {
	        return pixel >= this.blockTop && pixel < (this.blockTop + this.blockHeight);
	    };
	    EnterpriseBlock.prototype.getRowBounds = function (index, virtualRowCount) {
	        var start = this.getStartRow();
	        var end = this.getEndRow();
	        for (var i = start; i <= end; i++) {
	            // the blocks can have extra rows in them, if they are the last block
	            // in the cache and the virtual row count doesn't divide evenly by the
	            if (i >= virtualRowCount) {
	                continue;
	            }
	            var rowNode = this.getRowUsingLocalIndex(i);
	            if (rowNode) {
	                if (rowNode.rowIndex === index) {
	                    return {
	                        rowHeight: rowNode.rowHeight,
	                        rowTop: rowNode.rowTop
	                    };
	                }
	                if (rowNode.group && rowNode.expanded && ag_grid_1._.exists(rowNode.childrenCache)) {
	                    var enterpriseCache = rowNode.childrenCache;
	                    if (enterpriseCache.isDisplayIndexInCache(index)) {
	                        return enterpriseCache.getRowBounds(index);
	                    }
	                }
	            }
	        }
	        console.error("ag-Grid: looking for invalid row index in Enterprise Row Model, index=" + index);
	        return null;
	    };
	    EnterpriseBlock.prototype.getRowIndexAtPixel = function (pixel, virtualRowCount) {
	        var start = this.getStartRow();
	        var end = this.getEndRow();
	        for (var i = start; i <= end; i++) {
	            // the blocks can have extra rows in them, if they are the last block
	            // in the cache and the virtual row count doesn't divide evenly by the
	            if (i >= virtualRowCount) {
	                continue;
	            }
	            var rowNode = this.getRowUsingLocalIndex(i);
	            if (rowNode) {
	                if (rowNode.isPixelInRange(pixel)) {
	                    return rowNode.rowIndex;
	                }
	                if (rowNode.group && rowNode.expanded && ag_grid_1._.exists(rowNode.childrenCache)) {
	                    var enterpriseCache = rowNode.childrenCache;
	                    if (enterpriseCache.isPixelInRange(pixel)) {
	                        return enterpriseCache.getRowIndexAtPixel(pixel);
	                    }
	                }
	            }
	        }
	        console.warn("ag-Grid: invalid pixel range for enterprise block " + pixel);
	        return 0;
	    };
	    EnterpriseBlock.prototype.setDisplayIndexes = function (displayIndexSeq, virtualRowCount, nextRowTop) {
	        this.displayIndexStart = displayIndexSeq.peek();
	        this.blockTop = nextRowTop.value;
	        var start = this.getStartRow();
	        var end = this.getEndRow();
	        for (var i = start; i <= end; i++) {
	            // the blocks can have extra rows in them, if they are the last block
	            // in the cache and the virtual row count doesn't divide evenly by the
	            if (i >= virtualRowCount) {
	                continue;
	            }
	            var rowNode = this.getRowUsingLocalIndex(i);
	            if (rowNode) {
	                var rowIndex = displayIndexSeq.next();
	                rowNode.setRowIndex(rowIndex);
	                rowNode.setRowTop(nextRowTop.value);
	                nextRowTop.value += rowNode.rowHeight;
	                if (rowNode.group && rowNode.expanded && ag_grid_1._.exists(rowNode.childrenCache)) {
	                    var enterpriseCache = rowNode.childrenCache;
	                    enterpriseCache.setDisplayIndexes(displayIndexSeq, nextRowTop);
	                }
	            }
	        }
	        this.displayIndexEnd = displayIndexSeq.peek();
	        this.blockHeight = nextRowTop.value - this.blockTop;
	    };
	    EnterpriseBlock.prototype.createLoadParams = function () {
	        var groupKeys = this.createGroupKeys(this.parentRowNode);
	        var request = {
	            startRow: this.getStartRow(),
	            endRow: this.getEndRow(),
	            rowGroupCols: this.params.rowGroupCols,
	            valueCols: this.params.valueCols,
	            pivotCols: this.params.pivotCols,
	            pivotMode: this.params.pivotMode,
	            groupKeys: groupKeys,
	            filterModel: this.params.filterModel,
	            sortModel: this.params.sortModel
	        };
	        var params = {
	            successCallback: this.pageLoaded.bind(this, this.getVersion()),
	            failCallback: this.pageLoadFailed.bind(this),
	            request: request
	        };
	        return params;
	    };
	    EnterpriseBlock.prototype.isDisplayIndexInBlock = function (displayIndex) {
	        return displayIndex >= this.displayIndexStart && displayIndex < this.displayIndexEnd;
	    };
	    EnterpriseBlock.prototype.isBlockBefore = function (displayIndex) {
	        return displayIndex >= this.displayIndexEnd;
	    };
	    EnterpriseBlock.prototype.getDisplayIndexStart = function () {
	        return this.displayIndexStart;
	    };
	    EnterpriseBlock.prototype.getDisplayIndexEnd = function () {
	        return this.displayIndexEnd;
	    };
	    EnterpriseBlock.prototype.getBlockHeight = function () {
	        return this.blockHeight;
	    };
	    EnterpriseBlock.prototype.getBlockTop = function () {
	        return this.blockTop;
	    };
	    __decorate([
	        ag_grid_1.Autowired('context'),
	        __metadata("design:type", ag_grid_1.Context)
	    ], EnterpriseBlock.prototype, "context", void 0);
	    __decorate([
	        ag_grid_1.Autowired('rowRenderer'),
	        __metadata("design:type", ag_grid_1.RowRenderer)
	    ], EnterpriseBlock.prototype, "rowRenderer", void 0);
	    __decorate([
	        ag_grid_1.Autowired('columnController'),
	        __metadata("design:type", ag_grid_1.ColumnController)
	    ], EnterpriseBlock.prototype, "columnController", void 0);
	    __decorate([
	        ag_grid_1.Autowired('valueService'),
	        __metadata("design:type", ag_grid_1.ValueService)
	    ], EnterpriseBlock.prototype, "valueService", void 0);
	    __decorate([
	        ag_grid_1.Autowired('gridOptionsWrapper'),
	        __metadata("design:type", ag_grid_1.GridOptionsWrapper)
	    ], EnterpriseBlock.prototype, "gridOptionsWrapper", void 0);
	    __decorate([
	        __param(0, ag_grid_1.Qualifier('loggerFactory')),
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", [ag_grid_1.LoggerFactory]),
	        __metadata("design:returntype", void 0)
	    ], EnterpriseBlock.prototype, "setBeans", null);
	    __decorate([
	        ag_grid_1.PostConstruct,
	        __metadata("design:type", Function),
	        __metadata("design:paramtypes", []),
	        __metadata("design:returntype", void 0)
	    ], EnterpriseBlock.prototype, "init", null);
	    return EnterpriseBlock;
	}(ag_grid_1.RowNodeBlock));
	exports.EnterpriseBlock = EnterpriseBlock;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	// ag-grid-enterprise v13.2.0
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var columnSelectPanel_1 = __webpack_require__(138);
	var renderedColumn_1 = __webpack_require__(140);
	var renderedGroup_1 = __webpack_require__(139);
	var aggregationStage_1 = __webpack_require__(148);
	var groupStage_1 = __webpack_require__(147);
	var setFilter_1 = __webpack_require__(152);
	var setFilterModel_1 = __webpack_require__(153);
	var statusBar_1 = __webpack_require__(160);
	var statusItem_1 = __webpack_require__(161);
	var clipboardService_1 = __webpack_require__(144);
	var enterpriseBoot_1 = __webpack_require__(151);
	var enterpriseMenu_1 = __webpack_require__(137);
	var menuItemComponent_1 = __webpack_require__(142);
	var menuList_1 = __webpack_require__(141);
	var rangeController_1 = __webpack_require__(145);
	var rowGroupColumnsPanel_1 = __webpack_require__(168);
	var contextMenu_1 = __webpack_require__(162);
	var viewportRowModel_1 = __webpack_require__(163);
	var richSelectCellEditor_1 = __webpack_require__(156);
	var richSelectRow_1 = __webpack_require__(157);
	var virtualList_1 = __webpack_require__(155);
	var abstractColumnDropPanel_1 = __webpack_require__(165);
	var pivotColumnsPanel_1 = __webpack_require__(164);
	var toolPanelComp_1 = __webpack_require__(167);
	var licenseManager_1 = __webpack_require__(158);
	var pivotStage_1 = __webpack_require__(149);
	var pivotColDefService_1 = __webpack_require__(150);
	var pivotModePanel_1 = __webpack_require__(169);
	var aggFuncService_1 = __webpack_require__(146);
	var md5_1 = __webpack_require__(159);
	var setFilterListItem_1 = __webpack_require__(154);
	var columnComponent_1 = __webpack_require__(166);
	var valueColumnsPanel_1 = __webpack_require__(170);
	var pivotCompFactory_1 = __webpack_require__(172);
	var rowGroupCompFactory_1 = __webpack_require__(171);
	var excelCreator_1 = __webpack_require__(173);
	var excelXmlFactory_1 = __webpack_require__(174);
	function populateClientExports(exports) {
	    exports.AggFuncService = aggFuncService_1.AggFuncService;
	    exports.MD5 = md5_1.MD5;
	    exports.EnterpriseMenu = enterpriseMenu_1.EnterpriseMenu;
	    exports.MenuList = menuList_1.MenuList;
	    exports.MenuItemComponent = menuItemComponent_1.MenuItemComponent;
	    exports.RichSelectCellEditor = richSelectCellEditor_1.RichSelectCellEditor;
	    exports.RichSelectRow = richSelectRow_1.RichSelectRow;
	    exports.VirtualList = virtualList_1.VirtualList;
	    exports.AggregationStage = aggregationStage_1.AggregationStage;
	    exports.GroupStage = groupStage_1.GroupStage;
	    exports.PivotColDefService = pivotColDefService_1.PivotColDefService;
	    exports.PivotStage = pivotStage_1.PivotStage;
	    exports.SetFilter = setFilter_1.SetFilter;
	    exports.SetFilterListItem = setFilterListItem_1.SetFilterListItem;
	    exports.SetFilterModel = setFilterModel_1.SetFilterModel;
	    exports.StatusBar = statusBar_1.StatusBar;
	    exports.StatusItem = statusItem_1.StatusItem;
	    exports.AbstractColumnDropPanel = abstractColumnDropPanel_1.AbstractColumnDropPanel;
	    exports.ColumnComponent = columnComponent_1.ColumnComponent;
	    exports.PivotColumnsPanel = pivotColumnsPanel_1.PivotColumnsPanel;
	    exports.PivotModePanel = pivotModePanel_1.PivotModePanel;
	    exports.RowGroupColumnsPanel = rowGroupColumnsPanel_1.RowGroupColumnsPanel;
	    exports.ValuesColumnPanel = valueColumnsPanel_1.ValuesColumnPanel;
	    exports.ToolPanelComp = toolPanelComp_1.ToolPanelComp;
	    exports.ColumnSelectPanel = columnSelectPanel_1.ColumnSelectPanel;
	    exports.RenderedColumn = renderedColumn_1.RenderedColumn;
	    exports.RenderedGroup = renderedGroup_1.RenderedGroup;
	    exports.ViewportRowModel = viewportRowModel_1.ViewportRowModel;
	    exports.ClipboardService = clipboardService_1.ClipboardService;
	    exports.ContextMenuFactory = contextMenu_1.ContextMenuFactory;
	    exports.EnterpriseBoot = enterpriseBoot_1.EnterpriseBoot;
	    exports.LicenseManager = licenseManager_1.LicenseManager;
	    exports.PivotCompFactory = pivotCompFactory_1.PivotCompFactory;
	    exports.ExcelCreator = excelCreator_1.ExcelCreator;
	    exports.ExcelXmlFactory = excelXmlFactory_1.ExcelXmlFactory;
	    exports.RangeController = rangeController_1.RangeController;
	    exports.RowGroupCompFactory = rowGroupCompFactory_1.RowGroupCompFactory;
	}
	exports.populateClientExports = populateClientExports;


/***/ })
/******/ ])
});
;