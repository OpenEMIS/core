<?php
namespace Institution\Model\Table;

use ArrayObject;

use Cake\ORM\Query;
use Cake\ORM\Entity;
use Cake\ORM\TableRegistry;
use Cake\Event\Event;
use Cake\Network\Request;
use Cake\Validation\Validator;
use Cake\Utility\Security;

use App\Model\Table\ControllerActionTable;
use App\Model\Traits\MessagesTrait;
use App\Model\Traits\HtmlTrait;

use Cake\Utility\Text;

class InstitutionTestCommitteesTable extends ControllerActionTable
{
    use HtmlTrait;

    private $studentOptions = [];
    private $availableStudent = [];

    public function initialize(array $config)
    {
        $this->table('institution_committees');
        parent::initialize($config);
        $this->belongsTo('AcademicPeriods', ['className' => 'AcademicPeriod.AcademicPeriods', 'foreignKey' =>'academic_period_id']);
        $this->belongsTo('Institutions', ['className' => 'Institution.Institutions', 'foreignKey' =>'institution_id']);
        $this->belongsTo('InstitutionCommitteeTypes', ['className' => 'Institutions.InstitutionCommitteeTypes']);
        $this->hasMany('InstitutionCommitteeAttachments', [
            'className' => 'Institutions.InstitutionCommitteeAttachments',
            'dependent' => true,
            'cascadeCallbacks' => true
        ]);
    }
    public function validationDefault(Validator $validator)
    {
        $validator = parent::validationDefault($validator);

        return $validator
            ->add('meeting_date', 'ruleInAcademicPeriod', [
                'rule' => ['inAcademicPeriod', 'academic_period_id', []]
            ])
            ->add('end_time', 'ruleCompareTimeReverse', [
                'rule' => ['compareDateReverse', 'start_time', false]
            ]);
    }

    public function addEditAfterAction(Event $event, Entity $entity, ArrayObject $extra)
    {
        $this->field('meeting_section', [
            'type' => 'element',
            'element' => 'Institution.CommitteeMeeting/committee_meeting'
        ]);
        $this->setFieldOrder(['academic_period_id', 'institution_committee_type_id', 'name', 'meeting_date', 'start_time','end_time','comment','meeting_section']);
    }

    

    public function addEditOnAddTextbooksStudents(Event $event, Entity $entity, ArrayObject $data, ArrayObject $options)
    {
        $alias = $this->alias();
        $fieldKey = 'textbooks_students';
        if ($data['submit'] == 'addTextbooksStudents') { //during the add books, need to ensure that class and subject has value.

            $data[$alias][$fieldKey][] = [
                'name' => '',
                'institution_committee_type_id' => '',
                'institution_id' => '',
                'comment' => '',
                'academic_period_id' => ''
            ];

            // if ($data[$alias]['education_subject_id'] && $data[$alias]['textbook_id']) {

            //     if ($data[$this->alias()]['allocated_to'] == 'all') { //for all student
            //         $studentOptions = explode(',', $data[$alias]['available_student']);
            //         foreach ($studentOptions as $key => $value) {
            //             $data[$alias][$fieldKey][] = [
            //                 'code' => '',
            //                 'textbook_status_id' => '',
            //                 'textbook_condition_id' => '',
            //                 'comment' => '',
            //                 'student_id' => $value
            //             ];
            //         }
            //     } else {
            //         $data[$alias][$fieldKey][] = [
            //             'code' => '',
            //             'textbook_status_id' => '',
            //             'textbook_condition_id' => '',
            //             'comment' => '',
            //             'student_id' => !empty($data[$this->alias()]['allocated_to']) ? $data[$this->alias()]['allocated_to'] : ''
            //         ];
            //     }
            // } else {
            //     $this->Alert->error('Textbooks.noClassSubjectSelected');
            // }
        }
    }

    public function onGetCustomTextbooksStudentsElement(Event $event, $action, $entity, $attr, $options=[])
    {
        // $tableHeaders = [$this->getMessage($this->aliasField('trainer_type')), $this->getMessage($this->aliasField('trainer'))];

        $header[] = [
            'title' => 'Textbook ID',
            'desc' => 'Textbook ID is unique to each book within the school, Leave empty for autogenerated code.'
        ];
        $header[] = [
            'title' => 'Status',
            'desc' => 'Available means physically book exists while Not Available means it is missing.'
        ];
        $header[] = [
            'title' => 'Condition',
            'desc' => 'Condition of each available book.'
        ];
        $header[] = [
            'title' => 'Comment',
            'desc' => 'Comments about each book regardless of availability.'
        ];
        $header[] = [
            'title' => 'Allocated To',
            'desc' => 'Each book can be optionally allocated to an individual student.'
        ];

        $header[] = [];
        foreach ($header as $key => $value) {
            if (isset($value['title'])) {
                $tableHeaders[] =
                    __($value['title']) . "
                    <div class='tooltip-desc' style='display: inline-block;'>
                        <i class='fa fa-info-circle fa-lg table-tooltip icon-blue' tooltip-placement='top' uib-tooltip='" .  __($value['desc']) . "' tooltip-append-to-body='true' tooltip-class='tooltip-blue'></i>
                    </div>";

            } else {
                $tableHeaders[] = '';
            }
        }

        $tableCells = [];
        $alias = $this->alias();
        $fieldKey = 'textbooks_students';

        //generate textbook condition and status
        $textbookConditionOptions = $this->TextbookConditions->getTextbookConditionOptions();
        $textbookStatusOptions = $this->TextbookStatuses->getSelectOptions();

            //generate `list`
            $studentOptions = $this->studentOptions;

            if ($action == 'add' || $action == 'edit') {
                $tableHeaders[] = ''; // for delete column
                $Form = $event->subject()->Form;
                $Form->unlockField('InstitutionTextbooks.textbooks_students');

                // refer to addEditOnAddTextbooksStudents for http post
                if ($this->request->data("$alias.$fieldKey")) {
                    $associated = $this->request->data("$alias.$fieldKey");

                    foreach ($associated as $key => $obj) {
                        $code = $obj['code'];
                        $textbook_status_id = $obj['textbook_status_id'];
                        $textbook_condition_id = $obj['textbook_condition_id'];
                        $comment = $obj['comment'];
                        $student_id = $obj['student_id'];

                        $rowData = [];

                        //to insert error message if validation kicked in.
                        $tempRowData = $Form->input("$alias.$fieldKey.$key.code", ['label' => false]);

                        if ($entity->errors("textbooks_students.$key") && isset($entity->errors("textbooks_students.$key")['code'])) {

                            $tempRowData .= "<ul class='error-message'>";
                            foreach ($entity->errors("textbooks_students.$key")['code'] as $error) {
                                $tempRowData .= __($error);
                            }
                            $tempRowData .= "</ul>";

                        }

                        $rowData[] = $tempRowData;
                        $rowData[] = $Form->input("$alias.$fieldKey.$key.textbook_status_id", ['type' => 'select', 'label' => false, 'options' => $textbookStatusOptions]);
                        $rowData[] = $Form->input("$alias.$fieldKey.$key.textbook_condition_id", ['type' => 'select', 'label' => false, 'options' => $textbookConditionOptions]);
                        $rowData[] = $Form->input("$alias.$fieldKey.$key.comment", ['type' => 'text', 'label' => false]);
                        $rowData[] = isset($studentOptions[$this->request->data("$alias.$fieldKey.$key.student_id")]) ? $studentOptions[$this->request->data("$alias.$fieldKey.$key.student_id")] : __('No Allocation');
                        $rowData[] = $Form->hidden("$alias.$fieldKey.$key.student_id");
                        $rowData[] = $this->getDeleteButton(['onclick' => 'jsTable.doRemove(this); $(\'#reload\').click();']);
                        $tableCells[] = $rowData;
                    }
                }
            }

            $attr['tableHeaders'] = $tableHeaders;
            $attr['tableCells'] = $tableCells;

            return $event->subject()->renderElement('Institution.CommitteeMeeting/'.$fieldKey, ['attr' => $attr]);
        
    }

   
}
